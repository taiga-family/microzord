"use strict";
(self["webpackChunkdemo"] = self["webpackChunkdemo"] || []).push([[896],{

/***/ 3864:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ks: () => (/* binding */ CSS),
/* harmony export */   Vv: () => (/* binding */ HISTORY),
/* harmony export */   Wd: () => (/* binding */ LOCAL_STORAGE),
/* harmony export */   _O: () => (/* binding */ USER_AGENT),
/* harmony export */   dJ: () => (/* binding */ ANIMATION_FRAME),
/* harmony export */   jf: () => (/* binding */ WINDOW),
/* harmony export */   kW: () => (/* binding */ NAVIGATOR)
/* harmony export */ });
/* unused harmony exports CACHES, CRYPTO, LOCATION, MEDIA_DEVICES, NETWORK_INFORMATION, PAGE_VISIBILITY, PERFORMANCE, SCREEN, SESSION_STORAGE, SPEECH_RECOGNITION, SPEECH_SYNTHESIS */
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1985);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3726);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7647);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9172);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6354);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3294);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4668);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6412);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_1__);




const WINDOW = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over global window object', {
  factory: () => {
    const {
      defaultView
    } = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT);
    if (!defaultView) {
      throw new Error('Window is not available');
    }
    return defaultView;
  }
});
const ANIMATION_FRAME = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Shared Observable based on `window.requestAnimationFrame`', {
  factory: () => {
    const {
      requestAnimationFrame,
      cancelAnimationFrame
    } = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW);
    const animationFrame$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__/* .Observable */ .c(subscriber => {
      let id = NaN;
      const callback = timestamp => {
        subscriber.next(timestamp);
        id = requestAnimationFrame(callback);
      };
      id = requestAnimationFrame(callback);
      return () => {
        cancelAnimationFrame(id);
      };
    });
    return animationFrame$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .share */ .u)());
  }
});
const CACHES = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.caches object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).caches
});
const CRYPTO = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.crypto object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).crypto
});
const CSS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.CSS object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).CSS || {
    escape: v => v,
    supports: () => false
  }
});
const HISTORY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.history object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).history
});
const LOCAL_STORAGE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.localStorage object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).localStorage
});
const LOCATION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.location object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).location
});
const NAVIGATOR = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.navigator object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).navigator
});
const MEDIA_DEVICES = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.navigator.mediaDevices object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(NAVIGATOR).mediaDevices
});
const NETWORK_INFORMATION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.navigator.connection object', {
  // @ts-ignore
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(NAVIGATOR).connection || null
});
const PAGE_VISIBILITY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('Shared Observable based on `document visibility changed`', {
  factory: () => {
    const documentRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT);
    return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .fromEvent */ .R)(documentRef, 'visibilitychange').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__/* .startWith */ .Z)(0), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__/* .map */ .T)(() => documentRef.visibilityState !== 'hidden'), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__/* .distinctUntilChanged */ .F)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__/* .shareReplay */ .t)({
      refCount: false,
      bufferSize: 1
    }));
  }
});
const PERFORMANCE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.performance object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).performance
});
const SCREEN = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.screen object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).screen
});
const SESSION_STORAGE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.sessionStorage object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).sessionStorage
});
const SPEECH_RECOGNITION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over SpeechRecognition class', {
  factory: () => {
    const windowRef = (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW);
    return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;
  }
});
const SPEECH_SYNTHESIS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.speechSynthesis object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(WINDOW).speechSynthesis
});
const USER_AGENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('An abstraction over window.navigator.userAgent object', {
  factory: () => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(NAVIGATOR).userAgent
});

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=ng-web-apis-common.js.map

/***/ }),

/***/ 16:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   T: () => (/* binding */ HostChildWarningModule)
/* harmony export */ });
/* harmony import */ var _taiga_ui_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8821);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);


let HostChildWarningModule = /*#__PURE__*/(() => {
  class HostChildWarningModule {
    static #_ = this.ɵfac = function HostChildWarningModule_Factory(t) {
      return new (t || HostChildWarningModule)();
    };
    static #_2 = this.ɵmod = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
      type: HostChildWarningModule
    });
    static #_3 = this.ɵinj = /*@__PURE__*/_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
      imports: [_taiga_ui_core__WEBPACK_IMPORTED_MODULE_1__/* .TuiNotificationModule */ .O]
    });
  }
  return HostChildWarningModule;
})();

/***/ }),

/***/ 1896:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs
var platform_browser = __webpack_require__(345);
// EXTERNAL MODULE: consume shared module (default) @angular/core@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/core/fesm2022/core.mjs)
var core_mjs_ = __webpack_require__(1750);
// EXTERNAL MODULE: ./node_modules/@angular/animations/fesm2022/browser.mjs
var browser = __webpack_require__(8008);
// EXTERNAL MODULE: consume shared module (default) @angular/common@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/common/fesm2022/common.mjs)
var common_mjs_ = __webpack_require__(6412);
;// CONCATENATED MODULE: ./node_modules/@angular/platform-browser/fesm2022/animations.mjs
/**
 * @license Angular v17.3.0
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */








let InjectableAnimationEngine = /*#__PURE__*/(() => {
  class InjectableAnimationEngine extends browser/* ɵAnimationEngine */.O6 {
    // The `ApplicationRef` is injected here explicitly to force the dependency ordering.
    // Since the `ApplicationRef` should be created earlier before the `AnimationEngine`, they
    // both have `ngOnDestroy` hooks and `flush()` must be called after all views are destroyed.
    constructor(doc, driver, normalizer) {
      super(doc, driver, normalizer, (0,core_mjs_.inject)(core_mjs_["ɵChangeDetectionScheduler"], {
        optional: true
      }));
    }
    ngOnDestroy() {
      this.flush();
    }
    static #_ = this.ɵfac = function InjectableAnimationEngine_Factory(t) {
      return new (t || InjectableAnimationEngine)(core_mjs_["ɵɵinject"](common_mjs_.DOCUMENT), core_mjs_["ɵɵinject"](browser/* AnimationDriver */.Xw), core_mjs_["ɵɵinject"](browser/* ɵAnimationStyleNormalizer */.Yp));
    };
    static #_2 = this.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
      token: InjectableAnimationEngine,
      factory: InjectableAnimationEngine.ɵfac
    });
  }
  return InjectableAnimationEngine;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function instantiateDefaultStyleNormalizer() {
  return new browser/* ɵWebAnimationsStyleNormalizer */.zT();
}
function instantiateRendererFactory(renderer, engine, zone) {
  return new browser/* ɵAnimationRendererFactory */.R6(renderer, engine, zone);
}
const SHARED_ANIMATION_PROVIDERS = [{
  provide: browser/* ɵAnimationStyleNormalizer */.Yp,
  useFactory: instantiateDefaultStyleNormalizer
}, {
  provide: browser/* ɵAnimationEngine */.O6,
  useClass: InjectableAnimationEngine
}, {
  provide: core_mjs_.RendererFactory2,
  useFactory: instantiateRendererFactory,
  deps: [platform_browser/* ɵDomRendererFactory2 */.B7, browser/* ɵAnimationEngine */.O6, core_mjs_.NgZone]
}];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserModule.
 */
const BROWSER_ANIMATIONS_PROVIDERS = [{
  provide: browser/* AnimationDriver */.Xw,
  useFactory: () => new browser/* ɵWebAnimationsDriver */.LS()
}, {
  provide: core_mjs_.ANIMATION_MODULE_TYPE,
  useValue: 'BrowserAnimations'
}, ...SHARED_ANIMATION_PROVIDERS];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserTestingModule.
 */
const BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{
  provide: browser/* AnimationDriver */.Xw,
  useClass: browser/* NoopAnimationDriver */.Pw
}, {
  provide: core_mjs_.ANIMATION_MODULE_TYPE,
  useValue: 'NoopAnimations'
}, ...SHARED_ANIMATION_PROVIDERS];

/**
 * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)
 * for use with animations. See [Animations](guide/animations).
 * @publicApi
 */
let BrowserAnimationsModule = /*#__PURE__*/(() => {
  class BrowserAnimationsModule {
    /**
     * Configures the module based on the specified object.
     *
     * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.
     * @see {@link BrowserAnimationsModuleConfig}
     *
     * @usageNotes
     * When registering the `BrowserAnimationsModule`, you can use the `withConfig`
     * function as follows:
     * ```
     * @NgModule({
     *   imports: [BrowserAnimationsModule.withConfig(config)]
     * })
     * class MyNgModule {}
     * ```
     */
    static withConfig(config) {
      return {
        ngModule: BrowserAnimationsModule,
        providers: config.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS
      };
    }
    static #_ = this.ɵfac = function BrowserAnimationsModule_Factory(t) {
      return new (t || BrowserAnimationsModule)();
    };
    static #_2 = this.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
      type: BrowserAnimationsModule
    });
    static #_3 = this.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
      providers: BROWSER_ANIMATIONS_PROVIDERS,
      imports: [platform_browser/* BrowserModule */.Bb]
    });
  }
  return BrowserAnimationsModule;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Returns the set of [dependency-injection providers](guide/glossary#provider)
 * to enable animations in an application. See [animations guide](guide/animations)
 * to learn more about animations in Angular.
 *
 * @usageNotes
 *
 * The function is useful when you want to enable animations in an application
 * bootstrapped using the `bootstrapApplication` function. In this scenario there
 * is no need to import the `BrowserAnimationsModule` NgModule at all, just add
 * providers returned by this function to the `providers` list as show below.
 *
 * ```typescript
 * bootstrapApplication(RootComponent, {
 *   providers: [
 *     provideAnimations()
 *   ]
 * });
 * ```
 *
 * @publicApi
 */
function provideAnimations() {
  ɵperformanceMarkFeature('NgEagerAnimations');
  // Return a copy to prevent changes to the original array in case any in-place
  // alterations are performed to the `provideAnimations` call results in app code.
  return [...BROWSER_ANIMATIONS_PROVIDERS];
}
/**
 * A null player that must be imported to allow disabling of animations.
 * @publicApi
 */
let NoopAnimationsModule = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class NoopAnimationsModule {
    static #_ = this.ɵfac = function NoopAnimationsModule_Factory(t) {
      return new (t || NoopAnimationsModule)();
    };
    static #_2 = this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({
      type: NoopAnimationsModule
    });
    static #_3 = this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({
      providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
      imports: [BrowserModule]
    });
  }
  return NoopAnimationsModule;
})()));
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Returns the set of [dependency-injection providers](guide/glossary#provider)
 * to disable animations in an application. See [animations guide](guide/animations)
 * to learn more about animations in Angular.
 *
 * @usageNotes
 *
 * The function is useful when you want to bootstrap an application using
 * the `bootstrapApplication` function, but you need to disable animations
 * (for example, when running tests).
 *
 * ```typescript
 * bootstrapApplication(RootComponent, {
 *   providers: [
 *     provideNoopAnimations()
 *   ]
 * });
 * ```
 *
 * @publicApi
 */
function provideNoopAnimations() {
  // Return a copy to prevent changes to the original array in case any in-place
  // alterations are performed to the `provideNoopAnimations` call results in app code.
  return [...BROWSER_NOOP_ANIMATIONS_PROVIDERS];
}

/**
 * @module
 * @description
 * Entry point for all animation APIs of the animation browser package.
 */

/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */

// This file is not used to build this module. It is only used during editing

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=animations.mjs.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-tokens.js
var taiga_ui_addon_doc_tokens = __webpack_require__(8687);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-components.js + 85 modules
var taiga_ui_addon_doc_components = __webpack_require__(8024);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-link.js
var taiga_ui_core_components_link = __webpack_require__(1974);
;// CONCATENATED MODULE: ./apps/demo/src/app/app.component.ts



let AppComponent = /*#__PURE__*/(() => {
  class AppComponent {
    static #_ = this.ɵfac = function AppComponent_Factory(t) {
      return new (t || AppComponent)();
    };
    static #_2 = this.ɵcmp = /*@__PURE__*/core_mjs_["ɵɵdefineComponent"]({
      type: AppComponent,
      selectors: [["microzord-root"]],
      decls: 5,
      vars: 0,
      consts: [["ngProjectAs", "tuiDocHeader", 5, ["tuiDocHeader"]], ["tuiLink", "", "tuiMode", "onLight", "href", "https://github.com/taiga-family/microzord", "target", "_blank", 1, "link"], ["src", "assets/images/github.svg", "alt", "", 1, "github"]],
      template: function AppComponent_Template(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵelementStart"](0, "tui-doc-main");
          core_mjs_["ɵɵelementContainerStart"](1, 0);
          core_mjs_["ɵɵelementStart"](2, "a", 1);
          core_mjs_["ɵɵelement"](3, "img", 2);
          core_mjs_["ɵɵtext"](4, " GitHub ");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementContainerEnd"]();
          core_mjs_["ɵɵelementEnd"]();
        }
      },
      dependencies: [taiga_ui_addon_doc_components/* TuiDocMainComponent */.$c, taiga_ui_core_components_link/* TuiLinkComponent */.E],
      styles: ["[_nghost-%COMP%] {\n  font: var(--tui-font-text-m);\n}\n.link[_ngcontent-%COMP%] {\n  font-weight: bold;\n  height: 24px;\n}\n.github[_ngcontent-%COMP%] {\n  width: 24px;\n  height: 24px;\n  margin: 0 4px 0 16px;\n  vertical-align: -6px;\n}"],
      changeDetection: 0
    });
  }
  return AppComponent;
})();
// EXTERNAL MODULE: consume shared module (default) @angular/router@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/router/fesm2022/router.mjs)
var router_mjs_ = __webpack_require__(7688);
// EXTERNAL MODULE: ./node_modules/@tinkoff/ng-polymorpheus/fesm2015/tinkoff-ng-polymorpheus.js
var tinkoff_ng_polymorpheus = __webpack_require__(800);
;// CONCATENATED MODULE: ./apps/demo/src/app/logo/logo.component.ts


let LogoComponent = /*#__PURE__*/(() => {
  class LogoComponent {
    static #_ = this.ɵfac = function LogoComponent_Factory(t) {
      return new (t || LogoComponent)();
    };
    static #_2 = this.ɵcmp = /*@__PURE__*/core_mjs_["ɵɵdefineComponent"]({
      type: LogoComponent,
      selectors: [["logo"]],
      decls: 3,
      vars: 0,
      consts: [["src", "assets/images/microzord.png", "alt", "logo", 1, "logo"], ["src", "assets/images/by.svg", "alt", "by Tinkoff", 1, "by"]],
      template: function LogoComponent_Template(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵelement"](0, "img", 0);
          core_mjs_["ɵɵtext"](1, "\nmicrozord\n");
          core_mjs_["ɵɵelement"](2, "img", 1);
        }
      },
      styles: ["\n\n\n\n\n\n\n\n\n[_nghost-%COMP%] {\n  display: flex;\n  align-items: center;\n}\n@media screen and (max-width: 47.9625em) {\n  [_nghost-%COMP%] {\n    font-size: 0;\n  }\n}\n.logo[_ngcontent-%COMP%] {\n  width: 30px;\n  margin-right: 10px;\n}\n.by[_ngcontent-%COMP%] {\n  margin-left: 14px;\n}\n@media screen and (max-width: 47.9625em) {\n  .by[_ngcontent-%COMP%] {\n    display: none;\n  }\n}"],
      changeDetection: 0
    });
  }
  return LogoComponent;
})();
const LOGO_CONTENT = new tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS(LogoComponent);
;// CONCATENATED MODULE: ./apps/demo/src/app/pages.ts
const pages = [{
  section: `Starting`,
  title: `Getting started`,
  keywords: 'intro, how to, guide, main, главная, начало, инструкция',
  route: 'getting-started'
}, {
  section: `Starting`,
  title: `Application entity`,
  keywords: 'intro, how to, guide, main, source, child, host, zord, приложение',
  route: 'application'
}, {
  section: `Native JS`,
  title: `Native JS — Installation`,
  keywords: 'javascript, vanilla, spa',
  route: 'native-installation'
}, {
  section: `Angular`,
  title: `Angular — Installation`,
  keywords: 'angular, spa',
  route: 'angular-installation'
}, {
  section: `Angular`,
  title: `Angular — Host`,
  keywords: 'angular, spa, host',
  route: 'angular-host'
}, {
  section: `Angular`,
  title: `Angular — Child`,
  keywords: 'angular, spa, child',
  route: 'angular-child'
}, {
  section: `React`,
  title: `React — Installation`,
  keywords: 'react, spa',
  route: 'react-installation'
}, {
  section: `React`,
  title: `React — Child`,
  keywords: 'react, spa, child',
  route: 'react-child'
}];
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-notification.js
var taiga_ui_core_components_notification = __webpack_require__(8821);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-island.js



const _c0 = ["*"];
let TuiIslandComponent = /*#__PURE__*/(() => {
  class TuiIslandComponent {
    constructor() {
      this.size = 'm';
      this.textAlign = 'left';
      this.hoverable = false;
      this.transparent = false;
    }
    get sizeS() {
      return this.size === 's';
    }
    get sizeM() {
      return this.size === 'm';
    }
    get sizeL() {
      return this.size === 'l';
    }
    get textAlignLeft() {
      return this.textAlign === 'left';
    }
    get textAlignCenter() {
      return this.textAlign === 'center';
    }
    get textAlignRight() {
      return this.textAlign === 'right';
    }
  }
  TuiIslandComponent.ɵfac = function TuiIslandComponent_Factory(t) {
    return new (t || TuiIslandComponent)();
  };
  TuiIslandComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiIslandComponent,
    selectors: [["tui-island"], ["a", "tuiIsland", ""]],
    hostAttrs: [1, "tui-island"],
    hostVars: 16,
    hostBindings: function TuiIslandComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("tui-island_hoverable", ctx.hoverable)("tui-island_transparent", ctx.transparent)("tui-island_size_s", ctx.sizeS)("tui-island_size_m", ctx.sizeM)("tui-island_size_l", ctx.sizeL)("tui-island_text-align_left", ctx.textAlignLeft)("tui-island_text-align_center", ctx.textAlignCenter)("tui-island_text-align_right", ctx.textAlignRight);
      }
    },
    inputs: {
      size: "size",
      textAlign: "textAlign",
      hoverable: "hoverable",
      transparent: "transparent"
    },
    ngContentSelectors: _c0,
    decls: 1,
    vars: 0,
    template: function TuiIslandComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵprojection"](0);
      }
    },
    styles: ["[_nghost-%COMP%]{display:block}"],
    changeDetection: 0
  });
  return TuiIslandComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiIslandModule = /*#__PURE__*/(() => {
  class TuiIslandModule {}
  TuiIslandModule.ɵfac = function TuiIslandModule_Factory(t) {
    return new (t || TuiIslandModule)();
  };
  TuiIslandModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiIslandModule
  });
  TuiIslandModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule]]
  });
  return TuiIslandModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-island.js.map
// EXTERNAL MODULE: ./apps/demo/src/app/shared/host-child-warning/host-child-warning.module.ts
var host_child_warning_module = __webpack_require__(16);
;// CONCATENATED MODULE: ./apps/demo/src/app/getting-started/getting-started.module.ts







let GettingStartedModule = /*#__PURE__*/(() => {
  class GettingStartedModule {
    static #_ = this.ɵfac = function GettingStartedModule_Factory(t) {
      return new (t || GettingStartedModule)();
    };
    static #_2 = this.ɵmod = /*@__PURE__*/core_mjs_["ɵɵdefineNgModule"]({
      type: GettingStartedModule
    });
    static #_3 = this.ɵinj = /*@__PURE__*/core_mjs_["ɵɵdefineInjector"]({
      imports: [common_mjs_.CommonModule, taiga_ui_addon_doc_components/* TuiDocPageModule */.AC, taiga_ui_core_components_link/* TuiLinkModule */.l, taiga_ui_addon_doc_components/* TuiDocCodeModule */.ii, router_mjs_.RouterModule, taiga_ui_core_components_notification/* TuiNotificationModule */.O, TuiIslandModule, host_child_warning_module/* HostChildWarningModule */.T]
    });
  }
  return GettingStartedModule;
})();
;// CONCATENATED MODULE: ./apps/demo/src/app/getting-started/getting-started.component.ts





let GettingStartedComponent = /*#__PURE__*/(() => {
  class GettingStartedComponent {
    static #_ = this.ɵfac = function GettingStartedComponent_Factory(t) {
      return new (t || GettingStartedComponent)();
    };
    static #_2 = this.ɵcmp = /*@__PURE__*/core_mjs_["ɵɵdefineComponent"]({
      type: GettingStartedComponent,
      selectors: [["getting-started"]],
      decls: 57,
      vars: 0,
      consts: [["header", "Getting started"], [1, "about"], [1, "about__benefit"], [1, "tui-island__title"], [1, "tui-island__paragraph"], [1, "tui-space_top-4"], ["tuiLink", "", "routerLink", "/application"], ["tuiLink", "", "routerLink", "/todo"], ["tuiLink", "", "routerLink", "/angular-installation"]],
      template: function GettingStartedComponent_Template(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵelementStart"](0, "tui-doc-page", 0)(1, "p")(2, "strong");
          core_mjs_["ɵɵtext"](3, "microzord");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵtext"](4, " is a small tool that allows you to add and render multiple apps on one page. It has simple ideomatic APIs for some modern frameworks (Vue and Svelte come soon) and builds bridges between them. ");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](5, "section", 1)(6, "tui-island", 2)(7, "h3", 3);
          core_mjs_["ɵɵtext"](8, "\uD83E\uDDD9 Framework agnostic");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](9, "p", 4);
          core_mjs_["ɵɵtext"](10, " You can have an Angular application with a React app header and a Vue app footer. Each app can have endless amount of nested apps inside. There are also wrappers for every modern framework with simple API. ");
          core_mjs_["ɵɵelementEnd"]()();
          core_mjs_["ɵɵelementStart"](11, "tui-island", 2)(12, "h3", 3);
          core_mjs_["ɵɵtext"](13, "\uD83E\uDDE9 Modular");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](14, "p", 4);
          core_mjs_["ɵɵtext"](15, " You can insert another app in your app in any place as an ordinary component. Use the same methods to bind data and to handle its events. ");
          core_mjs_["ɵɵelementEnd"]()()();
          core_mjs_["ɵɵelementStart"](16, "section")(17, "h2");
          core_mjs_["ɵɵtext"](18, "What it is about");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](19, "p");
          core_mjs_["ɵɵtext"](20, "There are two terms that we want to declare first:");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](21, "ul")(22, "li")(23, "strong");
          core_mjs_["ɵɵtext"](24, "Child app");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵtext"](25, " is any application that is built with microzord and can be inserted into the host app. ");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](26, "li")(27, "strong");
          core_mjs_["ɵɵtext"](28, "Host app");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵtext"](29, " is any application that uses microzord to render child apps inside. ");
          core_mjs_["ɵɵelementEnd"]()();
          core_mjs_["ɵɵelementStart"](30, "tui-notification", 5);
          core_mjs_["ɵɵtext"](31, " Some application can host any amount of child apps and be a child for other app at the same time ");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](32, "p");
          core_mjs_["ɵɵtext"](33, " Microzord does not impose any restrictions but just gives more opportunities for your app. All your apps can be still used as separated apps and can be integrated with others with no additional code in application bundle. ");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](34, "p");
          core_mjs_["ɵɵtext"](35, " It renders your apps right in DOM without any additional elements or iframes and provides some ideomatic ways to control apps and get data from them. ");
          core_mjs_["ɵɵelementEnd"]()();
          core_mjs_["ɵɵelementStart"](36, "section")(37, "h2");
          core_mjs_["ɵɵtext"](38, "How to start");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](39, "p");
          core_mjs_["ɵɵtext"](40, "You can read about main concepts of microzord:");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](41, "ul")(42, "li")(43, "a", 6);
          core_mjs_["ɵɵtext"](44, "Application entity");
          core_mjs_["ɵɵelementEnd"]()()();
          core_mjs_["ɵɵelementStart"](45, "p");
          core_mjs_["ɵɵtext"](46, "Or you can just choose your framework and figure it out in the process:");
          core_mjs_["ɵɵelementEnd"]();
          core_mjs_["ɵɵelementStart"](47, "ul")(48, "li")(49, "a", 7);
          core_mjs_["ɵɵtext"](50, "Native JS installation");
          core_mjs_["ɵɵelementEnd"]()();
          core_mjs_["ɵɵelementStart"](51, "li")(52, "a", 7);
          core_mjs_["ɵɵtext"](53, "React installation");
          core_mjs_["ɵɵelementEnd"]()();
          core_mjs_["ɵɵelementStart"](54, "li")(55, "a", 8);
          core_mjs_["ɵɵtext"](56, "Angular installation");
          core_mjs_["ɵɵelementEnd"]()()()()();
        }
      },
      dependencies: [taiga_ui_addon_doc_components/* TuiDocPageComponent */.Pt, taiga_ui_core_components_link/* TuiLinkComponent */.E, router_mjs_.RouterLink, taiga_ui_core_components_notification/* TuiNotificationComponent */.v, TuiIslandComponent],
      styles: [".about[_ngcontent-%COMP%] {\n  display: flex;\n  margin-top: 20px;\n  margin-bottom: 20px;\n}\n.about__benefit[_ngcontent-%COMP%] {\n  flex: 1;\n  margin-right: 32px;\n}"],
      changeDetection: 0
    });
  }
  return GettingStartedComponent;
})();
;// CONCATENATED MODULE: ./apps/demo/src/app/routes.ts

const ROUTES = [{
  path: 'getting-started',
  component: GettingStartedComponent,
  data: {
    title: `Getting started`
  }
}, {
  path: 'application',
  loadChildren: () => Promise.all(/* import() */[__webpack_require__.e(76), __webpack_require__.e(835)]).then(__webpack_require__.bind(__webpack_require__, 5835)).then(m => m.ApplicationModule),
  data: {
    title: `Application entity`
  }
}, {
  path: 'native-installation',
  loadChildren: () => Promise.all(/* import() */[__webpack_require__.e(76), __webpack_require__.e(691)]).then(__webpack_require__.bind(__webpack_require__, 4691)).then(m => m.NativeInstallationModule),
  data: {
    title: `Native Installation`
  }
}, {
  path: 'react-installation',
  loadChildren: () => Promise.all(/* import() */[__webpack_require__.e(76), __webpack_require__.e(117)]).then(__webpack_require__.bind(__webpack_require__, 3117)).then(m => m.ReactInstallationModule),
  data: {
    title: `React Installation`
  }
}, {
  path: 'react-child',
  loadChildren: () => Promise.all(/* import() */[__webpack_require__.e(76), __webpack_require__.e(551)]).then(__webpack_require__.bind(__webpack_require__, 4551)).then(m => m.ReactChildModule),
  data: {
    title: `React Child`
  }
}, {
  path: 'angular-installation',
  loadChildren: () => Promise.all(/* import() */[__webpack_require__.e(76), __webpack_require__.e(254)]).then(__webpack_require__.bind(__webpack_require__, 254)).then(m => m.AngularInstallationModule),
  data: {
    title: `Angular Installation`
  }
}, {
  path: 'angular-host',
  loadChildren: () => Promise.all(/* import() */[__webpack_require__.e(76), __webpack_require__.e(96)]).then(__webpack_require__.bind(__webpack_require__, 4096)).then(m => m.AngularHostModule),
  data: {
    title: `Angular Host`
  }
}, {
  path: 'angular-child',
  loadChildren: () => Promise.all(/* import() */[__webpack_require__.e(76), __webpack_require__.e(685)]).then(__webpack_require__.bind(__webpack_require__, 685)).then(m => m.AngularChildModule),
  data: {
    title: `Angular Child`
  }
}, {
  path: '**',
  redirectTo: 'getting-started'
}];
// EXTERNAL MODULE: ./node_modules/ngx-highlightjs/fesm2020/ngx-highlightjs.mjs + 5 modules
var ngx_highlightjs = __webpack_require__(9280);
;// CONCATENATED MODULE: ./apps/demo/src/app/app.module.ts













const HIGHLIGHT_OPTIONS_VALUE = {
  coreLibraryLoader: () => __webpack_require__.e(/* import() */ 300).then(__webpack_require__.bind(__webpack_require__, 5300)),
  lineNumbersLoader: () => __webpack_require__.e(/* import() */ 806).then(__webpack_require__.t.bind(__webpack_require__, 2806, 23)),
  languages: {
    typescript: () => __webpack_require__.e(/* import() */ 108).then(__webpack_require__.bind(__webpack_require__, 7108)),
    less: () => __webpack_require__.e(/* import() */ 166).then(__webpack_require__.bind(__webpack_require__, 166)),
    xml: () => __webpack_require__.e(/* import() */ 566).then(__webpack_require__.bind(__webpack_require__, 4566))
  }
};
let AppModule = /*#__PURE__*/(() => {
  class AppModule {
    getEntryPoint() {
      return AppComponent;
    }
    static #_ = this.ɵfac = function AppModule_Factory(t) {
      return new (t || AppModule)();
    };
    static #_2 = this.ɵmod = /*@__PURE__*/core_mjs_["ɵɵdefineNgModule"]({
      type: AppModule,
      bootstrap: [AppComponent]
    });
    static #_3 = this.ɵinj = /*@__PURE__*/core_mjs_["ɵɵdefineInjector"]({
      providers: [{
        provide: taiga_ui_addon_doc_tokens/* TUI_DOC_LOGO */.sy,
        useValue: LOGO_CONTENT
      }, {
        provide: taiga_ui_addon_doc_tokens/* TUI_DOC_PAGES */.rm,
        useValue: pages
      }, {
        provide: ngx_highlightjs/* HIGHLIGHT_OPTIONS */.sq,
        useValue: HIGHLIGHT_OPTIONS_VALUE
      }],
      imports: [platform_browser/* BrowserModule */.Bb, BrowserAnimationsModule, taiga_ui_addon_doc_components/* TuiDocMainModule */.ED, taiga_ui_core_components_link/* TuiLinkModule */.l, GettingStartedModule, router_mjs_.RouterModule.forRoot(ROUTES, {
        initialNavigation: 'enabledBlocking'
      })]
    });
  }
  return AppModule;
})();
;// CONCATENATED MODULE: ./apps/demo/src/environments/environment.ts
const environment = {
  production: true
};
;// CONCATENATED MODULE: ./apps/demo/src/bootstrap.ts




if (environment.production) {
  (0,core_mjs_.enableProdMode)();
}
platform_browser/* platformBrowser */.sG().bootstrapModule(AppModule).catch(err => console.error(err));

/***/ }),

/***/ 8024:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  tV: () => (/* binding */ TuiDocCodeComponent),
  ii: () => (/* binding */ TuiDocCodeModule),
  mH: () => (/* binding */ TuiDocDemoModule),
  c5: () => (/* binding */ TuiDocDocumentationComponent),
  nl: () => (/* binding */ TuiDocDocumentationModule),
  WS: () => (/* binding */ TuiDocDocumentationPropertyConnectorDirective),
  Zs: () => (/* binding */ TuiDocExampleModule),
  $c: () => (/* binding */ TuiDocMainComponent),
  ED: () => (/* binding */ TuiDocMainModule),
  Pt: () => (/* binding */ TuiDocPageComponent),
  AC: () => (/* binding */ TuiDocPageModule),
  TD: () => (/* binding */ TuiDocPageTabConnectorDirective)
});

// UNUSED EXPORTS: PAGE_PROVIDERS, PAGE_SEE_ALSO, TUI_DOC_EXAMPLE_DEFAULT_OPTIONS, TUI_DOC_EXAMPLE_OPTIONS, TuiDocCopyComponent, TuiDocCopyModule, TuiDocDemoComponent, TuiDocExampleComponent, TuiDocExampleGetTabsPipe, TuiDocHeaderComponent, TuiDocHeaderModule, TuiDocNavigationComponent, TuiDocNavigationModule, TuiDocSeeAlsoComponent, TuiDocSeeAlsoModule, TuiDocSourceCodeComponent, TuiDocSourceCodeModule, TuiDocTabComponent, TuiDocTabModule, TuiDocTypeReferencePipe, TuiGetColorPipe, TuiGetOpacityPipe, TuiInputOpacityDirective, TuiInputOpacityModule, TuiInspectPipe, TuiIsOptionalPipe, TuiIsPrimitivePolymorpheusContentPipe, TuiLanguageSwitcherComponent, TuiLanguageSwitcherModule, TuiShowCleanerPipe, TuiStripOptionalPipe, tuiDocExampleOptionsProvider

// EXTERNAL MODULE: consume shared module (default) @angular/core@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/core/fesm2022/core.mjs)
var core_mjs_ = __webpack_require__(1750);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-tokens.js
var taiga_ui_addon_doc_tokens = __webpack_require__(8687);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-utils.js + 76 modules
var taiga_ui_addon_doc_utils = __webpack_require__(1583);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/BehaviorSubject.js
var internal_BehaviorSubject = __webpack_require__(4412);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Subject.js + 1 modules
var internal_Subject = __webpack_require__(1413);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/timer.js + 1 modules
var observable_timer = __webpack_require__(1584);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/merge.js
var merge = __webpack_require__(7786);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/combineLatest.js
var observable_combineLatest = __webpack_require__(4572);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js
var operators_switchMap = __webpack_require__(5558);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var operators_map = __webpack_require__(6354);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/startWith.js
var operators_startWith = __webpack_require__(9172);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
var takeUntil = __webpack_require__(6977);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/filter.js
var filter = __webpack_require__(5964);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js + 1 modules
var mergeMap = __webpack_require__(1397);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/take.js
var take = __webpack_require__(6697);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js
var operators_distinctUntilChanged = __webpack_require__(3294);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/share.js
var share = __webpack_require__(7647);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-button.js
var taiga_ui_core_components_button = __webpack_require__(2782);
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.mjs
var tslib_es6 = __webpack_require__(1635);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-services.js + 2 modules
var taiga_ui_cdk_services = __webpack_require__(4340);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-autofilled.js




let TuiAutofilledStyleComponent = /*#__PURE__*/(() => {
  class TuiAutofilledStyleComponent {}
  TuiAutofilledStyleComponent.ɵfac = function TuiAutofilledStyleComponent_Factory(t) {
    return new (t || TuiAutofilledStyleComponent)();
  };
  TuiAutofilledStyleComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiAutofilledStyleComponent,
    selectors: [["ng-component"]],
    hostAttrs: [1, "tui-autofilled-styles"],
    decls: 0,
    vars: 0,
    template: function TuiAutofilledStyleComponent_Template(rf, ctx) {},
    styles: [".tui-autofill input,input.tui-autofill{transition:box-shadow .01s}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
  return TuiAutofilledStyleComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAutofilledDirective = /*#__PURE__*/(() => {
  class TuiAutofilledDirective {
    constructor(directiveStyles) {
      this.autofilled = false;
      this.tuiAutofilledChange = new core_mjs_.EventEmitter();
      directiveStyles.addComponent(TuiAutofilledStyleComponent);
    }
    transitionStartHandler({
      propertyName,
      target
    }) {
      var _a;
      const matchedAutofill = propertyName.includes('box-shadow') && ((_a = target) === null || _a === void 0 ? void 0 : _a.matches('input'));
      if (matchedAutofill) {
        this.autofilled = !this.autofilled;
        this.tuiAutofilledChange.emit(this.autofilled);
      }
    }
  }
  TuiAutofilledDirective.ɵfac = function TuiAutofilledDirective_Factory(t) {
    return new (t || TuiAutofilledDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDirectiveStylesService */.vA));
  };
  TuiAutofilledDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiAutofilledDirective,
    selectors: [["", "tuiAutofilledChange", ""]],
    hostAttrs: [1, "tui-autofill"],
    hostVars: 2,
    hostBindings: function TuiAutofilledDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("transitionstart", function TuiAutofilledDirective_transitionstart_HostBindingHandler($event) {
          return ctx.transitionStartHandler($event);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("_autofilled", ctx.autofilled);
      }
    },
    outputs: {
      tuiAutofilledChange: "tuiAutofilledChange"
    }
  });
  return TuiAutofilledDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAutofilledModule = /*#__PURE__*/(() => {
  class TuiAutofilledModule {}
  TuiAutofilledModule.ɵfac = function TuiAutofilledModule_Factory(t) {
    return new (t || TuiAutofilledModule)();
  };
  TuiAutofilledModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiAutofilledModule
  });
  TuiAutofilledModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiAutofilledModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-autofilled.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-focusable.js



/**
 * Abstraction over `tabindex`
 */
let TuiFocusableDirective = /*#__PURE__*/(() => {
  class TuiFocusableDirective {
    constructor() {
      /**
       * Element can be focused with keyboard
       */
      this.focusable = true;
    }
    get tabIndex() {
      return this.focusable ? 0 : -1;
    }
  }
  TuiFocusableDirective.ɵfac = function TuiFocusableDirective_Factory(t) {
    return new (t || TuiFocusableDirective)();
  };
  TuiFocusableDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiFocusableDirective,
    selectors: [["", "tuiFocusable", ""]],
    hostVars: 1,
    hostBindings: function TuiFocusableDirective_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵhostProperty"]("tabIndex", ctx.tabIndex);
      }
    },
    inputs: {
      focusable: [core_mjs_["ɵɵInputFlags"].None, "tuiFocusable", "focusable"]
    }
  });
  return TuiFocusableDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiFocusableModule = /*#__PURE__*/(() => {
  class TuiFocusableModule {}
  TuiFocusableModule.ɵfac = function TuiFocusableModule_Factory(t) {
    return new (t || TuiFocusableModule)();
  };
  TuiFocusableModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiFocusableModule
  });
  TuiFocusableModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiFocusableModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-focusable.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-tokens.js + 1 modules
var taiga_ui_cdk_tokens = __webpack_require__(1410);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-abstract.js
var taiga_ui_cdk_abstract = __webpack_require__(683);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-focus.js
var taiga_ui_cdk_utils_focus = __webpack_require__(8529);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-dom.js
var taiga_ui_cdk_utils_dom = __webpack_require__(5001);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-decorators.js
var taiga_ui_cdk_decorators = __webpack_require__(4343);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-miscellaneous.js
var taiga_ui_cdk_utils_miscellaneous = __webpack_require__(9925);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-observables.js
var taiga_ui_cdk_observables = __webpack_require__(9835);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/operators/skip.js

function skip(count) {
  return (0,filter/* filter */.p)((_, index) => count <= index);
}
//# sourceMappingURL=skip.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-active-zone.js









let taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective = /*#__PURE__*/(() => {
  class TuiActiveZoneDirective {
    constructor(active$, zone, el, directParentActiveZone) {
      var _a;
      this.active$ = active$;
      this.zone = zone;
      this.el = el;
      this.directParentActiveZone = directParentActiveZone;
      this.subActiveZones = [];
      this.tuiActiveZoneParent = null;
      this.tuiActiveZoneChange = this.active$.pipe((0,operators_map/* map */.T)(element => !!element && this.contains(element)), (0,operators_startWith/* startWith */.Z)(false), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)(), skip(1), (0,taiga_ui_cdk_observables/* tuiZoneOptimized */.sX)(this.zone));
      (_a = this.directParentActiveZone) === null || _a === void 0 ? void 0 : _a.addSubActiveZone(this);
    }
    set tuiActiveZoneParentSetter(zone) {
      this.setZone(zone);
    }
    ngOnDestroy() {
      var _a, _b;
      (_a = this.directParentActiveZone) === null || _a === void 0 ? void 0 : _a.removeSubActiveZone(this);
      (_b = this.tuiActiveZoneParent) === null || _b === void 0 ? void 0 : _b.removeSubActiveZone(this);
    }
    contains(node) {
      return this.el.nativeElement.contains(node) || this.subActiveZones.some((item, index, array) => array.indexOf(item) === index && item.contains(node));
    }
    setZone(zone) {
      var _a;
      (_a = this.tuiActiveZoneParent) === null || _a === void 0 ? void 0 : _a.removeSubActiveZone(this);
      zone === null || zone === void 0 ? void 0 : zone.addSubActiveZone(this);
      this.tuiActiveZoneParent = zone;
    }
    addSubActiveZone(activeZone) {
      this.subActiveZones = [...this.subActiveZones, activeZone];
    }
    removeSubActiveZone(activeZone) {
      this.subActiveZones = (0,taiga_ui_cdk_utils_miscellaneous/* tuiArrayRemove */.GV)(this.subActiveZones, this.subActiveZones.indexOf(activeZone));
    }
  }
  TuiActiveZoneDirective.ɵfac = function TuiActiveZoneDirective_Factory(t) {
    return new (t || TuiActiveZoneDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_ACTIVE_ELEMENT */.t9), core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](TuiActiveZoneDirective, 12));
  };
  TuiActiveZoneDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiActiveZoneDirective,
    selectors: [["", "tuiActiveZone", "", 5, "ng-container"], ["", "tuiActiveZoneChange", "", 5, "ng-container"], ["", "tuiActiveZoneParent", "", 5, "ng-container"]],
    inputs: {
      tuiActiveZoneParentSetter: [core_mjs_["ɵɵInputFlags"].None, "tuiActiveZoneParent", "tuiActiveZoneParentSetter"]
    },
    outputs: {
      tuiActiveZoneChange: "tuiActiveZoneChange"
    },
    exportAs: ["tuiActiveZone"]
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiActiveZoneDirective.prototype, "setZone", null);
  return TuiActiveZoneDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiActiveZoneModule = /*#__PURE__*/(() => {
  class TuiActiveZoneModule {}
  TuiActiveZoneModule.ɵfac = function TuiActiveZoneModule_Factory(t) {
    return new (t || TuiActiveZoneModule)();
  };
  TuiActiveZoneModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiActiveZoneModule
  });
  TuiActiveZoneModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiActiveZoneModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-active-zone.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-constants.js
var taiga_ui_cdk_constants = __webpack_require__(2287);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Observable.js
var Observable = __webpack_require__(1985);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-hovered.js








function movedOut({
  currentTarget,
  relatedTarget
}) {
  return !(0,taiga_ui_cdk_utils_dom/* tuiIsElement */.ru)(relatedTarget) || !(0,taiga_ui_cdk_utils_dom/* tuiIsElement */.ru)(currentTarget) || !currentTarget.contains(relatedTarget);
}
let TuiHoveredService = /*#__PURE__*/(() => {
  class TuiHoveredService extends Observable/* Observable */.c {
    constructor(el, zone) {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.el = el;
      this.zone = zone;
      this.stream$ = (0,merge/* merge */.h)((0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.el.nativeElement, 'mouseenter').pipe((0,operators_map/* map */.T)(taiga_ui_cdk_constants/* ALWAYS_TRUE_HANDLER */.Uq)), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.el.nativeElement, 'mouseleave').pipe((0,operators_map/* map */.T)(taiga_ui_cdk_constants/* ALWAYS_FALSE_HANDLER */.Fr)),
      // Hello, Safari
      (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.el.nativeElement, 'mouseout').pipe((0,filter/* filter */.p)(movedOut), (0,operators_map/* map */.T)(taiga_ui_cdk_constants/* ALWAYS_FALSE_HANDLER */.Fr))).pipe((0,operators_distinctUntilChanged/* distinctUntilChanged */.F)(), (0,taiga_ui_cdk_observables/* tuiZoneOptimized */.sX)(this.zone));
    }
  }
  TuiHoveredService.ɵfac = function TuiHoveredService_Factory(t) {
    return new (t || TuiHoveredService)(core_mjs_["ɵɵinject"](core_mjs_.ElementRef), core_mjs_["ɵɵinject"](core_mjs_.NgZone));
  };
  TuiHoveredService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiHoveredService,
    factory: TuiHoveredService.ɵfac
  });
  return TuiHoveredService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHoveredDirective = /*#__PURE__*/(() => {
  class TuiHoveredDirective {
    constructor(tuiHoveredChange) {
      this.tuiHoveredChange = tuiHoveredChange;
    }
  }
  TuiHoveredDirective.ɵfac = function TuiHoveredDirective_Factory(t) {
    return new (t || TuiHoveredDirective)(core_mjs_["ɵɵdirectiveInject"](TuiHoveredService));
  };
  TuiHoveredDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHoveredDirective,
    selectors: [["", "tuiHoveredChange", ""]],
    outputs: {
      tuiHoveredChange: "tuiHoveredChange"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([TuiHoveredService])]
  });
  return TuiHoveredDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHoveredModule = /*#__PURE__*/(() => {
  class TuiHoveredModule {}
  TuiHoveredModule.ɵfac = function TuiHoveredModule_Factory(t) {
    return new (t || TuiHoveredModule)();
  };
  TuiHoveredModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiHoveredModule
  });
  TuiHoveredModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiHoveredModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-hovered.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-math.js
var taiga_ui_cdk_utils_math = __webpack_require__(4215);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-classes.js
var taiga_ui_cdk_classes = __webpack_require__(4489);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-format.js


/**
 * Adds 'px' to the number and turns it into a string
 */
function taiga_ui_cdk_utils_format_tuiPx(value) {
  ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(Number.isFinite(value), 'Value must be finite number');
  return `${value}px`;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-format.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-abstract.js
var taiga_ui_core_abstract = __webpack_require__(7359);
// EXTERNAL MODULE: ./node_modules/@angular/animations/fesm2022/animations.mjs
var animations = __webpack_require__(9969);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-animations.js

const TRANSITION = '{{duration}}ms ease-in-out';
const DURATION = {
  params: {
    duration: 300
  }
};
const STAGGER = 300;
const tuiHeightCollapse = (0,animations/* trigger */.hZ)('tuiHeightCollapse', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  height: 0
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  height: '*'
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  height: '*'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  height: 0
}))], DURATION)]);
const tuiHeightCollapseList = (0,animations/* trigger */.hZ)('tuiHeightCollapseList', [(0,animations/* transition */.kY)('* => *', [(0,animations/* query */.P)(':enter', [(0,animations/* style */.iF)({
  height: 0
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  height: '*'
}))])], {
  optional: true
}), (0,animations/* query */.P)(':leave', [(0,animations/* style */.iF)({
  height: '*'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  height: 0
}))])], {
  optional: true
})], DURATION)]);
const tuiWidthCollapse = (0,animations/* trigger */.hZ)('tuiWidthCollapse', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  width: 0
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  width: '*'
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  width: '*'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  width: 0
}))], DURATION)]);
const tuiWidthCollapseList = (0,animations/* trigger */.hZ)('tuiWidthCollapseList', [(0,animations/* transition */.kY)('* => *', [(0,animations/* query */.P)(':enter', [(0,animations/* style */.iF)({
  width: 0
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  width: '*'
}))])], {
  optional: true
}), (0,animations/* query */.P)(':leave', [(0,animations/* style */.iF)({
  width: '*'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  width: 0
}))])], {
  optional: true
})], DURATION)]);
const tuiFadeIn = (0,animations/* trigger */.hZ)('tuiFadeIn', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  opacity: 0
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  opacity: 1
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  opacity: 1
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  opacity: 0
}))], DURATION)]);
const tuiFadeInList = (0,animations/* trigger */.hZ)('tuiFadeInList', [(0,animations/* transition */.kY)('* => *', [(0,animations/* query */.P)(':enter', [(0,animations/* style */.iF)({
  opacity: 0
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  opacity: 1
}))])], {
  optional: true
}), (0,animations/* query */.P)(':leave', [(0,animations/* style */.iF)({
  opacity: 1
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  opacity: 0
}))])], {
  optional: true
})], DURATION)]);
const tuiFadeInTop = (0,animations/* trigger */.hZ)('tuiFadeInTop', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateY(-10px)',
  opacity: 0
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(0)',
  opacity: 1
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateY(0)',
  opacity: 1
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(-10px)',
  opacity: 0
}))], DURATION)]);
const tuiFadeInBottom = (0,animations/* trigger */.hZ)('tuiFadeInBottom', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateY(10px)',
  opacity: 0
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(0)',
  opacity: 1
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateY(0)',
  opacity: 1
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(10px)',
  opacity: 0
}))], DURATION)]);
const tuiDropdownAnimation = (0,animations/* trigger */.hZ)('tuiDropdownAnimation', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateY(-10px)',
  opacity: 0
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(0)',
  opacity: 1
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateY(0)',
  opacity: 1
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(-10px)',
  opacity: 0
}))], DURATION)]);
const tuiScaleIn = (0,animations/* trigger */.hZ)('tuiScaleIn', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'scale(0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'scale(1)'
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'scale(1)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'scale(0)'
}))], DURATION)]);
const tuiPop = (0,animations/* trigger */.hZ)('tuiPop', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'scale(0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'scale(1.1)'
})), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'scale(1)'
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'scale(1)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'scale(1.1)'
})), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'scale(0)'
}))], DURATION)]);
const tuiScaleInList = (0,animations/* trigger */.hZ)('tuiScaleInList', [(0,animations/* transition */.kY)('* => *', [(0,animations/* query */.P)(':enter', [(0,animations/* style */.iF)({
  transform: 'scale(0)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'scale(1)'
}))])], {
  optional: true
}), (0,animations/* query */.P)(':leave', [(0,animations/* style */.iF)({
  transform: 'scale(1)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'scale(0)'
}))])], {
  optional: true
})], DURATION)]);
const tuiSlideIn = (0,animations/* trigger */.hZ)('tuiSlideIn', [(0,animations/* transition */.kY)('* => left', [(0,animations/* style */.iF)({
  transform: 'translateX(-100%)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(0)'
}))], DURATION), (0,animations/* transition */.kY)('left => *', [(0,animations/* style */.iF)({
  transform: 'translateX(0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(-100%)'
}))], DURATION), (0,animations/* transition */.kY)('* => right', [(0,animations/* style */.iF)({
  transform: 'translateX(100%)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(0)'
}))], DURATION), (0,animations/* transition */.kY)('right => *', [(0,animations/* style */.iF)({
  transform: 'translateX(0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(100%)'
}))], DURATION)]);
const tuiSlideInLeft = (0,animations/* trigger */.hZ)('tuiSlideInLeft', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateX(-100%)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(0)'
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateX(0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(-100%)'
}))], DURATION)]);
const tuiSlideInLeftList = (0,animations/* trigger */.hZ)('tuiSlideInLeftList', [(0,animations/* transition */.kY)('* => *', [(0,animations/* query */.P)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateX(-100%)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(0)'
}))])], {
  optional: true
}), (0,animations/* query */.P)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateX(0)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(-100%)'
}))])], {
  optional: true
})], DURATION)]);
const tuiSlideInRight = (0,animations/* trigger */.hZ)('tuiSlideInRight', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateX(100%)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(0)'
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateX(0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(100%)'
}))], DURATION)]);
const tuiSlideInRightList = (0,animations/* trigger */.hZ)('tuiSlideInRightList', [(0,animations/* transition */.kY)('* => *', [(0,animations/* query */.P)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateX(100%)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(0)'
}))])], {
  optional: true
}), (0,animations/* query */.P)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateX(0)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateX(100%)'
}))])], {
  optional: true
})], DURATION)]);
const tuiSlideInTop = (0,animations/* trigger */.hZ)('tuiSlideInTop', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'translate3d(0,{{start}},0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translate3d(0,{{end}},0)'
}))], {
  params: {
    end: 0,
    start: '100%',
    duration: 300
  }
}), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'translate3d(0,{{end}},0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translate3d(0,{{start}},0)'
}))], {
  params: {
    end: 0,
    start: '100%',
    duration: 300
  }
})]);
const tuiSlideInTopList = (0,animations/* trigger */.hZ)('tuiSlideInTopList', [(0,animations/* transition */.kY)('* => *', [(0,animations/* query */.P)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateY(100%)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(0)'
}))])], {
  optional: true
}), (0,animations/* query */.P)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateY(0)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(100%)'
}))])], {
  optional: true
})], DURATION)]);
const tuiSlideInBottom = (0,animations/* trigger */.hZ)('tuiSlideInBottom', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateY(-100%)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(0)'
}))], DURATION), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateY(0)'
}), (0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(-100%)'
}))], DURATION)]);
const tuiSlideInBottomList = (0,animations/* trigger */.hZ)('tuiSlideInBottomList', [(0,animations/* transition */.kY)('* => *', [(0,animations/* query */.P)(':enter', [(0,animations/* style */.iF)({
  transform: 'translateY(-100%)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(0)'
}))])], {
  optional: true
}), (0,animations/* query */.P)(':leave', [(0,animations/* style */.iF)({
  transform: 'translateY(0)'
}), (0,animations/* stagger */.yc)(STAGGER, [(0,animations/* animate */.i0)(TRANSITION, (0,animations/* style */.iF)({
  transform: 'translateY(-100%)'
}))])], {
  optional: true
})], DURATION)]);

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-animations.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-directives-mode.js
var taiga_ui_core_directives_mode = __webpack_require__(8323);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-services.js
var taiga_ui_core_services = __webpack_require__(1193);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-tokens.js + 1 modules
var taiga_ui_core_tokens = __webpack_require__(8502);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-utils-miscellaneous.js
var taiga_ui_core_utils_miscellaneous = __webpack_require__(465);
// EXTERNAL MODULE: ./node_modules/@tinkoff/ng-polymorpheus/fesm2015/tinkoff-ng-polymorpheus.js
var tinkoff_ng_polymorpheus = __webpack_require__(800);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/delay.js + 1 modules
var delay = __webpack_require__(5335);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/repeat.js
var repeat = __webpack_require__(7469);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/tap.js
var tap = __webpack_require__(8141);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/lift.js
var lift = __webpack_require__(9974);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/noop.js
var noop = __webpack_require__(5343);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
var OperatorSubscriber = __webpack_require__(4360);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
var innerFrom = __webpack_require__(8750);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/operators/debounce.js




function debounce(durationSelector) {
  return (0,lift/* operate */.N)((source, subscriber) => {
    let hasValue = false;
    let lastValue = null;
    let durationSubscriber = null;
    const emit = () => {
      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
      durationSubscriber = null;
      if (hasValue) {
        hasValue = false;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };
    source.subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, value => {
      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
      hasValue = true;
      lastValue = value;
      durationSubscriber = (0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, emit, noop/* noop */.l);
      (0,innerFrom/* innerFrom */.Tg)(durationSelector(value)).subscribe(durationSubscriber);
    }, () => {
      emit();
      subscriber.complete();
    }, undefined, () => {
      lastValue = durationSubscriber = null;
    }));
  });
}
//# sourceMappingURL=debounce.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/of.js
var of = __webpack_require__(7673);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/ReplaySubject.js
var ReplaySubject = __webpack_require__(2771);
// EXTERNAL MODULE: consume shared module (default) @angular/common@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/common/fesm2022/common.mjs)
var common_mjs_ = __webpack_require__(6412);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-constants.js
var taiga_ui_core_constants = __webpack_require__(8048);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-directives-hint.js






















/**
 * A component to display a hint
 */
const _c0 = ["*"];
function TuiHintComponent_span_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "span", 1);
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("innerHTML", text_r1, core_mjs_["ɵɵsanitizeHtml"]);
  }
}
function TuiHintUnstyledComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainer(0);
  }
}
const TUI_HINT_COMPONENT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => TuiHintComponent);

/** Default values for hint options */
const TUI_HINT_DEFAULT_OPTIONS = {
  direction: 'bottom-left',
  showDelay: 500,
  hideDelay: 200,
  appearance: '',
  icon: 'tuiIconHelpCircle'
};
/**
 * Default parameters for hint directive
 */
const TUI_HINT_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_HINT_DEFAULT_OPTIONS);
const tuiHintOptionsProvider = override => ({
  provide: TUI_HINT_OPTIONS,
  deps: [[new Optional(), TuiHintOptionsDirective], [new Optional(), new SkipSelf(), TUI_HINT_OPTIONS]],
  useFactory: tuiOverrideOptions(override, TUI_HINT_DEFAULT_OPTIONS)
});
let TuiHintOptionsDirective = /*#__PURE__*/(() => {
  class TuiHintOptionsDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {
    constructor(options) {
      super();
      this.options = options;
      this.direction = this.options.direction;
      this.appearance = this.options.appearance;
      this.showDelay = this.options.showDelay;
      this.hideDelay = this.options.hideDelay;
      this.icon = this.options.icon;
    }
  }
  TuiHintOptionsDirective.ɵfac = function TuiHintOptionsDirective_Factory(t) {
    return new (t || TuiHintOptionsDirective)(core_mjs_["ɵɵdirectiveInject"](TUI_HINT_OPTIONS, 4));
  };
  TuiHintOptionsDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHintOptionsDirective,
    selectors: [["", "tuiHintContent", ""]],
    inputs: {
      content: [core_mjs_["ɵɵInputFlags"].None, "tuiHintContent", "content"],
      direction: [core_mjs_["ɵɵInputFlags"].None, "tuiHintDirection", "direction"],
      appearance: [core_mjs_["ɵɵInputFlags"].None, "tuiHintAppearance", "appearance"],
      showDelay: [core_mjs_["ɵɵInputFlags"].None, "tuiHintShowDelay", "showDelay"],
      hideDelay: [core_mjs_["ɵɵInputFlags"].None, "tuiHintHideDelay", "hideDelay"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_HINT_OPTIONS,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiHintOptionsDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiHintOptionsDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintDirective = /*#__PURE__*/(() => {
  class TuiHintDirective {
    constructor(el, component, hintService, options, activeZone) {
      this.el = el;
      this.component = component;
      this.hintService = hintService;
      this.options = options;
      this.activeZone = activeZone;
      this.tuiHintAppearance = null;
      this.type = 'hint';
    }
    get appearance() {
      var _a;
      return (_a = this.tuiHintAppearance) !== null && _a !== void 0 ? _a : this.options.appearance;
    }
    ngOnChanges() {
      if (!this.content) {
        this.toggle(false);
      }
    }
    ngOnDestroy() {
      this.toggle(false);
    }
    getClientRect() {
      return this.el.nativeElement.getBoundingClientRect();
    }
    toggle(show) {
      if (show && this.content) {
        this.hintService.add(this);
      } else {
        this.hintService.remove(this);
      }
    }
  }
  TuiHintDirective.ɵfac = function TuiHintDirective_Factory(t) {
    return new (t || TuiHintDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_services/* TuiHintService */.Vj), core_mjs_["ɵɵdirectiveInject"](TUI_HINT_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, 8));
  };
  TuiHintDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHintDirective,
    selectors: [["", "tuiHint", "", 5, "ng-container", 5, "ng-template"]],
    inputs: {
      content: [core_mjs_["ɵɵInputFlags"].None, "tuiHint", "content"],
      context: [core_mjs_["ɵɵInputFlags"].None, "tuiHintContext", "context"],
      tuiHintAppearance: "tuiHintAppearance"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_abstract/* tuiAsRectAccessor */.yq)(TuiHintDirective), (0,taiga_ui_core_abstract/* tuiAsVehicle */.XW)(TuiHintDirective), {
      provide: tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS,
      deps: [TUI_HINT_COMPONENT, core_mjs_.INJECTOR],
      useClass: tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS
    }]), core_mjs_["ɵɵNgOnChangesFeature"]]
  });
  return TuiHintDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/* eslint-disable rxjs/no-unsafe-takeuntil */
let TuiHintHoverDirective = /*#__PURE__*/(() => {
  class TuiHintHoverDirective extends taiga_ui_core_abstract/* TuiDriver */.Xu {
    constructor(hovered$, options, el) {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.hovered$ = hovered$;
      this.options = options;
      this.el = el;
      this.visible = false;
      this.toggle$ = new internal_Subject/* Subject */.B();
      this.stream$ = (0,merge/* merge */.h)(this.toggle$.pipe((0,operators_switchMap/* switchMap */.n)(visible => (0,of.of)(visible).pipe((0,delay/* delay */.c)(visible ? 0 : this.hideDelay))), (0,takeUntil/* takeUntil */.Q)(this.hovered$), (0,repeat/* repeat */.u)()), this.hovered$.pipe((0,operators_switchMap/* switchMap */.n)(visible => (0,of.of)(visible).pipe((0,delay/* delay */.c)(visible ? this.showDelay : this.hideDelay))), (0,takeUntil/* takeUntil */.Q)(this.toggle$), (0,repeat/* repeat */.u)())).pipe((0,filter/* filter */.p)(() => this.enabled), (0,operators_map/* map */.T)(value => value && !(0,taiga_ui_core_utils_miscellaneous/* tuiIsObscured */.GS)(this.el.nativeElement)), (0,tap/* tap */.M)(visible => {
        this.visible = visible;
      }));
      this.showDelay = this.options.showDelay;
      this.hideDelay = this.options.hideDelay;
      this.type = 'hint';
      this.enabled = true;
    }
    toggle(visible = !this.visible) {
      this.toggle$.next(visible);
    }
  }
  TuiHintHoverDirective.ɵfac = function TuiHintHoverDirective_Factory(t) {
    return new (t || TuiHintHoverDirective)(core_mjs_["ɵɵdirectiveInject"](TuiHoveredService), core_mjs_["ɵɵdirectiveInject"](TUI_HINT_OPTIONS), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
  };
  TuiHintHoverDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHintHoverDirective,
    selectors: [["", "tuiHint", "", 5, "ng-container", 5, "ng-template"]],
    inputs: {
      showDelay: [core_mjs_["ɵɵInputFlags"].None, "tuiHintShowDelay", "showDelay"],
      hideDelay: [core_mjs_["ɵɵInputFlags"].None, "tuiHintHideDelay", "hideDelay"]
    },
    exportAs: ["tuiHintHover"],
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_abstract/* tuiAsDriver */.Np)(TuiHintHoverDirective), TuiHoveredService]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiHintHoverDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintPointerDirective = /*#__PURE__*/(() => {
  class TuiHintPointerDirective extends TuiHintHoverDirective {
    constructor() {
      super(...arguments);
      this.currentRect = taiga_ui_cdk_constants/* EMPTY_CLIENT_RECT */.Lo;
    }
    onMove({
      clientX,
      clientY
    }) {
      this.currentRect = (0,taiga_ui_cdk_utils_dom/* tuiPointToClientRect */.D$)(clientX, clientY);
    }
    getClientRect() {
      return this.currentRect;
    }
  }
  TuiHintPointerDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiHintPointerDirective_BaseFactory;
    return function TuiHintPointerDirective_Factory(t) {
      return (ɵTuiHintPointerDirective_BaseFactory || (ɵTuiHintPointerDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiHintPointerDirective)))(t || TuiHintPointerDirective);
    };
  })();
  TuiHintPointerDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHintPointerDirective,
    selectors: [["", "tuiHint", "", "tuiHintPointer", ""]],
    hostBindings: function TuiHintPointerDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("mousemove.silent", function TuiHintPointerDirective_mousemove_silent_HostBindingHandler($event) {
          return ctx.onMove($event);
        });
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_abstract/* tuiAsRectAccessor */.yq)(TuiHintPointerDirective), (0,taiga_ui_core_abstract/* tuiAsDriver */.Np)(TuiHintPointerDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiHintPointerDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const GAP = 4;
let TuiHintComponent = /*#__PURE__*/(() => {
  class TuiHintComponent {
    constructor(hovered$, position$, destroy$, animation, pointer, accessor, el, polymorpheus, hover, mode, visualViewportService, viewport) {
      var _a;
      this.animation = animation;
      this.pointer = pointer;
      this.accessor = accessor;
      this.el = el;
      this.polymorpheus = polymorpheus;
      this.hover = hover;
      this.mode = mode;
      this.visualViewportService = visualViewportService;
      this.viewport = viewport;
      this.appearance = this.polymorpheus.$implicit.appearance || ((_a = this.mode) === null || _a === void 0 ? void 0 : _a.mode);
      position$.pipe((0,operators_map/* map */.T)(point => this.visualViewportService.correct(point)), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(([top, left]) => {
        this.update(top, left);
      });
      hovered$.pipe((0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(hover => this.hover.toggle(hover));
    }
    get content() {
      return this.polymorpheus.$implicit.content;
    }
    get context() {
      return this.polymorpheus.$implicit.context;
    }
    onClick(target) {
      if (!this.el.nativeElement.contains(target) && !this.hover.el.nativeElement.contains(target) || (0,taiga_ui_core_utils_miscellaneous/* tuiIsObscured */.GS)(this.hover.el.nativeElement)) {
        this.hover.toggle(false);
      }
    }
    update(top, left) {
      const {
        height,
        width
      } = this.el.nativeElement.getBoundingClientRect();
      const {
        style
      } = this.el.nativeElement;
      const rect = this.accessor.getClientRect();
      const viewport = this.viewport.getClientRect();
      if (rect === taiga_ui_cdk_constants/* EMPTY_CLIENT_RECT */.Lo) {
        return;
      }
      const safeLeft = (0,taiga_ui_cdk_utils_math/* tuiClamp */.wN)(left, GAP, viewport.width - width - GAP);
      const [beakTop, beakLeft] = this.visualViewportService.correct([rect.top + rect.height / 2 - top, rect.left + rect.width / 2 - safeLeft]);
      style.top = taiga_ui_cdk_utils_format_tuiPx(top);
      style.left = taiga_ui_cdk_utils_format_tuiPx(safeLeft);
      style.setProperty('--top', taiga_ui_cdk_utils_format_tuiPx((0,taiga_ui_cdk_utils_math/* tuiClamp */.wN)(beakTop, 0.5, height - 1)));
      style.setProperty('--left', taiga_ui_cdk_utils_format_tuiPx((0,taiga_ui_cdk_utils_math/* tuiClamp */.wN)(beakLeft, 0.5, width - 1)));
    }
  }
  TuiHintComponent.ɵfac = function TuiHintComponent_Factory(t) {
    return new (t || TuiHintComponent)(core_mjs_["ɵɵdirectiveInject"](TuiHoveredService), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_services/* TuiPositionService */.ZE), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_ANIMATION_OPTIONS */.fx), core_mjs_["ɵɵdirectiveInject"](TuiHintPointerDirective, 8), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_abstract/* TuiRectAccessor */.cf), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](tinkoff_ng_polymorpheus/* POLYMORPHEUS_CONTEXT */.su), core_mjs_["ɵɵdirectiveInject"](TuiHintHoverDirective), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_directives_mode/* TuiModeDirective */.h, 8), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_services/* TuiVisualViewportService */.yt), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_VIEWPORT */.ob));
  };
  TuiHintComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiHintComponent,
    selectors: [["tui-hint"]],
    hostVars: 4,
    hostBindings: function TuiHintComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("click", function TuiHintComponent_click_HostBindingHandler($event) {
          return ctx.onClick($event.target);
        }, false, core_mjs_["ɵɵresolveDocument"]);
      }
      if (rf & 2) {
        core_mjs_["ɵɵsyntheticHostProperty"]("@tuiFadeIn", ctx.animation);
        core_mjs_["ɵɵattribute"]("data-appearance", ctx.appearance);
        core_mjs_["ɵɵclassProp"]("_untouchable", ctx.pointer);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew, taiga_ui_core_services/* TuiPositionService */.ZE, TuiHoveredService, (0,taiga_ui_core_abstract/* tuiPositionAccessorFor */.mI)('hint'), (0,taiga_ui_core_abstract/* tuiRectAccessorFor */.Z3)('hint', TuiHintDirective)])],
    ngContentSelectors: _c0,
    decls: 2,
    vars: 2,
    consts: [[3, "innerHTML", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], [3, "innerHTML"]],
    template: function TuiHintComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵprojection"](0);
        core_mjs_["ɵɵtemplate"](1, TuiHintComponent_span_1_Template, 1, 1, "span", 0);
      }
      if (rf & 2) {
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.content)("polymorpheusOutletContext", ctx.context);
      }
    },
    dependencies: [tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA],
    styles: ["[_nghost-%COMP%]{position:absolute;max-width:18rem;min-height:var(--tui-height-m);padding:.75rem 1rem;background:var(--tui-primary);border-radius:var(--tui-radius-l);color:var(--tui-primary-text);box-sizing:border-box;font:var(--tui-font-text-s);white-space:pre-line;word-wrap:break-word}[_nghost-%COMP%]:before{content:\"\";position:absolute;top:var(--top);left:var(--left);width:.5rem;height:.5rem;border-radius:.125rem;box-sizing:border-box;background:inherit;transform:translate(-50%,-50%) rotate(45deg)}[data-appearance=error][_nghost-%COMP%]{background:var(--tui-error-fill)}[data-appearance=onDark][_nghost-%COMP%]{background:var(--tui-elevation-02);color:var(--tui-text-01);filter:drop-shadow(0 0 .125rem rgba(0,0,0,.16)) drop-shadow(0 1.5rem 1rem rgba(0,0,0,.03)) drop-shadow(0 .75rem .75rem rgba(0,0,0,.04)) drop-shadow(0 .25rem .375rem rgba(0,0,0,.05))}[_nghost-%COMP%]:not([style*=\"top\"]){visibility:hidden}._untouchable[_nghost-%COMP%]{pointer-events:none}"],
    data: {
      animation: [tuiFadeIn]
    },
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiHintComponent.prototype, "update", null);
  return TuiHintComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintDescribeDirective = /*#__PURE__*/(() => {
  class TuiHintDescribeDirective extends taiga_ui_core_abstract/* TuiDriver */.Xu {
    constructor(zone, doc, el) {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.zone = zone;
      this.doc = doc;
      this.el = el;
      this.id$ = new ReplaySubject/* ReplaySubject */.m(1);
      this.stream$ = this.id$.pipe((0,taiga_ui_cdk_observables/* tuiIfMap */.aY)(() => (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.doc, 'keydown', {
        capture: true
      }), taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj), (0,operators_switchMap/* switchMap */.n)(() => this.focused ? (0,of.of)(false) : (0,merge/* merge */.h)((0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.doc, 'keyup'), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.element, 'blur')).pipe((0,operators_map/* map */.T)(() => this.focused))), debounce(visible => visible ? (0,observable_timer/* timer */.O)(1000) : (0,of.of)(null)), (0,operators_startWith/* startWith */.Z)(false), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)(), skip(1), (0,taiga_ui_cdk_observables/* tuiZoneOptimized */.sX)(this.zone));
      this.tuiHintDescribe = '';
      this.type = 'hint';
    }
    ngOnChanges() {
      this.id$.next(this.tuiHintDescribe);
    }
    get focused() {
      return (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(this.element);
    }
    get element() {
      return this.doc.getElementById(this.tuiHintDescribe || '') || this.el.nativeElement;
    }
  }
  TuiHintDescribeDirective.ɵfac = function TuiHintDescribeDirective_Factory(t) {
    return new (t || TuiHintDescribeDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](common_mjs_.DOCUMENT), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
  };
  TuiHintDescribeDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHintDescribeDirective,
    selectors: [["", "tuiHintDescribe", ""]],
    inputs: {
      tuiHintDescribe: "tuiHintDescribe"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_abstract/* tuiAsDriver */.Np)(TuiHintDescribeDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"], core_mjs_["ɵɵNgOnChangesFeature"]]
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiHintDescribeDirective.prototype, "element", null);
  return TuiHintDescribeDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintDriverDirective = /*#__PURE__*/(() => {
  class TuiHintDriverDirective extends taiga_ui_core_abstract/* AbstractTuiDriverDirective */.Q {
    // TODO: Figure out why this is necessary under nx test runner
    constructor(destroy$, drivers, vehicles) {
      super(destroy$, drivers, vehicles);
      this.type = 'hint';
    }
  }
  TuiHintDriverDirective.ɵfac = function TuiHintDriverDirective_Factory(t) {
    return new (t || TuiHintDriverDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_abstract/* TuiDriver */.Xu), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_abstract/* TuiVehicle */.lL));
  };
  TuiHintDriverDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHintDriverDirective,
    selectors: [["", "tuiHint", "", 5, "ng-container", 5, "ng-template"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiHintDriverDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintHostDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiHintHostDirective extends TuiRectAccessor {
    constructor() {
      super(...arguments);
      this.type = 'hint';
    }
    getClientRect() {
      var _a;
      return ((_a = this.tuiHintHost) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || EMPTY_CLIENT_RECT;
    }
  }
  TuiHintHostDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiHintHostDirective_BaseFactory;
    return function TuiHintHostDirective_Factory(t) {
      return (ɵTuiHintHostDirective_BaseFactory || (ɵTuiHintHostDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiHintHostDirective)))(t || TuiHintHostDirective);
    };
  })();
  TuiHintHostDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiHintHostDirective,
    selectors: [["", "tuiHint", "", "tuiHintHost", ""]],
    inputs: {
      tuiHintHost: "tuiHintHost"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsRectAccessor(TuiHintHostDirective)]), i0.ɵɵInheritDefinitionFeature]
  });
  return TuiHintHostDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintManualDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiHintManualDirective extends TuiDriver {
    constructor(hover) {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.stream$ = new BehaviorSubject(false);
      this.tuiHintManual = false;
      this.type = 'hint';
      hover.enabled = false;
    }
    ngOnChanges() {
      this.stream$.next(this.tuiHintManual);
    }
  }
  TuiHintManualDirective.ɵfac = function TuiHintManualDirective_Factory(t) {
    return new (t || TuiHintManualDirective)(i0.ɵɵdirectiveInject(TuiHintHoverDirective));
  };
  TuiHintManualDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiHintManualDirective,
    selectors: [["", "tuiHint", "", "tuiHintManual", ""]],
    inputs: {
      tuiHintManual: "tuiHintManual"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsDriver(TuiHintManualDirective)]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]
  });
  return TuiHintManualDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const OFFSET = 8;
const ARROW_OFFSET = 22;
const TOP = 0;
const LEFT = 1;
let TuiHintPositionDirective = /*#__PURE__*/(() => {
  class TuiHintPositionDirective extends taiga_ui_core_abstract/* TuiPositionAccessor */.dg {
    constructor(options, viewport, directive, accessors) {
      super();
      this.options = options;
      this.viewport = viewport;
      this.directive = directive;
      this.accessors = accessors;
      this.points = taiga_ui_core_constants/* TUI_HINT_DIRECTIONS */.G$.reduce((acc, direction) => Object.assign(Object.assign({}, acc), {
        [direction]: [0, 0]
      }), {});
      this.direction = this.options.direction;
      this.type = 'hint';
    }
    getPosition({
      width,
      height
    }) {
      var _a, _b;
      const hostRect = (_b = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : taiga_ui_cdk_constants/* EMPTY_CLIENT_RECT */.Lo;
      const leftCenter = hostRect.left + hostRect.width / 2;
      const topCenter = hostRect.top + hostRect.height / 2;
      this.points['top-left'][TOP] = hostRect.top - height - OFFSET;
      this.points['top-left'][LEFT] = leftCenter - width + ARROW_OFFSET;
      this.points.top[TOP] = this.points['top-left'][TOP];
      this.points.top[LEFT] = leftCenter - width / 2;
      this.points['top-right'][TOP] = this.points['top-left'][TOP];
      this.points['top-right'][LEFT] = leftCenter - ARROW_OFFSET;
      this.points['bottom-left'][TOP] = hostRect.bottom + OFFSET;
      this.points['bottom-left'][LEFT] = this.points['top-left'][LEFT];
      this.points.bottom[TOP] = this.points['bottom-left'][TOP];
      this.points.bottom[LEFT] = this.points.top[LEFT];
      this.points['bottom-right'][TOP] = this.points['bottom-left'][TOP];
      this.points['bottom-right'][LEFT] = this.points['top-right'][LEFT];
      this.points['left-top'][TOP] = topCenter - height + ARROW_OFFSET;
      this.points['left-top'][LEFT] = hostRect.left - width - OFFSET;
      this.points.left[TOP] = topCenter - height / 2;
      this.points.left[LEFT] = this.points['left-top'][LEFT];
      this.points['left-bottom'][TOP] = topCenter - ARROW_OFFSET;
      this.points['left-bottom'][LEFT] = this.points['left-top'][LEFT];
      this.points['right-top'][TOP] = this.points['left-top'][TOP];
      this.points['right-top'][LEFT] = hostRect.right + OFFSET;
      this.points.right[TOP] = this.points.left[TOP];
      this.points.right[LEFT] = this.points['right-top'][LEFT];
      this.points['right-bottom'][TOP] = this.points['left-bottom'][TOP];
      this.points['right-bottom'][LEFT] = this.points['right-top'][LEFT];
      if (this.checkPosition(this.points[this.direction], width, height)) {
        return this.points[this.direction];
      }
      const direction = taiga_ui_core_constants/* TUI_HINT_DIRECTIONS */.G$.find(direction => this.checkPosition(this.points[direction], width, height));
      return this.points[direction || this.fallback];
    }
    get accessor() {
      return (0,taiga_ui_core_abstract/* tuiFallbackRectAccessor */.GR)('hint')(this.accessors, this.directive);
    }
    get fallback() {
      return this.points.top[TOP] > this.viewport.getClientRect().bottom - this.points.bottom[TOP] ? 'top' : 'bottom';
    }
    checkPosition([top, left], width, height) {
      const viewport = this.viewport.getClientRect();
      return top > OFFSET && left > OFFSET && top + height < viewport.bottom - OFFSET && left + width < viewport.right - OFFSET;
    }
  }
  TuiHintPositionDirective.ɵfac = function TuiHintPositionDirective_Factory(t) {
    return new (t || TuiHintPositionDirective)(core_mjs_["ɵɵdirectiveInject"](TUI_HINT_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_VIEWPORT */.ob), core_mjs_["ɵɵdirectiveInject"](TuiHintDirective), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_abstract/* TuiRectAccessor */.cf));
  };
  TuiHintPositionDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHintPositionDirective,
    selectors: [["", "tuiHint", "", 3, "tuiHintCustomPosition", "", 5, "ng-container", 5, "ng-template"]],
    inputs: {
      direction: [core_mjs_["ɵɵInputFlags"].None, "tuiHintDirection", "direction"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_abstract/* tuiAsPositionAccessor */.nR)(TuiHintPositionDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiHintPositionDirective.prototype, "accessor", null);
  return TuiHintPositionDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintUnstyledComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiHintUnstyledComponent {
    constructor(context) {
      this.context = context;
    }
  }
  TuiHintUnstyledComponent.ɵfac = function TuiHintUnstyledComponent_Factory(t) {
    return new (t || TuiHintUnstyledComponent)(i0.ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT));
  };
  TuiHintUnstyledComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiHintUnstyledComponent,
    selectors: [["ng-component"]],
    hostVars: 1,
    hostBindings: function TuiHintUnstyledComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        i0.ɵɵsyntheticHostProperty("@tuiParentAnimation", undefined);
      }
    },
    decls: 1,
    vars: 2,
    consts: [[4, "polymorpheusOutlet", "polymorpheusOutletContext"]],
    template: function TuiHintUnstyledComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵtemplate(0, TuiHintUnstyledComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      }
      if (rf & 2) {
        i0.ɵɵproperty("polymorpheusOutlet", ctx.context.$implicit.content)("polymorpheusOutletContext", ctx.context);
      }
    },
    dependencies: [i1.PolymorpheusOutletDirective],
    encapsulation: 2,
    data: {
      animation: [TUI_PARENT_ANIMATION]
    },
    changeDetection: 0
  });
  return TuiHintUnstyledComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintUnstyledDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiHintUnstyledDirective {
    constructor(templateRef, hint) {
      hint.component = new PolymorpheusComponent(TuiHintUnstyledComponent);
      hint.content = templateRef;
    }
  }
  TuiHintUnstyledDirective.ɵfac = function TuiHintUnstyledDirective_Factory(t) {
    return new (t || TuiHintUnstyledDirective)(i0.ɵɵdirectiveInject(TemplateRef), i0.ɵɵdirectiveInject(TuiHintDirective));
  };
  TuiHintUnstyledDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiHintUnstyledDirective,
    selectors: [["ng-template", "tuiHint", ""]],
    features: [i0.ɵɵProvidersFeature([{
      provide: POLYMORPHEUS_CONTEXT,
      useValue: {
        $implicit: {}
      }
    }])]
  });
  return TuiHintUnstyledDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintModule = /*#__PURE__*/(() => {
  class TuiHintModule {}
  TuiHintModule.ɵfac = function TuiHintModule_Factory(t) {
    return new (t || TuiHintModule)();
  };
  TuiHintModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiHintModule
  });
  TuiHintModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ]]
  });
  return TuiHintModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-directives-hint.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/observable/never.js


const NEVER = new Observable/* Observable */.c(noop/* noop */.l);
function never() {
  return NEVER;
}
//# sourceMappingURL=never.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-directives-textfield-controller.js






class TuiTextfieldController {
  constructor(change$, options, legacyAppearance, appearanceDirective, cleanerDirective, customContentDirective, iconDirective, iconLeftDirective, labelOutsideDirective, sizeDirective, prefixDirective, postfixDirective, fillerDirective) {
    this.change$ = change$;
    this.options = options;
    this.legacyAppearance = legacyAppearance;
    this.appearanceDirective = appearanceDirective;
    this.cleanerDirective = cleanerDirective;
    this.customContentDirective = customContentDirective;
    this.iconDirective = iconDirective;
    this.iconLeftDirective = iconLeftDirective;
    this.labelOutsideDirective = labelOutsideDirective;
    this.sizeDirective = sizeDirective;
    this.prefixDirective = prefixDirective;
    this.postfixDirective = postfixDirective;
    this.fillerDirective = fillerDirective;
  }
  get appearance() {
    return this.appearanceDirective.appearance || this.legacyAppearance;
  }
  get cleaner() {
    return this.cleanerDirective.cleaner;
  }
  get customContent() {
    return this.customContentDirective.customContent || '';
  }
  get icon() {
    return this.iconDirective.icon;
  }
  get iconLeft() {
    return this.iconLeftDirective.iconLeft;
  }
  get labelOutside() {
    return this.labelOutsideDirective.labelOutside;
  }
  get size() {
    return this.sizeDirective.size;
  }
  get prefix() {
    return this.prefixDirective.prefix;
  }
  get postfix() {
    return this.postfixDirective.postfix;
  }
  get filler() {
    return this.fillerDirective.filler;
  }
}

/** Default values for primitive textfield options */
const taiga_ui_core_directives_textfield_controller_TUI_TEXTFIELD_DEFAULT_OPTIONS = {
  iconCleaner: 'tuiIconClose',
  hintOnDisabled: false
};
/**
 * Default parameters for textfield
 */
const TUI_TEXTFIELD_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(taiga_ui_core_directives_textfield_controller_TUI_TEXTFIELD_DEFAULT_OPTIONS);
function taiga_ui_core_directives_textfield_controller_tuiTextfieldOptionsProvider(options) {
  return tuiProvideOptions(TUI_TEXTFIELD_OPTIONS, options, taiga_ui_core_directives_textfield_controller_TUI_TEXTFIELD_DEFAULT_OPTIONS);
}

// TODO: rename to TUI_TEXTFIELD_APPEARANCE in v4
const TUI_TEXTFIELD_APPEARANCE_DIRECTIVE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldAppearanceDirective());
let TuiTextfieldAppearanceDirective = /*#__PURE__*/(() => {
  class TuiTextfieldAppearanceDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {
    constructor() {
      super(...arguments);
      // it's an empty string by default for backward compatibility
      // (see comment https://github.com/taiga-family/taiga-ui/pull/3007#issuecomment-1315179508)
      this.appearance = '';
    }
  }
  TuiTextfieldAppearanceDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldAppearanceDirective_BaseFactory;
    return function TuiTextfieldAppearanceDirective_Factory(t) {
      return (ɵTuiTextfieldAppearanceDirective_BaseFactory || (ɵTuiTextfieldAppearanceDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldAppearanceDirective)))(t || TuiTextfieldAppearanceDirective);
    };
  })();
  TuiTextfieldAppearanceDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldAppearanceDirective,
    selectors: [["", "tuiTextfieldAppearance", ""]],
    inputs: {
      appearance: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldAppearance", "appearance"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_APPEARANCE_DIRECTIVE,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldAppearanceDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldAppearanceDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_CLEANER = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldCleanerDirective());
let TuiTextfieldCleanerDirective = /*#__PURE__*/(() => {
  class TuiTextfieldCleanerDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {
    constructor() {
      super(...arguments);
      this.cleaner = false;
    }
  }
  TuiTextfieldCleanerDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldCleanerDirective_BaseFactory;
    return function TuiTextfieldCleanerDirective_Factory(t) {
      return (ɵTuiTextfieldCleanerDirective_BaseFactory || (ɵTuiTextfieldCleanerDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldCleanerDirective)))(t || TuiTextfieldCleanerDirective);
    };
  })();
  TuiTextfieldCleanerDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldCleanerDirective,
    selectors: [["", "tuiTextfieldCleaner", ""]],
    inputs: {
      cleaner: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldCleaner", "cleaner"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_CLEANER,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldCleanerDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldCleanerDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_CUSTOM_CONTENT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldCustomContentDirective());
let TuiTextfieldCustomContentDirective = /*#__PURE__*/(() => {
  class TuiTextfieldCustomContentDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {}
  TuiTextfieldCustomContentDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldCustomContentDirective_BaseFactory;
    return function TuiTextfieldCustomContentDirective_Factory(t) {
      return (ɵTuiTextfieldCustomContentDirective_BaseFactory || (ɵTuiTextfieldCustomContentDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldCustomContentDirective)))(t || TuiTextfieldCustomContentDirective);
    };
  })();
  TuiTextfieldCustomContentDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldCustomContentDirective,
    selectors: [["", "tuiTextfieldCustomContent", ""]],
    inputs: {
      customContent: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldCustomContent", "customContent"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_CUSTOM_CONTENT,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldCustomContentDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldCustomContentDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_FILLER = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldFillerDirective());
let TuiTextfieldFillerDirective = /*#__PURE__*/(() => {
  class TuiTextfieldFillerDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {
    constructor() {
      super(...arguments);
      this.filler = '';
    }
  }
  TuiTextfieldFillerDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldFillerDirective_BaseFactory;
    return function TuiTextfieldFillerDirective_Factory(t) {
      return (ɵTuiTextfieldFillerDirective_BaseFactory || (ɵTuiTextfieldFillerDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldFillerDirective)))(t || TuiTextfieldFillerDirective);
    };
  })();
  TuiTextfieldFillerDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldFillerDirective,
    selectors: [["", "tuiTextfieldFiller", ""]],
    inputs: {
      filler: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldFiller", "filler"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_FILLER,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldFillerDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldFillerDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_ICON = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldIconDirective());
let TuiTextfieldIconDirective = /*#__PURE__*/(() => {
  class TuiTextfieldIconDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {}
  TuiTextfieldIconDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldIconDirective_BaseFactory;
    return function TuiTextfieldIconDirective_Factory(t) {
      return (ɵTuiTextfieldIconDirective_BaseFactory || (ɵTuiTextfieldIconDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldIconDirective)))(t || TuiTextfieldIconDirective);
    };
  })();
  TuiTextfieldIconDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldIconDirective,
    selectors: [["", "tuiTextfieldIcon", ""]],
    inputs: {
      icon: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldIcon", "icon"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_ICON,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldIconDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldIconDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_ICON_LEFT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldIconLeftDirective());
let TuiTextfieldIconLeftDirective = /*#__PURE__*/(() => {
  class TuiTextfieldIconLeftDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {}
  TuiTextfieldIconLeftDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldIconLeftDirective_BaseFactory;
    return function TuiTextfieldIconLeftDirective_Factory(t) {
      return (ɵTuiTextfieldIconLeftDirective_BaseFactory || (ɵTuiTextfieldIconLeftDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldIconLeftDirective)))(t || TuiTextfieldIconLeftDirective);
    };
  })();
  TuiTextfieldIconLeftDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldIconLeftDirective,
    selectors: [["", "tuiTextfieldIconLeft", ""]],
    inputs: {
      iconLeft: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldIconLeft", "iconLeft"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_ICON_LEFT,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldIconLeftDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldIconLeftDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_LABEL_OUTSIDE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldLabelOutsideDirective());
let TuiTextfieldLabelOutsideDirective = /*#__PURE__*/(() => {
  class TuiTextfieldLabelOutsideDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {
    constructor() {
      super(...arguments);
      this.labelOutside = false;
    }
  }
  TuiTextfieldLabelOutsideDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldLabelOutsideDirective_BaseFactory;
    return function TuiTextfieldLabelOutsideDirective_Factory(t) {
      return (ɵTuiTextfieldLabelOutsideDirective_BaseFactory || (ɵTuiTextfieldLabelOutsideDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldLabelOutsideDirective)))(t || TuiTextfieldLabelOutsideDirective);
    };
  })();
  TuiTextfieldLabelOutsideDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldLabelOutsideDirective,
    selectors: [["", "tuiTextfieldLabelOutside", ""]],
    inputs: {
      labelOutside: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldLabelOutside", "labelOutside"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_LABEL_OUTSIDE,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldLabelOutsideDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldLabelOutsideDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_POSTFIX = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldPostfixDirective());
let TuiTextfieldPostfixDirective = /*#__PURE__*/(() => {
  class TuiTextfieldPostfixDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {
    constructor() {
      super(...arguments);
      this.postfix = '';
    }
  }
  TuiTextfieldPostfixDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldPostfixDirective_BaseFactory;
    return function TuiTextfieldPostfixDirective_Factory(t) {
      return (ɵTuiTextfieldPostfixDirective_BaseFactory || (ɵTuiTextfieldPostfixDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldPostfixDirective)))(t || TuiTextfieldPostfixDirective);
    };
  })();
  TuiTextfieldPostfixDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldPostfixDirective,
    selectors: [["", "tuiTextfieldPostfix", ""]],
    inputs: {
      postfix: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldPostfix", "postfix"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_POSTFIX,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldPostfixDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldPostfixDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_PREFIX = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new TuiTextfieldPrefixDirective());
let TuiTextfieldPrefixDirective = /*#__PURE__*/(() => {
  class TuiTextfieldPrefixDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {
    constructor() {
      super(...arguments);
      this.prefix = '';
    }
  }
  TuiTextfieldPrefixDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldPrefixDirective_BaseFactory;
    return function TuiTextfieldPrefixDirective_Factory(t) {
      return (ɵTuiTextfieldPrefixDirective_BaseFactory || (ɵTuiTextfieldPrefixDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldPrefixDirective)))(t || TuiTextfieldPrefixDirective);
    };
  })();
  TuiTextfieldPrefixDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldPrefixDirective,
    selectors: [["", "tuiTextfieldPrefix", ""]],
    inputs: {
      prefix: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldPrefix", "prefix"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_PREFIX,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldPrefixDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldPrefixDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_SIZE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new taiga_ui_core_directives_textfield_controller_TuiTextfieldSizeDirective());
let taiga_ui_core_directives_textfield_controller_TuiTextfieldSizeDirective = /*#__PURE__*/(() => {
  class TuiTextfieldSizeDirective extends taiga_ui_cdk_abstract/* AbstractTuiController */.zY {
    constructor() {
      super(...arguments);
      this.size = 'l';
    }
  }
  TuiTextfieldSizeDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiTextfieldSizeDirective_BaseFactory;
    return function TuiTextfieldSizeDirective_Factory(t) {
      return (ɵTuiTextfieldSizeDirective_BaseFactory || (ɵTuiTextfieldSizeDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiTextfieldSizeDirective)))(t || TuiTextfieldSizeDirective);
    };
  })();
  TuiTextfieldSizeDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTextfieldSizeDirective,
    selectors: [["", "tuiTextfieldSize", ""]],
    inputs: {
      size: [core_mjs_["ɵɵInputFlags"].None, "tuiTextfieldSize", "size"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_TEXTFIELD_SIZE,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiTextfieldSizeDirective)
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiTextfieldSizeDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTextfieldControllerModule = /*#__PURE__*/(() => {
  class TuiTextfieldControllerModule {}
  TuiTextfieldControllerModule.ɵfac = function TuiTextfieldControllerModule_Factory(t) {
    return new (t || TuiTextfieldControllerModule)();
  };
  TuiTextfieldControllerModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiTextfieldControllerModule
  });
  TuiTextfieldControllerModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiTextfieldControllerModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TEXTFIELD_WATCHED_CONTROLLER = new core_mjs_.InjectionToken('[TUI_TEXTFIELD_WATCHED_CONTROLLER]');
const TEXTFIELD_CONTROLLER_PROVIDER = [taiga_ui_cdk_services/* TuiDestroyService */.ew, {
  provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
  deps: [core_mjs_.ChangeDetectorRef, taiga_ui_cdk_services/* TuiDestroyService */.ew, TUI_TEXTFIELD_OPTIONS, taiga_ui_core_tokens/* TUI_TEXTFIELD_APPEARANCE */.Eo, TUI_TEXTFIELD_APPEARANCE_DIRECTIVE, TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_CUSTOM_CONTENT, TUI_TEXTFIELD_ICON, TUI_TEXTFIELD_ICON_LEFT, TUI_TEXTFIELD_LABEL_OUTSIDE, TUI_TEXTFIELD_SIZE, TUI_TEXTFIELD_PREFIX, TUI_TEXTFIELD_POSTFIX, TUI_TEXTFIELD_FILLER],
  useFactory: (cdr, destroy$, options, legacyAppearance, ...controllers) => {
    const change$ = (0,merge/* merge */.h)(...controllers.map(({
      change$
    }) => change$ || NEVER)).pipe((0,taiga_ui_cdk_observables/* tuiWatch */.Eb)(cdr), (0,takeUntil/* takeUntil */.Q)(destroy$));
    change$.subscribe();
    return new TuiTextfieldController(change$, options, legacyAppearance, ...controllers);
  }
}];

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-directives-textfield-controller.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js
var fromEvent = __webpack_require__(3726);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-svg.js
var taiga_ui_core_components_svg = __webpack_require__(4350);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-enums.js
var taiga_ui_core_enums = __webpack_require__(7919);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-providers.js
var taiga_ui_core_providers = __webpack_require__(7291);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-directives-wrapper.js
var taiga_ui_core_directives_wrapper = __webpack_require__(2061);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-tooltip.js


















function TuiTooltipComponent_tui_svg_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 3);
  }
  if (rf & 2) {
    const src_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r1);
  }
}
let TuiTooltipComponent = /*#__PURE__*/(() => {
  class TuiTooltipComponent extends TuiHintOptionsDirective {
    constructor(destroy$, mode$, options, isMobile) {
      super(options);
      this.isMobile = isMobile;
      this.mode = null;
      this.describeId = '';
      mode$.pipe((0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(mode => {
        this.mode = mode;
      });
    }
    get computedAppearance() {
      return this.appearance || this.mode || '';
    }
    stopOnMobile(event) {
      var _a;
      if (this.isMobile) {
        event.preventDefault();
        event.stopPropagation();
      }
      (_a = this.driver$) === null || _a === void 0 ? void 0 : _a.toggle();
    }
  }
  TuiTooltipComponent.ɵfac = function TuiTooltipComponent_Factory(t) {
    return new (t || TuiTooltipComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_MODE */.fL), core_mjs_["ɵɵdirectiveInject"](TUI_HINT_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_MOBILE */.Td));
  };
  TuiTooltipComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiTooltipComponent,
    selectors: [["tui-tooltip"]],
    viewQuery: function TuiTooltipComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](TuiHintHoverDirective, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.driver$ = _t.first);
      }
    },
    hostVars: 1,
    hostBindings: function TuiTooltipComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("mousedown", function TuiTooltipComponent_mousedown_HostBindingHandler($event) {
          return ctx.stopOnMobile($event);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-appearance", ctx.computedAppearance);
      }
    },
    inputs: {
      content: "content",
      direction: "direction",
      appearance: "appearance",
      showDelay: "showDelay",
      hideDelay: "hideDelay",
      describeId: "describeId",
      context: "context"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew, taiga_ui_core_providers/* MODE_PROVIDER */.si]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    decls: 4,
    vars: 11,
    consts: [["driver", "tuiHintHover"], ["appearance", "icon", "automation-id", "tui-tooltip__icon", "tuiWrapper", "", 1, "t-tooltip-icon", 3, "hover", "tuiHint", "tuiHintAppearance", "tuiHintContext", "tuiHintDescribe", "tuiHintDirection", "tuiHintHideDelay", "tuiHintShowDelay"], [3, "src", 4, "polymorpheusOutlet"], [3, "src"]],
    template: function TuiTooltipComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵelementStart"](0, "span", 1, 0);
        core_mjs_["ɵɵpipe"](2, "async");
        core_mjs_["ɵɵtemplate"](3, TuiTooltipComponent_tui_svg_3_Template, 1, 1, "tui-svg", 2);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        const driver_r2 = core_mjs_["ɵɵreference"](1);
        core_mjs_["ɵɵproperty"]("hover", core_mjs_["ɵɵpipeBind1"](2, 9, driver_r2) || null)("tuiHint", ctx.content)("tuiHintAppearance", ctx.computedAppearance)("tuiHintContext", ctx.context)("tuiHintDescribe", ctx.describeId)("tuiHintDirection", ctx.direction)("tuiHintHideDelay", ctx.hideDelay)("tuiHintShowDelay", ctx.showDelay);
        core_mjs_["ɵɵadvance"](3);
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.icon);
      }
    },
    dependencies: [taiga_ui_core_components_svg/* TuiSvgComponent */._Y, taiga_ui_core_directives_wrapper/* TuiWrapperDirective */.l, TuiHintDirective, TuiHintDriverDirective, TuiHintHoverDirective, TuiHintPositionDirective, TuiHintDescribeDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{transition-property:color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:inline-block;width:1.5rem;height:1.5rem;vertical-align:middle;font-size:0;line-height:0;pointer-events:auto;cursor:pointer;color:var(--tui-text-01)}[data-appearance=error][_nghost-%COMP%]{color:var(--tui-error-fill)}.t-tooltip-icon[_ngcontent-%COMP%]{display:inline-block;width:100%;height:100%;color:inherit}[tuiWrapper][data-appearance=\"textfield\"][data-state=\"disabled\"][_nghost-%COMP%]   .t-tooltip-icon[_ngcontent-%COMP%], [tuiWrapper][data-appearance=\"textfield\"][data-state=\"disabled\"]   [_nghost-%COMP%]   .t-tooltip-icon[_ngcontent-%COMP%]{opacity:1}"],
    changeDetection: 0
  });
  return TuiTooltipComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTooltipModule = /*#__PURE__*/(() => {
  class TuiTooltipModule {}
  TuiTooltipModule.ɵfac = function TuiTooltipModule_Factory(t) {
    return new (t || TuiTooltipModule)();
  };
  TuiTooltipModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiTooltipModule
  });
  TuiTooltipModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, taiga_ui_core_directives_wrapper/* TuiWrapperModule */.E, taiga_ui_core_components_svg/* TuiSvgModule */.vl, TuiHintModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ]]
  });
  return TuiTooltipModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-tooltip.js.map
// EXTERNAL MODULE: ./node_modules/@angular/forms/fesm2022/forms.mjs + 1 modules
var fesm2022_forms = __webpack_require__(4341);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-directives-mask-accessor.js




let TuiMaskAccessorDirective = /*#__PURE__*/(() => {
  class TuiMaskAccessorDirective {}
  TuiMaskAccessorDirective.ɵfac = function TuiMaskAccessorDirective_Factory(t) {
    return new (t || TuiMaskAccessorDirective)();
  };
  TuiMaskAccessorDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiMaskAccessorDirective,
    selectors: [["input", "tuiMaskAccessor", ""]],
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: fesm2022_forms/* NG_VALUE_ACCESSOR */.kq,
      deps: [[new core_mjs_.Optional(), taiga_ui_core_tokens/* TUI_VALUE_ACCESSOR */.r0], fesm2022_forms/* DefaultValueAccessor */.me],
      multi: true,
      useFactory: (accessor, fallback) => accessor ? accessor[0] : fallback
    }])]
  });
  return TuiMaskAccessorDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * @internal
 */
let TuiMaskAccessorModule = /*#__PURE__*/(() => {
  class TuiMaskAccessorModule {}
  TuiMaskAccessorModule.ɵfac = function TuiMaskAccessorModule_Factory(t) {
    return new (t || TuiMaskAccessorModule)();
  };
  TuiMaskAccessorModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiMaskAccessorModule
  });
  TuiMaskAccessorModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiMaskAccessorModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-directives-mask-accessor.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-primitive-textfield.js































const taiga_ui_core_components_primitive_textfield_c0 = ["pre"];
const _c1 = ["focusableElement"];
const _c2 = [[["input"]], [["select"]], [["tuiContent"]], "*"];
const _c3 = ["input", "select", "tuiContent", "*"];
const _c4 = a0 => ({
  $implicit: a0
});
function TuiPrimitiveTextfieldComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiPrimitiveTextfieldComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiPrimitiveTextfieldComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 17);
    core_mjs_["ɵɵprojection"](1, 2);
    core_mjs_["ɵɵelementEnd"]();
  }
}
function TuiPrimitiveTextfieldComponent_div_12_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 20);
  }
  if (rf & 2) {
    const src_r2 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r2);
  }
}
function TuiPrimitiveTextfieldComponent_div_12_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 18);
    core_mjs_["ɵɵtemplate"](1, TuiPrimitiveTextfieldComponent_div_12_tui_svg_1_Template, 1, 1, "tui-svg", 19);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r2.iconLeftContent)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction1"](2, _c4, ctx_r2.size));
  }
}
function TuiPrimitiveTextfieldComponent_label_14_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "label", 21);
    core_mjs_["ɵɵprojection"](1, 3);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵclassProp"]("t-placeholder_raised", ctx_r2.placeholderRaised);
    core_mjs_["ɵɵproperty"]("for", ctx_r2.computedId);
  }
}
function TuiPrimitiveTextfieldComponent_div_20_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 24);
  }
  if (rf & 2) {
    const src_r4 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r4);
  }
}
function TuiPrimitiveTextfieldComponent_div_20_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 22);
    core_mjs_["ɵɵtemplate"](1, TuiPrimitiveTextfieldComponent_div_20_tui_svg_1_Template, 1, 1, "tui-svg", 23);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r2.controller.customContent);
  }
}
function TuiPrimitiveTextfieldComponent_span_21_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 27);
  }
  if (rf & 2) {
    const src_r6 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r6);
  }
}
function TuiPrimitiveTextfieldComponent_span_21_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "span", 25);
    core_mjs_["ɵɵlistener"]("click.stop", function TuiPrimitiveTextfieldComponent_span_21_Template_span_click_stop_0_listener() {
      core_mjs_["ɵɵrestoreView"](_r5);
      const ctx_r2 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r2.clear());
    });
    core_mjs_["ɵɵtemplate"](1, TuiPrimitiveTextfieldComponent_span_21_tui_svg_1_Template, 1, 1, "tui-svg", 26);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r2.iconCleaner || ctx_r2.controller.options.iconCleaner)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction1"](2, _c4, ctx_r2.size));
  }
}
function TuiPrimitiveTextfieldComponent_tui_tooltip_22_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-tooltip", 28);
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("content", ctx_r2.hintOptions == null ? null : ctx_r2.hintOptions.content)("describeId", ctx_r2.computedId);
  }
}
function TuiPrimitiveTextfieldComponent_div_23_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 20);
  }
  if (rf & 2) {
    const src_r7 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r7);
  }
}
function TuiPrimitiveTextfieldComponent_div_23_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 29);
    core_mjs_["ɵɵtemplate"](1, TuiPrimitiveTextfieldComponent_div_23_tui_svg_1_Template, 1, 1, "tui-svg", 19);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r2.iconContent)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction1"](2, _c4, ctx_r2.size));
  }
}
const _c5 = ["tuiTextfield", ""];
let TuiValueDecorationComponent = /*#__PURE__*/(() => {
  class TuiValueDecorationComponent {
    constructor(textfield, fontsReady$) {
      this.textfield = textfield;
      this.fontsReady$ = fontsReady$;
      this.prefix$ = new internal_BehaviorSubject/* BehaviorSubject */.t('');
      this.pre$ = (0,merge/* merge */.h)(this.fontsReady$, this.prefix$).pipe((0,delay/* delay */.c)(0), (0,filter/* filter */.p)(() => {
        var _a;
        return !!((_a = this.pre) === null || _a === void 0 ? void 0 : _a.nativeElement.isConnected);
      }), (0,operators_map/* map */.T)(() => {
        var _a;
        return ((_a = this.pre) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) || 0;
      }), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)());
    }
    get isContextTable() {
      return this.textfield.appearance === taiga_ui_core_enums/* TuiAppearance */.bC.Table;
    }
    get value() {
      return this.textfield.value;
    }
    get filler() {
      const {
        focused,
        placeholder,
        exampleText,
        value,
        textfield
      } = this;
      if (placeholder && exampleText) {
        return '';
      }
      return focused ? exampleText || textfield.filler.slice(value.length) : '';
    }
    get prefix() {
      return this.decorationsVisible ? this.textfield.prefix : '';
    }
    get postfix() {
      return this.decorationsVisible ? this.computedPostfix : '';
    }
    ngDoCheck() {
      this.prefix$.next(this.prefix);
    }
    get placeholder() {
      var _a;
      return ((_a = this.textfield.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.placeholder) || '';
    }
    get exampleText() {
      return !this.value && this.focused ? this.placeholder : '';
    }
    get decorationsVisible() {
      return !!this.value || this.focused && !this.placeholder;
    }
    get focused() {
      return this.textfield.computedFocused && !this.textfield.readOnly;
    }
    get computedPostfix() {
      return this.textfield.postfix && (this.filler || this.value) ? ` ${this.textfield.postfix}` : this.textfield.postfix;
    }
  }
  TuiValueDecorationComponent.ɵfac = function TuiValueDecorationComponent_Factory(t) {
    return new (t || TuiValueDecorationComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_FOCUSABLE_ITEM_ACCESSOR */.aX), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_FONTS_READY */.KS));
  };
  TuiValueDecorationComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiValueDecorationComponent,
    selectors: [["tui-value-decoration"]],
    viewQuery: function TuiValueDecorationComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](taiga_ui_core_components_primitive_textfield_c0, 7, core_mjs_.ElementRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.pre = _t.first);
      }
    },
    hostVars: 4,
    hostBindings: function TuiValueDecorationComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("animationstart", function TuiValueDecorationComponent_animationstart_HostBindingHandler() {
          return ctx.ngDoCheck();
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("_table", ctx.isContextTable)("_filler", ctx.filler);
      }
    },
    decls: 5,
    vars: 4,
    consts: [["pre", ""], [1, "t-prefix", 3, "textContent"], [1, "t-ghost", 3, "textContent"], [1, "t-filler", 3, "textContent"], [1, "t-postfix", 3, "textContent"]],
    template: function TuiValueDecorationComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵelement"](0, "span", 1, 0)(2, "span", 2)(3, "span", 3)(4, "span", 4);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("textContent", ctx.prefix);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("textContent", ctx.value);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("textContent", ctx.filler);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("textContent", ctx.postfix);
      }
    },
    styles: ["[_nghost-%COMP%]{position:absolute;display:block;width:100%;line-height:var(--tui-height);margin-top:calc(var(--tui-height) / -2);box-sizing:content-box;color:var(--tui-text-03);animation:tuiPresent 1s;white-space:nowrap}._table[_nghost-%COMP%]{position:static;margin-top:0}._filler[_nghost-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}tui-primitive-textfield   [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]{color:var(--tui-text-03-night)}tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)   [_nghost-%COMP%]{line-height:calc(var(--tui-height) - .25rem)}.t-ghost[_ngcontent-%COMP%]{visibility:hidden;white-space:pre;text-overflow:clip}.t-prefix[_ngcontent-%COMP%], .t-postfix[_ngcontent-%COMP%]{white-space:pre;color:var(--tui-text-01)}tui-primitive-textfield   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]   .t-prefix[_ngcontent-%COMP%], tui-primitive-textfield   [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]   .t-prefix[_ngcontent-%COMP%], tui-primitive-textfield   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]   .t-postfix[_ngcontent-%COMP%], tui-primitive-textfield   [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]   .t-postfix[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}.t-filler[_ngcontent-%COMP%]{max-width:100%;white-space:nowrap}"]
  });
  return TuiValueDecorationComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_ICON_PADDINGS = {
  s: 1.25,
  m: 1.75,
  l: 2.25
};
let TuiPrimitiveTextfieldComponent = /*#__PURE__*/(() => {
  class TuiPrimitiveTextfieldComponent extends taiga_ui_cdk_abstract/* AbstractTuiInteractive */.Xb {
    constructor(controller, hintOptions, options, el) {
      super();
      this.controller = controller;
      this.hintOptions = hintOptions;
      this.options = options;
      this.el = el;
      this.editable = true;
      /** @deprecated use `tuiTextfieldFiller` from {@link TuiTextfieldControllerModule} instead */
      this.textfieldFiller = '';
      /**
       * @deprecated:
       * use `tuiTextfieldOptionsProvider({iconCleaner: `tuiIconChevronUp`})`
       */
      this.iconCleaner = this.options.iconCleaner;
      this.readOnly = false;
      this.invalid = false;
      this.disabled = false;
      /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
      this.textfieldPrefix = '';
      /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
      this.textfieldPostfix = '';
      this.value = '';
      this.valueChange = new core_mjs_.EventEmitter();
      this.autofilled = false;
    }
    get prefix() {
      return this.textfieldPrefix || this.controller.prefix;
    }
    get postfix() {
      return this.textfieldPostfix || this.controller.postfix;
    }
    get filler() {
      return this.textfieldFiller || this.controller.filler;
    }
    get nativeFocusableElement() {
      if (this.computedDisabled || !this.focusableElement) {
        return null;
      }
      const {
        nativeElement
      } = this.focusableElement;
      return nativeElement.previousElementSibling || nativeElement;
    }
    get focused() {
      return (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocusedIn */.Ij)(this.el.nativeElement);
    }
    get appearance() {
      return this.controller.appearance;
    }
    get size() {
      return this.controller.size;
    }
    get computedInvalid() {
      return !this.readOnly && !this.disabled && this.invalid;
    }
    get inputHidden() {
      var _a;
      return !!((_a = this.content) === null || _a === void 0 ? void 0 : _a.length);
    }
    get hasValue() {
      return !!this.value;
    }
    get hasCleaner() {
      return this.controller.cleaner && this.hasValue && !this.computedDisabled && !this.readOnly;
    }
    get hasTooltip() {
      var _a;
      return !!((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) && !this.computedDisabled;
    }
    get hasCustomContent() {
      return !!this.controller.customContent;
    }
    get placeholderVisible() {
      var _a;
      const hasDecor = ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.placeholder) || this.prefix || this.postfix || this.filler;
      const showDecor = hasDecor && !this.readOnly && this.computedFocused;
      return !this.hasValue && !showDecor;
    }
    get hasPlaceholder() {
      return this.placeholderRaisable || this.placeholderVisible;
    }
    get placeholderRaised() {
      return this.placeholderRaisable && (this.computedFocused && !this.readOnly || this.hasValue || this.autofilled);
    }
    get borderStart() {
      return this.iconLeftContent ? this.iconPaddingLeft : 0;
    }
    get borderEnd() {
      return (0,taiga_ui_core_utils_miscellaneous/* tuiGetBorder */.f3)(!!this.iconContent, this.hasCleaner, this.hasTooltip, this.hasCustomContent, this.size);
    }
    get iconContent() {
      return this.controller.icon;
    }
    get iconLeftContent() {
      return this.controller.iconLeft;
    }
    get showHint() {
      var _a;
      return !!((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) && (this.options.hintOnDisabled || !this.computedDisabled);
    }
    // Safari expiration date autofill workaround
    get name() {
      var _a;
      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.autocomplete) === 'cc-exp' ? 'ccexpiryyear' : null;
    }
    get computedId() {
      var _a;
      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.id) || '';
    }
    onFocused(focused) {
      this.updateFocused(focused);
    }
    getIndent$(element) {
      return (0,fromEvent/* fromEvent */.R)(element, 'scroll').pipe((0,operators_map/* map */.T)(() => -1 * Math.max(element.scrollLeft, 0)));
    }
    clear() {
      if (this.nativeFocusableElement) {
        this.nativeFocusableElement.value = '';
      }
      this.updateValue('');
    }
    onMouseDown(event) {
      const {
        nativeFocusableElement
      } = this;
      if (!nativeFocusableElement || event.target === nativeFocusableElement) {
        return;
      }
      event.preventDefault();
      nativeFocusableElement.focus();
    }
    onModelChange(value) {
      this.updateValue(value);
    }
    onAutofilled(autofilled) {
      this.updateAutofilled(autofilled);
    }
    detectRetargetFromLabel(event) {
      if ((0,taiga_ui_cdk_utils_dom/* tuiRetargetedBoundaryCrossing */.Kv)(event)) {
        event.stopImmediatePropagation();
      }
    }
    get iconPaddingLeft() {
      return TUI_ICON_PADDINGS[this.size];
    }
    get placeholderRaisable() {
      return this.size !== 's' && !this.controller.labelOutside;
    }
    updateAutofilled(autofilled) {
      if (this.autofilled === autofilled) {
        return;
      }
      this.autofilled = autofilled;
    }
    updateValue(value) {
      this.value = value;
      this.valueChange.emit(value);
    }
  }
  TuiPrimitiveTextfieldComponent.ɵfac = function TuiPrimitiveTextfieldComponent_Factory(t) {
    return new (t || TuiPrimitiveTextfieldComponent)(core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_WATCHED_CONTROLLER), core_mjs_["ɵɵdirectiveInject"](TuiHintOptionsDirective, 8), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_OPTIONS), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
  };
  TuiPrimitiveTextfieldComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiPrimitiveTextfieldComponent,
    selectors: [["tui-primitive-textfield"]],
    contentQueries: function TuiPrimitiveTextfieldComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.content = _t);
      }
    },
    viewQuery: function TuiPrimitiveTextfieldComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](_c1, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.focusableElement = _t.first);
      }
    },
    hostVars: 15,
    hostBindings: function TuiPrimitiveTextfieldComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("focusin", function TuiPrimitiveTextfieldComponent_focusin_HostBindingHandler() {
          return ctx.onFocused(true);
        })("focusout", function TuiPrimitiveTextfieldComponent_focusout_HostBindingHandler() {
          return ctx.onFocused(false);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-size", ctx.size);
        core_mjs_["ɵɵstyleProp"]("--border-start", ctx.borderStart, "rem")("--border-end", ctx.borderEnd, "rem");
        core_mjs_["ɵɵclassProp"]("_autofilled", ctx.autofilled)("_label-outside", ctx.controller.labelOutside)("_readonly", ctx.readOnly)("_invalid", ctx.computedInvalid)("_hidden", ctx.inputHidden);
      }
    },
    inputs: {
      editable: "editable",
      textfieldFiller: [core_mjs_["ɵɵInputFlags"].None, "filler", "textfieldFiller"],
      iconCleaner: "iconCleaner",
      readOnly: "readOnly",
      invalid: "invalid",
      disabled: "disabled",
      textfieldPrefix: [core_mjs_["ɵɵInputFlags"].None, "prefix", "textfieldPrefix"],
      textfieldPostfix: [core_mjs_["ɵɵInputFlags"].None, "postfix", "textfieldPostfix"],
      value: "value"
    },
    outputs: {
      valueChange: "valueChange"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_cdk_tokens/* tuiAsFocusableItemAccessor */.Jr)(TuiPrimitiveTextfieldComponent), TEXTFIELD_CONTROLLER_PROVIDER]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: _c3,
    decls: 24,
    vars: 37,
    consts: [["focusableElement", ""], ["decor", ""], [4, "ngIf"], ["automation-id", "tui-primitive-textfield__wrapper", "tuiWrapper", "", 3, "click.prevent.silent", "mousedown", "tuiAutofilledChange", "active", "appearance", "disabled", "focus", "hover", "invalid", "readOnly"], ["automation-id", "tui-primitive-textfield__native-input", "tuiMaskAccessor", "", 1, "t-input", 3, "ngModelChange", "disabled", "id", "ngModel", "readOnly", "tuiFocusable"], ["automation-id", "tui-primitive-textfield__value", "class", "t-input t-input_template", 4, "ngIf"], [1, "t-content"], ["class", "t-icon t-icon_left t-textfield-icon", 4, "ngIf"], [1, "t-wrapper"], ["automation-id", "tui-primitive-textfield__placeholder", "class", "t-placeholder", 3, "t-placeholder_raised", "for", 4, "ngIf"], [1, "t-wrapper-value-decoration"], ["aria-hidden", "true", "automation-id", "tui-primitive-textfield__value-decoration", 1, "t-value-decoration"], [1, "t-icons"], ["automation-id", "tui-primitive-textfield__custom-content", "class", "t-custom-content", 4, "ngIf"], ["appearance", "icon", "automation-id", "tui-primitive-textfield__cleaner", "tuiWrapper", "", "class", "t-cleaner", 3, "click.stop", 4, "ngIf"], ["automation-id", "tui-primitive-textfield__tooltip", "class", "t-tooltip", 3, "content", "describeId", 4, "ngIf"], ["class", "t-icon t-textfield-icon", 4, "ngIf"], ["automation-id", "tui-primitive-textfield__value", 1, "t-input", "t-input_template"], [1, "t-icon", "t-icon_left", "t-textfield-icon"], ["appearance", "icon", "tuiWrapper", "", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "tuiWrapper", "", 3, "src"], ["automation-id", "tui-primitive-textfield__placeholder", 1, "t-placeholder", 3, "for"], ["automation-id", "tui-primitive-textfield__custom-content", 1, "t-custom-content"], ["class", "t-custom-icon", 3, "src", 4, "polymorpheusOutlet"], [1, "t-custom-icon", 3, "src"], ["appearance", "icon", "automation-id", "tui-primitive-textfield__cleaner", "tuiWrapper", "", 1, "t-cleaner", 3, "click.stop"], [3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], [3, "src"], ["automation-id", "tui-primitive-textfield__tooltip", 1, "t-tooltip", 3, "content", "describeId"], [1, "t-icon", "t-textfield-icon"]],
    template: function TuiPrimitiveTextfieldComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = core_mjs_["ɵɵgetCurrentView"]();
        core_mjs_["ɵɵprojectionDef"](_c2);
        core_mjs_["ɵɵtemplate"](0, TuiPrimitiveTextfieldComponent_ng_container_0_Template, 1, 0, "ng-container", 2);
        core_mjs_["ɵɵpipe"](1, "async");
        core_mjs_["ɵɵtemplate"](2, TuiPrimitiveTextfieldComponent_ng_container_2_Template, 1, 0, "ng-container", 2);
        core_mjs_["ɵɵpipe"](3, "async");
        core_mjs_["ɵɵelementStart"](4, "div", 3);
        core_mjs_["ɵɵpipe"](5, "async");
        core_mjs_["ɵɵlistener"]("click.prevent.silent", function TuiPrimitiveTextfieldComponent_Template_div_click_prevent_silent_4_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.detectRetargetFromLabel($event));
        })("mousedown", function TuiPrimitiveTextfieldComponent_Template_div_mousedown_4_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onMouseDown($event));
        })("tuiAutofilledChange", function TuiPrimitiveTextfieldComponent_Template_div_tuiAutofilledChange_4_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onAutofilled($event));
        });
        core_mjs_["ɵɵprojection"](6);
        core_mjs_["ɵɵprojection"](7, 1);
        core_mjs_["ɵɵelementStart"](8, "input", 4, 0);
        core_mjs_["ɵɵlistener"]("ngModelChange", function TuiPrimitiveTextfieldComponent_Template_input_ngModelChange_8_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onModelChange($event));
        });
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](10, TuiPrimitiveTextfieldComponent_div_10_Template, 2, 0, "div", 5);
        core_mjs_["ɵɵelementStart"](11, "div", 6);
        core_mjs_["ɵɵtemplate"](12, TuiPrimitiveTextfieldComponent_div_12_Template, 2, 4, "div", 7);
        core_mjs_["ɵɵelementStart"](13, "div", 8);
        core_mjs_["ɵɵtemplate"](14, TuiPrimitiveTextfieldComponent_label_14_Template, 2, 3, "label", 9);
        core_mjs_["ɵɵelementStart"](15, "div", 10);
        core_mjs_["ɵɵelement"](16, "tui-value-decoration", 11, 1);
        core_mjs_["ɵɵpipe"](18, "async");
        core_mjs_["ɵɵelementEnd"]()();
        core_mjs_["ɵɵelementStart"](19, "div", 12);
        core_mjs_["ɵɵtemplate"](20, TuiPrimitiveTextfieldComponent_div_20_Template, 2, 1, "div", 13)(21, TuiPrimitiveTextfieldComponent_span_21_Template, 2, 4, "span", 14)(22, TuiPrimitiveTextfieldComponent_tui_tooltip_22_Template, 1, 2, "tui-tooltip", 15)(23, TuiPrimitiveTextfieldComponent_div_23_Template, 2, 4, "div", 16);
        core_mjs_["ɵɵelementEnd"]()()();
      }
      if (rf & 2) {
        const focusableElement_r8 = core_mjs_["ɵɵreference"](9);
        const decor_r9 = core_mjs_["ɵɵreference"](17);
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](1, 29, ctx.content == null ? null : ctx.content.changes));
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](3, 31, ctx.hintOptions == null ? null : ctx.hintOptions.change$));
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵstyleProp"]("--text-indent", core_mjs_["ɵɵpipeBind1"](5, 33, decor_r9.pre$), "px");
        core_mjs_["ɵɵproperty"]("active", ctx.pseudoActive)("appearance", ctx.appearance)("disabled", ctx.disabled)("focus", ctx.computedFocused)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid)("readOnly", ctx.readOnly);
        core_mjs_["ɵɵadvance"](4);
        core_mjs_["ɵɵproperty"]("disabled", ctx.computedDisabled)("id", ctx.id)("ngModel", ctx.value)("readOnly", ctx.readOnly || !ctx.editable)("tuiFocusable", ctx.computedFocusable);
        core_mjs_["ɵɵattribute"]("aria-invalid", ctx.computedInvalid)("name", ctx.name);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.inputHidden);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.iconLeftContent);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.hasPlaceholder);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵstyleProp"]("text-indent", core_mjs_["ɵɵpipeBind1"](18, 35, ctx.getIndent$(focusableElement_r8)), "px");
        core_mjs_["ɵɵclassProp"]("t-has-value", ctx.value);
        core_mjs_["ɵɵadvance"](4);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.hasCustomContent);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.hasCleaner);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showHint);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.iconContent);
      }
    },
    dependencies: [taiga_ui_core_components_svg/* TuiSvgComponent */._Y, TuiValueDecorationComponent, TuiTooltipComponent, common_mjs_.NgIf, taiga_ui_core_directives_wrapper/* TuiWrapperDirective */.l, TuiAutofilledDirective, TuiMaskAccessorDirective, fesm2022_forms/* DefaultValueAccessor */.me, fesm2022_forms/* NgControlStatus */.BC, fesm2022_forms/* NgModel */.vS, TuiFocusableDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;text-align:left;border-radius:var(--tui-radius-m);height:var(--tui-height);min-height:var(--tui-height);max-height:var(--tui-height)}[data-size=s][_nghost-%COMP%]{--tui-height: var(--tui-height-s)}[data-size=m][_nghost-%COMP%]{--tui-height: var(--tui-height-m)}[data-size=l][_nghost-%COMP%]{--tui-height: var(--tui-height-l);font:var(--tui-font-text-m);line-height:1.25rem}.t-input[_ngcontent-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;border-style:solid;border-color:transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0);text-indent:var(--text-indent);text-align:inherit;box-sizing:border-box;white-space:nowrap;overflow:hidden;text-transform:inherit;resize:none}.t-input[_ngcontent-%COMP%]:-webkit-autofill, .t-input[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-input[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}.t-input[_ngcontent-%COMP%]:-webkit-autofill, .t-input[_ngcontent-%COMP%]:-webkit-autofill:first-line{font-size:inherit;line-height:inherit}.t-input[_ngcontent-%COMP%]::-webkit-caps-lock-indicator, .t-input[_ngcontent-%COMP%]::-webkit-contacts-auto-fill-button, .t-input[_ngcontent-%COMP%]::-webkit-credit-card-auto-fill-button, .t-input[_ngcontent-%COMP%]::-webkit-credentials-auto-fill-button, .t-input[_ngcontent-%COMP%]::-webkit-strong-password-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:transparent!important;pointer-events:none!important}.t-input[_ngcontent-%COMP%]::placeholder{color:var(--tui-text-03);opacity:0}._focused[_nghost-%COMP%]:not(._readonly)   .t-input[_ngcontent-%COMP%]::placeholder, tui-primitive-textfield._focused:not(._readonly)[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-primitive-textfield._focused:not(._readonly)   [_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-textarea._focused:not(._readonly)[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-textarea._focused:not(._readonly)   [_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-text-area._focused:not(._readonly)[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-text-area._focused:not(._readonly)   [_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder{opacity:1}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-input[_ngcontent-%COMP%]:-webkit-autofill, .t-input   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]:-webkit-autofill, [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]:-webkit-autofill, [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-input[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-input   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]:-webkit-autofill:hover, [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]:-webkit-autofill:hover, [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-input[_ngcontent-%COMP%]:-webkit-autofill:focus, .t-input   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]:-webkit-autofill:focus, [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01-night)!important;border-color:var(--tui-autofill-night);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill-night) inset!important}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, .t-input   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]::placeholder, [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]::placeholder{color:var(--tui-text-03-night)}[data-size=s][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size=\"s\"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"s\"]   [_nghost-%COMP%]:not(tui-primitive-textfield), .t-input   tui-textarea[data-size=\"s\"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size=\"s\"]   [_nghost-%COMP%]:not(tui-textarea), .t-input   tui-text-area[data-size=\"s\"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size=\"s\"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-s)}[data-size=m][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size=\"m\"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"m\"]   [_nghost-%COMP%]:not(tui-primitive-textfield), .t-input   tui-textarea[data-size=\"m\"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size=\"m\"]   [_nghost-%COMP%]:not(tui-textarea), .t-input   tui-text-area[data-size=\"m\"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size=\"m\"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-m)}[data-size=l][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size=\"l\"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"l\"]   [_nghost-%COMP%]:not(tui-primitive-textfield), .t-input   tui-textarea[data-size=\"l\"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size=\"l\"]   [_nghost-%COMP%]:not(tui-textarea), .t-input   tui-text-area[data-size=\"l\"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size=\"l\"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-l)}._disabled[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield._disabled[_nghost-%COMP%], tui-primitive-textfield._disabled   [_nghost-%COMP%], .t-input   tui-textarea._disabled[_nghost-%COMP%], tui-textarea._disabled   [_nghost-%COMP%], .t-input   tui-text-area._disabled[_nghost-%COMP%], tui-text-area._disabled   [_nghost-%COMP%]{pointer-events:none}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size=\"l\"]:not(._label-outside)[_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"l\"]:not(._label-outside)   [_nghost-%COMP%]:not(tui-primitive-textfield){padding-top:1.25rem}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)[_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)   [_nghost-%COMP%]:not(tui-primitive-textfield){padding-top:1rem}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%]{padding-top:1.25rem}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%]:-webkit-autofill + .t-content[_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font-size:.8156rem;transform:translateY(-.625rem)}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%]:-webkit-autofill + .t-content[_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font-size:.69rem;transform:translateY(-.5rem)}._hidden[_nghost-%COMP%]   input.t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield._hidden[_nghost-%COMP%], tui-primitive-textfield._hidden   [_nghost-%COMP%]{opacity:0;text-indent:-10em;-webkit-user-select:none}.t-content[_ngcontent-%COMP%]{display:flex;height:100%;width:100%;box-sizing:border-box;align-items:center;overflow:hidden}[data-size=s][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:0 var(--tui-padding-s)}[data-size=m][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:0 var(--tui-padding-m)}[data-size=l][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:0 var(--tui-padding-l)}.t-wrapper[_ngcontent-%COMP%]{flex:1;min-width:0;-webkit-padding-end:.25rem;padding-inline-end:.25rem}.t-placeholder[_ngcontent-%COMP%]{transition-property:transform,font-size,color,letter-spacing;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;width:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none;font:var(--tui-font-text-s);color:var(--tui-text-02);pointer-events:none;will-change:transform;transform:translateY(0)}@supports (-webkit-hyphens: none){.t-placeholder[_ngcontent-%COMP%]{will-change:unset;transition-property:transform,color,letter-spacing}}.t-placeholder_raised[_ngcontent-%COMP%]{transform:translateY(-.625rem)}[data-size=m][_nghost-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{font:var(--tui-font-text-xs);line-height:1.25rem;transform:translateY(-.5rem);letter-spacing:.025rem}._invalid[_nghost-%COMP%]:not(._focused)   .t-placeholder_raised[_ngcontent-%COMP%], ._invalid[_nghost-%COMP%]:not(._focused):hover   .t-placeholder_raised[_ngcontent-%COMP%]{color:var(--tui-error-fill)}._invalid[_nghost-%COMP%]:not(._focused)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%], ._invalid[_nghost-%COMP%]:not(._focused):hover   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{color:var(--tui-error-fill-night)}._focused[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=m]._focused._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-03)}[data-size=l][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font:var(--tui-font-text-m);line-height:1.25rem}[data-size=l][_nghost-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{font-size:.8156rem}[data-size=m]._focused[_nghost-%COMP%]:not(._label-outside)   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused[_nghost-%COMP%]:not(._label-outside)   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-01)}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-02-night)}[data-size=m]._focused[_nghost-%COMP%]:not(._label-outside)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused[_nghost-%COMP%]:not(._label-outside)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}._focused[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=m]._focused._label-outside[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused._label-outside[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-02-night)}.t-cleaner[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none;pointer-events:auto}._readonly[_nghost-%COMP%]   .t-cleaner[_ngcontent-%COMP%], ._disabled[_nghost-%COMP%]   .t-cleaner[_ngcontent-%COMP%]{pointer-events:none}.t-icon[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none}[data-size=s][_nghost-%COMP%]   .t-icon_left[_ngcontent-%COMP%]{-webkit-margin-start:-.375rem;margin-inline-start:-.375rem}[data-size=m][_nghost-%COMP%]   .t-icon_left[_ngcontent-%COMP%]{-webkit-margin-start:-.125rem;margin-inline-start:-.125rem;-webkit-margin-end:.375rem;margin-inline-end:.375rem}[data-size=l][_nghost-%COMP%]   .t-icon_left[_ngcontent-%COMP%]{-webkit-margin-end:.75rem;margin-inline-end:.75rem}.t-icons[_ngcontent-%COMP%]{display:flex;align-items:center}[data-size=m][_nghost-%COMP%]   .t-icons[_ngcontent-%COMP%]{-webkit-margin-end:-.125rem;margin-inline-end:-.125rem}[data-size=s][_nghost-%COMP%]   .t-icons[_ngcontent-%COMP%]{-webkit-margin-end:-.375rem;margin-inline-end:-.375rem}[_nghost-%COMP%]:not([data-size=\"s\"])   .t-icons[_ngcontent-%COMP%] > [_ngcontent-%COMP%]:not(:first-child){-webkit-margin-start:.25rem;margin-inline-start:.25rem}._autofilled[data-size=s][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], ._autofilled._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], ._autofilled[_nghost-%COMP%]   .t-value-decoration[_ngcontent-%COMP%]:not(.t-has-value){visibility:hidden}.t-custom-content[_ngcontent-%COMP%]{position:relative;display:flex;align-items:center;justify-content:center;min-width:2rem;height:2rem;pointer-events:none}.t-custom-icon[_ngcontent-%COMP%]{width:2rem;height:100%}.t-input[_ngcontent-%COMP%]:not(:first-child){display:none}[data-size][_nghost-%COMP%]   .t-input_template[_ngcontent-%COMP%]{display:flex;width:calc(100% - 1rem);max-width:calc(100% - 1rem);align-items:center;pointer-events:none;-webkit-padding-end:0;padding-inline-end:0}.t-text-template[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-wrapper-value-decoration[_ngcontent-%COMP%]{position:relative;pointer-events:none}"],
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiPrimitiveTextfieldComponent.prototype, "getIndent$", null);
  return TuiPrimitiveTextfieldComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiPrimitiveTextfieldDirective = /*#__PURE__*/(() => {
  class TuiPrimitiveTextfieldDirective extends taiga_ui_core_abstract/* AbstractTuiTextfieldHost */.aX {
    constructor(textfield) {
      /**
       * TuiPrimitiveTextfieldComponent satisfies all required parts of
       * AbstractTuiControl interface. A new interface is not introduced
       * so AbstractTuiControl is automatically injected for all other controls.
       */
      super(textfield);
      this.textfield = textfield;
    }
    get readOnly() {
      return this.textfield.readOnly || !this.textfield.editable;
    }
    onValueChange(value) {
      this.textfield.onModelChange(value);
    }
  }
  TuiPrimitiveTextfieldDirective.ɵfac = function TuiPrimitiveTextfieldDirective_Factory(t) {
    return new (t || TuiPrimitiveTextfieldDirective)(core_mjs_["ɵɵdirectiveInject"](TuiPrimitiveTextfieldComponent));
  };
  TuiPrimitiveTextfieldDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiPrimitiveTextfieldDirective,
    selectors: [["tui-primitive-textfield"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_tokens/* tuiAsTextfieldHost */.Sc)(TuiPrimitiveTextfieldDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiPrimitiveTextfieldDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTextfieldComponent = /*#__PURE__*/(() => {
  class TuiTextfieldComponent {
    constructor(host, controller, el, idService, legacyMask) {
      this.host = host;
      this.controller = controller;
      this.el = el;
      this.idService = idService;
      this.legacyMask = legacyMask;
      this.host.process(this.el.nativeElement);
    }
    get id() {
      return this.el.nativeElement.id || this.idService.generate();
    }
    get inputMode() {
      return this.el.nativeElement.inputMode || this.host.inputMode;
    }
  }
  TuiTextfieldComponent.ɵfac = function TuiTextfieldComponent_Factory(t) {
    return new (t || TuiTextfieldComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_TEXTFIELD_HOST */.w2), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_WATCHED_CONTROLLER), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiIdService */.BF), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_LEGACY_MASK */.Qc, 8));
  };
  TuiTextfieldComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiTextfieldComponent,
    selectors: [["input", "tuiTextfield", ""], ["textarea", "tuiTextfield", ""]],
    hostAttrs: ["type", "text"],
    hostVars: 7,
    hostBindings: function TuiTextfieldComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("input", function TuiTextfieldComponent_input_HostBindingHandler($event) {
          return !ctx.legacyMask && ctx.host.onValueChange($event.target.value);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵhostProperty"]("tabIndex", ctx.host.focusable ? 0 : -1)("readOnly", ctx.host.readOnly)("value", ctx.host.value);
        core_mjs_["ɵɵattribute"]("id", ctx.id)("inputMode", ctx.inputMode)("aria-invalid", ctx.host.invalid)("disabled", ctx.host.disabled || null);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([TEXTFIELD_CONTROLLER_PROVIDER])],
    attrs: _c5,
    decls: 0,
    vars: 0,
    template: function TuiTextfieldComponent_Template(rf, ctx) {},
    styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;border-style:solid;border-color:transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0);text-indent:var(--text-indent);text-align:inherit;box-sizing:border-box;white-space:nowrap;overflow:hidden;text-transform:inherit;resize:none}[_nghost-%COMP%]:-webkit-autofill, [_nghost-%COMP%]:-webkit-autofill:hover, [_nghost-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}[_nghost-%COMP%]:-webkit-autofill, [_nghost-%COMP%]:-webkit-autofill:first-line{font-size:inherit;line-height:inherit}[_nghost-%COMP%]::-webkit-caps-lock-indicator, [_nghost-%COMP%]::-webkit-contacts-auto-fill-button, [_nghost-%COMP%]::-webkit-credit-card-auto-fill-button, [_nghost-%COMP%]::-webkit-credentials-auto-fill-button, [_nghost-%COMP%]::-webkit-strong-password-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:transparent!important;pointer-events:none!important}[_nghost-%COMP%]::placeholder{color:var(--tui-text-03);opacity:0}._focused[_nghost-%COMP%]:not(._readonly)   [_ngcontent-%COMP%]::placeholder, tui-primitive-textfield._focused:not(._readonly)   [_nghost-%COMP%]::placeholder, tui-textarea._focused:not(._readonly)   [_nghost-%COMP%]::placeholder, tui-text-area._focused:not(._readonly)   [_nghost-%COMP%]::placeholder{opacity:1}[tuiWrapper][data-mode=onDark]   [_nghost-%COMP%]:-webkit-autofill, [_nghost-%COMP%]   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]:-webkit-autofill, [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]:-webkit-autofill, [tuiWrapper][data-mode=onDark]   [_nghost-%COMP%]:-webkit-autofill:hover, [_nghost-%COMP%]   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]:-webkit-autofill:hover, [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]:-webkit-autofill:hover, [tuiWrapper][data-mode=onDark]   [_nghost-%COMP%]:-webkit-autofill:focus, [_nghost-%COMP%]   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]:-webkit-autofill:focus, [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01-night)!important;border-color:var(--tui-autofill-night);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill-night) inset!important}[tuiWrapper][data-mode=onDark]   [_nghost-%COMP%]::placeholder, [_nghost-%COMP%]   [tuiWrapper][data-mode=\"onDark\"][_nghost-%COMP%]::placeholder, [tuiWrapper][data-mode=\"onDark\"]   [_nghost-%COMP%]::placeholder{color:var(--tui-text-03-night)}[data-size=s][_nghost-%COMP%]   -shadowcsshost, [_nghost-%COMP%]   tui-primitive-textfield[data-size=\"s\"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"s\"]   [_nghost-%COMP%]:not(tui-primitive-textfield), [_nghost-%COMP%]   tui-textarea[data-size=\"s\"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size=\"s\"]   [_nghost-%COMP%]:not(tui-textarea), [_nghost-%COMP%]   tui-text-area[data-size=\"s\"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size=\"s\"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-s)}[data-size=m][_nghost-%COMP%]   -shadowcsshost, [_nghost-%COMP%]   tui-primitive-textfield[data-size=\"m\"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"m\"]   [_nghost-%COMP%]:not(tui-primitive-textfield), [_nghost-%COMP%]   tui-textarea[data-size=\"m\"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size=\"m\"]   [_nghost-%COMP%]:not(tui-textarea), [_nghost-%COMP%]   tui-text-area[data-size=\"m\"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size=\"m\"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-m)}[data-size=l][_nghost-%COMP%]   -shadowcsshost, [_nghost-%COMP%]   tui-primitive-textfield[data-size=\"l\"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"l\"]   [_nghost-%COMP%]:not(tui-primitive-textfield), [_nghost-%COMP%]   tui-textarea[data-size=\"l\"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size=\"l\"]   [_nghost-%COMP%]:not(tui-textarea), [_nghost-%COMP%]   tui-text-area[data-size=\"l\"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size=\"l\"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-l)}._disabled[_nghost-%COMP%]   -shadowcsshost, [_nghost-%COMP%]   tui-primitive-textfield._disabled[_nghost-%COMP%], tui-primitive-textfield._disabled   [_nghost-%COMP%], [_nghost-%COMP%]   tui-textarea._disabled[_nghost-%COMP%], tui-textarea._disabled   [_nghost-%COMP%], [_nghost-%COMP%]   tui-text-area._disabled[_nghost-%COMP%], tui-text-area._disabled   [_nghost-%COMP%]{pointer-events:none}[data-size=l][_nghost-%COMP%]:not(._label-outside)   -shadowcsshost, [_nghost-%COMP%]   tui-primitive-textfield[data-size=\"l\"]:not(._label-outside)[_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"l\"]:not(._label-outside)   [_nghost-%COMP%]:not(tui-primitive-textfield){padding-top:1.25rem}[data-size=m][_nghost-%COMP%]:not(._label-outside)   -shadowcsshost, [_nghost-%COMP%]   tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)[_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)   [_nghost-%COMP%]:not(tui-primitive-textfield){padding-top:1rem}[data-size=l][_nghost-%COMP%]:not(._label-outside)   -shadowcsshost{padding-top:1.25rem}[data-size=l][_nghost-%COMP%]:not(._label-outside)   [_ngcontent-%COMP%]:-webkit-autofill + .t-content[_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font-size:.8156rem;transform:translateY(-.625rem)}[data-size=m][_nghost-%COMP%]:not(._label-outside)   [_ngcontent-%COMP%]:-webkit-autofill + .t-content[_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font-size:.69rem;transform:translateY(-.5rem)}._hidden[_nghost-%COMP%]   input[_ngcontent-%COMP%], [_nghost-%COMP%]   tui-primitive-textfield._hidden[_nghost-%COMP%], tui-primitive-textfield._hidden   [_nghost-%COMP%]{opacity:0;text-indent:-10em;-webkit-user-select:none}textarea[_nghost-%COMP%]{white-space:pre-wrap}textarea[_nghost-%COMP%]   tui-textarea._ios[_nghost-%COMP%], tui-textarea._ios   [_nghost-%COMP%], textarea[_nghost-%COMP%]   tui-text-area._ios[_nghost-%COMP%], tui-text-area._ios   [_nghost-%COMP%]{padding-left:.8125rem}"],
    changeDetection: 0
  });
  return TuiTextfieldComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiPrimitiveTextfieldModule = /*#__PURE__*/(() => {
  class TuiPrimitiveTextfieldModule {}
  TuiPrimitiveTextfieldModule.ɵfac = function TuiPrimitiveTextfieldModule_Factory(t) {
    return new (t || TuiPrimitiveTextfieldModule)();
  };
  TuiPrimitiveTextfieldModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiPrimitiveTextfieldModule
  });
  TuiPrimitiveTextfieldModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, fesm2022_forms/* FormsModule */.YN, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiMaskAccessorModule, TuiFocusableModule, taiga_ui_core_directives_wrapper/* TuiWrapperModule */.E, taiga_ui_core_components_svg/* TuiSvgModule */.vl, TuiTooltipModule, TuiAutofilledModule]]
  });
  return TuiPrimitiveTextfieldModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * @deprecated:
 * use {@link TUI_TEXTFIELD_DEFAULT_OPTIONS}
 */
const TUI_PRIMITIVE_TEXTFIELD_DEFAULT_OPTIONS = (/* unused pure expression or super */ null && (TUI_TEXTFIELD_DEFAULT_OPTIONS));
/**
 * @deprecated:
 * use {@link TUI_TEXTFIELD_OPTIONS}
 */
const TUI_PRIMITIVE_TEXTFIELD_OPTIONS = (/* unused pure expression or super */ null && (TUI_TEXTFIELD_OPTIONS$1));
/**
 * @deprecated:
 * use {@link tuiTextfieldOptionsProvider}
 */
const tuiPrimitiveTextfieldOptionsProvider = (/* unused pure expression or super */ null && (tuiTextfieldOptionsProvider));

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-primitive-textfield.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-notification.js
var taiga_ui_core_components_notification = __webpack_require__(8821);
// EXTERNAL MODULE: ./node_modules/@ng-web-apis/common/fesm2015/ng-web-apis-common.js
var ng_web_apis_common = __webpack_require__(3864);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-overscroll.js








/**
 * Directive to isolate scrolling, i.e. prevent body scroll behind modal dialog
 */
let TuiOverscrollDirective = /*#__PURE__*/(() => {
  class TuiOverscrollDirective {
    constructor({
      nativeElement
    }, zone, destroy$) {
      this.mode = 'scroll';
      (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(nativeElement, 'wheel', {
        passive: false
      }).pipe((0,filter/* filter */.p)(() => this.enabled), (0,taiga_ui_cdk_observables/* tuiZonefree */.rB)(zone), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(event => {
        this.processEvent(event, !!event.deltaY, event.deltaY ? event.deltaY < 0 : event.deltaX < 0);
      });
      (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(nativeElement, 'touchstart', {
        passive: true
      }).pipe((0,operators_switchMap/* switchMap */.n)(({
        touches
      }) => {
        let {
          clientX,
          clientY
        } = touches[0];
        let deltaX = 0;
        let deltaY = 0;
        let vertical;
        return (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(nativeElement, 'touchmove', {
          passive: false
        }).pipe((0,filter/* filter */.p)(() => this.enabled), (0,tap/* tap */.M)(event => {
          // We have to have it in tap instead of subscribe due to variables in closure
          const changedTouch = event.changedTouches[0];
          deltaX = clientX - changedTouch.clientX;
          deltaY = clientY - changedTouch.clientY;
          clientX = changedTouch.clientX;
          clientY = changedTouch.clientY;
          if (vertical === undefined) {
            vertical = Math.abs(deltaY) > Math.abs(deltaX);
          }
          this.processEvent(event, vertical, vertical ? deltaY < 0 : deltaX < 0);
        }));
      }), (0,taiga_ui_cdk_observables/* tuiZonefree */.rB)(zone), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe();
    }
    get enabled() {
      return this.mode !== 'none';
    }
    get overscrollBehavior() {
      return this.enabled ? 'contain' : null;
    }
    processEvent(event, vertical, negative) {
      var _a;
      const {
        target,
        currentTarget,
        cancelable
      } = event;
      if (!cancelable || !(0,taiga_ui_cdk_utils_dom/* tuiIsElement */.ru)(target) || ((_a = target) === null || _a === void 0 ? void 0 : _a.type) === 'range') {
        return;
      }
      // This is all what's needed in Chrome/Firefox thanks to CSS overscroll-behavior
      if (this.mode === 'all' && (vertical && !currentTarget.contains((0,taiga_ui_cdk_utils_dom/* tuiGetScrollParent */.kI)(target)) || !vertical && !currentTarget.contains((0,taiga_ui_cdk_utils_dom/* tuiGetScrollParent */.kI)(target, false)))) {
        event.preventDefault();
        return;
      }
      // This is Safari/IE/Edge fallback
      if (vertical && (negative && !(0,taiga_ui_cdk_utils_dom/* tuiCanScroll */.qO)(target, currentTarget, true, false) || !negative && !(0,taiga_ui_cdk_utils_dom/* tuiCanScroll */.qO)(target, currentTarget, true, true))) {
        event.preventDefault();
        return;
      }
      if (!vertical && (negative && !(0,taiga_ui_cdk_utils_dom/* tuiCanScroll */.qO)(target, currentTarget, false, false) || !negative && !(0,taiga_ui_cdk_utils_dom/* tuiCanScroll */.qO)(target, currentTarget, false, true))) {
        event.preventDefault();
      }
    }
  }
  TuiOverscrollDirective.ɵfac = function TuiOverscrollDirective_Factory(t) {
    return new (t || TuiOverscrollDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2));
  };
  TuiOverscrollDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiOverscrollDirective,
    selectors: [["", "tuiOverscroll", ""]],
    hostVars: 2,
    hostBindings: function TuiOverscrollDirective_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵstyleProp"]("overscroll-behavior", ctx.overscrollBehavior);
      }
    },
    inputs: {
      mode: [core_mjs_["ɵɵInputFlags"].None, "tuiOverscroll", "mode"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])]
  });
  return TuiOverscrollDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiOverscrollModule = /*#__PURE__*/(() => {
  class TuiOverscrollModule {}
  TuiOverscrollModule.ɵfac = function TuiOverscrollModule_Factory(t) {
    return new (t || TuiOverscrollModule)();
  };
  TuiOverscrollModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiOverscrollModule
  });
  TuiOverscrollModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiOverscrollModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-overscroll.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-components-dropdown-host.js




/**
 * Service for displaying dropdown portals
 */
const taiga_ui_cdk_components_dropdown_host_c0 = ["*"];
let TuiDropdownPortalService = /*#__PURE__*/(() => {
  class TuiDropdownPortalService extends taiga_ui_cdk_abstract/* AbstractTuiPortalService */._g {}
  TuiDropdownPortalService.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiDropdownPortalService_BaseFactory;
    return function TuiDropdownPortalService_Factory(t) {
      return (ɵTuiDropdownPortalService_BaseFactory || (ɵTuiDropdownPortalService_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiDropdownPortalService)))(t || TuiDropdownPortalService);
    };
  })();
  TuiDropdownPortalService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiDropdownPortalService,
    factory: TuiDropdownPortalService.ɵfac,
    providedIn: 'root'
  });
  return TuiDropdownPortalService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Host element for dynamically created portals, for example using {@link TuiDropdownDirective}.
 */
let TuiDropdownHostComponent = /*#__PURE__*/(() => {
  class TuiDropdownHostComponent extends taiga_ui_cdk_abstract/* AbstractTuiPortalHostComponent */.kG {}
  TuiDropdownHostComponent.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiDropdownHostComponent_BaseFactory;
    return function TuiDropdownHostComponent_Factory(t) {
      return (ɵTuiDropdownHostComponent_BaseFactory || (ɵTuiDropdownHostComponent_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiDropdownHostComponent)))(t || TuiDropdownHostComponent);
    };
  })();
  TuiDropdownHostComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDropdownHostComponent,
    selectors: [["tui-dropdown-host"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: taiga_ui_cdk_abstract/* AbstractTuiPortalService */._g,
      useExisting: TuiDropdownPortalService
    },
    // TODO: Remove in 4.0
    {
      provide: taiga_ui_cdk_abstract/* AbstractTuiPortalHostComponent */.kG,
      useExisting: TuiDropdownHostComponent
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: taiga_ui_cdk_components_dropdown_host_c0,
    decls: 3,
    vars: 0,
    consts: [["viewContainer", ""]],
    template: function TuiDropdownHostComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵprojection"](0);
        core_mjs_["ɵɵelementContainer"](1, null, 0);
      }
    },
    styles: ["[_nghost-%COMP%]{position:relative;z-index:0;display:block;height:100%}[_nghost-%COMP%]:before{content:\"\";display:block;overflow:hidden}.t-position-fixed-offset[_ngcontent-%COMP%]{position:fixed;left:0;top:0;pointer-events:none;visibility:hidden;width:100%;height:100%}"],
    changeDetection: 0
  });
  return TuiDropdownHostComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownHostModule = /*#__PURE__*/(() => {
  class TuiDropdownHostModule {}
  TuiDropdownHostModule.ɵfac = function TuiDropdownHostModule_Factory(t) {
    return new (t || TuiDropdownHostModule)();
  };
  TuiDropdownHostModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDropdownHostModule
  });
  TuiDropdownHostModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiDropdownHostModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-components-dropdown-host.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/throttleTime.js + 1 modules
var throttleTime = __webpack_require__(3386);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-utils-dom.js
var taiga_ui_core_utils_dom = __webpack_require__(365);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-components-scroll-controls.js












function TuiScrollControlsComponent_ng_container_0_div_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 3);
    core_mjs_["ɵɵelement"](1, "div", 4);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const bars_r1 = core_mjs_["ɵɵnextContext"]().ngIf;
    core_mjs_["ɵɵclassProp"]("t-bar_has-horizontal", bars_r1[1]);
  }
}
function TuiScrollControlsComponent_ng_container_0_div_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 5);
    core_mjs_["ɵɵelement"](1, "div", 6);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const bars_r1 = core_mjs_["ɵɵnextContext"]().ngIf;
    core_mjs_["ɵɵclassProp"]("t-bar_has-vertical", bars_r1[0]);
  }
}
function TuiScrollControlsComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiScrollControlsComponent_ng_container_0_div_1_Template, 2, 2, "div", 1)(2, TuiScrollControlsComponent_ng_container_0_div_2_Template, 2, 2, "div", 2);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const bars_r1 = ctx.ngIf;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", bars_r1[0]);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", bars_r1[1]);
  }
}
const MIN_WIDTH = 24;
function getOffsetVertical({
  clientY
}, {
  top,
  height
}) {
  return (clientY - top) / height;
}
function getOffsetHorizontal({
  clientX
}, {
  left,
  width
}) {
  return (clientX - left) / width;
}
let TuiScrollbarDirective = /*#__PURE__*/(() => {
  class TuiScrollbarDirective {
    constructor(zone, destroy$, animationFrame$, container, doc, el) {
      this.container = container;
      this.doc = doc;
      this.el = el;
      this.tuiScrollbar = 'vertical';
      const {
        nativeElement
      } = this.el;
      const mousedown$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(nativeElement, 'mousedown');
      const mousemove$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.doc, 'mousemove');
      const mouseup$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.doc, 'mouseup');
      const mousedownWrapper$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.wrapper, 'mousedown');
      (0,merge/* merge */.h)(mousedownWrapper$.pipe((0,operators_map/* map */.T)(event => this.getScrolled(event, 0.5, 0.5))), mousedown$.pipe((0,operators_switchMap/* switchMap */.n)(event => {
        const rect = nativeElement.getBoundingClientRect();
        const vertical = getOffsetVertical(event, rect);
        const horizontal = getOffsetHorizontal(event, rect);
        return mousemove$.pipe((0,operators_map/* map */.T)(event => this.getScrolled(event, vertical, horizontal)), (0,takeUntil/* takeUntil */.Q)(mouseup$));
      }))).pipe((0,taiga_ui_cdk_observables/* tuiZonefree */.rB)(zone), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(([scrollTop, scrollLeft]) => {
        if (this.tuiScrollbar === 'vertical') {
          this.element.scrollTop = scrollTop;
        } else {
          this.element.scrollLeft = scrollLeft;
        }
      });
      (0,merge/* merge */.h)(animationFrame$.pipe((0,throttleTime/* throttleTime */.c)(taiga_ui_cdk_constants/* POLLING_TIME */.cZ)), (0,taiga_ui_cdk_observables/* tuiScrollFrom */.A5)(this.element)).pipe((0,taiga_ui_cdk_observables/* tuiZonefree */.rB)(zone), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(() => {
        if (this.tuiScrollbar === 'vertical') {
          nativeElement.style.top = `${this.thumb * 100}%`;
          nativeElement.style.height = `${this.view * 100}%`;
        } else {
          nativeElement.style.left = `${this.thumb * 100}%`;
          nativeElement.style.width = `${this.view * 100}%`;
        }
      });
    }
    get wrapper() {
      return this.el.nativeElement.parentElement;
    }
    get scrolled() {
      const {
        scrollTop,
        scrollHeight,
        clientHeight,
        scrollLeft,
        scrollWidth,
        clientWidth
      } = this.element;
      return this.tuiScrollbar === 'vertical' ? scrollTop / (scrollHeight - clientHeight) : scrollLeft / (scrollWidth - clientWidth);
    }
    get compensation() {
      const {
        clientHeight,
        scrollHeight,
        clientWidth,
        scrollWidth
      } = this.element;
      if (clientHeight * clientHeight / scrollHeight > MIN_WIDTH && this.tuiScrollbar === 'vertical' || clientWidth * clientWidth / scrollWidth > MIN_WIDTH && this.tuiScrollbar === 'horizontal') {
        return 0;
      }
      return this.tuiScrollbar === 'vertical' ? MIN_WIDTH / clientHeight : MIN_WIDTH / clientWidth;
    }
    get thumb() {
      const compensation = this.compensation || this.view;
      return this.scrolled * (1 - compensation);
    }
    get view() {
      const {
        clientHeight,
        scrollHeight,
        clientWidth,
        scrollWidth
      } = this.element;
      return this.tuiScrollbar === 'vertical' ? Math.ceil(clientHeight / scrollHeight * 100) / 100 : Math.ceil(clientWidth / scrollWidth * 100) / 100;
    }
    get element() {
      return this.container.nativeElement;
    }
    getScrolled({
      clientY,
      clientX
    }, offsetVertical, offsetHorizontal) {
      const {
        offsetHeight,
        offsetWidth
      } = this.el.nativeElement;
      const {
        top,
        left,
        width,
        height
      } = this.wrapper.getBoundingClientRect();
      const maxTop = this.element.scrollHeight - height;
      const maxLeft = this.element.scrollWidth - width;
      const scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);
      const scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);
      return [maxTop * scrolledTop, maxLeft * scrolledLeft];
    }
  }
  TuiScrollbarDirective.ɵfac = function TuiScrollbarDirective_Factory(t) {
    return new (t || TuiScrollbarDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* ANIMATION_FRAME */.dJ), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_SCROLL_REF */.HF), core_mjs_["ɵɵdirectiveInject"](common_mjs_.DOCUMENT), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
  };
  TuiScrollbarDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiScrollbarDirective,
    selectors: [["", "tuiScrollbar", ""]],
    inputs: {
      tuiScrollbar: "tuiScrollbar"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])]
  });
  return TuiScrollbarDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiScrollControlsComponent = /*#__PURE__*/(() => {
  class TuiScrollControlsComponent {
    constructor(zone, scrollRef, animationFrame$) {
      this.zone = zone;
      this.scrollRef = scrollRef;
      this.animationFrame$ = animationFrame$;
      this.refresh$ = this.animationFrame$.pipe((0,throttleTime/* throttleTime */.c)(300), (0,operators_map/* map */.T)(() => this.scrollbars), (0,operators_startWith/* startWith */.Z)([false, false]), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)((a, b) => a[0] === b[0] && a[1] === b[1]), (0,taiga_ui_cdk_observables/* tuiZoneOptimized */.sX)(this.zone));
    }
    get scrollbars() {
      const {
        clientHeight,
        scrollHeight,
        clientWidth,
        scrollWidth
      } = this.scrollRef.nativeElement;
      return [Math.ceil(clientHeight / scrollHeight * 100) < 100, Math.ceil(clientWidth / scrollWidth * 100) < 100];
    }
  }
  TuiScrollControlsComponent.ɵfac = function TuiScrollControlsComponent_Factory(t) {
    return new (t || TuiScrollControlsComponent)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_SCROLL_REF */.HF), core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* ANIMATION_FRAME */.dJ));
  };
  TuiScrollControlsComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiScrollControlsComponent,
    selectors: [["tui-scroll-controls"]],
    decls: 2,
    vars: 3,
    consts: [[4, "ngIf"], ["class", "t-bar t-bar_vertical", 3, "t-bar_has-horizontal", 4, "ngIf"], ["class", "t-bar t-bar_horizontal", 3, "t-bar_has-vertical", 4, "ngIf"], [1, "t-bar", "t-bar_vertical"], ["tuiScrollbar", "vertical", 1, "t-thumb"], [1, "t-bar", "t-bar_horizontal"], ["tuiScrollbar", "horizontal", 1, "t-thumb"]],
    template: function TuiScrollControlsComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵtemplate"](0, TuiScrollControlsComponent_ng_container_0_Template, 3, 2, "ng-container", 0);
        core_mjs_["ɵɵpipe"](1, "async");
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](1, 1, ctx.refresh$));
      }
    },
    dependencies: [common_mjs_.NgIf, TuiScrollbarDirective, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{position:-webkit-sticky;position:sticky;top:0;left:0;z-index:1;min-width:calc(100% - 1px);min-height:calc(100% - 1px);max-width:calc(100% - 1px);max-height:calc(100% - 1px);float:left;-webkit-margin-end:calc(-100% + 1px);margin-inline-end:calc(-100% + 1px);pointer-events:none}.t-bar[_ngcontent-%COMP%]{position:absolute;right:0;bottom:0;pointer-events:auto;animation:tuiFadeIn var(--tui-duration, .3s) ease-in-out}.t-bar_vertical[_ngcontent-%COMP%]{top:0;width:.875rem}.t-bar_horizontal[_ngcontent-%COMP%]{left:0;height:.875rem}.t-bar_has-horizontal[_ngcontent-%COMP%]{bottom:.5rem}.t-bar_has-vertical[_ngcontent-%COMP%]{right:.5rem}.t-thumb[_ngcontent-%COMP%]{position:absolute;border-radius:6.25rem;border:.25rem solid transparent;cursor:pointer;pointer-events:auto;-webkit-user-select:none;-moz-user-select:none;user-select:none;background:currentColor;background-clip:content-box;box-sizing:border-box;transition:all var(--tui-duration, .3s) ease-in-out;transition-property:width,height,opacity;opacity:.2}.t-thumb[_ngcontent-%COMP%]:hover{opacity:.24}.t-thumb[_ngcontent-%COMP%]:active{opacity:.48}.t-bar_vertical[_ngcontent-%COMP%]   .t-thumb[_ngcontent-%COMP%]{right:0;width:.75rem;min-height:1.25rem}.t-bar_vertical[_ngcontent-%COMP%]:hover   .t-thumb[_ngcontent-%COMP%], .t-bar_vertical[_ngcontent-%COMP%]   .t-thumb[_ngcontent-%COMP%]:active{width:.875rem}.t-bar_horizontal[_ngcontent-%COMP%]   .t-thumb[_ngcontent-%COMP%]{bottom:0;height:.75rem;min-width:1.25rem}.t-bar_horizontal[_ngcontent-%COMP%]:hover   .t-thumb[_ngcontent-%COMP%], .t-bar_horizontal[_ngcontent-%COMP%]   .t-thumb[_ngcontent-%COMP%]:active{height:.875rem}"],
    changeDetection: 0
  });
  return TuiScrollControlsComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const SCROLL_REF_SELECTOR = '[tuiScrollRef]';
let TuiScrollRefDirective = /*#__PURE__*/(() => {
  class TuiScrollRefDirective {}
  TuiScrollRefDirective.ɵfac = function TuiScrollRefDirective_Factory(t) {
    return new (t || TuiScrollRefDirective)();
  };
  TuiScrollRefDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiScrollRefDirective,
    selectors: [["", "tuiScrollRef", ""]],
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: taiga_ui_cdk_tokens/* TUI_SCROLL_REF */.HF,
      useExisting: core_mjs_.ElementRef
    }])]
  });
  return TuiScrollRefDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiScrollControlsModule = /*#__PURE__*/(() => {
  class TuiScrollControlsModule {}
  TuiScrollControlsModule.ɵfac = function TuiScrollControlsModule_Factory(t) {
    return new (t || TuiScrollControlsModule)();
  };
  TuiScrollControlsModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiScrollControlsModule
  });
  TuiScrollControlsModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule]]
  });
  return TuiScrollControlsModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-components-scroll-controls.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-browser.js
var taiga_ui_cdk_utils_browser = __webpack_require__(7969);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-scrollbar.js









/** @deprecated import from `@taiga-ui/cdk` instead */
const taiga_ui_core_components_scrollbar_c0 = ["*"];
function TuiScrollbarComponent_tui_scroll_controls_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-scroll-controls", 2);
  }
}
const taiga_ui_core_components_scrollbar_SCROLL_REF_SELECTOR = '[tuiScrollRef]';
/** @deprecated import from `@taiga-ui/cdk` instead */
let taiga_ui_core_components_scrollbar_TuiScrollRefDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiScrollRefDirective {}
  TuiScrollRefDirective.ɵfac = function TuiScrollRefDirective_Factory(t) {
    return new (t || TuiScrollRefDirective)();
  };
  TuiScrollRefDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiScrollRefDirective,
    selectors: [["", "tuiScrollRef", ""]],
    features: [i0.ɵɵProvidersFeature([{
      provide: TUI_SCROLL_REF,
      useExisting: ElementRef
    }])]
  });
  return TuiScrollRefDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiScrollableDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiScrollableDirective {
    constructor(el) {
      this.el = el;
    }
    ngOnInit() {
      this.el.nativeElement.dispatchEvent(new CustomEvent(TUI_SCROLLABLE, {
        bubbles: true,
        detail: this.el.nativeElement
      }));
    }
  }
  TuiScrollableDirective.ɵfac = function TuiScrollableDirective_Factory(t) {
    return new (t || TuiScrollableDirective)(i0.ɵɵdirectiveInject(ElementRef));
  };
  TuiScrollableDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiScrollableDirective,
    selectors: [["", "tuiScrollable", ""]]
  });
  return TuiScrollableDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

// TODO: Remove all legacy code in 4.0
let TuiScrollbarComponent = /*#__PURE__*/(() => {
  class TuiScrollbarComponent {
    constructor(cssRef, el, userAgent, isIos) {
      this.cssRef = cssRef;
      this.el = el;
      this.userAgent = userAgent;
      this.isIos = isIos;
      this.isLegacy = !this.cssRef.supports('position', 'sticky') || (0,taiga_ui_cdk_utils_browser/* tuiIsFirefox */.ce)(this.userAgent) && !this.cssRef.supports('scrollbar-width', 'none');
      this.hidden = false;
      this.browserScrollRef = new core_mjs_.ElementRef(this.el.nativeElement);
    }
    get delegated() {
      return this.browserScrollRef.nativeElement !== this.el.nativeElement;
    }
    get showScrollbars() {
      return !this.hidden && !this.isIos && (!this.isLegacy || this.delegated);
    }
    get showNative() {
      return this.isLegacy && !this.hidden && !this.delegated;
    }
    onScrollable(element) {
      this.browserScrollRef.nativeElement = element;
    }
    scrollIntoView(detail) {
      var _a;
      if (this.delegated) {
        return;
      }
      const {
        nativeElement
      } = this.browserScrollRef;
      const {
        offsetTop,
        offsetLeft
      } = (0,taiga_ui_cdk_utils_dom/* tuiGetElementOffset */.aT)(nativeElement, detail);
      const {
        clientHeight,
        clientWidth
      } = nativeElement;
      const {
        offsetHeight,
        offsetWidth
      } = detail;
      const scrollTop = offsetTop + offsetHeight / 2 - clientHeight / 2;
      const scrollLeft = offsetLeft + offsetWidth / 2 - clientWidth / 2;
      // ?. for our clients on Windows XP and Chrome 49
      (_a = nativeElement.scrollTo) === null || _a === void 0 ? void 0 : _a.call(nativeElement, scrollLeft, scrollTop);
    }
  }
  TuiScrollbarComponent.ɵfac = function TuiScrollbarComponent_Factory(t) {
    return new (t || TuiScrollbarComponent)(core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* CSS */.Ks), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* USER_AGENT */._O), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_IOS */.mg));
  };
  TuiScrollbarComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiScrollbarComponent,
    selectors: [["tui-scrollbar"]],
    hostVars: 2,
    hostBindings: function TuiScrollbarComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("tui-scrollable.stop", function TuiScrollbarComponent_tui_scrollable_stop_HostBindingHandler($event) {
          return ctx.onScrollable($event.detail);
        })("tui-scroll-into-view.stop", function TuiScrollbarComponent_tui_scroll_into_view_stop_HostBindingHandler($event) {
          return ctx.scrollIntoView($event.detail);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("_legacy", ctx.showNative);
      }
    },
    inputs: {
      hidden: "hidden"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: taiga_ui_cdk_tokens/* TUI_SCROLL_REF */.HF,
      deps: [TuiScrollbarComponent],
      useFactory: ({
        browserScrollRef
      }) => browserScrollRef
    }])],
    ngContentSelectors: taiga_ui_core_components_scrollbar_c0,
    decls: 3,
    vars: 3,
    consts: [["class", "t-bars", 4, "ngIf"], [1, "t-content"], [1, "t-bars"]],
    template: function TuiScrollbarComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵtemplate"](0, TuiScrollbarComponent_tui_scroll_controls_0_Template, 1, 0, "tui-scroll-controls", 0);
        core_mjs_["ɵɵelementStart"](1, "div", 1);
        core_mjs_["ɵɵprojection"](2);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showScrollbars);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵclassProp"]("t-content_delegated", ctx.delegated);
      }
    },
    dependencies: [TuiScrollControlsComponent, common_mjs_.NgIf],
    styles: ["[_nghost-%COMP%]{position:relative;display:flex;isolation:isolate;overflow:auto}[_nghost-%COMP%]:not(._legacy){scrollbar-width:none;-ms-overflow-style:none}[_nghost-%COMP%]:not(._legacy)::-webkit-scrollbar, [_nghost-%COMP%]:not(._legacy)::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}._legacy[_nghost-%COMP%]{overflow:overlay}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm){._legacy[_nghost-%COMP%]::-webkit-scrollbar, ._legacy[_nghost-%COMP%]::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:.375rem solid transparent}._legacy[_nghost-%COMP%]::-webkit-scrollbar{background-color:transparent}._legacy[_nghost-%COMP%]::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}._legacy[_nghost-%COMP%]::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}._legacy[_nghost-%COMP%]::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}.t-content[_ngcontent-%COMP%]{isolation:isolate;flex:1;flex-basis:auto;width:100%;height:-webkit-max-content;height:max-content}.t-content_delegated[_ngcontent-%COMP%]{height:100%}.t-bars[_ngcontent-%COMP%]{color:var(--tui-text-01)}"],
    changeDetection: 0
  });
  return TuiScrollbarComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiScrollbarModule = /*#__PURE__*/(() => {
  class TuiScrollbarModule {}
  TuiScrollbarModule.ɵfac = function TuiScrollbarModule_Factory(t) {
    return new (t || TuiScrollbarModule)();
  };
  TuiScrollbarModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiScrollbarModule
  });
  TuiScrollbarModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, TuiScrollControlsModule]]
  });
  return TuiScrollbarModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-scrollbar.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-directives-dropdown.js
























/**
 * A component to display a dropdown
 */
const taiga_ui_core_directives_dropdown_c0 = a0 => ({
  $implicit: a0
});
function TuiDropdownComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 4);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const text_r2 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r2, " ");
  }
}
const TUI_DROPDOWN_COMPONENT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => TuiDropdownComponent);
let TuiDropdownOpenDirective = /*#__PURE__*/(() => {
  class TuiDropdownOpenDirective {
    constructor() {
      this.tuiDropdownOpen = false;
      this.tuiDropdownOpenChange = new core_mjs_.EventEmitter();
    }
    update(open) {
      this.tuiDropdownOpen = open;
      this.tuiDropdownOpenChange.emit(open);
    }
    ngOnChanges() {
      var _a;
      (_a = this.dropdown) === null || _a === void 0 ? void 0 : _a.toggle(this.tuiDropdownOpen);
    }
  }
  TuiDropdownOpenDirective.ɵfac = function TuiDropdownOpenDirective_Factory(t) {
    return new (t || TuiDropdownOpenDirective)();
  };
  TuiDropdownOpenDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownOpenDirective,
    selectors: [["", "tuiDropdownOpen", ""], ["", "tuiDropdownOpenChange", ""]],
    inputs: {
      tuiDropdownOpen: "tuiDropdownOpen"
    },
    outputs: {
      tuiDropdownOpenChange: "tuiDropdownOpenChange"
    },
    features: [core_mjs_["ɵɵNgOnChangesFeature"]]
  });
  return TuiDropdownOpenDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownDirective = /*#__PURE__*/(() => {
  class TuiDropdownDirective {
    constructor(destroy$, el, dropdown, injector, dropdownService, open) {
      this.el = el;
      this.dropdown = dropdown;
      this.injector = injector;
      this.dropdownService = dropdownService;
      this.open = open;
      this.refresh$ = new internal_Subject/* Subject */.B();
      this.dropdownBoxRef = null;
      this.type = 'dropdown';
      this.component = new tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS(this.dropdown, this.injector);
      if (this.open && !this.open.dropdown) {
        this.open.dropdown = this;
      } else {
        this.open = null;
      }
      // Ignore multiple change detection triggers at the same frame
      this.refresh$.pipe((0,throttleTime/* throttleTime */.c)(0), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(() => {
        var _a, _b;
        (_a = this.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.changeDetectorRef.detectChanges();
        (_b = this.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.changeDetectorRef.markForCheck();
      });
    }
    get position() {
      return (0,taiga_ui_core_utils_dom/* tuiCheckFixedPosition */.m0)(this.el.nativeElement) ? 'fixed' : 'absolute';
    }
    ngAfterViewChecked() {
      this.refresh$.next();
    }
    ngAfterViewInit() {
      if (this.open) {
        this.toggle(this.open.tuiDropdownOpen);
      }
    }
    ngOnChanges() {
      if (!this.content) {
        this.toggle(false);
      }
    }
    ngOnDestroy() {
      this.toggle(false);
      if (this.open) {
        this.open.dropdown = undefined;
      }
    }
    getClientRect() {
      return this.el.nativeElement.getBoundingClientRect();
    }
    toggle(show) {
      var _a, _b;
      if (show && this.content && !this.dropdownBoxRef) {
        this.dropdownBoxRef = this.dropdownService.add(this.component);
        (_a = this.open) === null || _a === void 0 ? void 0 : _a.update(true);
      } else if (!show && this.dropdownBoxRef) {
        this.dropdownService.remove(this.dropdownBoxRef);
        this.dropdownBoxRef = null;
        (_b = this.open) === null || _b === void 0 ? void 0 : _b.update(false);
      }
    }
  }
  TuiDropdownDirective.ɵfac = function TuiDropdownDirective_Factory(t) {
    return new (t || TuiDropdownDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](TUI_DROPDOWN_COMPONENT), core_mjs_["ɵɵdirectiveInject"](core_mjs_.INJECTOR), core_mjs_["ɵɵdirectiveInject"](TuiDropdownPortalService), core_mjs_["ɵɵdirectiveInject"](TuiDropdownOpenDirective, 8));
  };
  TuiDropdownDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownDirective,
    selectors: [["", "tuiDropdown", "", 5, "ng-container"]],
    inputs: {
      content: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdown", "content"]
    },
    exportAs: ["tuiDropdown"],
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew, (0,taiga_ui_core_abstract/* tuiAsRectAccessor */.yq)(TuiDropdownDirective), (0,taiga_ui_core_abstract/* tuiAsVehicle */.XW)(TuiDropdownDirective)]), core_mjs_["ɵɵNgOnChangesFeature"]]
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiDropdownDirective.prototype, "position", null);
  return TuiDropdownDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/** Default values for hint options */
const TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS = {
  showDelay: 200,
  hideDelay: 500
};
/**
 * Default parameters for dropdown hover directive
 */
const TUI_DROPDOWN_HOVER_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS);
function tuiDropdownHoverOptionsProvider(options) {
  return tuiProvideOptions(TUI_DROPDOWN_HOVER_OPTIONS, options, TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS);
}
let TuiDropdownHoverDirective = /*#__PURE__*/(() => {
  class TuiDropdownHoverDirective extends taiga_ui_core_abstract/* TuiDriver */.Xu {
    constructor(hovered$, options, parentHover) {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.hovered$ = hovered$;
      this.options = options;
      this.parentHover = parentHover;
      this.toggle$ = new internal_Subject/* Subject */.B();
      this.stream$ = (0,merge/* merge */.h)(this.toggle$, this.hovered$).pipe((0,operators_switchMap/* switchMap */.n)(visible => (0,of.of)(visible).pipe((0,delay/* delay */.c)(visible ? this.showDelay : this.hideDelay))), (0,tap/* tap */.M)(visible => {
        this.hovered = visible;
      }), (0,share/* share */.u)());
      this.showDelay = this.options.showDelay;
      this.hideDelay = this.options.hideDelay;
      this.hovered = false;
      this.type = 'dropdown';
    }
    toggle(visible) {
      var _a;
      (_a = this.parentHover) === null || _a === void 0 ? void 0 : _a.toggle(visible);
      this.toggle$.next(visible);
    }
  }
  TuiDropdownHoverDirective.ɵfac = function TuiDropdownHoverDirective_Factory(t) {
    return new (t || TuiDropdownHoverDirective)(core_mjs_["ɵɵdirectiveInject"](TuiHoveredService), core_mjs_["ɵɵdirectiveInject"](TUI_DROPDOWN_HOVER_OPTIONS), core_mjs_["ɵɵdirectiveInject"](TuiDropdownHoverDirective, 12));
  };
  TuiDropdownHoverDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownHoverDirective,
    selectors: [["", "tuiDropdownHover", "", 5, "ng-container"]],
    inputs: {
      showDelay: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownShowDelay", "showDelay"],
      hideDelay: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownHideDelay", "hideDelay"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_abstract/* tuiAsDriver */.Np)(TuiDropdownHoverDirective), TuiHoveredService]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiDropdownHoverDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/** Default values for dropdown options */
const TUI_DROPDOWN_DEFAULT_OPTIONS = {
  align: 'left',
  direction: null,
  limitWidth: 'auto',
  maxHeight: 400,
  minHeight: 80,
  offset: 4,
  appearance: ''
};
/**
 * Default parameters for dropdown directive
 */
const TUI_DROPDOWN_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_DROPDOWN_DEFAULT_OPTIONS);
const tuiDropdownOptionsProvider = override => ({
  provide: TUI_DROPDOWN_OPTIONS,
  deps: [[new core_mjs_.Optional(), TuiDropdownOptionsDirective], [new core_mjs_.Optional(), new core_mjs_.SkipSelf(), TUI_DROPDOWN_OPTIONS]],
  useFactory: (0,taiga_ui_core_utils_miscellaneous/* tuiOverrideOptions */.tu)(override, TUI_DROPDOWN_DEFAULT_OPTIONS)
});
let TuiDropdownOptionsDirective = /*#__PURE__*/(() => {
  class TuiDropdownOptionsDirective {
    constructor(options) {
      this.options = options;
      this.align = this.options.align;
      this.appearance = this.options.appearance;
      this.direction = this.options.direction;
      this.limitWidth = this.options.limitWidth;
      this.minHeight = this.options.minHeight;
      this.maxHeight = this.options.maxHeight;
      this.offset = this.options.offset;
    }
  }
  TuiDropdownOptionsDirective.ɵfac = function TuiDropdownOptionsDirective_Factory(t) {
    return new (t || TuiDropdownOptionsDirective)(core_mjs_["ɵɵdirectiveInject"](TUI_DROPDOWN_OPTIONS, 4));
  };
  TuiDropdownOptionsDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownOptionsDirective,
    selectors: [["", "tuiDropdownAlign", ""], ["", "tuiDropdownAppearance", ""], ["", "tuiDropdownDirection", ""], ["", "tuiDropdownLimitWidth", ""], ["", "tuiDropdownMinHeight", ""], ["", "tuiDropdownMaxHeight", ""], ["", "tuiDropdownOffset", ""]],
    inputs: {
      align: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownAlign", "align"],
      appearance: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownAppearance", "appearance"],
      direction: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownDirection", "direction"],
      limitWidth: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownLimitWidth", "limitWidth"],
      minHeight: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownMinHeight", "minHeight"],
      maxHeight: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownMaxHeight", "maxHeight"],
      offset: [core_mjs_["ɵɵInputFlags"].None, "tuiDropdownOffset", "offset"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: TUI_DROPDOWN_OPTIONS,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiDropdownOptionsDirective)
    }])]
  });
  return TuiDropdownOptionsDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * @description:
 * This component is used to show template in a portal
 * using default style of white rounded box with a shadow
 */
let TuiDropdownComponent = /*#__PURE__*/(() => {
  class TuiDropdownComponent {
    constructor(visualViewportService, position$, destroy$, directive, animation, el, accessor, win, mode$, options, hoverDirective) {
      this.directive = directive;
      this.animation = animation;
      this.el = el;
      this.accessor = accessor;
      this.win = win;
      this.mode$ = mode$;
      this.options = options;
      this.hoverDirective = hoverDirective;
      position$.pipe((0,operators_map/* map */.T)(point => this.directive.position === 'fixed' ? visualViewportService.correct(point) : point), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(([top, left]) => {
        this.update(top, left);
      });
      this.updateWidth(this.accessor.getClientRect().width);
    }
    onHoveredChange(hovered) {
      var _a;
      (_a = this.hoverDirective) === null || _a === void 0 ? void 0 : _a.toggle(hovered);
    }
    onTopFocus() {
      this.moveFocusOutside(true);
    }
    onBottomFocus() {
      this.moveFocusOutside(false);
    }
    update(top, left) {
      var _a;
      const {
        style
      } = this.el.nativeElement;
      const {
        right
      } = this.el.nativeElement.getBoundingClientRect();
      const {
        maxHeight,
        minHeight,
        offset
      } = this.options;
      const {
        innerHeight
      } = this.win;
      const clientRect = (_a = this.el.nativeElement.offsetParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();
      const {
        position
      } = this.directive;
      const rect = this.accessor.getClientRect();
      const offsetX = position === 'fixed' ? 0 : -((clientRect === null || clientRect === void 0 ? void 0 : clientRect.left) || 0);
      const offsetY = position === 'fixed' ? 0 : -((clientRect === null || clientRect === void 0 ? void 0 : clientRect.top) || 0);
      top += offsetY;
      left += offsetX;
      const isIntersecting = left < rect.right && right > rect.left && top < offsetY + 2 * offset;
      const available = isIntersecting ? rect.top - 2 * offset : offsetY + innerHeight - top - offset;
      const sided = right <= rect.left || left >= rect.right;
      style.position = position;
      style.top = taiga_ui_cdk_utils_format_tuiPx(Math.max(top, offsetY + offset));
      style.left = taiga_ui_cdk_utils_format_tuiPx(left);
      style.maxHeight = sided ? `${maxHeight}px` : taiga_ui_cdk_utils_format_tuiPx(Math.min(maxHeight, Math.max(available, minHeight)));
      style.width = '';
      style.minWidth = '';
      this.updateWidth(rect.width);
    }
    updateWidth(width) {
      const {
        style
      } = this.el.nativeElement;
      switch (this.options.limitWidth) {
        case 'min':
          style.minWidth = taiga_ui_cdk_utils_format_tuiPx(width);
          break;
        case 'fixed':
          style.width = taiga_ui_cdk_utils_format_tuiPx(width);
          break;
        case 'auto':
          break;
      }
    }
    moveFocusOutside(previous) {
      const {
        nativeElement
      } = this.directive.el;
      const {
        ownerDocument
      } = nativeElement;
      const root = ownerDocument ? ownerDocument.body : nativeElement;
      let focusable = (0,taiga_ui_cdk_utils_focus/* tuiGetClosestFocusable */.km)({
        initial: nativeElement,
        root,
        previous
      });
      while (focusable !== null && nativeElement.contains(focusable)) {
        focusable = (0,taiga_ui_cdk_utils_focus/* tuiGetClosestFocusable */.km)({
          initial: focusable,
          root,
          previous
        });
      }
      focusable === null || focusable === void 0 ? void 0 : focusable.focus();
    }
  }
  TuiDropdownComponent.ɵfac = function TuiDropdownComponent_Factory(t) {
    return new (t || TuiDropdownComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_services/* TuiVisualViewportService */.yt), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_services/* TuiPositionService */.ZE), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](TuiDropdownDirective), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_ANIMATION_OPTIONS */.fx), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_abstract/* TuiRectAccessor */.cf), core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* WINDOW */.jf), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_MODE */.fL), core_mjs_["ɵɵdirectiveInject"](TUI_DROPDOWN_OPTIONS), core_mjs_["ɵɵdirectiveInject"](TuiDropdownHoverDirective, 8));
  };
  TuiDropdownComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDropdownComponent,
    selectors: [["tui-dropdown"]],
    hostVars: 2,
    hostBindings: function TuiDropdownComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("$.data-mode.attr", function TuiDropdownComponent___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵsyntheticHostProperty"]("@tuiDropdownAnimation", ctx.animation);
        core_mjs_["ɵɵattribute"]("data-appearance", ctx.options.appearance);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew, taiga_ui_core_services/* TuiPositionService */.ZE, (0,taiga_ui_core_abstract/* tuiPositionAccessorFor */.mI)('dropdown'), (0,taiga_ui_core_abstract/* tuiRectAccessorFor */.Z3)('dropdown', TuiDropdownDirective), taiga_ui_core_providers/* MODE_PROVIDER */.si])],
    decls: 5,
    vars: 4,
    consts: [["activeZone", "tuiActiveZone"], ["tuiActiveZone", "", "tuiOverscroll", "all", 1, "t-scroll", 3, "tuiHoveredChange"], ["tabindex", "0", 3, "focus"], ["class", "t-primitive", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-primitive"]],
    template: function TuiDropdownComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = core_mjs_["ɵɵgetCurrentView"]();
        core_mjs_["ɵɵelementStart"](0, "tui-scrollbar", 1, 0);
        core_mjs_["ɵɵlistener"]("tuiHoveredChange", function TuiDropdownComponent_Template_tui_scrollbar_tuiHoveredChange_0_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onHoveredChange($event));
        });
        core_mjs_["ɵɵelementStart"](2, "div", 2);
        core_mjs_["ɵɵlistener"]("focus", function TuiDropdownComponent_Template_div_focus_2_listener() {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onTopFocus());
        });
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](3, TuiDropdownComponent_div_3_Template, 2, 1, "div", 3);
        core_mjs_["ɵɵelementStart"](4, "div", 2);
        core_mjs_["ɵɵlistener"]("focus", function TuiDropdownComponent_Template_div_focus_4_listener() {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onBottomFocus());
        });
        core_mjs_["ɵɵelementEnd"]()();
      }
      if (rf & 2) {
        const activeZone_r3 = core_mjs_["ɵɵreference"](1);
        core_mjs_["ɵɵadvance"](3);
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.directive.content)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction1"](2, taiga_ui_core_directives_dropdown_c0, activeZone_r3));
      }
    },
    dependencies: [TuiScrollbarComponent, taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, TuiOverscrollDirective, TuiHoveredDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA],
    styles: ["[_nghost-%COMP%]{position:absolute;display:flex;box-shadow:var(--tui-shadow-dropdown);background:var(--tui-elevation-02);border-radius:var(--tui-radius-m);overflow:hidden;border:1px solid var(--tui-base-04);box-sizing:border-box;max-width:calc(100% - 8px);isolation:isolate;pointer-events:auto}.ng-animating[_nghost-%COMP%]{pointer-events:none}[_nghost-%COMP%]:not([style*=\"top\"]){visibility:hidden}[data-mode=onDark][_nghost-%COMP%]{--tui-text-01: var(--tui-text-01-night);--tui-clear: var(--tui-clear-inverse);background:#222;border:1px solid #808080}.t-scroll[_ngcontent-%COMP%]{flex-grow:1;max-width:100%}.t-primitive[_ngcontent-%COMP%]{padding:1rem}"],
    data: {
      animation: [tuiDropdownAnimation]
    }
  });
  return TuiDropdownComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function activeZoneFilter(target) {
  return !this.activeZone.contains(target);
}
const TAP_DELAY = 700;
const MOVE_THRESHOLD = 15;
let TuiDropdownContextDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDropdownContextDirective extends TuiDriver {
    constructor(activeZone, isIOS, isTouch) {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.activeZone = activeZone;
      this.isIOS = isIOS;
      this.isTouch = isTouch;
      this.stream$ = new Subject();
      this.currentRect = EMPTY_CLIENT_RECT;
      this.longTapTimeout = NaN;
      this.type = 'dropdown';
    }
    get userSelect() {
      return this.isTouch ? 'none' : null;
    }
    onContextMenu(x, y) {
      this.currentRect = tuiPointToClientRect(x, y);
      this.stream$.next(true);
    }
    closeDropdown() {
      this.stream$.next(false);
      this.currentRect = EMPTY_CLIENT_RECT;
    }
    onTouchMove(x, y) {
      if (this.isIOS && this.isTouch && this.currentRect !== EMPTY_CLIENT_RECT && Math.hypot(x - this.currentRect.x, y - this.currentRect.y) > MOVE_THRESHOLD) {
        this.onTouchEnd();
      }
    }
    onTouchStart(x, y) {
      if (!this.isIOS || !this.isTouch || this.currentRect !== EMPTY_CLIENT_RECT) {
        return;
      }
      this.currentRect = tuiPointToClientRect(x, y);
      this.longTapTimeout = setTimeout(() => {
        this.stream$.next(true);
      }, TAP_DELAY);
    }
    onTouchEnd() {
      if (this.isIOS && this.isTouch) {
        clearTimeout(this.longTapTimeout);
      }
    }
    getClientRect() {
      return this.currentRect;
    }
  }
  TuiDropdownContextDirective.ɵfac = function TuiDropdownContextDirective_Factory(t) {
    return new (t || TuiDropdownContextDirective)(i0.ɵɵdirectiveInject(TuiActiveZoneDirective), i0.ɵɵdirectiveInject(TUI_IS_IOS), i0.ɵɵdirectiveInject(TUI_TOUCH_SUPPORTED));
  };
  TuiDropdownContextDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiDropdownContextDirective,
    selectors: [["", "tuiDropdown", "", "tuiDropdownContext", ""]],
    hostVars: 6,
    hostBindings: function TuiDropdownContextDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵlistener("contextmenu.prevent.stop", function TuiDropdownContextDirective_contextmenu_prevent_stop_HostBindingHandler($event) {
          return ctx.onContextMenu($event.clientX, $event.clientY);
        })("click.silent", function TuiDropdownContextDirective_click_silent_HostBindingHandler($event) {
          return ctx.closeDropdown($event.target);
        }, false, i0.ɵɵresolveDocument)("contextmenu.capture.silent", function TuiDropdownContextDirective_contextmenu_capture_silent_HostBindingHandler($event) {
          return ctx.closeDropdown($event.target);
        }, false, i0.ɵɵresolveDocument)("keydown.esc", function TuiDropdownContextDirective_keydown_esc_HostBindingHandler($event) {
          return ctx.closeDropdown($event.currentTarget);
        }, false, i0.ɵɵresolveDocument)("touchmove.silent.passive", function TuiDropdownContextDirective_touchmove_silent_passive_HostBindingHandler($event) {
          return ctx.onTouchMove($event.touches[0].clientX, $event.touches[0].clientY);
        })("touchstart.silent.passive", function TuiDropdownContextDirective_touchstart_silent_passive_HostBindingHandler($event) {
          return ctx.onTouchStart($event.touches[0].clientX, $event.touches[0].clientY);
        })("touchend.silent.passive", function TuiDropdownContextDirective_touchend_silent_passive_HostBindingHandler() {
          return ctx.onTouchEnd();
        })("touchcancel.silent.passive", function TuiDropdownContextDirective_touchcancel_silent_passive_HostBindingHandler() {
          return ctx.onTouchEnd();
        });
      }
      if (rf & 2) {
        i0.ɵɵstyleProp("user-select", ctx.userSelect)("-webkit-touch-callout", ctx.userSelect)("-webkit-user-select", ctx.userSelect);
      }
    },
    features: [i0.ɵɵProvidersFeature([TuiActiveZoneDirective, tuiAsDriver(TuiDropdownContextDirective), tuiAsRectAccessor(TuiDropdownContextDirective)]), i0.ɵɵInheritDefinitionFeature]
  });
  __decorate([shouldCall(activeZoneFilter)], TuiDropdownContextDirective.prototype, "closeDropdown", null);
  return TuiDropdownContextDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownDriverDirective = /*#__PURE__*/(() => {
  class TuiDropdownDriverDirective extends taiga_ui_core_abstract/* AbstractTuiDriverDirective */.Q {
    // TODO: Figure out why this is necessary under nx test runner
    constructor(destroy$, drivers, vehicles) {
      super(destroy$, drivers, vehicles);
      this.type = 'dropdown';
    }
  }
  TuiDropdownDriverDirective.ɵfac = function TuiDropdownDriverDirective_Factory(t) {
    return new (t || TuiDropdownDriverDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_abstract/* TuiDriver */.Xu), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_abstract/* TuiVehicle */.lL));
  };
  TuiDropdownDriverDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownDriverDirective,
    selectors: [["", "tuiDropdown", ""]],
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiDropdownDriverDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownHostDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDropdownHostDirective extends TuiRectAccessor {
    constructor() {
      super(...arguments);
      this.type = 'dropdown';
    }
    getClientRect() {
      var _a;
      return ((_a = this.tuiDropdownHost) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || EMPTY_CLIENT_RECT;
    }
  }
  TuiDropdownHostDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiDropdownHostDirective_BaseFactory;
    return function TuiDropdownHostDirective_Factory(t) {
      return (ɵTuiDropdownHostDirective_BaseFactory || (ɵTuiDropdownHostDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiDropdownHostDirective)))(t || TuiDropdownHostDirective);
    };
  })();
  TuiDropdownHostDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiDropdownHostDirective,
    selectors: [["", "tuiDropdown", "", "tuiDropdownHost", ""]],
    inputs: {
      tuiDropdownHost: "tuiDropdownHost"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsRectAccessor(TuiDropdownHostDirective)]), i0.ɵɵInheritDefinitionFeature]
  });
  return TuiDropdownHostDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownManualDirective = /*#__PURE__*/(() => {
  class TuiDropdownManualDirective extends taiga_ui_core_abstract/* TuiDriver */.Xu {
    constructor() {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.stream$ = new internal_BehaviorSubject/* BehaviorSubject */.t(false);
      this.tuiDropdownManual = false;
      this.type = 'dropdown';
    }
    ngOnChanges() {
      this.stream$.next(this.tuiDropdownManual);
    }
  }
  TuiDropdownManualDirective.ɵfac = function TuiDropdownManualDirective_Factory(t) {
    return new (t || TuiDropdownManualDirective)();
  };
  TuiDropdownManualDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownManualDirective,
    selectors: [["", "tuiDropdown", "", "tuiDropdownManual", ""]],
    inputs: {
      tuiDropdownManual: "tuiDropdownManual"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_abstract/* tuiAsDriver */.Np)(TuiDropdownManualDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"], core_mjs_["ɵɵNgOnChangesFeature"]]
  });
  return TuiDropdownManualDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownPositionDirective = /*#__PURE__*/(() => {
  class TuiDropdownPositionDirective extends taiga_ui_core_abstract/* TuiPositionAccessor */.dg {
    constructor(options, viewport, accessors, directive) {
      super();
      this.options = options;
      this.viewport = viewport;
      this.accessors = accessors;
      this.directive = directive;
      this.type = 'dropdown';
    }
    getPosition({
      width,
      height
    }) {
      var _a, _b;
      if (!width && !height) {
        this.previous = undefined;
      }
      const hostRect = (_b = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : taiga_ui_cdk_constants/* EMPTY_CLIENT_RECT */.Lo;
      const viewportRect = this.viewport.getClientRect();
      const {
        minHeight,
        align,
        direction,
        offset,
        limitWidth
      } = this.options;
      const viewport = {
        top: viewportRect.top - offset,
        bottom: viewportRect.bottom + offset,
        right: viewportRect.right - offset,
        left: viewportRect.left + offset
      };
      const previous = this.previous || direction || 'bottom';
      const available = {
        top: hostRect.top - 2 * offset - viewport.top,
        bottom: viewport.bottom - hostRect.bottom - 2 * offset
      };
      const rectWidth = limitWidth === 'fixed' ? hostRect.width : width;
      const right = Math.max(hostRect.right - rectWidth, offset);
      const left = hostRect.left + width < viewport.right ? hostRect.left : right;
      const position = {
        top: hostRect.top - offset - height,
        bottom: hostRect.bottom + offset,
        right: Math.max(viewport.left, right),
        center: hostRect.left + hostRect.width / 2 + width / 2 < viewport.right ? hostRect.left + hostRect.width / 2 - width / 2 : right,
        left: Math.max(viewport.left, left)
      };
      const better = available.top > available.bottom ? 'top' : 'bottom';
      if (available[previous] > minHeight && direction || available[previous] > height) {
        return [position[previous], position[align]];
      }
      this.previous = better;
      return [position[better], position[align]];
    }
    get accessor() {
      return (0,taiga_ui_core_abstract/* tuiFallbackRectAccessor */.GR)('dropdown')(this.accessors, this.directive);
    }
  }
  TuiDropdownPositionDirective.ɵfac = function TuiDropdownPositionDirective_Factory(t) {
    return new (t || TuiDropdownPositionDirective)(core_mjs_["ɵɵdirectiveInject"](TUI_DROPDOWN_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_VIEWPORT */.ob), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_abstract/* TuiRectAccessor */.cf), core_mjs_["ɵɵdirectiveInject"](TuiDropdownDirective));
  };
  TuiDropdownPositionDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownPositionDirective,
    selectors: [["", "tuiDropdown", "", 3, "tuiDropdownCustomPosition", "", 3, "tuiDropdownSided", ""]],
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_abstract/* tuiAsPositionAccessor */.nR)(TuiDropdownPositionDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiDropdownPositionDirective.prototype, "accessor", null);
  return TuiDropdownPositionDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownPositionSidedDirective = /*#__PURE__*/(() => {
  class TuiDropdownPositionSidedDirective extends taiga_ui_core_abstract/* TuiPositionAccessor */.dg {
    constructor(options, viewport, vertical) {
      super();
      this.options = options;
      this.viewport = viewport;
      this.vertical = vertical;
      this.previous = this.options.direction || 'bottom';
      this.tuiDropdownSided = '';
      this.tuiDropdownSidedOffset = 4;
      this.type = 'dropdown';
    }
    getPosition(rect) {
      var _a, _b;
      if (this.tuiDropdownSided === false) {
        return this.vertical.getPosition(rect);
      }
      const {
        height,
        width
      } = rect;
      const hostRect = (_b = (_a = this.vertical.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : taiga_ui_cdk_constants/* EMPTY_CLIENT_RECT */.Lo;
      const viewport = this.viewport.getClientRect();
      const {
        direction,
        minHeight,
        offset
      } = this.options;
      const align = this.options.align === 'center' ? 'left' : this.options.align;
      const available = {
        top: hostRect.bottom - viewport.top,
        left: hostRect.left - offset - viewport.left,
        right: viewport.right - hostRect.right - offset,
        bottom: viewport.bottom - hostRect.top
      };
      const position = {
        top: hostRect.bottom - height + this.tuiDropdownSidedOffset + 1,
        left: hostRect.left - width - offset,
        right: hostRect.right + offset,
        bottom: hostRect.top - this.tuiDropdownSidedOffset - 1 // 1 for border
      };
      const better = available.top > available.bottom ? 'top' : 'bottom';
      const maxLeft = available.left > available.right ? position.left : position.right;
      const left = available[align] > width ? position[align] : maxLeft;
      if (available[this.previous] > minHeight && direction || this.previous === better) {
        return [position[this.previous], left];
      }
      this.previous = better;
      return [position[better], left];
    }
  }
  TuiDropdownPositionSidedDirective.ɵfac = function TuiDropdownPositionSidedDirective_Factory(t) {
    return new (t || TuiDropdownPositionSidedDirective)(core_mjs_["ɵɵdirectiveInject"](TUI_DROPDOWN_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_VIEWPORT */.ob), core_mjs_["ɵɵdirectiveInject"](TuiDropdownPositionDirective));
  };
  TuiDropdownPositionSidedDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownPositionSidedDirective,
    selectors: [["", "tuiDropdownSided", ""]],
    inputs: {
      tuiDropdownSided: "tuiDropdownSided",
      tuiDropdownSidedOffset: "tuiDropdownSidedOffset"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([TuiDropdownPositionDirective, (0,taiga_ui_core_abstract/* tuiAsPositionAccessor */.nR)(TuiDropdownPositionSidedDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiDropdownPositionSidedDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownSelectionDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDropdownSelectionDirective extends TuiDriver {
    constructor(range, doc, selection$, el, vcr, dropdown) {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.range = range;
      this.doc = doc;
      this.selection$ = selection$;
      this.el = el;
      this.vcr = vcr;
      this.dropdown = dropdown;
      this.handler$ = new BehaviorSubject(ALWAYS_TRUE_HANDLER);
      this.stream$ = combineLatest([this.handler$, this.selection$.pipe(map(() => this.getRange()), distinctUntilChanged((x, y) => x.startOffset === y.startOffset && x.endOffset === y.endOffset))]).pipe(map(([handler, range]) => {
        const contained = this.el.nativeElement.contains(range.commonAncestorContainer);
        this.range = contained && tuiIsTextNode(range.commonAncestorContainer) ? range : this.range;
        return contained && handler(this.range) || this.inDropdown(range);
      }));
      this.position = 'selection';
      this.type = 'dropdown';
    }
    set tuiDropdownSelection(visible) {
      if (!tuiIsString(visible)) {
        this.handler$.next(visible);
      }
    }
    getClientRect() {
      switch (this.position) {
        case 'tag':
          {
            const {
              commonAncestorContainer
            } = this.range;
            const element = tuiIsElement(commonAncestorContainer) ? commonAncestorContainer : commonAncestorContainer.parentNode;
            return element && tuiIsElement(element) ? element.getBoundingClientRect() : EMPTY_CLIENT_RECT;
          }
        case 'word':
          return tuiGetWordRange(this.range).getBoundingClientRect();
        default:
          return this.range.getBoundingClientRect();
      }
    }
    ngOnDestroy() {
      if (this.ghost) {
        this.vcr.element.nativeElement.removeChild(this.ghost);
      }
    }
    getRange() {
      const active = tuiGetNativeFocused(this.doc);
      const selection = this.doc.getSelection();
      const range = active && tuiIsTextfield(active) && this.el.nativeElement.contains(active) ? this.veryVerySadInputFix(active) : (selection === null || selection === void 0 ? void 0 : selection.rangeCount) && selection.getRangeAt(0) || this.range;
      return range.cloneRange();
    }
    /**
     * Check if Node is inside dropdown
     */
    boxContains(node) {
      var _a;
      return !!((_a = this.dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.location.nativeElement.contains(node));
    }
    /**
     * Check if given range is at least partially inside dropdown
     */
    inDropdown(range) {
      const {
        startContainer,
        endContainer
      } = range;
      const {
        nativeElement
      } = this.el;
      const inDropdown = this.boxContains(range.commonAncestorContainer);
      const hostToDropdown = this.boxContains(endContainer) && nativeElement.contains(startContainer);
      const dropdownToHost = this.boxContains(startContainer) && nativeElement.contains(endContainer);
      return inDropdown || hostToDropdown || dropdownToHost;
    }
    veryVerySadInputFix(element) {
      const {
        ghost = this.initGhost(element)
      } = this;
      const {
        top,
        left,
        width,
        height
      } = element.getBoundingClientRect();
      const {
        selectionStart,
        selectionEnd,
        value
      } = element;
      const range = this.doc.createRange();
      const hostRect = this.el.nativeElement.getBoundingClientRect();
      ghost.style.top = tuiPx(top - hostRect.top);
      ghost.style.left = tuiPx(left - hostRect.left);
      ghost.style.width = tuiPx(width);
      ghost.style.height = tuiPx(height);
      ghost.textContent = CHAR_ZERO_WIDTH_SPACE + value + CHAR_NO_BREAK_SPACE;
      range.setStart(ghost.firstChild, selectionStart || 0);
      range.setEnd(ghost.firstChild, selectionEnd || 0);
      return range;
    }
    /**
     * Create an invisible DIV styled exactly like input/textarea element inside directive
     */
    initGhost(element) {
      const ghost = this.doc.createElement('div');
      const {
        font,
        letterSpacing,
        textTransform,
        padding
      } = getComputedStyle(element);
      ghost.style.position = 'absolute';
      ghost.style.pointerEvents = 'none';
      ghost.style.opacity = '0';
      ghost.style.whiteSpace = 'pre-wrap';
      ghost.style.font = font;
      ghost.style.letterSpacing = letterSpacing;
      ghost.style.textTransform = textTransform;
      ghost.style.padding = padding;
      this.vcr.element.nativeElement.appendChild(ghost);
      this.ghost = ghost;
      return ghost;
    }
  }
  TuiDropdownSelectionDirective.ɵfac = function TuiDropdownSelectionDirective_Factory(t) {
    return new (t || TuiDropdownSelectionDirective)(i0.ɵɵdirectiveInject(TUI_RANGE), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(TUI_SELECTION_STREAM), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(ViewContainerRef), i0.ɵɵdirectiveInject(TuiDropdownDirective));
  };
  TuiDropdownSelectionDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiDropdownSelectionDirective,
    selectors: [["", "tuiDropdown", "", "tuiDropdownSelection", ""]],
    inputs: {
      position: [i0.ɵɵInputFlags.None, "tuiDropdownSelectionPosition", "position"],
      tuiDropdownSelection: "tuiDropdownSelection"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsDriver(TuiDropdownSelectionDirective), tuiAsRectAccessor(TuiDropdownSelectionDirective)]), i0.ɵɵInheritDefinitionFeature]
  });
  return TuiDropdownSelectionDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDropdownModule = /*#__PURE__*/(() => {
  class TuiDropdownModule {}
  TuiDropdownModule.ɵfac = function TuiDropdownModule_Factory(t) {
    return new (t || TuiDropdownModule)();
  };
  TuiDropdownModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDropdownModule
  });
  TuiDropdownModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiActiveZoneModule, TuiOverscrollModule, TuiScrollbarModule, TuiHoveredModule]]
  });
  return TuiDropdownModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-directives-dropdown.js.map
// EXTERNAL MODULE: ./node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs
var platform_browser = __webpack_require__(345);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/empty.js
var empty = __webpack_require__(983);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/concat.js + 1 modules
var concat = __webpack_require__(8793);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/defer.js
var defer = __webpack_require__(9030);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/operators/takeWhile.js


function takeWhile(predicate, inclusive = false) {
  return (0,lift/* operate */.N)((source, subscriber) => {
    let index = 0;
    source.subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, value => {
      const result = predicate(value, index++);
      (result || inclusive) && subscriber.next(value);
      !result && subscriber.complete();
    }));
  });
}
//# sourceMappingURL=takeWhile.js.map
;// CONCATENATED MODULE: ./node_modules/@tinkoff/ng-event-plugins/fesm2015/tinkoff-ng-event-plugins.js





function dasharize(camel) {
  return camel.replace(/[a-z][A-Z]/g, letterLetter => {
    return `${letterLetter[0]}-${letterLetter[1].toLowerCase()}`;
  });
}
class AbstractEventPlugin {
  supports(event) {
    return event.includes(this.modifier);
  }
  /** This is not used in Ivy anymore */
  addGlobalEventListener() {
    return () => {};
  }
  unwrap(event) {
    return event.split('.').filter(v => !this.modifier.includes(v)).join('.');
  }
}
let BindEventPlugin = /*#__PURE__*/(() => {
  class BindEventPlugin extends AbstractEventPlugin {
    constructor() {
      super(...arguments);
      this.modifier = '$';
    }
    addEventListener(element, event) {
      element[event] = element[event] || empty/* EMPTY */.w;
      const method = this.getMethod(element, event);
      const zone$ = this.manager.getZone().onStable;
      const sub = (0,concat/* concat */.x)(zone$.pipe(takeWhile(() => element[event] === empty/* EMPTY */.w)), (0,defer/* defer */.v)(() => element[event])).subscribe(method);
      return () => sub.unsubscribe();
    }
    getMethod(element, event) {
      const [, key, value, unit = ''] = event.split('.');
      if (event.endsWith('.attr')) {
        return v => v === null ? element.removeAttribute(key) : element.setAttribute(key, String(v));
      }
      if (key === 'class') {
        return v => element.classList.toggle(value, !!v);
      }
      if (key === 'style') {
        return v => element.style.setProperty(dasharize(value), `${v}${unit}`);
      }
      return v => element[key] = v;
    }
  }
  /** @nocollapse */
  /** @nocollapse */BindEventPlugin.ɵfac = /* @__PURE__ */(() => {
    let ɵBindEventPlugin_BaseFactory;
    return function BindEventPlugin_Factory(t) {
      return (ɵBindEventPlugin_BaseFactory || (ɵBindEventPlugin_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](BindEventPlugin)))(t || BindEventPlugin);
    };
  })();
  BindEventPlugin.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: BindEventPlugin,
    factory: BindEventPlugin.ɵfac
  });
  return BindEventPlugin;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let OptionsEventPlugin = /*#__PURE__*/(() => {
  class OptionsEventPlugin extends AbstractEventPlugin {
    constructor() {
      super(...arguments);
      this.modifier = 'capture.once.passive';
    }
    supports(event) {
      return event.includes('.') && !this.unwrap(event).includes('.');
    }
    addEventListener(element, event, handler) {
      element.addEventListener(this.unwrap(event), handler, {
        once: event.includes('.once'),
        passive: event.includes('.passive'),
        capture: event.includes('.capture')
      });
      return () => element.removeEventListener(this.unwrap(event), handler, event.includes('.capture'));
    }
  }
  /** @nocollapse */
  /** @nocollapse */OptionsEventPlugin.ɵfac = /* @__PURE__ */(() => {
    let ɵOptionsEventPlugin_BaseFactory;
    return function OptionsEventPlugin_Factory(t) {
      return (ɵOptionsEventPlugin_BaseFactory || (ɵOptionsEventPlugin_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](OptionsEventPlugin)))(t || OptionsEventPlugin);
    };
  })();
  OptionsEventPlugin.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: OptionsEventPlugin,
    factory: OptionsEventPlugin.ɵfac
  });
  return OptionsEventPlugin;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let PreventEventPlugin = /*#__PURE__*/(() => {
  class PreventEventPlugin extends AbstractEventPlugin {
    constructor() {
      super(...arguments);
      this.modifier = '.prevent';
    }
    addEventListener(element, event, handler) {
      const wrapped = event => {
        event.preventDefault();
        handler(event);
      };
      return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    }
  }
  /** @nocollapse */
  /** @nocollapse */PreventEventPlugin.ɵfac = /* @__PURE__ */(() => {
    let ɵPreventEventPlugin_BaseFactory;
    return function PreventEventPlugin_Factory(t) {
      return (ɵPreventEventPlugin_BaseFactory || (ɵPreventEventPlugin_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](PreventEventPlugin)))(t || PreventEventPlugin);
    };
  })();
  PreventEventPlugin.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: PreventEventPlugin,
    factory: PreventEventPlugin.ɵfac
  });
  return PreventEventPlugin;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let SelfEventPlugin = /*#__PURE__*/(() => {
  class SelfEventPlugin extends AbstractEventPlugin {
    constructor() {
      super(...arguments);
      this.modifier = '.self';
    }
    addEventListener(element, event, handler) {
      const wrapped = event => {
        if (event.target === event.currentTarget) {
          handler(event);
        }
      };
      return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    }
  }
  /** @nocollapse */
  /** @nocollapse */SelfEventPlugin.ɵfac = /* @__PURE__ */(() => {
    let ɵSelfEventPlugin_BaseFactory;
    return function SelfEventPlugin_Factory(t) {
      return (ɵSelfEventPlugin_BaseFactory || (ɵSelfEventPlugin_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](SelfEventPlugin)))(t || SelfEventPlugin);
    };
  })();
  SelfEventPlugin.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: SelfEventPlugin,
    factory: SelfEventPlugin.ɵfac
  });
  return SelfEventPlugin;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let SilentEventPlugin = /*#__PURE__*/(() => {
  class SilentEventPlugin extends AbstractEventPlugin {
    constructor() {
      super(...arguments);
      this.modifier = '.silent';
    }
    addEventListener(element, event, handler) {
      SilentEventPlugin.ngZone = this.manager.getZone();
      return SilentEventPlugin.ngZone.runOutsideAngular(() => this.manager.addEventListener(element, this.unwrap(event), handler));
    }
  }
  /** @nocollapse */
  /** @nocollapse */SilentEventPlugin.ɵfac = /* @__PURE__ */(() => {
    let ɵSilentEventPlugin_BaseFactory;
    return function SilentEventPlugin_Factory(t) {
      return (ɵSilentEventPlugin_BaseFactory || (ɵSilentEventPlugin_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](SilentEventPlugin)))(t || SilentEventPlugin);
    };
  })();
  SilentEventPlugin.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: SilentEventPlugin,
    factory: SilentEventPlugin.ɵfac
  });
  return SilentEventPlugin;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let StopEventPlugin = /*#__PURE__*/(() => {
  class StopEventPlugin extends AbstractEventPlugin {
    constructor() {
      super(...arguments);
      this.modifier = '.stop';
    }
    addEventListener(element, event, handler) {
      const wrapped = event => {
        event.stopPropagation();
        handler(event);
      };
      return this.manager.addEventListener(element, this.unwrap(event), wrapped);
    }
  }
  /** @nocollapse */
  /** @nocollapse */StopEventPlugin.ɵfac = /* @__PURE__ */(() => {
    let ɵStopEventPlugin_BaseFactory;
    return function StopEventPlugin_Factory(t) {
      return (ɵStopEventPlugin_BaseFactory || (ɵStopEventPlugin_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](StopEventPlugin)))(t || StopEventPlugin);
    };
  })();
  StopEventPlugin.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: StopEventPlugin,
    factory: StopEventPlugin.ɵfac
  });
  return StopEventPlugin;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * TODO: Remove in v4.0.0
 * @deprecated
 */
let ZoneEventPlugin = /*#__PURE__*/(() => {
  class ZoneEventPlugin extends AbstractEventPlugin {
    constructor() {
      super(...arguments);
      this.modifier = '.init';
    }
    addEventListener() {
      console.warn('.init plugin is no longer necessary as of v3.1.0');
      return () => {};
    }
  }
  /** @nocollapse */
  /** @nocollapse */ZoneEventPlugin.ɵfac = /* @__PURE__ */(() => {
    let ɵZoneEventPlugin_BaseFactory;
    return function ZoneEventPlugin_Factory(t) {
      return (ɵZoneEventPlugin_BaseFactory || (ɵZoneEventPlugin_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](ZoneEventPlugin)))(t || ZoneEventPlugin);
    };
  })();
  ZoneEventPlugin.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: ZoneEventPlugin,
    factory: ZoneEventPlugin.ɵfac
  });
  return ZoneEventPlugin;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const PLUGINS = [SilentEventPlugin, BindEventPlugin, OptionsEventPlugin, PreventEventPlugin, SelfEventPlugin, StopEventPlugin, ZoneEventPlugin];
const NG_EVENT_PLUGINS = PLUGINS.map(useClass => ({
  provide: platform_browser/* EVENT_MANAGER_PLUGINS */.Q5,
  multi: true,
  useClass
}));
function tinkoff_ng_event_plugins_shouldCall(predicate) {
  return (_target, _key, desc) => {
    const {
      value
    } = desc;
    desc.value = function (...args) {
      if (!predicate.apply(this, args)) {
        return;
      }
      if (SilentEventPlugin.ngZone) {
        SilentEventPlugin.ngZone.run(() => value.apply(this, args));
      } else {
        value.apply(this, args);
      }
    };
  };
}
function asCallable(a) {
  return a;
}
let EventPluginsModule = /*#__PURE__*/(() => {
  class EventPluginsModule {
    constructor([plugin]) {
      console.assert(!(plugin instanceof SilentEventPlugin) || EventPluginsModule.initialized, 'EventPluginsModule must come after BrowserModule in imports');
      EventPluginsModule.initialized = true;
    }
  }
  EventPluginsModule.initialized = false;
  /** @nocollapse */
  /** @nocollapse */
  /** @nocollapse */
  EventPluginsModule.ɵfac = function EventPluginsModule_Factory(t) {
    return new (t || EventPluginsModule)(core_mjs_["ɵɵinject"](platform_browser/* EVENT_MANAGER_PLUGINS */.Q5));
  };
  EventPluginsModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: EventPluginsModule
  });
  EventPluginsModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    providers: NG_EVENT_PLUGINS
  });
  return EventPluginsModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Public API Surface of @tinkoff/ng-event-plugins
 */

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=tinkoff-ng-event-plugins.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-data-list.js


















const taiga_ui_core_components_data_list_c0 = ["tuiOption", ""];
const taiga_ui_core_components_data_list_c1 = ["*"];
const taiga_ui_core_components_data_list_c2 = a0 => ({
  $implicit: a0
});
function TuiOptionComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r1, "\n");
  }
}
function TuiOptionComponent_ng_template_1_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 3);
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵproperty"]("src", ctx_r1.icons.more);
  }
}
function TuiOptionComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵprojection"](0);
    core_mjs_["ɵɵtemplate"](1, TuiOptionComponent_ng_template_1_tui_svg_1_Template, 1, 1, "tui-svg", 2);
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", ctx_r1.dropdown);
  }
}
function TuiDataListComponent_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r1, " ");
  }
}
function TuiDataListComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 2);
    core_mjs_["ɵɵtemplate"](1, TuiDataListComponent_div_2_ng_container_1_Template, 2, 1, "ng-container", 3);
    core_mjs_["ɵɵpipe"](2, "async");
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.emptyContent || core_mjs_["ɵɵpipeBind1"](2, 1, ctx_r1.defaultEmptyContent$));
  }
}
function shouldFocus({
  currentTarget
}) {
  return !(0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(currentTarget);
}
// TODO: Consider all use cases for aria roles
let TuiOptionComponent = /*#__PURE__*/(() => {
  class TuiOptionComponent {
    constructor(content, dataList, el, host, dropdown, icons) {
      this.content = content;
      this.dataList = dataList;
      this.el = el;
      this.host = host;
      this.dropdown = dropdown;
      this.icons = icons;
      /** @deprecated use size on {@link TuiDataListComponent} instead */
      this.size = null;
      this.role = 'option';
      this.disabled = false;
    }
    get active() {
      return !!this.dropdown && !!this.dropdown.dropdownBoxRef;
    }
    onClick() {
      if (this.host && this.value !== undefined) {
        this.host.handleOption(this.value);
      }
    }
    // @bad TODO: Consider aria-activedescendant for proper accessibility implementation
    onMouseMove({
      currentTarget
    }) {
      currentTarget.focus({
        preventScroll: true
      });
    }
    // Preventing focus loss upon focused option removal
    ngOnDestroy() {
      var _a;
      (_a = this.dataList) === null || _a === void 0 ? void 0 : _a.handleFocusLossIfNecessary(this.el.nativeElement);
    }
  }
  TuiOptionComponent.ɵfac = function TuiOptionComponent_Factory(t) {
    return new (t || TuiOptionComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_OPTION_CONTENT */.Z6, 8), core_mjs_["ɵɵdirectiveInject"]((0,core_mjs_.forwardRef)(() => TuiDataListComponent), 8), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_DATA_LIST_HOST */.KN, 8), core_mjs_["ɵɵdirectiveInject"](TuiDropdownDirective, 10), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_COMMON_ICONS */._Z));
  };
  TuiOptionComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiOptionComponent,
    selectors: [["button", "tuiOption", ""], ["a", "tuiOption", ""]],
    hostAttrs: ["tabIndex", "-1", "type", "button"],
    hostVars: 5,
    hostBindings: function TuiOptionComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("click", function TuiOptionComponent_click_HostBindingHandler() {
          return ctx.onClick();
        })("mousemove.silent", function TuiOptionComponent_mousemove_silent_HostBindingHandler($event) {
          return ctx.onMouseMove($event);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("disabled", ctx.disabled || null)("data-size", ctx.size)("role", ctx.role);
        core_mjs_["ɵɵclassProp"]("_with-dropdown", ctx.active);
      }
    },
    inputs: {
      size: "size",
      role: "role",
      disabled: "disabled",
      value: "value"
    },
    attrs: taiga_ui_core_components_data_list_c0,
    ngContentSelectors: taiga_ui_core_components_data_list_c1,
    decls: 3,
    vars: 4,
    consts: [["base", ""], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["class", "t-arrow", 3, "src", 4, "ngIf"], [1, "t-arrow", 3, "src"]],
    template: function TuiOptionComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵtemplate"](0, TuiOptionComponent_ng_container_0_Template, 2, 1, "ng-container", 1)(1, TuiOptionComponent_ng_template_1_Template, 2, 1, "ng-template", null, 0, core_mjs_["ɵɵtemplateRefExtractor"]);
      }
      if (rf & 2) {
        const base_r3 = core_mjs_["ɵɵreference"](2);
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.content || base_r3)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction1"](2, taiga_ui_core_components_data_list_c2, base_r3));
      }
    },
    dependencies: [taiga_ui_core_components_svg/* TuiSvgComponent */._Y, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.NgIf],
    styles: ["[_nghost-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;justify-content:space-between;text-align:left;color:var(--tui-text-01);border-radius:var(--tui-radius-s);outline:none;cursor:pointer;background-clip:padding-box}[_nghost-%COMP%]:disabled{opacity:var(--tui-disabled-opacity);cursor:default}[_nghost-%COMP%]:focus, ._with-dropdown[_nghost-%COMP%]{background-color:var(--tui-clear)}[_nghost-%COMP%]   [data-list-size=\"s\"][_nghost-%COMP%], [data-list-size=\"s\"]   [_nghost-%COMP%], [_nghost-%COMP%]   [data-list-size=\"xs\"][_nghost-%COMP%], [data-list-size=\"xs\"]   [_nghost-%COMP%], [data-size=s][data-size=s][_nghost-%COMP%], [data-size=xs][data-size=xs][_nghost-%COMP%]{display:flex;align-items:center;box-sizing:border-box;margin:var(--tui-data-list-margin) 0;font:var(--tui-font-text-s);min-height:2rem;padding:.3125rem .5rem}[_nghost-%COMP%]   [data-list-size=\"m\"][_nghost-%COMP%], [data-list-size=\"m\"]   [_nghost-%COMP%], [data-size=m][data-size=m][_nghost-%COMP%]{display:flex;align-items:center;box-sizing:border-box;margin:var(--tui-data-list-margin) 0;font:var(--tui-font-text-s);min-height:2.5rem;padding:.375rem .5rem}[_nghost-%COMP%]   [data-list-size=\"l\"][_nghost-%COMP%], [data-list-size=\"l\"]   [_nghost-%COMP%], [data-size=l][data-size=l][_nghost-%COMP%]{display:flex;align-items:center;box-sizing:border-box;margin:var(--tui-data-list-margin) 0;font:var(--tui-font-text-m);min-height:2.75rem;padding:.375rem .625rem}.t-arrow[_ngcontent-%COMP%]{margin:0 -.5rem 0 .75rem}"],
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([tinkoff_ng_event_plugins_shouldCall(shouldFocus)], TuiOptionComponent.prototype, "onMouseMove", null);
  return TuiOptionComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

// TODO: Consider aria-activedescendant for proper accessibility implementation
let TuiDataListComponent = /*#__PURE__*/(() => {
  class TuiDataListComponent {
    constructor(controller, el, defaultEmptyContent$) {
      var _a;
      this.controller = controller;
      this.el = el;
      this.defaultEmptyContent$ = defaultEmptyContent$;
      this.options = taiga_ui_cdk_constants/* EMPTY_QUERY */.xQ;
      this.role = 'listbox';
      this.size = ((_a = this.controller) === null || _a === void 0 ? void 0 : _a.size) || 'm';
    }
    get empty$() {
      return (0,taiga_ui_cdk_observables/* tuiQueryListChanges */.MJ)(this.options).pipe((0,operators_map/* map */.T)(({
        length
      }) => !length));
    }
    onFocusIn(relatedTarget, currentTarget) {
      if (!currentTarget.contains(relatedTarget) && !this.origin) {
        this.origin = relatedTarget;
      }
    }
    noop() {}
    onKeyDownArrow(current, step) {
      const {
        elements
      } = this;
      (0,taiga_ui_cdk_utils_focus/* tuiMoveFocus */.yO)(elements.indexOf(current), elements, step);
    }
    // TODO: Consider aria-activedescendant for proper accessibility implementation
    handleFocusLossIfNecessary(element = this.el.nativeElement) {
      if (this.origin && (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocusedIn */.Ij)(element)) {
        (0,taiga_ui_cdk_utils_focus/* tuiSetNativeMouseFocused */.ai)(this.origin, true, true);
      }
    }
    getOptions(includeDisabled = false) {
      return this.options.filter(({
        disabled
      }) => includeDisabled || !disabled).map(({
        value
      }) => value).filter(taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj);
    }
    onFocus({
      target
    }, top) {
      if (!(0,taiga_ui_cdk_utils_dom/* tuiIsElement */.ru)(target)) {
        return;
      }
      const {
        elements
      } = this;
      (0,taiga_ui_cdk_utils_focus/* tuiMoveFocus */.yO)(top ? -1 : elements.length, elements, top ? 1 : -1);
      this.handleFocusLossIfNecessary(target);
    }
    get elements() {
      return Array.from(this.el.nativeElement.querySelectorAll('[tuiOption]'));
    }
  }
  TuiDataListComponent.ɵfac = function TuiDataListComponent_Factory(t) {
    return new (t || TuiDataListComponent)(core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_WATCHED_CONTROLLER, 8), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_NOTHING_FOUND_MESSAGE */.wH));
  };
  TuiDataListComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDataListComponent,
    selectors: [["tui-data-list"]],
    contentQueries: function TuiDataListComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiOptionComponent, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.options = _t);
      }
    },
    hostVars: 2,
    hostBindings: function TuiDataListComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("focusin", function TuiDataListComponent_focusin_HostBindingHandler($event) {
          return ctx.onFocusIn($event.relatedTarget, $event.currentTarget);
        })("mousedown.prevent", function TuiDataListComponent_mousedown_prevent_HostBindingHandler() {
          return ctx.noop();
        })("keydown.arrowDown.prevent", function TuiDataListComponent_keydown_arrowDown_prevent_HostBindingHandler($event) {
          return ctx.onKeyDownArrow($event.target, 1);
        })("keydown.arrowUp.prevent", function TuiDataListComponent_keydown_arrowUp_prevent_HostBindingHandler($event) {
          return ctx.onKeyDownArrow($event.target, -1);
        })("wheel.silent.passive", function TuiDataListComponent_wheel_silent_passive_HostBindingHandler() {
          return ctx.handleFocusLossIfNecessary();
        })("mouseleave", function TuiDataListComponent_mouseleave_HostBindingHandler($event) {
          return ctx.handleFocusLossIfNecessary($event.target);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("role", ctx.role)("data-list-size", ctx.size);
      }
    },
    inputs: {
      role: "role",
      emptyContent: "emptyContent",
      size: "size"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_tokens/* tuiAsDataListAccessor */.WD)(TuiDataListComponent), TEXTFIELD_CONTROLLER_PROVIDER])],
    ngContentSelectors: taiga_ui_core_components_data_list_c1,
    decls: 5,
    vars: 3,
    consts: [["tabindex", "0", 1, "t-trap", 3, "focusin"], ["class", "t-empty", 4, "ngIf"], [1, "t-empty"], [4, "polymorpheusOutlet"]],
    template: function TuiDataListComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵelementStart"](0, "div", 0);
        core_mjs_["ɵɵlistener"]("focusin", function TuiDataListComponent_Template_div_focusin_0_listener($event) {
          return ctx.onFocus($event, true);
        });
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵprojection"](1);
        core_mjs_["ɵɵtemplate"](2, TuiDataListComponent_div_2_Template, 3, 3, "div", 1);
        core_mjs_["ɵɵpipe"](3, "async");
        core_mjs_["ɵɵelementStart"](4, "div", 0);
        core_mjs_["ɵɵlistener"]("focusin", function TuiDataListComponent_Template_div_focusin_4_listener($event) {
          return ctx.onFocus($event, false);
        });
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](3, 1, ctx.empty$));
      }
    },
    dependencies: [common_mjs_.NgIf, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.AsyncPipe],
    styles: ["tui-data-list{--tui-data-list-padding: .25rem;--tui-data-list-margin: .0625rem;display:flex;font:var(--tui-font-text-m);flex-direction:column;padding:calc(var(--tui-data-list-padding) - var(--tui-data-list-margin)) var(--tui-data-list-padding);color:var(--tui-text-03)}tui-data-list:focus-within .t-trap{display:none}tui-data-list:focus-within [tuiOption]._with-dropdown:not(:focus){background-color:transparent}tui-data-list[data-list-size=s]{--tui-data-list-margin: 0rem}tui-data-list[data-list-size=s]>.t-empty{display:flex;align-items:center;box-sizing:border-box;margin:var(--tui-data-list-margin) 0;font:var(--tui-font-text-s);min-height:2rem;padding:.3125rem .5rem}tui-data-list[data-list-size=m]>.t-empty{display:flex;align-items:center;box-sizing:border-box;margin:var(--tui-data-list-margin) 0;font:var(--tui-font-text-s);min-height:2.5rem;padding:.375rem .5rem}tui-data-list[data-list-size=l]{--tui-data-list-padding: .375rem;--tui-data-list-margin: .125rem}tui-data-list[data-list-size=l]>.t-empty{display:flex;align-items:center;box-sizing:border-box;margin:var(--tui-data-list-margin) 0;font:var(--tui-font-text-m);min-height:2.75rem;padding:.375rem .625rem}tui-opt-group{position:relative;display:flex;font:var(--tui-font-text-xs);color:var(--tui-text-02);flex-direction:column;line-height:1rem}tui-data-list[data-list-size=l] tui-opt-group{font:var(--tui-font-text-s);line-height:1.25rem}tui-data-list[data-list-size=l] tui-opt-group:before{padding-left:.625rem;padding-right:.625rem}tui-data-list[data-list-size=l] tui-opt-group:after{left:.625rem;right:.625rem}tui-opt-group:empty:before,tui-opt-group:empty:after{display:none}tui-opt-group:before{content:attr(data-label);padding:var(--tui-data-list-padding) .5rem var(--tui-data-list-padding);margin:var(--tui-data-list-margin) 0;white-space:normal;word-break:break-word}tui-opt-group:after{position:absolute;left:.5rem;right:.5rem;top:var(--tui-data-list-padding);height:1px;background:var(--tui-base-03)}tui-opt-group:not(:empty)~tui-opt-group:before{padding-top:calc(.75rem + var(--tui-data-list-padding))}tui-opt-group:not(:empty)~tui-opt-group[data-label=\"\"]:before,tui-opt-group:not(:empty)~tui-opt-group:not([data-label]):before{padding:var(--tui-data-list-padding) 0}tui-opt-group:not(:empty)~tui-opt-group:after{content:\"\"}tui-opt-group[data-label=\"\"]:before,tui-opt-group:not([data-label]):before{padding:0;margin:0}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiDataListComponent.prototype, "empty$", null);
  return TuiDataListComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDataListDirective = /*#__PURE__*/(() => {
  class TuiDataListDirective {}
  TuiDataListDirective.ɵfac = function TuiDataListDirective_Factory(t) {
    return new (t || TuiDataListDirective)();
  };
  TuiDataListDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDataListDirective,
    selectors: [["ng-template", "tuiDataList", ""]]
  });
  return TuiDataListDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function taiga_ui_core_components_data_list_tuiAsDataList(useExisting) {
  return {
    provide: TuiDataListDirective,
    useExisting
  };
}
let TuiOptGroupDirective = /*#__PURE__*/(() => {
  class TuiOptGroupDirective {}
  TuiOptGroupDirective.ɵfac = function TuiOptGroupDirective_Factory(t) {
    return new (t || TuiOptGroupDirective)();
  };
  TuiOptGroupDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiOptGroupDirective,
    selectors: [["tui-opt-group"]],
    hostAttrs: ["role", "group"],
    hostVars: 1,
    hostBindings: function TuiOptGroupDirective_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-label", ctx.label);
      }
    },
    inputs: {
      label: "label"
    }
  });
  return TuiOptGroupDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let taiga_ui_core_components_data_list_TuiDataListModule = /*#__PURE__*/(() => {
  class TuiDataListModule {}
  TuiDataListModule.ɵfac = function TuiDataListModule_Factory(t) {
    return new (t || TuiDataListModule)();
  };
  TuiDataListModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDataListModule
  });
  TuiDataListModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, taiga_ui_core_components_svg/* TuiSvgModule */.vl, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ]]
  });
  return TuiDataListModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-data-list.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-group.js





let TuiGroupStylesComponent = /*#__PURE__*/(() => {
  class TuiGroupStylesComponent {}
  TuiGroupStylesComponent.ɵfac = function TuiGroupStylesComponent_Factory(t) {
    return new (t || TuiGroupStylesComponent)();
  };
  TuiGroupStylesComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiGroupStylesComponent,
    selectors: [["ng-component"]],
    hostAttrs: [1, "tui-group-styles"],
    decls: 0,
    vars: 0,
    template: function TuiGroupStylesComponent_Template(rf, ctx) {},
    styles: [".tui-group{position:relative;display:flex;isolation:isolate}.tui-group>*{flex:1 1 0;min-width:0}.tui-group>*:not(:last-child){margin-right:.125rem}.tui-group.tui-group>*:nth-child(n){border-radius:0}.tui-group_collapsed>*{z-index:1}.tui-group_collapsed>*:not(:last-child){margin-right:-1px}.tui-group_collapsed>*._readonly,.tui-group_collapsed>*._disabled,.tui-group_collapsed>*._readonly:hover,.tui-group_collapsed>*._disabled:hover{z-index:0}.tui-group_collapsed>*:hover,.tui-group_collapsed>*._hovered,.tui-group_collapsed>*._pressed{z-index:3}.tui-group_collapsed>*._invalid{z-index:2}.tui-group_collapsed>*._invalid:hover,.tui-group_collapsed>*._invalid._hovered,.tui-group_collapsed>*._invalid._pressed{z-index:4}.tui-group_collapsed>*._hosted_dropdown_focused,.tui-group_collapsed>*._focus-visible,.tui-group_collapsed>*._focused.ng-touched,.tui-group_collapsed>*._focused.ng-untouched{z-index:5}.tui-group_collapsed>*._active,.tui-group_collapsed>*[data-appearance=whiteblock-active]{z-index:6}.tui-group_collapsed>*._focus-visible._focused,.tui-group_collapsed>*._focus-visible._active,.tui-group_collapsed>*._focus-visible[data-appearance=whiteblock-active]{z-index:7}.tui-group_orientation_vertical{display:inline-flex;flex-direction:column}.tui-group_orientation_vertical>*{min-height:auto;flex:0 0 auto}.tui-group_orientation_vertical>*:not(:last-child){margin-right:0;margin-bottom:.125rem}.tui-group_orientation_vertical.tui-group_collapsed>*:not(:last-child){margin-right:0;margin-bottom:-1px}.tui-group_rounded.tui-group_orientation_horizontal>*:first-child{border-top-left-radius:var(--tui-radius-m);border-bottom-left-radius:var(--tui-radius-m)}.tui-group_rounded.tui-group_orientation_horizontal>*:last-child{border-top-right-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.tui-group_rounded.tui-group_orientation_horizontal.tui-group_radius_large>*:first-child{border-top-left-radius:var(--tui-radius-l);border-bottom-left-radius:var(--tui-radius-l)}.tui-group_rounded.tui-group_orientation_horizontal.tui-group_radius_large>*:last-child{border-top-right-radius:var(--tui-radius-l);border-bottom-right-radius:var(--tui-radius-l)}.tui-group_rounded.tui-group_orientation_vertical>*:first-child{border-top-left-radius:var(--tui-radius-m);border-top-right-radius:var(--tui-radius-m)}.tui-group_rounded.tui-group_orientation_vertical>*:last-child{border-bottom-left-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.tui-group_rounded.tui-group_orientation_vertical.tui-group_radius_large>*:first-child{border-top-left-radius:var(--tui-radius-l);border-top-right-radius:var(--tui-radius-l)}.tui-group_rounded.tui-group_orientation_vertical.tui-group_radius_large>*:last-child{border-bottom-left-radius:var(--tui-radius-l);border-bottom-right-radius:var(--tui-radius-l)}@media screen and (max-width: 47.9625em){.tui-group_rounded.tui-group_adaptive.tui-group_orientation_vertical:not(.tui-group_collapsed)>*:first-child:not(:last-child),.tui-group_rounded.tui-group_adaptive.tui-group_orientation_horizontal>*:first-child:not(:last-child),.tui-group_rounded.tui-group_adaptive.tui-group_orientation_vertical:not(.tui-group_collapsed)>*:last-child:not(:first-child),.tui-group_rounded.tui-group_adaptive.tui-group_orientation_horizontal>*:last-child:not(:first-child){border-radius:var(--tui-radius-m)}}@media screen and (max-width: 47.9625em){.tui-group_rounded.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_vertical:not(.tui-group_collapsed)>*:first-child:not(:last-child),.tui-group_rounded.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_horizontal>*:first-child:not(:last-child),.tui-group_rounded.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_vertical:not(.tui-group_collapsed)>*:last-child:not(:first-child),.tui-group_rounded.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_horizontal>*:last-child:not(:first-child){border-radius:var(--tui-radius-l)}}@media screen and (max-width: 47.9625em){.tui-group_adaptive.tui-group_orientation_vertical{width:100%}.tui-group_adaptive.tui-group_orientation_vertical>*:nth-child(n):not(:only-child){border-radius:var(--tui-radius-m)}.tui-group_adaptive.tui-group_orientation_vertical>*:not(:last-child){margin-bottom:1rem}.tui-group_adaptive.tui-group_orientation_vertical.tui-group_collapsed>*:nth-child(n):not(:only-child){border-radius:0}.tui-group_adaptive.tui-group_orientation_vertical.tui-group_collapsed>*:first-child:not(:last-child){border-radius:var(--tui-radius-m) var(--tui-radius-m) 0 0}.tui-group_adaptive.tui-group_orientation_vertical.tui-group_collapsed>*:last-child:not(:first-child){border-radius:0 0 var(--tui-radius-m) var(--tui-radius-m)}.tui-group_adaptive.tui-group_orientation_vertical.tui-group_collapsed>*:not(:last-child){margin-bottom:-1px}}@media screen and (max-width: 47.9625em){.tui-group_adaptive.tui-group_orientation_horizontal{flex-direction:column;width:100%}.tui-group_adaptive.tui-group_orientation_horizontal>*:nth-child(n):not(:only-child){border-radius:var(--tui-radius-m)}.tui-group_adaptive.tui-group_orientation_horizontal>*:not(:last-child){margin-right:0;margin-bottom:1rem}.tui-group_adaptive.tui-group_orientation_horizontal.tui-group_collapsed>*:nth-child(n):not(:only-child){border-radius:0}.tui-group_adaptive.tui-group_orientation_horizontal.tui-group_collapsed>*:first-child:not(:last-child){border-radius:var(--tui-radius-m) var(--tui-radius-m) 0 0}.tui-group_adaptive.tui-group_orientation_horizontal.tui-group_collapsed>*:last-child:not(:first-child){border-radius:0 0 var(--tui-radius-m) var(--tui-radius-m)}.tui-group_adaptive.tui-group_orientation_horizontal.tui-group_collapsed>*:not(:last-child){margin-right:0;margin-bottom:-1px}}@media screen and (max-width: 47.9625em){.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_vertical>*:nth-child(n):not(:only-child){border-radius:var(--tui-radius-l)}.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_vertical.tui-group_collapsed>*:nth-child(n):not(:only-child){border-radius:0}.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_vertical.tui-group_collapsed>*:first-child:not(:last-child){border-radius:var(--tui-radius-l) var(--tui-radius-l) 0 0}.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_vertical.tui-group_collapsed>*:last-child:not(:first-child){border-radius:0 0 var(--tui-radius-l) var(--tui-radius-l)}}@media screen and (max-width: 47.9625em){.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_horizontal>*:nth-child(n):not(:only-child){border-radius:var(--tui-radius-l)}.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_horizontal.tui-group_collapsed>*:nth-child(n):not(:only-child){border-radius:0}.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_horizontal.tui-group_collapsed>*:first-child:not(:last-child){border-radius:var(--tui-radius-l) var(--tui-radius-l) 0 0}.tui-group_adaptive.tui-group_radius_large.tui-group_orientation_horizontal.tui-group_collapsed>*:last-child:not(:first-child){border-radius:0 0 var(--tui-radius-l) var(--tui-radius-l)}}.tui-group__auto-width-item{min-width:auto;flex:0 0 auto}.tui-group .tui-group__inherit-item{border-radius:inherit}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
  return TuiGroupStylesComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiGroupDirective = /*#__PURE__*/(() => {
  class TuiGroupDirective {
    constructor(directiveStyles) {
      this.orientation = 'horizontal';
      this.adaptive = false;
      this.collapsed = false;
      this.rounded = true;
      this.size = 'm';
      directiveStyles.addComponent(TuiGroupStylesComponent);
    }
    get orientationHorizontal() {
      return this.orientation === 'horizontal';
    }
    get orientationVertical() {
      return this.orientation === 'vertical';
    }
    get sizeLarge() {
      return this.size === 'l';
    }
  }
  TuiGroupDirective.ɵfac = function TuiGroupDirective_Factory(t) {
    return new (t || TuiGroupDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDirectiveStylesService */.vA));
  };
  TuiGroupDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiGroupDirective,
    selectors: [["", "tuiGroup", "", 5, "ng-container"]],
    hostAttrs: ["role", "group", 1, "tui-group"],
    hostVars: 12,
    hostBindings: function TuiGroupDirective_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("tui-group_adaptive", ctx.adaptive)("tui-group_collapsed", ctx.collapsed)("tui-group_rounded", ctx.rounded)("tui-group_orientation_horizontal", ctx.orientationHorizontal)("tui-group_orientation_vertical", ctx.orientationVertical)("tui-group_radius_large", ctx.sizeLarge);
      }
    },
    inputs: {
      orientation: "orientation",
      adaptive: "adaptive",
      collapsed: "collapsed",
      rounded: "rounded",
      size: "size"
    }
  });
  return TuiGroupDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiGroupModule = /*#__PURE__*/(() => {
  class TuiGroupModule {}
  TuiGroupModule.ɵfac = function TuiGroupModule_Factory(t) {
    return new (t || TuiGroupModule)();
  };
  TuiGroupModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiGroupModule
  });
  TuiGroupModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule]]
  });
  return TuiGroupModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-group.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-link.js
var taiga_ui_core_components_link = __webpack_require__(1974);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-loader.js
var taiga_ui_core_components_loader = __webpack_require__(6249);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-expand.js











const taiga_ui_core_components_expand_c0 = ["wrapper"];
const taiga_ui_core_components_expand_c1 = ["*"];
function TuiExpandComponent_ng_container_2_tui_loader_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "tui-loader", 4);
    core_mjs_["ɵɵelementContainer"](1, 5);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵproperty"]("overlay", true)("showLoader", ctx_r0.loading);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngTemplateOutlet", ctx_r0.content);
  }
}
function TuiExpandComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵprojection"](1);
    core_mjs_["ɵɵtemplate"](2, TuiExpandComponent_ng_container_2_tui_loader_2_Template, 2, 3, "tui-loader", 3);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("ngIf", ctx_r0.async)("ngIfElse", ctx_r0.content);
  }
}
let TuiExpandContentDirective = /*#__PURE__*/(() => {
  class TuiExpandContentDirective {}
  TuiExpandContentDirective.ɵfac = function TuiExpandContentDirective_Factory(t) {
    return new (t || TuiExpandContentDirective)();
  };
  TuiExpandContentDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiExpandContentDirective,
    selectors: [["", "tuiExpandContent", ""]]
  });
  return TuiExpandContentDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const State = {
  Idle: 0,
  Loading: 1,
  Prepared: 2,
  Animated: 3
};
const LOADER_HEIGHT = 48;
let TuiExpandComponent = /*#__PURE__*/(() => {
  class TuiExpandComponent {
    constructor(cdr, destroy$) {
      this.cdr = cdr;
      this.destroy$ = destroy$;
      this.state = State.Idle;
      this.async = false;
      this.content = null;
      this.expanded = null;
    }
    set expandedSetter(expanded) {
      if (this.expanded === null) {
        this.expanded = expanded;
        return;
      }
      if (this.state !== State.Idle) {
        this.expanded = expanded;
        this.state = State.Animated;
        return;
      }
      this.expanded = expanded;
      this.retrigger(this.async && expanded ? State.Loading : State.Animated);
    }
    get overflow() {
      return this.state !== State.Idle;
    }
    get loading() {
      return !!this.expanded && this.async && this.state === State.Loading;
    }
    get height() {
      const {
        expanded,
        state,
        contentWrapper
      } = this;
      if (expanded && state === State.Prepared || !expanded && state === State.Animated) {
        return 0;
      }
      if (contentWrapper && (!expanded && state === State.Prepared || expanded && state === State.Animated)) {
        return contentWrapper.nativeElement.offsetHeight;
      }
      if (contentWrapper && expanded && state === State.Loading) {
        return Math.max(contentWrapper.nativeElement.offsetHeight, LOADER_HEIGHT);
      }
      return null;
    }
    get contentVisible() {
      return this.expanded || this.state !== State.Idle;
    }
    onTransitionEnd({
      propertyName
    }) {
      if (propertyName === 'opacity' && this.state === State.Animated) {
        this.state = State.Idle;
      }
    }
    onExpandLoaded(event) {
      event.stopPropagation();
      if (this.state === State.Loading) {
        this.retrigger(State.Animated);
      }
    }
    retrigger(state) {
      this.state = State.Prepared;
      (0,observable_timer/* timer */.O)(0).pipe((0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(() => {
        // We need delay to re-trigger CSS height transition from the correct number
        if (this.state !== State.Prepared) {
          return;
        }
        this.state = state;
        this.cdr.markForCheck();
      });
    }
  }
  TuiExpandComponent.ɵfac = function TuiExpandComponent_Factory(t) {
    return new (t || TuiExpandComponent)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2));
  };
  TuiExpandComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiExpandComponent,
    selectors: [["tui-expand"]],
    contentQueries: function TuiExpandComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiExpandContentDirective, 5, core_mjs_.TemplateRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.content = _t.first);
      }
    },
    viewQuery: function TuiExpandComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](taiga_ui_core_components_expand_c0, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.contentWrapper = _t.first);
      }
    },
    hostVars: 9,
    hostBindings: function TuiExpandComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("transitionend.self", function TuiExpandComponent_transitionend_self_HostBindingHandler($event) {
          return ctx.onTransitionEnd($event);
        })("tui-expand-loaded", function TuiExpandComponent_tui_expand_loaded_HostBindingHandler($event) {
          return ctx.onExpandLoaded($event);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("aria-expanded", ctx.expanded);
        core_mjs_["ɵɵstyleProp"]("height", ctx.height, "px");
        core_mjs_["ɵɵclassProp"]("_expanded", ctx.expanded)("_overflow", ctx.overflow)("_loading", ctx.loading);
      }
    },
    inputs: {
      async: "async",
      expandedSetter: [core_mjs_["ɵɵInputFlags"].None, "expanded", "expandedSetter"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])],
    ngContentSelectors: taiga_ui_core_components_expand_c1,
    decls: 3,
    vars: 3,
    consts: [["wrapper", ""], [1, "t-wrapper"], [4, "ngIf"], ["size", "l", 3, "overlay", "showLoader", 4, "ngIf", "ngIfElse"], ["size", "l", 3, "overlay", "showLoader"], [3, "ngTemplateOutlet"]],
    template: function TuiExpandComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵelementStart"](0, "div", 1, 0);
        core_mjs_["ɵɵtemplate"](2, TuiExpandComponent_ng_container_2_Template, 3, 2, "ng-container", 2);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("@tuiParentAnimation", undefined)("@.disabled", ctx.overflow);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.contentVisible);
      }
    },
    dependencies: [taiga_ui_core_components_loader/* TuiLoaderComponent */.jT, common_mjs_.NgIf, common_mjs_.NgTemplateOutlet],
    styles: ["[_nghost-%COMP%]{transition-property:opacity,height,visibility;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;opacity:0;transition-delay:1ms}._overflow[_nghost-%COMP%]{overflow:hidden}._expanded[_nghost-%COMP%]{opacity:1;transform:translate(0)}._loading[_nghost-%COMP%]{opacity:.99}.t-wrapper[_ngcontent-%COMP%]:before, .t-wrapper[_ngcontent-%COMP%]:after{content:\"\";display:table}"],
    data: {
      animation: [taiga_ui_cdk_constants/* TUI_PARENT_ANIMATION */.Hk]
    },
    changeDetection: 0
  });
  return TuiExpandComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiExpandModule = /*#__PURE__*/(() => {
  class TuiExpandModule {}
  TuiExpandModule.ɵfac = function TuiExpandModule_Factory(t) {
    return new (t || TuiExpandModule)();
  };
  TuiExpandModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiExpandModule
  });
  TuiExpandModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, taiga_ui_core_components_loader/* TuiLoaderModule */.Yc]]
  });
  return TuiExpandModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-expand.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-theme-night.js



let TuiThemeNightComponent = /*#__PURE__*/(() => {
  class TuiThemeNightComponent extends taiga_ui_cdk_abstract/* AbstractTuiThemeSwitcher */.lF {}
  TuiThemeNightComponent.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiThemeNightComponent_BaseFactory;
    return function TuiThemeNightComponent_Factory(t) {
      return (ɵTuiThemeNightComponent_BaseFactory || (ɵTuiThemeNightComponent_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiThemeNightComponent)))(t || TuiThemeNightComponent);
    };
  })();
  TuiThemeNightComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiThemeNightComponent,
    selectors: [["tui-theme-night"]],
    features: [core_mjs_["ɵɵInheritDefinitionFeature"]],
    decls: 0,
    vars: 0,
    template: function TuiThemeNightComponent_Template(rf, ctx) {},
    styles: [":root{--tui-base-01: #222;--tui-base-02: #333;--tui-base-03: #808080;--tui-base-04: #959595;--tui-base-05: #b0b0b0;--tui-base-06: #d7d7d7;--tui-base-07: #ededed;--tui-base-08: #f6f6f6;--tui-base-09: #fff;--tui-focus: rgba(51, 51, 51, .64);--tui-secondary: rgba(255, 255, 255, .16);--tui-secondary-hover: rgba(255, 255, 255, .24);--tui-secondary-active: rgba(255, 255, 255, .4);--tui-clear: rgba(255, 255, 255, .16);--tui-clear-disabled: rgba(255, 255, 255, .08);--tui-clear-hover: rgba(255, 255, 255, .24);--tui-clear-active: rgba(255, 255, 255, .4);--tui-error-fill: #ff8c67;--tui-error-bg: rgba(244, 87, 37, .32);--tui-error-bg-hover: rgba(244, 87, 37, .4);--tui-success-fill: #4ac99b;--tui-success-bg: rgba(74, 201, 155, .32);--tui-success-bg-hover: rgba(74, 201, 155, .4);--tui-warning-fill: #ffc700;--tui-warning-bg: rgba(255, 199, 0, .32);--tui-warning-bg-hover: rgba(255, 199, 0, .4);--tui-info-fill: #70b6f6;--tui-info-bg: rgba(112, 182, 246, .32);--tui-info-bg-hover: rgba(112, 182, 246, .4);--tui-neutral-fill: #959ba4;--tui-neutral-bg: rgba(149, 155, 164, .32);--tui-neutral-bg-hover: rgba(149, 155, 164, .48);--tui-text-01: #ffffff;--tui-text-02: rgba(255, 255, 255, .72);--tui-text-03: rgba(255, 255, 255, .6);--tui-link: #6788ff;--tui-link-hover: #526ed3;--tui-positive: #44c596;--tui-positive-hover: #3aa981;--tui-negative: #ff8c67;--tui-negative-hover: #bb593a;--tui-autofill: var(--tui-autofill-night);--tui-elevation-01: #222;--tui-elevation-02: #222;--tui-shadow: 0 .25rem 1.5rem rgba(0, 0, 0, .12);--tui-shadow-hover: 0 .75rem 2.25rem rgba(0, 0, 0, .2);--tui-shadow-dropdown: 0 1.5rem 1rem rgba(0, 0, 0, .03), 0 .75rem .75rem rgba(0, 0, 0, .04), 0 .25rem .375rem rgba(0, 0, 0, .05);--tui-shadow-modal: 0 1.125rem 1.875rem rgba(0, 0, 0, .48);--tui-shadow-sidebar: .25rem 0 1.5rem rgba(0, 0, 0, .12);--tui-shadow-navigation: 0 .125rem 1rem rgba(0, 0, 0, .08);--tui-shadow-sheet: 0 -1rem 1.75rem rgba(0, 0, 0, .24)}tui-notification{--tui-base-01: #000}\n"],
    encapsulation: 2,
    changeDetection: 0
  });
  return TuiThemeNightComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiThemeNightModule = /*#__PURE__*/(() => {
  class TuiThemeNightModule {}
  TuiThemeNightModule.ɵfac = function TuiThemeNightModule_Factory(t) {
    return new (t || TuiThemeNightModule)();
  };
  TuiThemeNightModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiThemeNightModule
  });
  TuiThemeNightModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiThemeNightModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-theme-night.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-focus-trap.js





let TuiFocusTrapDirective = /*#__PURE__*/(() => {
  class TuiFocusTrapDirective {
    constructor(doc, el, renderer) {
      this.doc = doc;
      this.el = el;
      this.renderer = renderer;
      this.activeElement = (0,taiga_ui_cdk_utils_focus/* tuiGetNativeFocused */.x_)(this.doc);
      /**
       * This would cause currently focused element to lose focus,
       * but it might cause ExpressionChanged error due to potential HostBinding.
       * Microtask keeps it in the same frame but allows change detection to run
       */
      void Promise.resolve().then(() => this.el.nativeElement.focus());
    }
    onBlur() {
      this.renderer.removeAttribute(this.el.nativeElement, 'tabIndex');
    }
    onFocusIn(node) {
      const {
        nativeElement
      } = this.el;
      if ((0,taiga_ui_cdk_utils_dom/* tuiContainsOrAfter */.P9)(nativeElement, node)) {
        return;
      }
      const focusable = (0,taiga_ui_cdk_utils_focus/* tuiGetClosestFocusable */.km)({
        initial: nativeElement,
        root: nativeElement
      });
      if (focusable) {
        focusable.focus();
      }
    }
    ngOnDestroy() {
      (0,taiga_ui_cdk_utils_focus/* tuiBlurNativeFocused */.SI)(this.doc);
      /**
       * HostListeners are triggered even after ngOnDestroy
       * {@link https://github.com/angular/angular/issues/38100}
       * so we need to delay it but stay in the same sync cycle,
       * therefore using Promise instead of setTimeout
       */
      // eslint-disable-next-line
      Promise.resolve().then(() => {
        if ((0,taiga_ui_cdk_utils_dom/* tuiIsHTMLElement */.Ki)(this.activeElement)) {
          this.activeElement.focus();
        }
      });
    }
  }
  TuiFocusTrapDirective.ɵfac = function TuiFocusTrapDirective_Factory(t) {
    return new (t || TuiFocusTrapDirective)(core_mjs_["ɵɵdirectiveInject"](common_mjs_.DOCUMENT), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.Renderer2));
  };
  TuiFocusTrapDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiFocusTrapDirective,
    selectors: [["", "tuiFocusTrap", ""]],
    hostAttrs: ["tabIndex", "0"],
    hostBindings: function TuiFocusTrapDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("blur", function TuiFocusTrapDirective_blur_HostBindingHandler() {
          return ctx.onBlur();
        })("focusin.silent", function TuiFocusTrapDirective_focusin_silent_HostBindingHandler($event) {
          return ctx.onFocusIn($event.target);
        }, false, core_mjs_["ɵɵresolveWindow"]);
      }
    }
  });
  return TuiFocusTrapDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiFocusTrapModule = /*#__PURE__*/(() => {
  class TuiFocusTrapModule {}
  TuiFocusTrapModule.ɵfac = function TuiFocusTrapModule_Factory(t) {
    return new (t || TuiFocusTrapModule)();
  };
  TuiFocusTrapModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiFocusTrapModule
  });
  TuiFocusTrapModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiFocusTrapModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-focus-trap.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-let.js
var taiga_ui_cdk_directives_let = __webpack_require__(4191);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-components-dialog-host.js




















function TuiDialogHostComponent_section_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiDialogHostComponent_section_0_tui_scroll_controls_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-scroll-controls", 5);
  }
}
function TuiDialogHostComponent_section_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "section", 2);
    core_mjs_["ɵɵtemplate"](1, TuiDialogHostComponent_section_0_ng_container_1_Template, 1, 0, "ng-container", 3)(2, TuiDialogHostComponent_section_0_tui_scroll_controls_2_Template, 1, 0, "tui-scroll-controls", 4);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("@host", undefined);
    core_mjs_["ɵɵattribute"]("aria-labelledby", item_r1.id);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", item_r1.component)("polymorpheusOutletContext", item_r1);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", !ctx_r1.isMobile);
  }
}
function TuiDialogHostComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "div", 6);
    core_mjs_["ɵɵlistener"]("transitionend", function TuiDialogHostComponent_div_1_Template_div_transitionend_0_listener($event) {
      const isDialogClosesOnBack_r4 = core_mjs_["ɵɵrestoreView"](_r3).tuiLet;
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.onDialog($event, !!ctx_r1.dialogs.length, !!isDialogClosesOnBack_r4));
    })("popstate", function TuiDialogHostComponent_div_1_Template_div_popstate_0_listener() {
      const isDialogClosesOnBack_r4 = core_mjs_["ɵɵrestoreView"](_r3).tuiLet;
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.closeLast(ctx_r1.dialogs, !!isDialogClosesOnBack_r4));
    }, false, core_mjs_["ɵɵresolveWindow"]);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵclassProp"]("t-overlay_visible", ctx_r1.dialogs.length);
  }
}
const FAKE_HISTORY_STATE = {
  label: 'ignoreMe'
};
const isFakeHistoryState = historyState => (historyState === null || historyState === void 0 ? void 0 : historyState.label) === FAKE_HISTORY_STATE.label;
/**
 * Is closing dialog on browser backward navigation enabled
 */
const TUI_DIALOG_CLOSES_ON_BACK = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)((0,of.of)(false));
let TuiDialogHostComponent = /*#__PURE__*/(() => {
  class TuiDialogHostComponent {
    constructor(isMobile, isDialogClosesOnBack$, dialogsByType, historyRef, titleService, destroy$, cdr, doc) {
      this.isMobile = isMobile;
      this.isDialogClosesOnBack$ = isDialogClosesOnBack$;
      this.dialogsByType = dialogsByType;
      this.historyRef = historyRef;
      this.titleService = titleService;
      this.destroy$ = destroy$;
      this.cdr = cdr;
      this.doc = doc;
      this.dialogs = [];
    }
    ngOnInit() {
      // Due to this view being parallel to app content, `markForCheck` from `async` pipe
      // can happen after view was checked, so calling `detectChanges` instead
      (0,observable_combineLatest/* combineLatest */.z)(this.dialogsByType).pipe((0,operators_map/* map */.T)(arr => [].concat(...arr).sort((a, b) => a.createdAt - b.createdAt)), (0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(dialogs => {
        var _a;
        this.dialogs = dialogs;
        this.cdr.markForCheck();
        (_a = this.doc.defaultView) === null || _a === void 0 ? void 0 : _a.document.documentElement.classList.toggle('t-overscroll-none', !!dialogs.length);
      });
    }
    closeLast(dialogs, isDialogClosesOnBack) {
      if (!isDialogClosesOnBack) {
        return;
      }
      const [last] = dialogs.slice(-1);
      if (!last) {
        return;
      }
      if (dialogs.length > 1) {
        this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
      }
      last.$implicit.complete();
    }
    onDialog({
      propertyName
    }, popupOpened, isDialogClosesOnBack) {
      if (!isDialogClosesOnBack || propertyName !== 'letter-spacing') {
        return;
      }
      if (popupOpened) {
        this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
      } else if (isFakeHistoryState(this.historyRef.state)) {
        this.historyRef.back();
      }
    }
  }
  TuiDialogHostComponent.ɵfac = function TuiDialogHostComponent_Factory(t) {
    return new (t || TuiDialogHostComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_MOBILE */.Td), core_mjs_["ɵɵdirectiveInject"](TUI_DIALOG_CLOSES_ON_BACK), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_DIALOGS */.lb), core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* HISTORY */.Vv), core_mjs_["ɵɵdirectiveInject"](platform_browser/* Title */.hE), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](common_mjs_.DOCUMENT));
  };
  TuiDialogHostComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDialogHostComponent,
    selectors: [["tui-dialog-host"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])],
    decls: 3,
    vars: 4,
    consts: [["aria-modal", "true", "role", "dialog", "tuiFocusTrap", "", "tuiOverscroll", "all", "tuiScrollRef", "", "class", "t-dialog", 4, "ngFor", "ngForOf"], ["class", "t-overlay", 3, "t-overlay_visible", "transitionend", "popstate", 4, "tuiLet"], ["aria-modal", "true", "role", "dialog", "tuiFocusTrap", "", "tuiOverscroll", "all", "tuiScrollRef", "", 1, "t-dialog"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["class", "t-scrollbars", 4, "ngIf"], [1, "t-scrollbars"], [1, "t-overlay", 3, "transitionend", "popstate"]],
    template: function TuiDialogHostComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵtemplate"](0, TuiDialogHostComponent_section_0_Template, 3, 5, "section", 0)(1, TuiDialogHostComponent_div_1_Template, 1, 2, "div", 1);
        core_mjs_["ɵɵpipe"](2, "async");
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngForOf", ctx.dialogs);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("tuiLet", core_mjs_["ɵɵpipeBind1"](2, 2, ctx.isDialogClosesOnBack$));
      }
    },
    dependencies: [TuiScrollControlsComponent, common_mjs_.NgForOf, TuiFocusTrapDirective, TuiOverscrollDirective, TuiScrollRefDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.NgIf, taiga_ui_cdk_directives_let/* TuiLetDirective */.Nx, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{position:fixed;left:0;bottom:0;width:100%;height:0}.t-overlay[_ngcontent-%COMP%], .t-dialog[_ngcontent-%COMP%]{position:fixed;top:0;left:0;right:0;bottom:0;display:flex;align-items:flex-start;outline:none;overflow:auto;scrollbar-width:none;-ms-overflow-style:none}.t-overlay.ng-animating[_ngcontent-%COMP%], .t-dialog.ng-animating[_ngcontent-%COMP%]{overflow:clip}.t-overlay[_ngcontent-%COMP%]::-webkit-scrollbar, .t-dialog[_ngcontent-%COMP%]::-webkit-scrollbar, .t-overlay[_ngcontent-%COMP%]::-webkit-scrollbar-thumb, .t-dialog[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}.t-dialog[_ngcontent-%COMP%]{bottom:auto;height:100%}.t-overlay[_ngcontent-%COMP%]{height:100%;pointer-events:none;touch-action:none;opacity:0;letter-spacing:normal;transition:opacity var(--tui-duration, .3s),letter-spacing .01s;background:rgba(0,0,0,.75);-webkit-backdrop-filter:var(--tui-backdrop, none);backdrop-filter:var(--tui-backdrop, none)}.t-overlay_visible[_ngcontent-%COMP%]{opacity:1;letter-spacing:1px}.t-dialog[_ngcontent-%COMP%]:last-of-type{z-index:1}.t-scrollbars[_ngcontent-%COMP%]{position:fixed;top:0;left:0;right:0;bottom:0;margin:0;color:#747474}"],
    data: {
      animation: [(0,animations/* trigger */.hZ)('host', [(0,animations/* transition */.kY)(':enter', [(0,animations/* style */.iF)({
        overflow: 'clip'
      }), (0,animations/* query */.P)(':scope > *', [(0,animations/* animateChild */.MA)()], {
        optional: true
      })]), (0,animations/* transition */.kY)(':leave', [(0,animations/* style */.iF)({
        overflow: 'clip'
      }), (0,animations/* query */.P)(':scope > *', [(0,animations/* animateChild */.MA)()], {
        optional: true
      })])])]
    }
  });
  return TuiDialogHostComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDialogHostModule = /*#__PURE__*/(() => {
  class TuiDialogHostModule {}
  TuiDialogHostModule.ɵfac = function TuiDialogHostModule_Factory(t) {
    return new (t || TuiDialogHostModule)();
  };
  TuiDialogHostModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDialogHostModule
  });
  TuiDialogHostModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiOverscrollModule, TuiFocusTrapModule, taiga_ui_cdk_directives_let/* TuiLetModule */.ks, TuiScrollControlsModule]]
  });
  return TuiDialogHostModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-components-dialog-host.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-pipes-mapper.js


let TuiMapperPipe = /*#__PURE__*/(() => {
  class TuiMapperPipe {
    transform(value, mapper, ...args) {
      return mapper(value, ...args);
    }
  }
  TuiMapperPipe.ɵfac = function TuiMapperPipe_Factory(t) {
    return new (t || TuiMapperPipe)();
  };
  TuiMapperPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiMapper",
    type: TuiMapperPipe,
    pure: true
  });
  return TuiMapperPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiMapperPipeModule = /*#__PURE__*/(() => {
  class TuiMapperPipeModule {}
  TuiMapperPipeModule.ɵfac = function TuiMapperPipeModule_Factory(t) {
    return new (t || TuiMapperPipeModule)();
  };
  TuiMapperPipeModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiMapperPipeModule
  });
  TuiMapperPipeModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiMapperPipeModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-pipes-mapper.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-components-alert-host.js













function TuiAlertHostComponent_div_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0, 3);
    core_mjs_["ɵɵpipe"](1, "tuiMapper");
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r1 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵproperty"]("ngComponentOutlet", item_r1.component.component)("ngComponentOutletInjector", core_mjs_["ɵɵpipeBind2"](1, 2, item_r1, ctx_r1.mapper));
  }
}
function TuiAlertHostComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 1);
    core_mjs_["ɵɵtemplate"](1, TuiAlertHostComponent_div_0_ng_container_1_Template, 2, 5, "ng-container", 2);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const alert_r3 = ctx.$implicit;
    core_mjs_["ɵɵproperty"]("@tuiParentAnimation", undefined);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngForOf", alert_r3);
  }
}
let TuiAlertHostComponent = /*#__PURE__*/(() => {
  class TuiAlertHostComponent {
    constructor(allAlerts, injector, destroy$, cdr) {
      this.allAlerts = allAlerts;
      this.injector = injector;
      this.destroy$ = destroy$;
      this.cdr = cdr;
      this.alerts = [];
      this.trackBy = index => index;
      this.mapper = useValue => core_mjs_.Injector.create({
        providers: [{
          provide: tinkoff_ng_polymorpheus/* POLYMORPHEUS_CONTEXT */.su,
          useValue
        }],
        parent: this.injector
      });
    }
    ngOnInit() {
      // Due to this view being parallel to app content, `markForCheck` from `async` pipe
      // can happen after view was checked, so calling `detectChanges` instead
      (0,observable_combineLatest/* combineLatest */.z)(this.allAlerts).pipe((0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(alerts => {
        this.alerts = alerts;
        this.cdr.detectChanges();
      });
    }
  }
  TuiAlertHostComponent.ɵfac = function TuiAlertHostComponent_Factory(t) {
    return new (t || TuiAlertHostComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_ALERTS */.vD), core_mjs_["ɵɵdirectiveInject"](core_mjs_.INJECTOR), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef));
  };
  TuiAlertHostComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiAlertHostComponent,
    selectors: [["tui-alert-host"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])],
    decls: 1,
    vars: 2,
    consts: [["class", "t-wrapper", 4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "t-wrapper"], [3, "ngComponentOutlet", "ngComponentOutletInjector", 4, "ngFor", "ngForOf"], [3, "ngComponentOutlet", "ngComponentOutletInjector"]],
    template: function TuiAlertHostComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵtemplate"](0, TuiAlertHostComponent_div_0_Template, 2, 2, "div", 0);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngForOf", ctx.alerts)("ngForTrackBy", ctx.trackBy);
      }
    },
    dependencies: [common_mjs_.NgForOf, common_mjs_.NgComponentOutlet, TuiMapperPipe],
    styles: ["tui-alert-host>.t-wrapper{position:fixed;top:0;left:0;display:flex;width:100%;height:100%;flex-direction:column;pointer-events:none}tui-alert-host>.t-wrapper>*{pointer-events:auto}\n"],
    encapsulation: 2,
    data: {
      animation: [taiga_ui_cdk_constants/* TUI_PARENT_ANIMATION */.Hk]
    }
  });
  return TuiAlertHostComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAlertHostModule = /*#__PURE__*/(() => {
  class TuiAlertHostModule {}
  TuiAlertHostModule.ɵfac = function TuiAlertHostModule_Factory(t) {
    return new (t || TuiAlertHostModule)();
  };
  TuiAlertHostModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiAlertHostModule
  });
  TuiAlertHostModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, TuiMapperPipeModule]]
  });
  return TuiAlertHostModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-components-alert-host.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js
var debounceTime = __webpack_require__(152);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-internal-svg-defs-host.js









function TuiSvgDefsHostComponent__svg_ng_container_1__svg_defs_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵnamespaceSVG"]();
    core_mjs_["ɵɵelement"](0, "defs", 4);
  }
  if (rf & 2) {
    const def_r1 = ctx.$implicit;
    core_mjs_["ɵɵproperty"]("innerHTML", def_r1, core_mjs_["ɵɵsanitizeHtml"]);
  }
}
function TuiSvgDefsHostComponent__svg_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵnamespaceSVG"]();
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiSvgDefsHostComponent__svg_ng_container_1__svg_defs_1_Template, 1, 1, "defs", 3);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngForOf", ctx_r1.items);
  }
}
function TuiSvgDefsHostComponent__svg_ng_template_2__svg_defs_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵnamespaceSVG"]();
    core_mjs_["ɵɵelementStart"](0, "defs");
    core_mjs_["ɵɵelement"](1, "svg", 6);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const def_r3 = ctx.$implicit;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("outerHTML", def_r3, core_mjs_["ɵɵsanitizeHtml"]);
  }
}
function TuiSvgDefsHostComponent__svg_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵtemplate"](0, TuiSvgDefsHostComponent__svg_ng_template_2__svg_defs_0_Template, 2, 1, "defs", 5);
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("ngForOf", ctx_r1.items);
  }
}
let TuiSvgDefsHostComponent = /*#__PURE__*/(() => {
  class TuiSvgDefsHostComponent {
    constructor(svgService, cdr, destroy$, platformId) {
      this.svgService = svgService;
      this.cdr = cdr;
      this.destroy$ = destroy$;
      this.isBrowser = true;
      this.isBrowser = !(0,common_mjs_.isPlatformServer)(platformId);
    }
    // @bad TODO: Looks like it could be async piped but it was probably written like that for a reason
    ngOnInit() {
      this.svgService.items$.pipe((0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(defsMap => {
        this.items = defsMap.values();
        this.cdr.detectChanges();
      });
    }
  }
  TuiSvgDefsHostComponent.ɵfac = function TuiSvgDefsHostComponent_Factory(t) {
    return new (t || TuiSvgDefsHostComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_services/* TuiSvgService */.kd), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.PLATFORM_ID));
  };
  TuiSvgDefsHostComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiSvgDefsHostComponent,
    selectors: [["tui-svg-defs-host"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])],
    decls: 4,
    vars: 2,
    consts: [["server", ""], ["version", "1.1", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", "xmlns", "http://www.w3.org/2000/svg"], [4, "ngIf", "ngIfElse"], [3, "innerHTML", 4, "ngFor", "ngForOf"], [3, "innerHTML"], [4, "ngFor", "ngForOf"], [3, "outerHTML"]],
    template: function TuiSvgDefsHostComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵnamespaceSVG"]();
        core_mjs_["ɵɵelementStart"](0, "svg", 1);
        core_mjs_["ɵɵtemplate"](1, TuiSvgDefsHostComponent__svg_ng_container_1_Template, 2, 1, "ng-container", 2)(2, TuiSvgDefsHostComponent__svg_ng_template_2_Template, 1, 1, "ng-template", null, 0, core_mjs_["ɵɵtemplateRefExtractor"]);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        const server_r4 = core_mjs_["ɵɵreference"](3);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.isBrowser)("ngIfElse", server_r4);
      }
    },
    dependencies: [common_mjs_.NgIf, common_mjs_.NgForOf],
    styles: ["[_nghost-%COMP%]{display:none}"],
    changeDetection: 0
  });
  return TuiSvgDefsHostComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiSvgDefsHostModule = /*#__PURE__*/(() => {
  class TuiSvgDefsHostModule {}
  TuiSvgDefsHostModule.ɵfac = function TuiSvgDefsHostModule_Factory(t) {
    return new (t || TuiSvgDefsHostModule)();
  };
  TuiSvgDefsHostModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiSvgDefsHostModule
  });
  TuiSvgDefsHostModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, taiga_ui_cdk_directives_let/* TuiLetModule */.ks]]
  });
  return TuiSvgDefsHostModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-internal-svg-defs-host.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-hints-host.js











const taiga_ui_core_components_hints_host_c0 = a0 => ({
  $implicit: a0
});
function TuiHintsHostComponent_div_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiHintsHostComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 1);
    core_mjs_["ɵɵtemplate"](1, TuiHintsHostComponent_div_0_ng_container_1_Template, 1, 0, "ng-container", 2);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const hint_r1 = ctx.$implicit;
    core_mjs_["ɵɵproperty"]("@tuiParentAnimation", undefined)("tuiActiveZoneParent", hint_r1.activeZone || null);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", hint_r1.component)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction1"](4, taiga_ui_core_components_hints_host_c0, hint_r1));
  }
}
let TuiHintsHostComponent = /*#__PURE__*/(() => {
  class TuiHintsHostComponent {
    constructor(hints$, destroy$, cdr) {
      this.hints$ = hints$;
      this.destroy$ = destroy$;
      this.cdr = cdr;
      this.hints = [];
    }
    ngOnInit() {
      // Due to this view being parallel to app content, `markForCheck` from `async` pipe
      // can happen after view was checked, so calling `detectChanges` instead
      this.hints$.pipe((0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(hints => {
        this.hints = hints;
        this.cdr.detectChanges();
      });
    }
  }
  TuiHintsHostComponent.ɵfac = function TuiHintsHostComponent_Factory(t) {
    return new (t || TuiHintsHostComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_services/* TuiHintService */.Vj), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef));
  };
  TuiHintsHostComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiHintsHostComponent,
    selectors: [["tui-hints-host"]],
    hostAttrs: ["aria-live", "polite"],
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])],
    decls: 1,
    vars: 1,
    consts: [["role", "tooltip", 3, "tuiActiveZoneParent", 4, "ngFor", "ngForOf"], ["role", "tooltip", 3, "tuiActiveZoneParent"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"]],
    template: function TuiHintsHostComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵtemplate"](0, TuiHintsHostComponent_div_0_Template, 2, 6, "div", 0);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngForOf", ctx.hints);
      }
    },
    dependencies: [common_mjs_.NgForOf, taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA],
    styles: ["[_nghost-%COMP%]{position:fixed;top:0;left:0;width:100%;height:0}"],
    data: {
      animation: [taiga_ui_cdk_constants/* TUI_PARENT_ANIMATION */.Hk]
    }
  });
  return TuiHintsHostComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHintsHostModule = /*#__PURE__*/(() => {
  class TuiHintsHostModule {}
  TuiHintsHostModule.ɵfac = function TuiHintsHostModule_Factory(t) {
    return new (t || TuiHintsHostModule)();
  };
  TuiHintsHostModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiHintsHostModule
  });
  TuiHintsHostModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiActiveZoneModule]]
  });
  return TuiHintsHostModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-hints-host.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-root.js
















const taiga_ui_core_components_root_c0 = ["*", [["tuiOverContent"]], [["tuiOverDialogs"]], [["tuiOverAlerts"]], [["tuiOverPortals"]], [["tuiOverHints"]]];
const taiga_ui_core_components_root_c1 = ["*", "tuiOverContent", "tuiOverDialogs", "tuiOverAlerts", "tuiOverPortals", "tuiOverHints"];
function TuiRootComponent_tui_scroll_controls_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-scroll-controls", 2);
  }
}
let TuiRootComponent = /*#__PURE__*/(() => {
  class TuiRootComponent {
    constructor(reducedMotion, duration, dialogs, isMobile, breakpoint, isIOS, isAndroid, document, theme) {
      var _a;
      this.reducedMotion = reducedMotion;
      this.duration = duration;
      this.dialogs = dialogs;
      this.isMobile = isMobile;
      this.breakpoint = breakpoint;
      this.isIOS = isIOS;
      this.isAndroid = isAndroid;
      this.isMobileRes$ = this.breakpoint.pipe((0,operators_map/* map */.T)(breakpoint => breakpoint === 'mobile'));
      this.scrollbars$ = this.dialogs.length && !this.isMobile ? (0,observable_combineLatest/* combineLatest */.z)([...this.dialogs]).pipe((0,operators_map/* map */.T)(dialogs => !dialogs.some(({
        length
      }) => length)), (0,debounceTime/* debounceTime */.B)(0)) : (0,of.of)(!this.isMobile);
      (_a = document.defaultView) === null || _a === void 0 ? void 0 : _a.document.body.setAttribute('data-tui-theme', theme.toLowerCase());
    }
  }
  TuiRootComponent.ɵfac = function TuiRootComponent_Factory(t) {
    return new (t || TuiRootComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_REDUCED_MOTION */.vo), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_ANIMATIONS_DURATION */.U_), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_DIALOGS */.lb), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_MOBILE */.Td), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_services/* TuiBreakpointService */.$n), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_IOS */.mg), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_ANDROID */.E), core_mjs_["ɵɵdirectiveInject"](common_mjs_.DOCUMENT), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_THEME */.HG));
  };
  TuiRootComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiRootComponent,
    selectors: [["tui-root"]],
    hostAttrs: ["data-tui-version", "3.70.0"],
    hostVars: 9,
    hostBindings: function TuiRootComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("touchstart.passive.silent", function TuiRootComponent_touchstart_passive_silent_HostBindingHandler() {
          return 0;
        })("$.class._mobile", function TuiRootComponent___class__mobile_HostBindingHandler() {
          return ctx.isMobileRes$;
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵhostProperty"]("$.class._mobile", ctx.isMobileRes$);
        core_mjs_["ɵɵstyleProp"]("--tui-duration", ctx.duration, "ms");
        core_mjs_["ɵɵclassProp"]("_ios", ctx.isIOS)("_android", ctx.isAndroid)("_reduced-motion", ctx.reducedMotion);
      }
    },
    ngContentSelectors: taiga_ui_core_components_root_c1,
    decls: 14,
    vars: 3,
    consts: [["class", "t-root-scrollbar", 4, "ngIf"], [1, "t-root-content"], [1, "t-root-scrollbar"]],
    template: function TuiRootComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"](taiga_ui_core_components_root_c0);
        core_mjs_["ɵɵtemplate"](0, TuiRootComponent_tui_scroll_controls_0_Template, 1, 0, "tui-scroll-controls", 0);
        core_mjs_["ɵɵpipe"](1, "async");
        core_mjs_["ɵɵelement"](2, "tui-svg-defs-host");
        core_mjs_["ɵɵelementStart"](3, "tui-dropdown-host")(4, "div", 1);
        core_mjs_["ɵɵprojection"](5);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵprojection"](6, 1);
        core_mjs_["ɵɵelement"](7, "tui-dialog-host");
        core_mjs_["ɵɵprojection"](8, 2);
        core_mjs_["ɵɵelement"](9, "tui-alert-host");
        core_mjs_["ɵɵprojection"](10, 3);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵprojection"](11, 4);
        core_mjs_["ɵɵelement"](12, "tui-hints-host");
        core_mjs_["ɵɵprojection"](13, 5);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](1, 1, ctx.scrollbars$));
      }
    },
    dependencies: [TuiScrollControlsComponent, TuiSvgDefsHostComponent, TuiDropdownHostComponent, TuiDialogHostComponent, TuiAlertHostComponent, TuiHintsHostComponent, common_mjs_.NgIf, common_mjs_.AsyncPipe],
    styles: ["@keyframes tuiPresent{to{content:\"1\"}}@keyframes tuiSkeletonVibe{to{opacity:.5}}html,.tui-zero-scrollbar{scrollbar-width:none;-ms-overflow-style:none}html::-webkit-scrollbar,.tui-zero-scrollbar::-webkit-scrollbar,html::-webkit-scrollbar-thumb,.tui-zero-scrollbar::-webkit-scrollbar-thumb{display:none}body[data-tui-theme]{font:var(--tui-font-text-s);color:var(--tui-text-01);background:var(--tui-base-01);margin:0}tui-root{position:relative;display:block;flex:1;-webkit-tap-highlight-color:transparent}tui-root>.t-root-scrollbar{position:fixed;top:0;left:0;bottom:0;right:0;display:none;margin:0}[data-tui-theme] tui-root>.t-root-scrollbar{display:block}.t-root-content{height:100%;isolation:isolate}.t-overscroll-none{overscroll-behavior:none}\n"],
    encapsulation: 2
  });
  return TuiRootComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiRootModule = /*#__PURE__*/(() => {
  class TuiRootModule {}
  TuiRootModule.ɵfac = function TuiRootModule_Factory(t) {
    return new (t || TuiRootModule)();
  };
  TuiRootModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiRootModule
  });
  TuiRootModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, EventPluginsModule, TuiDropdownHostModule, TuiSvgDefsHostModule, TuiHintsHostModule, TuiDialogHostModule, TuiAlertHostModule, TuiScrollControlsModule]]
  });
  return TuiRootModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-root.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/repeatWhen.js
var repeatWhen = __webpack_require__(3981);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-alert.js














function TuiAlertComponent_label_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r1, " ");
  }
}
function TuiAlertComponent_label_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "label", 4);
    core_mjs_["ɵɵtemplate"](1, TuiAlertComponent_label_1_ng_container_1_Template, 2, 1, "ng-container", 5);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.item.label)("polymorpheusOutletContext", ctx_r1.item);
  }
}
function TuiAlertComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "div", 6);
  }
  if (rf & 2) {
    const text_r3 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("innerHTML", text_r3, core_mjs_["ɵɵsanitizeHtml"]);
  }
}
const TUI_ALERT_POSITION = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,core_mjs_.inject)(taiga_ui_cdk_tokens/* TUI_IS_MOBILE */.Td) ? '1rem 1rem 0 auto' : '2rem 3rem 0 auto');

// TODO: get rid of $any in template
let TuiAlertComponent = /*#__PURE__*/(() => {
  class TuiAlertComponent {
    constructor(el, destroy$, position, options, item) {
      this.el = el;
      this.destroy$ = destroy$;
      this.position = position;
      this.options = options;
      this.item = item;
      this.autoClose = typeof this.item.autoClose === 'function' ? this.item.autoClose(this.item.status) : this.item.autoClose;
      this.animation = this.position.endsWith('auto') ? Object.assign(Object.assign({}, this.options), {
        value: 'right'
      }) : Object.assign(Object.assign({}, this.options), {
        value: 'left'
      });
    }
    ngOnInit() {
      this.initAutoClose();
    }
    close() {
      this.item.$implicit.complete();
    }
    initAutoClose() {
      if (!this.autoClose) {
        return;
      }
      (0,observable_timer/* timer */.O)((0,taiga_ui_cdk_utils_miscellaneous/* tuiIsNumber */.sZ)(this.autoClose) ? this.autoClose : 3000).pipe((0,takeUntil/* takeUntil */.Q)((0,fromEvent/* fromEvent */.R)(this.el.nativeElement, 'mouseenter')),
      /**
       * TODO: replace to
       * repeat({
       *    delay: () => fromEvent(this.el.nativeElement, 'mouseleave'),
       * })
       *
       * in RxJS 7
       */
      // eslint-disable-next-line rxjs/no-ignored-notifier
      (0,repeatWhen/* repeatWhen */.Y)(() => (0,fromEvent/* fromEvent */.R)(this.el.nativeElement, 'mouseleave')), (0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(() => this.close());
    }
  }
  TuiAlertComponent.ɵfac = function TuiAlertComponent_Factory(t) {
    return new (t || TuiAlertComponent)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](TUI_ALERT_POSITION), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_ANIMATION_OPTIONS */.fx), core_mjs_["ɵɵdirectiveInject"](tinkoff_ng_polymorpheus/* POLYMORPHEUS_CONTEXT */.su));
  };
  TuiAlertComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiAlertComponent,
    selectors: [["tui-alert"]],
    hostAttrs: ["role", "alert"],
    hostVars: 5,
    hostBindings: function TuiAlertComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵsyntheticHostProperty"]("@tuiFadeIn", ctx.options)("@tuiSlideIn", ctx.animation)("@tuiHeightCollapse", ctx.animation);
        core_mjs_["ɵɵstyleProp"]("margin", ctx.position);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])],
    decls: 4,
    vars: 7,
    consts: [[3, "close", "hasIcon", "hideClose", "icon", "status"], ["automation-id", "tui-notification-alert__heading", "class", "t-heading", 4, "ngIf"], ["automation-id", "tui-notification-alert__content", 1, "t-content"], [3, "innerHTML", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-notification-alert__heading", 1, "t-heading"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], [3, "innerHTML"]],
    template: function TuiAlertComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵelementStart"](0, "tui-notification", 0);
        core_mjs_["ɵɵlistener"]("close", function TuiAlertComponent_Template_tui_notification_close_0_listener() {
          return ctx.close();
        });
        core_mjs_["ɵɵtemplate"](1, TuiAlertComponent_label_1_Template, 2, 2, "label", 1);
        core_mjs_["ɵɵelementStart"](2, "div", 2);
        core_mjs_["ɵɵtemplate"](3, TuiAlertComponent_div_3_Template, 1, 1, "div", 3);
        core_mjs_["ɵɵelementEnd"]()();
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("hasIcon", ctx.item.hasIcon)("hideClose", !ctx.item.hasCloseButton)("icon", ctx.item.icon)("status", ctx.item.status);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.item.label);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.item.content)("polymorpheusOutletContext", ctx.item);
      }
    },
    dependencies: [taiga_ui_core_components_notification/* TuiNotificationComponent */.v, common_mjs_.NgIf, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA],
    styles: ["[_nghost-%COMP%]{display:block;box-shadow:var(--tui-shadow-dropdown);border-radius:var(--tui-radius-l);width:18rem}[_nghost-%COMP%]:not(:first-child){margin-top:.75rem!important}[_nghost-%COMP%]:not(:last-child){margin-bottom:0!important}.t-heading[_ngcontent-%COMP%]{margin:0}[data-size=s][_ngcontent-%COMP%]   .t-heading[_ngcontent-%COMP%]{font:var(--tui-font-text-s);font-weight:bold}[data-size=m][_ngcontent-%COMP%]   .t-heading[_ngcontent-%COMP%]{font:var(--tui-font-text-m);line-height:1.25rem;font-weight:bold}[data-size=l][_ngcontent-%COMP%]   .t-heading[_ngcontent-%COMP%]{font:var(--tui-font-text-l);line-height:1.5rem;font-weight:bold}.t-content[_ngcontent-%COMP%]{color:var(--tui-text-01);word-wrap:break-word;word-break:break-word}.t-content[_ngcontent-%COMP%]:empty{display:none}"],
    data: {
      animation: [tuiFadeIn, tuiSlideIn, tuiHeightCollapse]
    },
    changeDetection: 0
  });
  return TuiAlertComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let taiga_ui_core_components_alert_TuiAlertService = /*#__PURE__*/(() => {
  class TuiAlertService extends taiga_ui_cdk_abstract/* AbstractTuiDialogService */.iX {
    constructor(defaultOptions, idService) {
      super(idService);
      this.defaultOptions = defaultOptions;
      this.component = new tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS(TuiAlertComponent);
    }
  }
  TuiAlertService.ɵfac = function TuiAlertService_Factory(t) {
    return new (t || TuiAlertService)(core_mjs_["ɵɵinject"](taiga_ui_core_tokens/* TUI_NOTIFICATION_OPTIONS */.Ub), core_mjs_["ɵɵinject"](taiga_ui_cdk_services/* TuiIdService */.BF));
  };
  TuiAlertService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiAlertService,
    factory: TuiAlertService.ɵfac,
    providedIn: 'root'
  });
  return TuiAlertService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAlertDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiAlertDirective extends AbstractTuiDialogDirective {}
  TuiAlertDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiAlertDirective_BaseFactory;
    return function TuiAlertDirective_Factory(t) {
      return (ɵTuiAlertDirective_BaseFactory || (ɵTuiAlertDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiAlertDirective)))(t || TuiAlertDirective);
    };
  })();
  TuiAlertDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiAlertDirective,
    selectors: [["ng-template", "tuiAlert", ""]],
    inputs: {
      options: [i0.ɵɵInputFlags.None, "tuiAlertOptions", "options"],
      open: [i0.ɵɵInputFlags.None, "tuiAlert", "open"]
    },
    outputs: {
      openChange: "tuiAlertChange"
    },
    features: [i0.ɵɵProvidersFeature([{
      provide: AbstractTuiDialogService,
      useExisting: taiga_ui_core_components_alert_TuiAlertService
    }]), i0.ɵɵInheritDefinitionFeature]
  });
  return TuiAlertDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAlertModule = /*#__PURE__*/(() => {
  class TuiAlertModule {}
  TuiAlertModule.ɵfac = function TuiAlertModule_Factory(t) {
    return new (t || TuiAlertModule)();
  };
  TuiAlertModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiAlertModule
  });
  TuiAlertModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    providers: [(0,taiga_ui_cdk_tokens/* tuiAsAlerts */.IY)(taiga_ui_core_components_alert_TuiAlertService)],
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, taiga_ui_core_components_notification/* TuiNotificationModule */.O]]
  });
  return TuiAlertModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-alert.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-obscured.js










/**
 * Directive that monitors element visibility
 */
let TuiObscuredDirective = /*#__PURE__*/(() => {
  class TuiObscuredDirective {
    constructor(activeZone, obscured$) {
      this.enabled$ = new internal_Subject/* Subject */.B();
      const mapped$ = obscured$.pipe((0,operators_map/* map */.T)(obscuredBy => !!obscuredBy && (!activeZone || !obscuredBy.length || obscuredBy.every(element => !activeZone.contains(element)))));
      this.tuiObscured = this.enabled$.pipe((0,taiga_ui_cdk_observables/* tuiIfMap */.aY)(() => mapped$));
    }
    set tuiObscuredEnabled(enabled) {
      this.enabled$.next(enabled);
    }
  }
  TuiObscuredDirective.ɵfac = function TuiObscuredDirective_Factory(t) {
    return new (t || TuiObscuredDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, 8), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiObscuredService */.Ft, 2));
  };
  TuiObscuredDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiObscuredDirective,
    selectors: [["", "tuiObscured", ""]],
    inputs: {
      tuiObscuredEnabled: "tuiObscuredEnabled"
    },
    outputs: {
      tuiObscured: "tuiObscured"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiObscuredService */.Ft, taiga_ui_cdk_services/* TuiParentsScrollService */.o4, taiga_ui_cdk_services/* TuiDestroyService */.ew])]
  });
  return TuiObscuredDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiObscuredModule = /*#__PURE__*/(() => {
  class TuiObscuredModule {}
  TuiObscuredModule.ɵfac = function TuiObscuredModule_Factory(t) {
    return new (t || TuiObscuredModule)();
  };
  TuiObscuredModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiObscuredModule
  });
  TuiObscuredModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiObscuredModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-obscured.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-hosted-dropdown.js



















const taiga_ui_core_components_hosted_dropdown_c0 = ["wrapper"];
const taiga_ui_core_components_hosted_dropdown_c1 = ["*"];
const taiga_ui_core_components_hosted_dropdown_c2 = (a0, a1) => ({
  $implicit: a0,
  close: a1
});
function TuiHostedDropdownComponent_div_0_ng_template_3_div_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 8);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r4, " ");
  }
}
function TuiHostedDropdownComponent_div_0_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "div", 6, 2);
    core_mjs_["ɵɵlistener"]("keydown", function TuiHostedDropdownComponent_div_0_ng_template_3_Template_div_keydown_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r3);
      const ctx_r1 = core_mjs_["ɵɵnextContext"](2);
      return core_mjs_["ɵɵresetView"](ctx_r1.onKeydown($event));
    });
    core_mjs_["ɵɵtemplate"](2, TuiHostedDropdownComponent_div_0_ng_template_3_div_2_Template, 2, 1, "div", 7);
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵelement"](3, "div");
  }
  if (rf & 2) {
    core_mjs_["ɵɵnextContext"]();
    const activeZone_r5 = core_mjs_["ɵɵreference"](1);
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.content)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction2"](2, taiga_ui_core_components_hosted_dropdown_c2, activeZone_r5, ctx_r1.close));
  }
}
function TuiHostedDropdownComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "div", 4, 0);
    core_mjs_["ɵɵlistener"]("tuiActiveZoneChange", function TuiHostedDropdownComponent_div_0_Template_div_tuiActiveZoneChange_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r1);
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.onActiveZone($event));
    })("tuiObscured", function TuiHostedDropdownComponent_div_0_Template_div_tuiObscured_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r1);
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.onHostObscured($event));
    });
    core_mjs_["ɵɵprojection"](2);
    core_mjs_["ɵɵtemplate"](3, TuiHostedDropdownComponent_div_0_ng_template_3_Template, 4, 5, "ng-template", 5, 1, core_mjs_["ɵɵtemplateRefExtractor"]);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const isOpen_r6 = ctx.tuiLet;
    const dropdown_r7 = core_mjs_["ɵɵreference"](4);
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("tuiDropdown", dropdown_r7)("tuiDropdownManual", isOpen_r6 && ctx_r1.canOpen)("tuiDropdownSided", ctx_r1.sided)("tuiObscuredEnabled", isOpen_r6);
    core_mjs_["ɵɵadvance"](3);
    core_mjs_["ɵɵproperty"]("polymorpheus", ctx_r1.context);
  }
}
let TuiAccessorProxyDirective = /*#__PURE__*/(() => {
  class TuiAccessorProxyDirective extends taiga_ui_core_abstract/* TuiPositionAccessor */.dg {
    constructor() {
      super(...arguments);
      this.type = 'dummy';
    }
    getPosition() {
      return [0, 0];
    }
  }
  TuiAccessorProxyDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiAccessorProxyDirective_BaseFactory;
    return function TuiAccessorProxyDirective_Factory(t) {
      return (ɵTuiAccessorProxyDirective_BaseFactory || (ɵTuiAccessorProxyDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiAccessorProxyDirective)))(t || TuiAccessorProxyDirective);
    };
  })();
  TuiAccessorProxyDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiAccessorProxyDirective,
    selectors: [["", "tuiAccessorProxy", ""]],
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: taiga_ui_core_abstract/* TuiPositionAccessor */.dg,
      multi: true,
      deps: [[new core_mjs_.Optional(), new core_mjs_.SkipSelf(), TuiAccessorProxyDirective], TuiAccessorProxyDirective],
      useFactory: (accessor, fallback) => accessor || fallback
    }]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiAccessorProxyDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_HOSTED_DROPDOWN_COMPONENT = new core_mjs_.InjectionToken('[TUI_HOSTED_DROPDOWN_COMPONENT]');
let TuiDropdownOpenMonitorDirective = /*#__PURE__*/(() => {
  class TuiDropdownOpenMonitorDirective {
    constructor(destroy$, hosted, dropdown, open) {
      open === null || open === void 0 ? void 0 : open.tuiDropdownOpenChange.pipe((0,filter/* filter */.p)(value => value && open.dropdown === dropdown && !hosted.focused), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(() => {
        var _a;
        (_a = hosted.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.focus();
        hosted.updateOpen(true);
      });
    }
  }
  TuiDropdownOpenMonitorDirective.ɵfac = function TuiDropdownOpenMonitorDirective_Factory(t) {
    return new (t || TuiDropdownOpenMonitorDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](TUI_HOSTED_DROPDOWN_COMPONENT), core_mjs_["ɵɵdirectiveInject"](TuiDropdownDirective, 2), core_mjs_["ɵɵdirectiveInject"](TuiDropdownOpenDirective, 8));
  };
  TuiDropdownOpenMonitorDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDropdownOpenMonitorDirective,
    selectors: [["", "tuiDropdownOpenMonitor", ""]],
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])]
  });
  return TuiDropdownOpenMonitorDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHostedDropdownConnectorDirective = /*#__PURE__*/(() => {
  class TuiHostedDropdownConnectorDirective {}
  TuiHostedDropdownConnectorDirective.ɵfac = function TuiHostedDropdownConnectorDirective_Factory(t) {
    return new (t || TuiHostedDropdownConnectorDirective)();
  };
  TuiHostedDropdownConnectorDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiHostedDropdownConnectorDirective,
    selectors: [["", "tuiHostedDropdownHost", ""]]
  });
  return TuiHostedDropdownConnectorDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function shouldClose(event) {
  var _a;
  return 'key' in event && event.key.toLowerCase() === 'escape' && this.canOpen && this.open && !((_a = this.dropdown) === null || _a === void 0 ? void 0 : _a.nextElementSibling);
}
let TuiHostedDropdownComponent = /*#__PURE__*/(() => {
  class TuiHostedDropdownComponent {
    constructor(hover$, el) {
      this.hover$ = hover$;
      this.el = el;
      this.openChange$ = new internal_BehaviorSubject/* BehaviorSubject */.t(false);
      this.hostHover$ = (0,observable_combineLatest/* combineLatest */.z)([(0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.el.nativeElement, 'mouseover').pipe((0,operators_map/* map */.T)(e => this.computedHost.contains((0,taiga_ui_cdk_utils_dom/* tuiGetActualTarget */.U9)(e))), (0,operators_switchMap/* switchMap */.n)(visible => {
        var _a, _b;
        return (0,of.of)(visible).pipe((0,delay/* delay */.c)((visible ? (_a = this.hover$) === null || _a === void 0 ? void 0 : _a.showDelay : (_b = this.hover$) === null || _b === void 0 ? void 0 : _b.hideDelay) || 0));
      })), this.hover$ || empty/* EMPTY */.w]).pipe((0,operators_map/* map */.T)(([visible, hovered]) => visible && hovered));
      this.sided = false;
      this.canOpen = true;
      this.open$ = (0,merge/* merge */.h)(this.openChange$, this.hostHover$).pipe(skip(1), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)(), (0,share/* share */.u)());
      this.focusedChange = new core_mjs_.EventEmitter();
      /** TODO: rename in 4.0 */
      this.openChange = this.openChange$;
      this.close = () => this.updateOpen(false);
    }
    set open(open) {
      this.openChange.next(open);
    }
    get open() {
      return this.openChange.value;
    }
    get host() {
      var _a;
      return ((_a = this.dropdownHost) === null || _a === void 0 ? void 0 : _a.nativeElement) || this.el.nativeElement;
    }
    get computedHost() {
      var _a;
      return ((_a = this.dropdownHost) === null || _a === void 0 ? void 0 : _a.nativeElement) || this.nativeFocusableElement || this.el.nativeElement;
    }
    get dropdown() {
      var _a, _b;
      return (_b = (_a = this.dropdownDirective) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement;
    }
    get nativeFocusableElement() {
      return (0,taiga_ui_cdk_utils_focus/* tuiIsNativeKeyboardFocusable */.Hn)(this.host) ? this.host : (0,taiga_ui_cdk_utils_focus/* tuiGetClosestFocusable */.km)({
        initial: this.host,
        root: this.el.nativeElement
      });
    }
    get focused() {
      return (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocusedIn */.Ij)(this.host) || this.open && !!this.wrapper && (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocusedIn */.Ij)(this.wrapper.nativeElement);
    }
    onFocusInOut() {
      this.el.nativeElement.classList.toggle('_hosted_dropdown_focused', this.focused);
    }
    onFocusIn(target) {
      if (!this.computedHost.contains(target)) {
        this.updateOpen(false);
      }
    }
    onClick(target) {
      var _a;
      if (!this.hostEditable && this.computedHost.contains(target) && !((_a = this.hover$) === null || _a === void 0 ? void 0 : _a.hovered)) {
        this.updateOpen(!this.open);
      }
    }
    onKeyDownEsc(event) {
      event.preventDefault();
      this.closeDropdown();
    }
    onArrow(event, down) {
      this.focusDropdown(event, down);
    }
    onKeydown({
      key,
      target,
      defaultPrevented
    }) {
      if (!defaultPrevented && (0,taiga_ui_core_utils_miscellaneous/* tuiIsEditingKey */.On)(key) && this.hostEditable && (0,taiga_ui_cdk_utils_dom/* tuiIsHTMLElement */.Ki)(target) && !(0,taiga_ui_cdk_utils_dom/* tuiIsElementEditable */.dn)(target)) {
        this.focusHost();
      }
    }
    onActiveZone(active) {
      this.updateFocused(active);
      if (!active) {
        this.updateOpen(false);
      }
    }
    onHostObscured(obscured) {
      if (obscured) {
        this.closeDropdown();
      }
    }
    updateOpen(open) {
      if (!open || this.canOpen) {
        this.open = open;
      }
    }
    get hostEditable() {
      return (0,taiga_ui_cdk_utils_dom/* tuiIsElementEditable */.dn)(this.computedHost);
    }
    focusDropdown(event, first) {
      const host = this.nativeFocusableElement;
      if (!host || !(0,taiga_ui_cdk_utils_dom/* tuiIsHTMLElement */.Ki)(host) || !(0,taiga_ui_cdk_utils_dom/* tuiIsElement */.ru)(event.target) || !host.contains(event.target)) {
        return;
      }
      if (!this.wrapper || !this.open || !this.dropdown || !(0,taiga_ui_cdk_utils_dom/* tuiIsHTMLElement */.Ki)(this.wrapper.nativeElement.nextElementSibling)) {
        this.updateOpen(true);
        if (!(0,taiga_ui_cdk_utils_dom/* tuiIsElementEditable */.dn)(host)) {
          event.preventDefault();
        }
        return;
      }
      const initial = first ? this.wrapper.nativeElement : this.wrapper.nativeElement.nextElementSibling;
      const focusable = (0,taiga_ui_cdk_utils_focus/* tuiGetClosestFocusable */.km)({
        initial,
        root: this.wrapper.nativeElement,
        previous: !first
      });
      if (!focusable) {
        return;
      }
      focusable.focus();
      event.preventDefault();
    }
    closeDropdown() {
      if (this.focused) {
        this.focusHost();
      }
      this.updateOpen(false);
    }
    focusHost() {
      const host = this.nativeFocusableElement;
      if (host) {
        host.focus({
          preventScroll: true
        });
      }
    }
    updateFocused(focused) {
      this.focusedChange.emit(focused);
    }
  }
  TuiHostedDropdownComponent.ɵfac = function TuiHostedDropdownComponent_Factory(t) {
    return new (t || TuiHostedDropdownComponent)(core_mjs_["ɵɵdirectiveInject"](TuiDropdownHoverDirective, 10), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
  };
  TuiHostedDropdownComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiHostedDropdownComponent,
    selectors: [["tui-hosted-dropdown"]],
    contentQueries: function TuiHostedDropdownComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiHostedDropdownConnectorDirective, 5, core_mjs_.ElementRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.dropdownHost = _t.first);
      }
    },
    viewQuery: function TuiHostedDropdownComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](taiga_ui_core_components_hosted_dropdown_c0, 5, core_mjs_.ElementRef);
        core_mjs_["ɵɵviewQuery"](TuiDropdownDirective, 5);
        core_mjs_["ɵɵviewQuery"](taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.wrapper = _t.first);
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.dropdownDirective = _t.first);
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.activeZone = _t.first);
      }
    },
    hostBindings: function TuiHostedDropdownComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("focusin.capture.silent", function TuiHostedDropdownComponent_focusin_capture_silent_HostBindingHandler() {
          return ctx.onFocusInOut();
        })("focusout.capture.silent", function TuiHostedDropdownComponent_focusout_capture_silent_HostBindingHandler() {
          return ctx.onFocusInOut();
        })("focusin", function TuiHostedDropdownComponent_focusin_HostBindingHandler($event) {
          return ctx.onFocusIn($event.target);
        })("click", function TuiHostedDropdownComponent_click_HostBindingHandler($event) {
          return ctx.onClick($event.target);
        })("keydown.silent.capture", function TuiHostedDropdownComponent_keydown_silent_capture_HostBindingHandler($event) {
          return ctx.onKeyDownEsc($event);
        }, false, core_mjs_["ɵɵresolveDocument"])("keydown.arrowDown", function TuiHostedDropdownComponent_keydown_arrowDown_HostBindingHandler($event) {
          return ctx.onArrow($event, true);
        })("keydown.arrowUp", function TuiHostedDropdownComponent_keydown_arrowUp_HostBindingHandler($event) {
          return ctx.onArrow($event, false);
        });
      }
    },
    inputs: {
      content: "content",
      sided: "sided",
      canOpen: "canOpen",
      open: "open"
    },
    outputs: {
      open$: "openChange",
      focusedChange: "focusedChange"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_cdk_tokens/* tuiAsFocusableItemAccessor */.Jr)(TuiHostedDropdownComponent), {
      provide: TuiAccessorProxyDirective,
      deps: [[new core_mjs_.Optional(), new core_mjs_.Self(), taiga_ui_core_abstract/* TuiPositionAccessor */.dg]],
      useFactory: position => position === null || position === void 0 ? void 0 : position[0]
    }, {
      provide: TUI_HOSTED_DROPDOWN_COMPONENT,
      useExisting: TuiHostedDropdownComponent
    }])],
    ngContentSelectors: taiga_ui_core_components_hosted_dropdown_c1,
    decls: 2,
    vars: 3,
    consts: [["activeZone", "tuiActiveZone"], ["dropdown", "polymorpheus"], ["wrapper", ""], ["tuiAccessorProxy", "", "tuiDropdownOpenMonitor", "", "class", "t-wrapper", 3, "tuiDropdown", "tuiDropdownManual", "tuiDropdownSided", "tuiObscuredEnabled", "tuiActiveZoneChange", "tuiObscured", 4, "tuiLet"], ["tuiAccessorProxy", "", "tuiDropdownOpenMonitor", "", 1, "t-wrapper", 3, "tuiActiveZoneChange", "tuiObscured", "tuiDropdown", "tuiDropdownManual", "tuiDropdownSided", "tuiObscuredEnabled"], [3, "polymorpheus"], [1, "t-dropdown", 3, "keydown"], ["class", "t-primitive", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-primitive"]],
    template: function TuiHostedDropdownComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵtemplate"](0, TuiHostedDropdownComponent_div_0_Template, 5, 5, "div", 3);
        core_mjs_["ɵɵpipe"](1, "async");
      }
      if (rf & 2) {
        let tmp_0_0;
        core_mjs_["ɵɵproperty"]("tuiLet", (tmp_0_0 = core_mjs_["ɵɵpipeBind1"](1, 1, ctx.open$)) !== null && tmp_0_0 !== undefined ? tmp_0_0 : ctx.openChange.value);
      }
    },
    dependencies: [taiga_ui_cdk_directives_let/* TuiLetDirective */.Nx, TuiAccessorProxyDirective, TuiDropdownOpenMonitorDirective, TuiDropdownDirective, TuiDropdownDriverDirective, TuiDropdownManualDirective, TuiDropdownPositionSidedDirective, taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, TuiObscuredDirective, tinkoff_ng_polymorpheus/* PolymorpheusTemplate */.A7, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{display:inline-flex}.t-wrapper[_ngcontent-%COMP%]{border-radius:inherit;height:inherit;flex:1 1 auto;width:100%}.t-dropdown[_ngcontent-%COMP%]{height:100%}.t-primitive[_ngcontent-%COMP%]{padding:1rem}"],
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([tinkoff_ng_event_plugins_shouldCall(shouldClose)], TuiHostedDropdownComponent.prototype, "onKeyDownEsc", null);
  return TuiHostedDropdownComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiHostedDropdownModule = /*#__PURE__*/(() => {
  class TuiHostedDropdownModule {}
  TuiHostedDropdownModule.ɵfac = function TuiHostedDropdownModule_Factory(t) {
    return new (t || TuiHostedDropdownModule)();
  };
  TuiHostedDropdownModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiHostedDropdownModule
  });
  TuiHostedDropdownModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, taiga_ui_cdk_directives_let/* TuiLetModule */.ks, TuiObscuredModule, TuiActiveZoneModule, TuiDropdownModule]]
  });
  return TuiHostedDropdownModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-hosted-dropdown.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-coercion.js
/**
 * Coerces a data-bound value (typically a string) to a boolean.
 * @example {@link https://material.angular.io/cdk/coercion/api#functions}
 */
function tuiCoerceBooleanProperty(value) {
  return value !== null && typeof value !== 'undefined' && `${value}` !== 'false';
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-coercion.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/argsOrArgArray.js
var argsOrArgArray = __webpack_require__(2326);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/observable/race.js




function race(...sources) {
  sources = (0,argsOrArgArray/* argsOrArgArray */.K)(sources);
  return sources.length === 1 ? (0,innerFrom/* innerFrom */.Tg)(sources[0]) : new Observable/* Observable */.c(raceInit(sources));
}
function raceInit(sources) {
  return subscriber => {
    let subscriptions = [];
    for (let i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
      subscriptions.push((0,innerFrom/* innerFrom */.Tg)(sources[i]).subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, value => {
        if (subscriptions) {
          for (let s = 0; s < subscriptions.length; s++) {
            s !== i && subscriptions[s].unsubscribe();
          }
          subscriptions = null;
        }
        subscriber.next(value);
      })));
    }
  };
}
//# sourceMappingURL=race.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/operators/skipWhile.js


function skipWhile(predicate) {
  return (0,lift/* operate */.N)((source, subscriber) => {
    let taking = false;
    let index = 0;
    source.subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, value => (taking || (taking = !predicate(value, index++))) && subscriber.next(value)));
  });
}
//# sourceMappingURL=skipWhile.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-auto-focus.js













let AbstractTuiAutofocusHandler = /*#__PURE__*/(() => {
  class AbstractTuiAutofocusHandler {
    constructor(focusable, el) {
      this.focusable = focusable;
      this.el = el;
    }
    get element() {
      var _a;
      return ((_a = this.focusable) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.el.nativeElement;
    }
    get isTextFieldElement() {
      return this.element.matches('input, textarea, [contenteditable]');
    }
  }
  AbstractTuiAutofocusHandler.ɵfac = function AbstractTuiAutofocusHandler_Factory(t) {
    core_mjs_["ɵɵinvalidFactory"]();
  };
  AbstractTuiAutofocusHandler.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: AbstractTuiAutofocusHandler
  });
  return AbstractTuiAutofocusHandler;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TIMEOUT = 1000;
const NG_ANIMATION_SELECTOR = '.ng-animating';
let TuiDefaultAutofocusHandler = /*#__PURE__*/(() => {
  class TuiDefaultAutofocusHandler extends AbstractTuiAutofocusHandler {
    constructor(focusable, el, animationFrame$) {
      super(focusable, el);
      this.animationFrame$ = animationFrame$;
    }
    setFocus() {
      if (this.isTextFieldElement) {
        race((0,observable_timer/* timer */.O)(TIMEOUT), this.animationFrame$.pipe((0,throttleTime/* throttleTime */.c)(taiga_ui_cdk_constants/* POLLING_TIME */.cZ), (0,operators_map/* map */.T)(() => this.element.closest(NG_ANIMATION_SELECTOR)), skipWhile(Boolean), (0,take/* take */.s)(1))).subscribe(() => this.element.focus({
          preventScroll: true
        }));
      } else {
        this.element.focus({
          preventScroll: true
        });
      }
    }
  }
  TuiDefaultAutofocusHandler.ɵfac = function TuiDefaultAutofocusHandler_Factory(t) {
    return new (t || TuiDefaultAutofocusHandler)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_FOCUSABLE_ITEM_ACCESSOR */.aX, 10), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* ANIMATION_FRAME */.dJ));
  };
  TuiDefaultAutofocusHandler.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDefaultAutofocusHandler,
    features: [core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiDefaultAutofocusHandler;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TEXTFIELD_ATTRS = ['type', 'inputMode', 'autocomplete', 'accept', 'min', 'max', 'step', 'pattern', 'size', 'maxlength'];
let TuiIosAutofocusHandler = /*#__PURE__*/(() => {
  class TuiIosAutofocusHandler extends AbstractTuiAutofocusHandler {
    constructor(focusable, el, renderer, zone, win) {
      super(focusable, el);
      this.renderer = renderer;
      this.zone = zone;
      this.win = win;
      this.patchCssStyles();
    }
    setFocus() {
      if (this.isTextFieldElement) {
        this.zone.runOutsideAngular(() => this.iosWebkitAutofocus());
      } else {
        this.element.focus({
          preventScroll: true
        });
      }
    }
    iosWebkitAutofocus() {
      var _a;
      const fakeInput = this.makeFakeInput();
      const duration = this.getDurationTimeBeforeFocus();
      let fakeFocusTimeoutId = 0;
      let elementFocusTimeoutId = 0;
      const blurHandler = () => fakeInput.focus({
        preventScroll: true
      });
      const focusHandler = () => {
        clearTimeout(fakeFocusTimeoutId);
        fakeFocusTimeoutId = this.win.setTimeout(() => {
          clearTimeout(elementFocusTimeoutId);
          fakeInput.removeEventListener('blur', blurHandler);
          fakeInput.removeEventListener('focus', focusHandler);
          elementFocusTimeoutId = this.win.setTimeout(() => {
            this.element.focus({
              preventScroll: false
            });
            fakeInput.remove();
          }, duration);
        });
      };
      fakeInput.addEventListener('blur', blurHandler, {
        once: true
      });
      fakeInput.addEventListener('focus', focusHandler);
      if (this.insideDialog()) {
        this.win.document.body.appendChild(fakeInput);
      } else {
        (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(fakeInput);
      }
      fakeInput.focus({
        preventScroll: true
      });
    }
    /**
     * @note:
     * emulate textfield position in layout with cursor
     * before focus to real textfield element
     *
     * required note:
     * [fakeInput.readOnly = true] ~
     * don't use {readOnly: true} value, it's doesn't work for emulate autofill
     *
     * [fakeInput.style.opacity = 0] ~
     * don't use {opacity: 0}, sometimes it's doesn't work for emulate real input
     *
     * [fakeInput.style.fontSize = 16px] ~
     * disable possible auto zoom
     *
     * [fakeInput.style.top/left] ~
     * emulate position cursor before focus to real textfield element
     */
    makeFakeInput() {
      const fakeInput = this.renderer.createElement('input');
      const rect = this.element.getBoundingClientRect();
      this.patchFakeInputFromFocusableElement(fakeInput);
      fakeInput.style.height = taiga_ui_cdk_utils_format_tuiPx(rect.height);
      fakeInput.style.width = taiga_ui_cdk_utils_format_tuiPx(rect.width / 2);
      fakeInput.style.position = 'fixed';
      fakeInput.style.zIndex = '-99999999';
      fakeInput.style.caretColor = 'transparent';
      fakeInput.style.border = 'none';
      fakeInput.style.outline = 'none';
      fakeInput.style.color = 'transparent';
      fakeInput.style.background = 'transparent';
      fakeInput.style.cursor = 'none';
      fakeInput.style.fontSize = taiga_ui_cdk_utils_format_tuiPx(16);
      fakeInput.style.top = taiga_ui_cdk_utils_format_tuiPx(rect.top);
      fakeInput.style.left = taiga_ui_cdk_utils_format_tuiPx(rect.left);
      return fakeInput;
    }
    getDurationTimeBeforeFocus() {
      return parseFloat(this.win.getComputedStyle(this.element).getPropertyValue('--tui-duration')) || 0;
    }
    /**
     * @note:
     * unfortunately, in older versions of iOS
     * there is a bug that the fake input cursor
     * will move along with the dialog animation
     * and then that dialog will be shaking
     */
    insideDialog() {
      return !!this.element.closest('tui-dialog');
    }
    /**
     * @note:
     * This is necessary so that the viewport isn't recalculated
     * and then the dialogs don't shake.
     *
     * Also, we need to fixed height viewport,
     * so that when focusing the dialogs don't shake
     */
    patchCssStyles() {
      [this.win.document.documentElement, this.win.document.body].forEach(element => {
        element.style.setProperty('overflow', 'auto');
        element.style.setProperty('height', '100%');
      });
    }
    /**
     * @note:
     * inherit basic attributes values from real input
     * for help iOS detect what do you want see on keyboard,
     * for example [inputMode=numeric, autocomplete=cc-number]
     */
    patchFakeInputFromFocusableElement(fakeInput) {
      TEXTFIELD_ATTRS.forEach(attr => {
        const value = this.element.getAttribute(attr);
        if ((0,taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj)(value)) {
          fakeInput.setAttribute(attr, value);
        }
      });
    }
  }
  TuiIosAutofocusHandler.ɵfac = function TuiIosAutofocusHandler_Factory(t) {
    return new (t || TuiIosAutofocusHandler)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_FOCUSABLE_ITEM_ACCESSOR */.aX, 10), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.Renderer2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* WINDOW */.jf));
  };
  TuiIosAutofocusHandler.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiIosAutofocusHandler,
    features: [core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiIosAutofocusHandler;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_AUTOFOCUS_DEFAULT_OPTIONS = {
  delay: NaN // NaN = no delay/sync
};
const TUI_AUTOFOCUS_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_AUTOFOCUS_DEFAULT_OPTIONS);
function tuiAutoFocusOptionsProvider(options) {
  return tuiProvideOptions(TUI_AUTOFOCUS_OPTIONS, options, TUI_AUTOFOCUS_DEFAULT_OPTIONS);
}
const TUI_AUTOFOCUS_HANDLER = new core_mjs_.InjectionToken('[TUI_AUTOFOCUS_HANDLER]');
const TUI_AUTOFOCUS_PROVIDERS = [{
  provide: TUI_AUTOFOCUS_HANDLER,
  useFactory: (focusable, el, animationFrame$, renderer, zone, win, isIos) => isIos ? new TuiIosAutofocusHandler(focusable, el, renderer, zone, win) : new TuiDefaultAutofocusHandler(focusable, el, animationFrame$),
  deps: [[new core_mjs_.Optional(), new core_mjs_.Self(), taiga_ui_cdk_tokens/* TUI_FOCUSABLE_ITEM_ACCESSOR */.aX], core_mjs_.ElementRef, ng_web_apis_common/* ANIMATION_FRAME */.dJ, core_mjs_.Renderer2, core_mjs_.NgZone, ng_web_apis_common/* WINDOW */.jf, taiga_ui_cdk_tokens/* TUI_IS_IOS */.mg]
}, taiga_ui_cdk_services/* TuiDestroyService */.ew];
let TuiAutoFocusDirective = /*#__PURE__*/(() => {
  class TuiAutoFocusDirective {
    constructor(handler, options, destroy$) {
      this.handler = handler;
      this.options = options;
      this.destroy$ = destroy$;
      this.autoFocus = true;
    }
    ngAfterViewInit() {
      if (tuiCoerceBooleanProperty(this.autoFocus)) {
        this.focus();
      }
    }
    focus() {
      if (Number.isNaN(this.options.delay)) {
        void Promise.resolve().then(() => this.handler.setFocus());
      } else {
        (0,observable_timer/* timer */.O)(this.options.delay).pipe((0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(() => this.handler.setFocus());
      }
    }
  }
  TuiAutoFocusDirective.ɵfac = function TuiAutoFocusDirective_Factory(t) {
    return new (t || TuiAutoFocusDirective)(core_mjs_["ɵɵdirectiveInject"](TUI_AUTOFOCUS_HANDLER), core_mjs_["ɵɵdirectiveInject"](TUI_AUTOFOCUS_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2));
  };
  TuiAutoFocusDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiAutoFocusDirective,
    selectors: [["", "tuiAutoFocus", ""]],
    inputs: {
      autoFocus: [core_mjs_["ɵɵInputFlags"].None, "tuiAutoFocus", "autoFocus"]
    },
    features: [core_mjs_["ɵɵProvidersFeature"](TUI_AUTOFOCUS_PROVIDERS)]
  });
  return TuiAutoFocusDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAutoFocusModule = /*#__PURE__*/(() => {
  class TuiAutoFocusModule {}
  TuiAutoFocusModule.ɵfac = function TuiAutoFocusModule_Factory(t) {
    return new (t || TuiAutoFocusModule)();
  };
  TuiAutoFocusModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiAutoFocusModule
  });
  TuiAutoFocusModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiAutoFocusModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiSynchronousAutofocusHandler = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiSynchronousAutofocusHandler extends AbstractTuiAutofocusHandler {
    constructor(focusable, el) {
      super(focusable, el);
    }
    setFocus() {
      this.element.focus({
        preventScroll: true
      });
    }
  }
  TuiSynchronousAutofocusHandler.ɵfac = function TuiSynchronousAutofocusHandler_Factory(t) {
    return new (t || TuiSynchronousAutofocusHandler)(i0.ɵɵdirectiveInject(TUI_FOCUSABLE_ITEM_ACCESSOR, 10), i0.ɵɵdirectiveInject(ElementRef));
  };
  TuiSynchronousAutofocusHandler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiSynchronousAutofocusHandler,
    features: [i0.ɵɵInheritDefinitionFeature]
  });
  return TuiSynchronousAutofocusHandler;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-auto-focus.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/isObservable.js
var isObservable = __webpack_require__(4402);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-dialog.js

















function TuiDialogComponent_header_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r1, " ");
  }
}
function TuiDialogComponent_header_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "header", 6);
    core_mjs_["ɵɵtemplate"](1, TuiDialogComponent_header_0_ng_container_1_Template, 2, 1, "ng-container", 3);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.header)("polymorpheusOutletContext", ctx_r1.context);
  }
}
function TuiDialogComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵelement"](1, "div", 7);
    core_mjs_["ɵɵelementStart"](2, "div", 8)(3, "button", 9);
    core_mjs_["ɵɵlistener"]("click", function TuiDialogComponent_ng_container_4_Template_button_click_3_listener() {
      core_mjs_["ɵɵrestoreView"](_r3);
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.context.$implicit.complete());
    });
    core_mjs_["ɵɵtext"](4);
    core_mjs_["ɵɵelementEnd"]()();
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("innerHTML", text_r4, core_mjs_["ɵɵsanitizeHtml"]);
    core_mjs_["ɵɵadvance"](3);
    core_mjs_["ɵɵtextInterpolate1"](" ", (ctx_r1.context.data == null ? null : ctx_r1.context.data.button) || "OK", " ");
  }
}
function TuiDialogComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "div", 10)(1, "button", 11);
    core_mjs_["ɵɵpipe"](2, "async");
    core_mjs_["ɵɵlistener"]("click", function TuiDialogComponent_div_6_Template_button_click_1_listener() {
      core_mjs_["ɵɵrestoreView"](_r5);
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.close$.next());
    })("mousedown.prevent.silent", function TuiDialogComponent_div_6_Template_button_mousedown_prevent_silent_1_listener() {
      core_mjs_["ɵɵrestoreView"](_r5);
      return core_mjs_["ɵɵresetView"](0);
    });
    core_mjs_["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("appearance", ctx_r1.fullscreen ? "secondary" : "")("icon", ctx_r1.icons.close)("title", core_mjs_["ɵɵpipeBind1"](2, 3, ctx_r1.closeWord$));
  }
}
const TUI_DIALOG_DEFAULT_OPTIONS = {
  size: 'm',
  required: false,
  closeable: true,
  dismissible: true,
  label: '',
  header: ''
};
/**
 * A stream to close dialogs
 */
const TUI_DIALOGS_CLOSE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(empty/* EMPTY */.w);
/**
 * Default parameters for dialog component
 */
const TUI_DIALOG_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_DIALOG_DEFAULT_OPTIONS);
function tuiDialogOptionsProvider(options) {
  return tuiProvideOptions(TUI_DIALOG_OPTIONS, options, TUI_DIALOG_DEFAULT_OPTIONS);
}
const SCROLLBAR_PLACEHOLDER = 17;
let TuiDialogCloseService = /*#__PURE__*/(() => {
  class TuiDialogCloseService extends Observable/* Observable */.c {
    constructor(win, doc, el) {
      super(subscriber => (0,merge/* merge */.h)(this.esc$, this.mousedown$).subscribe(subscriber));
      this.win = win;
      this.doc = doc;
      this.el = el;
      this.esc$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.doc, 'keydown').pipe((0,filter/* filter */.p)(event => {
        const target = (0,taiga_ui_cdk_utils_dom/* tuiGetActualTarget */.U9)(event);
        return event.key === 'Escape' && !event.defaultPrevented && (this.element.contains(target) || this.isOutside(target));
      }));
      this.mousedown$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.doc, 'mousedown').pipe((0,filter/* filter */.p)(event => (0,taiga_ui_core_utils_dom/* tuiGetViewportWidth */.hV)(this.win) - event.clientX > SCROLLBAR_PLACEHOLDER && this.isOutside((0,taiga_ui_cdk_utils_dom/* tuiGetActualTarget */.U9)(event))), (0,operators_switchMap/* switchMap */.n)(() => (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.doc, 'mouseup').pipe((0,take/* take */.s)(1), (0,operators_map/* map */.T)(taiga_ui_cdk_utils_dom/* tuiGetActualTarget */.U9), (0,filter/* filter */.p)(target => this.isOutside(target)))));
    }
    get element() {
      return this.el.nativeElement;
    }
    isOutside(target) {
      return (0,taiga_ui_cdk_utils_dom/* tuiIsElement */.ru)(target) && (!(0,taiga_ui_cdk_utils_dom/* tuiContainsOrAfter */.P9)(this.element, target) || target === this.element);
    }
  }
  TuiDialogCloseService.ɵfac = function TuiDialogCloseService_Factory(t) {
    return new (t || TuiDialogCloseService)(core_mjs_["ɵɵinject"](ng_web_apis_common/* WINDOW */.jf), core_mjs_["ɵɵinject"](common_mjs_.DOCUMENT), core_mjs_["ɵɵinject"](core_mjs_.ElementRef));
  };
  TuiDialogCloseService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiDialogCloseService,
    factory: TuiDialogCloseService.ɵfac
  });
  return TuiDialogCloseService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const REQUIRED_ERROR = new Error('Required dialog was dismissed');
function toObservable(valueOrStream) {
  return (0,isObservable/* isObservable */.A)(valueOrStream) ? valueOrStream : (0,of.of)(valueOrStream);
}
let TuiDialogComponent = /*#__PURE__*/(() => {
  class TuiDialogComponent {
    constructor(duration, isMobile, context, destroy$, dialogClose$, close$, closeWord$, icons) {
      this.duration = duration;
      this.isMobile = isMobile;
      this.context = context;
      this.closeWord$ = closeWord$;
      this.icons = icons;
      this.animation = {
        value: '',
        params: {
          start: '40px',
          duration: this.duration
        }
      };
      this.fullscreenAnimation = {
        value: '',
        params: {
          start: '100vh',
          duration: this.duration
        }
      };
      this.close$ = new internal_Subject/* Subject */.B();
      (0,merge/* merge */.h)(this.close$.pipe((0,operators_switchMap/* switchMap */.n)(() => toObservable(context.closeable))), dialogClose$.pipe((0,operators_switchMap/* switchMap */.n)(() => toObservable(context.dismissible))), close$.pipe((0,operators_map/* map */.T)(taiga_ui_cdk_constants/* ALWAYS_TRUE_HANDLER */.Uq))).pipe((0,filter/* filter */.p)(Boolean), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(() => {
        this.close();
      });
    }
    get size() {
      return this.context.size;
    }
    get header() {
      return this.context.header;
    }
    get slideInTop() {
      return this.fullscreen || this.isMobile ? this.fullscreenAnimation : this.animation;
    }
    get fullscreen() {
      return !this.isMobile && (this.size === 'fullscreen' || this.size === 'page');
    }
    close() {
      if (this.context.required) {
        this.context.$implicit.error(REQUIRED_ERROR);
      } else {
        this.context.$implicit.complete();
      }
    }
  }
  TuiDialogComponent.ɵfac = function TuiDialogComponent_Factory(t) {
    return new (t || TuiDialogComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_ANIMATIONS_DURATION */.U_), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_MOBILE */.Td), core_mjs_["ɵɵdirectiveInject"](tinkoff_ng_polymorpheus/* POLYMORPHEUS_CONTEXT */.su), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](TuiDialogCloseService), core_mjs_["ɵɵdirectiveInject"](TUI_DIALOGS_CLOSE), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_CLOSE_WORD */.R3), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_COMMON_ICONS */._Z));
  };
  TuiDialogComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDialogComponent,
    selectors: [["tui-dialog"]],
    hostVars: 6,
    hostBindings: function TuiDialogComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵsyntheticHostProperty"]("@tuiSlideInTop", ctx.slideInTop)("@tuiFadeIn", ctx.slideInTop);
        core_mjs_["ɵɵattribute"]("data-appearance", ctx.context.appearance)("data-size", ctx.size);
        core_mjs_["ɵɵclassProp"]("_centered", ctx.header);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew, TuiDialogCloseService])],
    decls: 7,
    vars: 6,
    consts: [["class", "t-header", 4, "ngIf"], [1, "t-content"], [1, "t-heading", 3, "id", "textContent"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-filler"], ["class", "t-wrapper", 4, "ngIf"], [1, "t-header"], [3, "innerHTML"], [1, "t-buttons"], ["size", "m", "tuiAutoFocus", "", "tuiButton", "", "type", "button", 3, "click"], [1, "t-wrapper"], ["automation-id", "tui-dialog__close", "shape", "rounded", "size", "s", "tuiIconButton", "", "type", "button", 1, "t-close", 3, "click", "mousedown.prevent.silent", "appearance", "icon", "title"]],
    template: function TuiDialogComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵtemplate"](0, TuiDialogComponent_header_0_Template, 2, 2, "header", 0);
        core_mjs_["ɵɵelementStart"](1, "div", 1);
        core_mjs_["ɵɵelement"](2, "h2", 2);
        core_mjs_["ɵɵelementStart"](3, "section");
        core_mjs_["ɵɵtemplate"](4, TuiDialogComponent_ng_container_4_Template, 5, 2, "ng-container", 3);
        core_mjs_["ɵɵelementEnd"]()();
        core_mjs_["ɵɵelement"](5, "div", 4);
        core_mjs_["ɵɵtemplate"](6, TuiDialogComponent_div_6_Template, 3, 5, "div", 5);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", ctx.header);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("id", ctx.context.id)("textContent", ctx.context.label);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.context.content)("polymorpheusOutletContext", ctx.context);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.context.closeable);
      }
    },
    dependencies: [taiga_ui_core_components_button/* TuiButtonComponent */.SM, common_mjs_.NgIf, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, TuiAutoFocusDirective, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{position:relative;display:flex;font:var(--tui-font-text-m);flex-direction:column;box-sizing:border-box;margin:auto;border-radius:1rem;border:2.5rem solid transparent}[_nghost-%COMP%]:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";border-radius:inherit;pointer-events:none;box-shadow:var(--tui-shadow-modal)}[data-size=auto][_nghost-%COMP%]{width:auto}[data-size=s][_nghost-%COMP%]{width:30rem}[data-size=s][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:1.5rem}[data-size=s][_nghost-%COMP%]   .t-heading[_ngcontent-%COMP%]{margin-bottom:.5rem;font:var(--tui-font-heading-5)}[data-size=m][_nghost-%COMP%]{width:42.5rem}[data-size=m][_nghost-%COMP%]   .t-heading[_ngcontent-%COMP%]{margin-bottom:.75rem;font:var(--tui-font-heading-4)}[data-size=l][_nghost-%COMP%]{width:55rem}[data-size=l][_nghost-%COMP%]   .t-heading[_ngcontent-%COMP%]{margin-bottom:1rem}[data-size=fullscreen][_nghost-%COMP%], [data-size=page][_nghost-%COMP%]{min-width:100vw;min-height:100%;border-radius:0;border:none;background:var(--tui-elevation-01);box-shadow:0 4rem var(--tui-elevation-01)}[data-size=fullscreen][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%], [data-size=page][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:3rem calc(50vw - (45rem / 2))}[data-size=fullscreen][_nghost-%COMP%]   .t-heading[_ngcontent-%COMP%], [data-size=page][_nghost-%COMP%]   .t-heading[_ngcontent-%COMP%]{margin-bottom:1rem}[data-size=page][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:0}._centered[_nghost-%COMP%]{text-align:center}[_nghost-%COMP%]   tui-root._mobile[data-size][_nghost-%COMP%], tui-root._mobile   [data-size][_nghost-%COMP%]{min-width:100%;width:100%;max-width:100%;border-radius:0;border:none;margin:auto 0 0}[_nghost-%COMP%]   tui-root._mobile[data-size][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%], tui-root._mobile   [data-size][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:1.5rem}[_nghost-%COMP%]   tui-root._mobile[data-size][_nghost-%COMP%]   .t-heading[_ngcontent-%COMP%], tui-root._mobile   [data-size][_nghost-%COMP%]   .t-heading[_ngcontent-%COMP%]{margin-bottom:.5rem;font:var(--tui-font-heading-5)}.t-heading[_ngcontent-%COMP%]{margin:0;word-wrap:break-word;font:var(--tui-font-heading-3)}.t-heading[_ngcontent-%COMP%]:empty{display:none}.t-header[_ngcontent-%COMP%]{display:flex;border-top-left-radius:inherit;border-top-right-radius:inherit;overflow:hidden}[data-size=fullscreen][_nghost-%COMP%]   tui-root._mobile[_nghost-%COMP%]   .t-header[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{flex:1}.t-content[_ngcontent-%COMP%]{border-radius:inherit;padding:2rem;background:var(--tui-elevation-01)}.t-content[_ngcontent-%COMP%]:not(:first-child){border-top-left-radius:0;border-top-right-radius:0}.t-wrapper[_ngcontent-%COMP%]{position:-webkit-sticky;position:sticky;top:0;z-index:1;order:-1}.t-filler[_ngcontent-%COMP%]{flex-grow:1}.t-close[_ngcontent-%COMP%]{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:fixed;top:1.5rem;right:1.5rem;display:none;color:var(--tui-base-01)}.t-dialog:last-of-type[_nghost-%COMP%]   .t-close[_ngcontent-%COMP%], .t-dialog:last-of-type   [_nghost-%COMP%]   .t-close[_ngcontent-%COMP%]{display:block}[_nghost-%COMP%]:not([data-size=\"fullscreen\"]):not([data-size=\"page\"])   .t-close[_ngcontent-%COMP%]{animation:tuiFadeIn var(--tui-duration);background:rgba(104,104,104,.96)}[_nghost-%COMP%]:not([data-size=\"fullscreen\"]):not([data-size=\"page\"])   .t-close[_ngcontent-%COMP%]:hover{background:rgba(159,159,159,.86)}[_nghost-%COMP%]:not([data-size=\"fullscreen\"]).ng-animating   .t-close[_ngcontent-%COMP%]{display:none}tui-root._mobile[_nghost-%COMP%]   .t-close[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-close[_ngcontent-%COMP%]{position:absolute;top:0;right:0;background:transparent!important;color:var(--tui-text-01);opacity:.5}.t-buttons[_ngcontent-%COMP%]{margin-top:1.25rem;text-align:right}"],
    data: {
      animation: [tuiSlideInTop, tuiFadeIn]
    }
  });
  return TuiDialogComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const DIALOG = new tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS(TuiDialogComponent);
let TuiDialogService = /*#__PURE__*/(() => {
  class TuiDialogService extends taiga_ui_cdk_abstract/* AbstractTuiDialogService */.iX {
    constructor() {
      super(...arguments);
      this.component = DIALOG;
      this.defaultOptions = Object.assign(Object.assign({}, (0,core_mjs_.inject)(TUI_DIALOG_OPTIONS)), {
        data: undefined
      });
    }
  }
  TuiDialogService.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiDialogService_BaseFactory;
    return function TuiDialogService_Factory(t) {
      return (ɵTuiDialogService_BaseFactory || (ɵTuiDialogService_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiDialogService)))(t || TuiDialogService);
    };
  })();
  TuiDialogService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiDialogService,
    factory: TuiDialogService.ɵfac,
    providedIn: 'root'
  });
  return TuiDialogService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDialogDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDialogDirective extends AbstractTuiDialogDirective {}
  TuiDialogDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiDialogDirective_BaseFactory;
    return function TuiDialogDirective_Factory(t) {
      return (ɵTuiDialogDirective_BaseFactory || (ɵTuiDialogDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiDialogDirective)))(t || TuiDialogDirective);
    };
  })();
  TuiDialogDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiDialogDirective,
    selectors: [["ng-template", "tuiDialog", ""]],
    inputs: {
      options: [i0.ɵɵInputFlags.None, "tuiDialogOptions", "options"],
      open: [i0.ɵɵInputFlags.None, "tuiDialog", "open"]
    },
    outputs: {
      openChange: "tuiDialogChange"
    },
    features: [i0.ɵɵProvidersFeature([{
      provide: AbstractTuiDialogService,
      useExisting: TuiDialogService
    }]), i0.ɵɵInheritDefinitionFeature]
  });
  return TuiDialogDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDialogModule = /*#__PURE__*/(() => {
  class TuiDialogModule {}
  TuiDialogModule.ɵfac = function TuiDialogModule_Factory(t) {
    return new (t || TuiDialogModule)();
  };
  TuiDialogModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDialogModule
  });
  TuiDialogModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    providers: [(0,taiga_ui_cdk_tokens/* tuiAsDialog */.jn)(TuiDialogService)],
    imports: [[tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, taiga_ui_core_components_button/* TuiButtonModule */.Pv, common_mjs_.CommonModule, TuiAutoFocusModule]]
  });
  return TuiDialogModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-dialog.js.map
// EXTERNAL MODULE: ./node_modules/ngx-highlightjs/fesm2020/ngx-highlightjs.mjs + 5 modules
var ngx_highlightjs = __webpack_require__(9280);
;// CONCATENATED MODULE: ./node_modules/@angular/cdk/fesm2022/clipboard.mjs




/**
 * A pending copy-to-clipboard operation.
 *
 * The implementation of copying text to the clipboard modifies the DOM and
 * forces a re-layout. This re-layout can take too long if the string is large,
 * causing the execCommand('copy') to happen too long after the user clicked.
 * This results in the browser refusing to copy. This object lets the
 * re-layout happen in a separate tick from copying by providing a copy function
 * that can be called later.
 *
 * Destroy must be called when no longer in use, regardless of whether `copy` is
 * called.
 */
class PendingCopy {
  constructor(text, _document) {
    this._document = _document;
    const textarea = this._textarea = this._document.createElement('textarea');
    const styles = textarea.style;
    // Hide the element for display and accessibility. Set a fixed position so the page layout
    // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea
    // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.
    styles.position = 'fixed';
    styles.top = styles.opacity = '0';
    styles.left = '-999em';
    textarea.setAttribute('aria-hidden', 'true');
    textarea.value = text;
    // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).
    textarea.readOnly = true;
    // The element needs to be inserted into the fullscreen container, if the page
    // is in fullscreen mode, otherwise the browser won't execute the copy command.
    (this._document.fullscreenElement || this._document.body).appendChild(textarea);
  }
  /** Finishes copying the text. */
  copy() {
    const textarea = this._textarea;
    let successful = false;
    try {
      // Older browsers could throw if copy is not supported.
      if (textarea) {
        const currentFocus = this._document.activeElement;
        textarea.select();
        textarea.setSelectionRange(0, textarea.value.length);
        successful = this._document.execCommand('copy');
        if (currentFocus) {
          currentFocus.focus();
        }
      }
    } catch {
      // Discard error.
      // Initial setting of {@code successful} will represent failure here.
    }
    return successful;
  }
  /** Cleans up DOM changes used to perform the copy operation. */
  destroy() {
    const textarea = this._textarea;
    if (textarea) {
      textarea.remove();
      this._textarea = undefined;
    }
  }
}

/**
 * A service for copying text to the clipboard.
 */
let clipboard_Clipboard = /*#__PURE__*/(() => {
  class Clipboard {
    constructor(document) {
      this._document = document;
    }
    /**
     * Copies the provided text into the user's clipboard.
     *
     * @param text The string to copy.
     * @returns Whether the operation was successful.
     */
    copy(text) {
      const pendingCopy = this.beginCopy(text);
      const successful = pendingCopy.copy();
      pendingCopy.destroy();
      return successful;
    }
    /**
     * Prepares a string to be copied later. This is useful for large strings
     * which take too long to successfully render and be copied in the same tick.
     *
     * The caller must call `destroy` on the returned `PendingCopy`.
     *
     * @param text The string to copy.
     * @returns the pending copy operation.
     */
    beginCopy(text) {
      return new PendingCopy(text, this._document);
    }
    static #_ = this.ɵfac = function Clipboard_Factory(t) {
      return new (t || Clipboard)(core_mjs_["ɵɵinject"](common_mjs_.DOCUMENT));
    };
    static #_2 = this.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
      token: Clipboard,
      factory: Clipboard.ɵfac,
      providedIn: 'root'
    });
  }
  return Clipboard;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */
const CDK_COPY_TO_CLIPBOARD_CONFIG = /*#__PURE__*/new core_mjs_.InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');
/**
 * Provides behavior for a button that when clicked copies content into user's
 * clipboard.
 */
let CdkCopyToClipboard = /*#__PURE__*/(() => {
  class CdkCopyToClipboard {
    constructor(_clipboard, _ngZone, config) {
      this._clipboard = _clipboard;
      this._ngZone = _ngZone;
      /** Content to be copied. */
      this.text = '';
      /**
       * How many times to attempt to copy the text. This may be necessary for longer text, because
       * the browser needs time to fill an intermediate textarea element and copy the content.
       */
      this.attempts = 1;
      /**
       * Emits when some text is copied to the clipboard. The
       * emitted value indicates whether copying was successful.
       */
      this.copied = new core_mjs_.EventEmitter();
      /** Copies that are currently being attempted. */
      this._pending = new Set();
      if (config && config.attempts != null) {
        this.attempts = config.attempts;
      }
    }
    /** Copies the current text to the clipboard. */
    copy(attempts = this.attempts) {
      if (attempts > 1) {
        let remainingAttempts = attempts;
        const pending = this._clipboard.beginCopy(this.text);
        this._pending.add(pending);
        const attempt = () => {
          const successful = pending.copy();
          if (!successful && --remainingAttempts && !this._destroyed) {
            // We use 1 for the timeout since it's more predictable when flushing in unit tests.
            this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));
          } else {
            this._currentTimeout = null;
            this._pending.delete(pending);
            pending.destroy();
            this.copied.emit(successful);
          }
        };
        attempt();
      } else {
        this.copied.emit(this._clipboard.copy(this.text));
      }
    }
    ngOnDestroy() {
      if (this._currentTimeout) {
        clearTimeout(this._currentTimeout);
      }
      this._pending.forEach(copy => copy.destroy());
      this._pending.clear();
      this._destroyed = true;
    }
    static #_ = this.ɵfac = function CdkCopyToClipboard_Factory(t) {
      return new (t || CdkCopyToClipboard)(core_mjs_["ɵɵdirectiveInject"](clipboard_Clipboard), core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](CDK_COPY_TO_CLIPBOARD_CONFIG, 8));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: CdkCopyToClipboard,
      selectors: [["", "cdkCopyToClipboard", ""]],
      hostBindings: function CdkCopyToClipboard_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("click", function CdkCopyToClipboard_click_HostBindingHandler() {
            return ctx.copy();
          });
        }
      },
      inputs: {
        text: [core_mjs_["ɵɵInputFlags"].None, "cdkCopyToClipboard", "text"],
        attempts: [core_mjs_["ɵɵInputFlags"].None, "cdkCopyToClipboardAttempts", "attempts"]
      },
      outputs: {
        copied: "cdkCopyToClipboardCopied"
      },
      standalone: true
    });
  }
  return CdkCopyToClipboard;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let ClipboardModule = /*#__PURE__*/(() => {
  class ClipboardModule {
    static #_ = this.ɵfac = function ClipboardModule_Factory(t) {
      return new (t || ClipboardModule)();
    };
    static #_2 = this.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
      type: ClipboardModule
    });
    static #_3 = this.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  }
  return ClipboardModule;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=clipboard.mjs.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-pipes-filter.js


let TuiFilterPipe = /*#__PURE__*/(() => {
  class TuiFilterPipe {
    transform(items, matcher, ...args) {
      return items.filter(item => matcher(item, ...args));
    }
  }
  TuiFilterPipe.ɵfac = function TuiFilterPipe_Factory(t) {
    return new (t || TuiFilterPipe)();
  };
  TuiFilterPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiFilter",
    type: TuiFilterPipe,
    pure: true
  });
  return TuiFilterPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiFilterPipeModule = /*#__PURE__*/(() => {
  class TuiFilterPipeModule {}
  TuiFilterPipeModule.ɵfac = function TuiFilterPipeModule_Factory(t) {
    return new (t || TuiFilterPipeModule)();
  };
  TuiFilterPipeModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiFilterPipeModule
  });
  TuiFilterPipeModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiFilterPipeModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-pipes-filter.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-item.js



/**
 * Blank directive for queries via `@ContentChildren` / `@ViewChildren` / `querySelector`
 */
let TuiItemDirective = /*#__PURE__*/(() => {
  class TuiItemDirective {}
  TuiItemDirective.ɵfac = function TuiItemDirective_Factory(t) {
    return new (t || TuiItemDirective)();
  };
  TuiItemDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiItemDirective,
    selectors: [["", "tuiItem", ""]]
  });
  return TuiItemDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiItemModule = /*#__PURE__*/(() => {
  class TuiItemModule {}
  TuiItemModule.ɵfac = function TuiItemModule_Factory(t) {
    return new (t || TuiItemModule)();
  };
  TuiItemModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiItemModule
  });
  TuiItemModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiItemModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-item.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-pipes-replace.js


let TuiReplacePipe = /*#__PURE__*/(() => {
  class TuiReplacePipe {
    transform(value, search, replaceValue) {
      var _a;
      return (_a = value === null || value === void 0 ? void 0 : value.replace(search,
      // TS bug: https://github.com/microsoft/TypeScript/issues/22378
      replaceValue)) !== null && _a !== void 0 ? _a : '';
    }
  }
  TuiReplacePipe.ɵfac = function TuiReplacePipe_Factory(t) {
    return new (t || TuiReplacePipe)();
  };
  TuiReplacePipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiReplace",
    type: TuiReplacePipe,
    pure: true
  });
  return TuiReplacePipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiReplacePipeModule = /*#__PURE__*/(() => {
  class TuiReplacePipeModule {}
  TuiReplacePipeModule.ɵfac = function TuiReplacePipeModule_Factory(t) {
    return new (t || TuiReplacePipeModule)();
  };
  TuiReplacePipeModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiReplacePipeModule
  });
  TuiReplacePipeModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiReplacePipeModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-pipes-replace.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-resizer.js




let taiga_ui_cdk_directives_resizer_TuiResizeableDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiResizeableDirective extends TuiElementDirective {}
  TuiResizeableDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiResizeableDirective_BaseFactory;
    return function TuiResizeableDirective_Factory(t) {
      return (ɵTuiResizeableDirective_BaseFactory || (ɵTuiResizeableDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiResizeableDirective)))(t || TuiResizeableDirective);
    };
  })();
  TuiResizeableDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiResizeableDirective,
    selectors: [["", "tuiResizeable", ""]],
    features: [i0.ɵɵInheritDefinitionFeature]
  });
  return TuiResizeableDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

// TODO: Migrate to PointerEvent in 4.0
let TuiResizerDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiResizerDirective {
    constructor(resizeable) {
      this.resizeable = resizeable;
      this.tuiResizer = [0, 0];
      this.tuiSizeChange = new EventEmitter();
      this.x = NaN;
      this.y = NaN;
      this.width = 0;
      this.height = 0;
    }
    get cursor() {
      if (!this.tuiResizer[0]) {
        return 'ns-resize';
      }
      if (!this.tuiResizer[1]) {
        return 'ew-resize';
      }
      if (this.tuiResizer[0] * this.tuiResizer[1] > 0) {
        return 'nwse-resize';
      }
      return 'nesw-resize';
    }
    onTouchStart({
      touches
    }) {
      this.onMouseDown(touches[0].clientX, touches[0].clientY);
    }
    onMouseDown(x, y) {
      this.x = x;
      this.y = y;
      this.width = this.resizeable.nativeElement.clientWidth;
      this.height = this.resizeable.nativeElement.clientHeight;
    }
    onMouseMove({
      x,
      y,
      buttons
    }) {
      if (!buttons) {
        this.onMouseUp();
      } else {
        this.onMove(x, y);
      }
    }
    onTouchMove({
      touches
    }) {
      this.onMove(touches[0].clientX, touches[0].clientY);
    }
    onMouseUp() {
      this.x = NaN;
    }
    onMove(x, y) {
      if (Number.isNaN(this.x)) {
        return;
      }
      const {
        style
      } = this.resizeable.nativeElement;
      const size = [this.width + this.tuiResizer[0] * (x - this.x), this.height + this.tuiResizer[1] * (y - this.y)];
      if (this.tuiResizer[0]) {
        style.width = tuiPx(size[0]);
      }
      if (this.tuiResizer[1]) {
        style.height = tuiPx(size[1]);
      }
      this.tuiSizeChange.emit(size);
    }
  }
  TuiResizerDirective.ɵfac = function TuiResizerDirective_Factory(t) {
    return new (t || TuiResizerDirective)(i0.ɵɵdirectiveInject(taiga_ui_cdk_directives_resizer_TuiResizeableDirective));
  };
  TuiResizerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiResizerDirective,
    selectors: [["", "tuiResizer", ""]],
    hostVars: 4,
    hostBindings: function TuiResizerDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵlistener("touchstart.silent.passive", function TuiResizerDirective_touchstart_silent_passive_HostBindingHandler($event) {
          return ctx.onTouchStart($event);
        })("mousedown.silent.prevent", function TuiResizerDirective_mousedown_silent_prevent_HostBindingHandler($event) {
          return ctx.onMouseDown($event.x, $event.y);
        })("mousemove.silent", function TuiResizerDirective_mousemove_silent_HostBindingHandler($event) {
          return ctx.onMouseMove($event);
        }, false, i0.ɵɵresolveDocument)("touchmove.silent", function TuiResizerDirective_touchmove_silent_HostBindingHandler($event) {
          return ctx.onTouchMove($event);
        }, false, i0.ɵɵresolveDocument)("mouseup.silent", function TuiResizerDirective_mouseup_silent_HostBindingHandler() {
          return ctx.onMouseUp();
        }, false, i0.ɵɵresolveDocument)("touchend.silent", function TuiResizerDirective_touchend_silent_HostBindingHandler() {
          return ctx.onMouseUp();
        }, false, i0.ɵɵresolveDocument);
      }
      if (rf & 2) {
        i0.ɵɵstyleProp("touch-action", "none")("cursor", ctx.cursor);
      }
    },
    inputs: {
      tuiResizer: "tuiResizer"
    },
    outputs: {
      tuiSizeChange: "tuiSizeChange"
    }
  });
  return TuiResizerDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiResizerModule = /*#__PURE__*/(() => {
  class TuiResizerModule {}
  TuiResizerModule.ɵfac = function TuiResizerModule_Factory(t) {
    return new (t || TuiResizerModule)();
  };
  TuiResizerModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiResizerModule
  });
  TuiResizerModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiResizerModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-resizer.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-color.js
function tuiHexToRgb(hex) {
  const matches = hex.replace('#', '').split('').map((char, _, array) => array.length === 3 ? char + char : char).join('').match(/.{2}/g);
  return matches ? matches.map(x => Number.parseInt(x, 16)) : [0, 0, 0];
}
const getChunksFromString = (hex, chunkSize) => hex.match(new RegExp(`.{${chunkSize}}`, 'g'));
const convertHexUnitTo256 = hexStr => parseInt(hexStr.repeat(2 / hexStr.length), 16);
const getAlphaFloat = (a, alpha) => {
  if (typeof a !== 'undefined') {
    return Number((a / 255).toFixed(2));
  }
  if (typeof alpha !== 'number' || alpha < 0 || alpha > 1) {
    return 1;
  }
  return alpha;
};
function tuiHexToRGBA(hex, alpha) {
  const [r, g, b, a] = tuiParseHex(hex, alpha);
  return a < 1 ? `rgba(${r}, ${g}, ${b}, ${a})` : `rgb(${r}, ${g}, ${b})`;
}
function tuiIsValidHex(hex) {
  // eslint-disable-next-line unicorn/no-unsafe-regex
  return /^#([A-Fa-f0-9]{3,4}){1,2}$/.test(hex);
}
function tuiParseHex(hex, alpha) {
  var _a;
  if (!tuiIsValidHex(hex)) {
    throw new Error('Invalid HEX');
  }
  const chunkSize = Math.floor((hex.length - 1) / 3);
  const hexArr = getChunksFromString(hex.slice(1), chunkSize);
  const [r, g, b, a] = (_a = hexArr === null || hexArr === void 0 ? void 0 : hexArr.map(convertHexUnitTo256)) !== null && _a !== void 0 ? _a : [];
  const floatAlpha = getAlphaFloat(a, alpha);
  return [r, g, b, floatAlpha];
}
function hsvToColor(h, s, v, n) {
  const k = (n + h / 60) % 6;
  return Math.round(v - v * s * Math.max(Math.min(k, 4 - k, 1), 0));
}
/**
 * https://stackoverflow.com/a/54024653/2706426
 */
function tuiHsvToRgb(h, s, v) {
  return [hsvToColor(h, s, v, 5), hsvToColor(h, s, v, 3), hsvToColor(h, s, v, 1)];
}
const DEFAULT = (/* unused pure expression or super */ null && ([0, 0, 0, 1]));
function tuiParseColor(color) {
  const stripped = color.replace('#', '').replace('rgba(', '').replace('rgb(', '').replace(')', '');
  const array = stripped.split(',').map(item => parseFloat(item));
  if (array.length === 4) {
    return array;
  }
  if (array.length === 3) {
    return array.concat(1);
  }
  const matches = stripped.match(new RegExp(`(.{${stripped.length / 3}})`, 'g'));
  if (!matches) {
    return DEFAULT;
  }
  const parsed = matches.map(char => parseInt(stripped.length % 2 ? char + char : char, 16));
  return [parsed[0] || DEFAULT[0], parsed[1] || DEFAULT[1], parsed[2] || DEFAULT[2], parsed[3] === undefined ? DEFAULT[3] : parsed[3]];
}
function tuiRgbToHex(r, g, b) {
  return `#${[r, g, b].map(x => x.toString(16).padStart(2, '0')).join('')}`;
}
function tuiRgbToHsv(r, g, b) {
  const v = Math.max(r, g, b);
  const n = v - Math.min(r, g, b);
  // eslint-disable-next-line no-nested-ternary
  const h = n && (v === r ? (g - b) / n : v === g ? 2 + (b - r) / n : 4 + (r - g) / n);
  return [60 * (h < 0 ? h + 6 : h), v && n / v, v];
}
function tuiRgbaToHex(color) {
  var _a, _b;
  if (!tuiIsValidRgba(color)) {
    throw new Error('Invalid RGBa');
  }
  const rgb = (_a = color.replace(/\s/g, '')
  // eslint-disable-next-line unicorn/no-unsafe-regex
  .match(/^rgba?\((\d+),(\d+),(\d+),?([^,\s)]+)?/i)) !== null && _a !== void 0 ? _a : [];
  let alpha = ((_b = rgb === null || rgb === void 0 ? void 0 : rgb[4]) !== null && _b !== void 0 ? _b : '').toString().trim();
  let hex = rgb ? (rgb[1] | 1 << 8).toString(16).slice(1) + (rgb[2] | 1 << 8).toString(16).slice(1) + (rgb[3] | 1 << 8).toString(16).slice(1) : color;
  alpha = alpha !== '' ? alpha : 0o1;
  alpha = (Number(alpha) * 255 | 1 << 8).toString(16).slice(1);
  hex += alpha;
  return `#${hex.toUpperCase()}`;
}
function tuiIsValidRgba(rgba) {
  const range = '(\\d|[1-9]\\d|1\\d{2}|2[0-4]\\d|2[0-5]{2})';
  const alpha = '([01]|0?\\.\\d+)';
  return new RegExp(`^(?:rgb\\(\\s*${range}\\s*,\\s*${range}\\s*,\\s*${range}\\s*\\)|rgba\\(\\s*${range}\\s*,\\s*${range}\\s*,\\s*${range}\\s*,\\s*${alpha}\\s*\\))$`).test(rgba);
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-color.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-badge.js






const taiga_ui_kit_components_badge_c0 = ["*"];
let TuiBadgeComponent = /*#__PURE__*/(() => {
  class TuiBadgeComponent {
    constructor(mode$) {
      this.mode$ = mode$;
      this.size = 'm';
      this.status = 'default';
      this.hoverable = false;
    }
    get padding() {
      var _a;
      if (this.isEmpty) {
        return 'none';
      }
      return (0,taiga_ui_cdk_utils_miscellaneous/* tuiIsNumber */.sZ)((_a = this.value) === null || _a === void 0 ? void 0 : _a.valueOf()) ? 'm' : 'l';
    }
    get outputValue() {
      var _a;
      const value = (_a = this.value) === null || _a === void 0 ? void 0 : _a.valueOf();
      if ((0,taiga_ui_cdk_utils_miscellaneous/* tuiIsNumber */.sZ)(value) && value > 99) {
        return '99+';
      }
      return (0,taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj)(this.value) ? String(this.value) : '';
    }
    get isEmpty() {
      return !this.value && this.value !== 0;
    }
    titleText({
      offsetWidth,
      scrollWidth
    }) {
      return offsetWidth < scrollWidth ? this.outputValue : '';
    }
  }
  TuiBadgeComponent.ɵfac = function TuiBadgeComponent_Factory(t) {
    return new (t || TuiBadgeComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_MODE */.fL));
  };
  TuiBadgeComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiBadgeComponent,
    selectors: [["tui-badge"]],
    hostVars: 7,
    hostBindings: function TuiBadgeComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("$.data-mode.attr", function TuiBadgeComponent___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-size", ctx.size)("data-status", ctx.status)("data-padding", ctx.padding);
        core_mjs_["ɵɵclassProp"]("_hoverable", ctx.hoverable)("_empty-value", ctx.isEmpty);
      }
    },
    inputs: {
      value: "value",
      size: "size",
      status: "status",
      hoverable: "hoverable"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_core_providers/* MODE_PROVIDER */.si])],
    ngContentSelectors: taiga_ui_kit_components_badge_c0,
    decls: 5,
    vars: 2,
    consts: [["text", ""], [1, "t-left-content"], [1, "t-text", 3, "mouseenter", "title"]],
    template: function TuiBadgeComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = core_mjs_["ɵɵgetCurrentView"]();
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵelementStart"](0, "span", 1);
        core_mjs_["ɵɵprojection"](1);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](2, "span", 2, 0);
        core_mjs_["ɵɵlistener"]("mouseenter", function TuiBadgeComponent_Template_span_mouseenter_2_listener() {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](0);
        });
        core_mjs_["ɵɵtext"](4);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        const text_r2 = core_mjs_["ɵɵreference"](3);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("title", ctx.titleText(text_r2));
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵtextInterpolate1"](" ", ctx.outputValue, "\n");
      }
    },
    styles: ["[_nghost-%COMP%]{transition-property:background-color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;--left-content-color: currentColor;position:relative;display:inline-flex;font:var(--tui-font-text-s);align-items:center;justify-content:center;box-sizing:border-box;color:var(--tui-base-01);border-radius:6.25rem;white-space:nowrap;overflow:hidden;vertical-align:middle;max-width:100%}[_nghost-%COMP%]:after{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";box-sizing:border-box;border-radius:inherit;pointer-events:none}._hoverable[_nghost-%COMP%]:hover[data-status=custom]:after, ._hoverable[_nghost-%COMP%]:active[data-status=custom]:after{background-color:var(--tui-clear)}[data-status=primary][_nghost-%COMP%]{background-color:var(--tui-primary);color:var(--tui-primary-text)}[data-status=primary]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-primary-hover)}[data-status=primary]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-primary-active)}[data-status=error][_nghost-%COMP%]{--left-content-color: var(--tui-error-fill);background-color:var(--tui-error-bg);color:var(--tui-text-01)}[data-status=error]._hoverable[_nghost-%COMP%]:hover, [data-status=error]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-error-bg-hover)}[data-status=error][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-error-bg-night);color:var(--tui-text-01-night)}[data-status=error][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=error][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-error-bg-night-hover)}[data-status=success][_nghost-%COMP%]{--left-content-color: var(--tui-success-fill);background-color:var(--tui-success-bg);color:var(--tui-text-01)}[data-status=success]._hoverable[_nghost-%COMP%]:hover, [data-status=success]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-success-bg-hover)}[data-status=success][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-success-bg-night);color:var(--tui-text-01-night)}[data-status=success][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=success][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-success-bg-night-hover)}[data-status=warning][_nghost-%COMP%]{--left-content-color: var(--tui-warning-fill);background-color:var(--tui-warning-bg);color:var(--tui-text-01)}[data-status=warning]._hoverable[_nghost-%COMP%]:hover, [data-status=warning]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-warning-bg-hover)}[data-status=warning][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-warning-bg-night);color:var(--tui-text-01-night)}[data-status=warning][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=warning][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-warning-bg-night-hover)}[data-status=info][_nghost-%COMP%]{--left-content-color: var(--tui-info-fill);background-color:var(--tui-info-bg);color:var(--tui-text-01)}[data-status=info]._hoverable[_nghost-%COMP%]:hover, [data-status=info]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-info-bg-hover)}[data-status=info][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-info-bg-night);color:var(--tui-text-01-night)}[data-status=info][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=info][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-info-bg-night-hover)}[data-status=neutral][_nghost-%COMP%]{--left-content-color: var(--tui-neutral-fill);background-color:var(--tui-neutral-bg);color:var(--tui-text-01)}[data-status=neutral]._hoverable[_nghost-%COMP%]:hover, [data-status=neutral]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-neutral-bg-hover)}[data-status=neutral][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-neutral-bg-night);color:var(--tui-text-01-night)}[data-status=neutral][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=neutral][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-neutral-bg-night-hover)}[data-status=default][_nghost-%COMP%]{background-color:var(--tui-base-06)}[data-status=default][_nghost-%COMP%]:not([data-mode])._hoverable:hover{background-color:var(--tui-base-07)}[data-status=default][_nghost-%COMP%]:not([data-mode])._hoverable:active{background-color:var(--tui-base-08)}[data-status=default][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-clear-inverse-hover)}[data-status=default][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-clear-inverse-active)}[data-status=default][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-clear-inverse-active)}[data-status=default][data-mode=onDark][_nghost-%COMP%]:focus:after{border:2px solid var(--tui-base-01)}[data-status=default][data-mode=onLight][_nghost-%COMP%]{background-color:var(--tui-clear);color:var(--tui-text-01)}[data-status=default][data-mode=onLight]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-clear-hover)}[data-status=default][data-mode=onLight]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-clear-active)}._hoverable[_nghost-%COMP%]{cursor:pointer}[data-padding=m][_nghost-%COMP%]{padding:0 .5rem}[data-padding=m][data-size=xs][_nghost-%COMP%]{padding:0 .25rem}[data-padding=m][data-size=s][_nghost-%COMP%]{padding:0 .375rem}[data-padding=m][data-size=l][_nghost-%COMP%]{padding:0 .625rem}[data-padding=l][_nghost-%COMP%]{padding:0 .625rem}[data-padding=l][data-size=xs][_nghost-%COMP%]{padding:0 .375rem}[data-padding=l][data-size=s][_nghost-%COMP%]{padding:0 .5rem}[data-padding=l][data-size=l][_nghost-%COMP%]{padding:0 .75rem}[data-size=xs][_nghost-%COMP%]{font:var(--tui-font-text-xs);height:1rem;min-width:1rem}[data-size=xs][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]:before{width:.34375rem;height:.34375rem}[data-size=s][_nghost-%COMP%]{font:var(--tui-font-text-xs);height:1.25rem;min-width:1.25rem}[data-size=s][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]:before{width:.25rem;height:.25rem}[data-size=m][_nghost-%COMP%]{height:var(--tui-height-xs);line-height:var(--tui-height-xs);min-width:var(--tui-height-xs)}[data-size=l][_nghost-%COMP%]{height:var(--tui-height-s);line-height:var(--tui-height-s);min-width:var(--tui-height-s)}[data-size=l][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]:before{margin:0 .5rem 0 0;width:.5rem;height:.5rem}._empty-value[_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]{margin:0 -.25rem}._empty-value[_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]:before{margin:0}.t-left-content[_ngcontent-%COMP%]{display:none;color:var(--left-content-color);line-height:0}.t-left-content[_ngcontent-%COMP%]:not(:empty){display:block;margin-left:-.25rem}.t-left-content[_ngcontent-%COMP%]:not(:empty):before{content:none}[data-status=error][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%], [data-status=success][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%], [data-status=warning][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%], [data-status=info][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%], [data-status=neutral][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]{display:block}.t-left-content[_ngcontent-%COMP%]:before{content:\"\";display:block;background:currentColor;margin:0 .375rem 0 0;width:.375rem;height:.375rem;border-radius:100%}.t-text[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"],
    changeDetection: 0
  });
  return TuiBadgeComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiBadgeModule = /*#__PURE__*/(() => {
  class TuiBadgeModule {}
  TuiBadgeModule.ɵfac = function TuiBadgeModule_Factory(t) {
    return new (t || TuiBadgeModule)();
  };
  TuiBadgeModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiBadgeModule
  });
  TuiBadgeModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule]]
  });
  return TuiBadgeModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-badge.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-enums.js
var taiga_ui_cdk_enums = __webpack_require__(8883);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-exceptions.js
var taiga_ui_cdk_exceptions = __webpack_require__(6651);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-date-time.js






function tuiDateClamp(date, min, max) {
  if (max && max < date) {
    return max;
  }
  if (min && min > date) {
    return min;
  }
  return date;
}
const DAYS_IN_WEEK = 7;
const DAYS_IN_NORMAL_YEAR = 365;
const DAYS_IN_LEAP_YEAR = 366;
const MONTHS_IN_YEAR = 12;
const MIN_DAY = 1;
const MIN_MONTH = 0;
const MAX_MONTH = 11;
const MIN_YEAR = 0;
const MAX_YEAR = 9999;
const RANGE_SEPARATOR_CHAR = `${taiga_ui_cdk_constants/* CHAR_NO_BREAK_SPACE */.am}${taiga_ui_cdk_constants/* CHAR_EN_DASH */.c}${taiga_ui_cdk_constants/* CHAR_NO_BREAK_SPACE */.am}`;
const MILLISECONDS_IN_SECOND = 1000;
const SECONDS_IN_MINUTE = 60;
const MINUTES_IN_HOUR = 60;
const HOURS_IN_DAY = 24;
const MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE;
const MILLISECONDS_IN_HOUR = MILLISECONDS_IN_MINUTE * MINUTES_IN_HOUR;
const MILLISECONDS_IN_DAY = MILLISECONDS_IN_HOUR * HOURS_IN_DAY;

/**
 * @internal 'dd.mm.yyyy'.length
 * Used in:
 * - {@link TuiInputDateComponent}
 * - {@link TuiInputDateRangeComponent}
 * - {@link TuiInputDateTimeComponent}
 */
const DATE_FILLER_LENGTH = 10;
/**
 * @internal
 * Used in {@link TuiInputDateRangeComponent}
 */
const DATE_RANGE_FILLER_LENGTH = 2 * DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length;

/**
 * Active date format for Taiga UI
 */
const TUI_DATE_FORMAT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)('DMY');

/**
 * Date separator for Taiga UI components
 */
const TUI_DATE_SEPARATOR = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)('.');
const changeDateSeparator = (dateString, newDateSeparator) => dateString.replace(/[^0-9A-Za-zА-Яа-я]/gi, newDateSeparator);

/**
 * Immutable year object
 * @nosideeffects
 */
class TuiYear {
  constructor(year) {
    this.year = year;
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiYear.isValidYear(year));
  }
  /**
   * Checks year for validity
   */
  static isValidYear(year) {
    return Number.isInteger(year) && (0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(year, MIN_YEAR, MAX_YEAR + 1);
  }
  /**
   * Check if passed year is a leap year
   */
  static isLeapYear(year) {
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiYear.isValidYear(year));
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
  }
  /**
   * Returns amount of leap years from year 0 to the passed one
   */
  static getAbsoluteLeapYears(year) {
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiYear.isValidYear(year));
    return Math.ceil(year / 400) + (Math.ceil(year / 4) - Math.ceil(year / 100));
  }
  static lengthBetween(from, to) {
    return to.year - from.year;
  }
  /**
   * Normalizes year by clamping it between min and max years
   */
  static normalizeYearPart(year) {
    return (0,taiga_ui_cdk_utils_math/* tuiNormalizeToIntNumber */.fS)(year, MIN_YEAR, MAX_YEAR);
  }
  get formattedYear() {
    return String(this.year).padStart(4, '0');
  }
  get isLeapYear() {
    return TuiYear.isLeapYear(this.year);
  }
  /**
   * Returns amount of leap years from year 0 to current
   */
  get absoluteLeapYears() {
    return TuiYear.getAbsoluteLeapYears(this.year);
  }
  /**
   * Passed year is after current
   */
  yearBefore({
    year
  }) {
    return this.year < year;
  }
  /**
   * Passed year is the same or after current
   */
  yearSameOrBefore({
    year
  }) {
    return this.year <= year;
  }
  /**
   * Passed year is the same as current
   */
  yearSame({
    year
  }) {
    return this.year === year;
  }
  /**
   * Passed year is either the same of before the current
   */
  yearSameOrAfter({
    year
  }) {
    return this.year >= year;
  }
  /**
   * Passed year is before current
   */
  yearAfter({
    year
  }) {
    return this.year > year;
  }
  /**
   * Immutably offsets year
   */
  append({
    year = 0
  }) {
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(Number.isInteger(year));
    const resultYear = this.year + year;
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiYear.isValidYear(resultYear));
    return new TuiYear(resultYear);
  }
  toString() {
    return this.formattedYear;
  }
  valueOf() {
    return this.year;
  }
  /**
   * Returns the primitive value of the given Date object.
   * Depending on the argument, the method can return either a string or a number.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive
   */
  [Symbol.toPrimitive](hint) {
    return Date.prototype[Symbol.toPrimitive].call(this, hint);
  }
  toJSON() {
    return this.formattedYear;
  }
}

/**
 * Immutable object consisting of year and month
 */
class TuiMonth extends TuiYear {
  /**
   * @param year
   * @param month (starting with 0)
   */
  constructor(year, month) {
    super(year);
    this.month = month;
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiMonth.isValidMonth(year, month));
  }
  /**
   * Tests month and year for validity
   */
  static isValidMonth(year, month) {
    return TuiYear.isValidYear(year) && TuiMonth.isValidMonthPart(month);
  }
  /**
   * Returns number of days in a month
   */
  static getMonthDaysCount(month, isLeapYear) {
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiMonth.isValidMonthPart(month));
    switch (month) {
      case taiga_ui_cdk_enums/* TuiMonthNumber */.n.February:
        return isLeapYear ? 29 : 28;
      case taiga_ui_cdk_enums/* TuiMonthNumber */.n.April:
      case taiga_ui_cdk_enums/* TuiMonthNumber */.n.June:
      case taiga_ui_cdk_enums/* TuiMonthNumber */.n.September:
      case taiga_ui_cdk_enums/* TuiMonthNumber */.n.November:
        return 30;
      default:
        return 31;
    }
  }
  /**
   * Returns current month and year based on local time zone
   * @nosideeffects
   */
  static currentLocal() {
    const nativeDate = new Date();
    return new TuiMonth(nativeDate.getFullYear(), nativeDate.getMonth());
  }
  /**
   * Returns current month and year based on UTC
   */
  static currentUtc() {
    const nativeDate = new Date();
    return new TuiMonth(nativeDate.getUTCFullYear(), nativeDate.getUTCMonth());
  }
  static lengthBetween(from, to) {
    const absoluteFrom = from.month + from.year * 12;
    const absoluteTo = to.month + to.year * 12;
    return absoluteTo - absoluteFrom;
  }
  /**
   * Normalizes number by clamping it between min and max month
   */
  static normalizeMonthPart(month) {
    return (0,taiga_ui_cdk_utils_math/* tuiNormalizeToIntNumber */.fS)(month, MIN_MONTH, MAX_MONTH);
  }
  /**
   * Tests month for validity
   */
  static isValidMonthPart(month) {
    return Number.isInteger(month) && (0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(month, MIN_MONTH, MAX_MONTH + 1);
  }
  get formattedMonthPart() {
    return String(this.month + 1).padStart(2, '0');
  }
  /**
   * Returns days in a month
   */
  get daysCount() {
    return TuiMonth.getMonthDaysCount(this.month, this.isLeapYear);
  }
  /**
   * Passed month and year are after current
   */
  monthBefore(another) {
    return this.yearBefore(another) || this.yearSame(another) && this.month < another.month;
  }
  /**
   * Passed month and year are after or the same as current
   */
  monthSameOrBefore(another) {
    return this.yearBefore(another) || this.yearSame(another) && this.month <= another.month;
  }
  /**
   * Passed month and year are the same as current
   */
  monthSame(another) {
    return this.yearSame(another) && this.month === another.month;
  }
  /**
   * Passed month and year are either before or equal to current
   */
  monthSameOrAfter(another) {
    return this.yearAfter(another) || this.yearSame(another) && this.month >= another.month;
  }
  /**
   * Passed month and year are before current
   */
  monthAfter(another) {
    return this.yearAfter(another) || this.yearSame(another) && this.month > another.month;
  }
  /**
   * Immutably alters current month and year by passed offset
   *
   * @param offset
   * @return new month and year object as a result of offsetting current
   */
  append({
    year = 0,
    month = 0
  }) {
    const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;
    return new TuiMonth(Math.floor(totalMonths / MONTHS_IN_YEAR), totalMonths % MONTHS_IN_YEAR);
  }
  toString() {
    return `${this.formattedMonthPart}.${this.formattedYear}`;
  }
  valueOf() {
    return this.toLocalNativeDate().valueOf();
  }
  toJSON() {
    return `${super.toJSON()}-${this.formattedMonthPart}`;
  }
  /**
   * Returns native {@link Date} based on local time zone
   */
  toLocalNativeDate() {
    return new Date(this.year, this.month);
  }
  /**
   * Returns native {@link Date} based on UTC
   */
  toUtcNativeDate() {
    return new Date(Date.UTC(this.year, this.month));
  }
}

// TODO: Localized formatting
/**
 * Immutable date object, consisting of day, month and year
 */
class TuiDay extends TuiMonth {
  constructor(year, month, day) {
    super(year, month);
    this.day = day;
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiDay.isValidDay(year, month, day));
  }
  /**
   * Creates {@link TuiDay} from native {@link Date} based on local time zone
   */
  static fromLocalNativeDate(date) {
    return new TuiDay(date.getFullYear(), date.getMonth(), date.getDate());
  }
  /**
   * Creates {@link TuiDay} from native {@link Date} using UTC
   */
  static fromUtcNativeDate(date) {
    return new TuiDay(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());
  }
  /**
   * Check validity of year, month and day
   *
   * @param year
   * @param month
   * @param day
   * @return boolean validity
   */
  static isValidDay(year, month, day) {
    return TuiMonth.isValidMonth(year, month) && Number.isInteger(day) && (0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1);
  }
  /**
   * Current day based on local time zone
   */
  static currentLocal() {
    const nativeDate = new Date();
    const year = nativeDate.getFullYear();
    const month = nativeDate.getMonth();
    const day = nativeDate.getDate();
    return new TuiDay(year, month, day);
  }
  /**
   * Returns current day based on UTC
   */
  static currentUtc() {
    const nativeDate = new Date();
    const year = nativeDate.getUTCFullYear();
    const month = nativeDate.getUTCMonth();
    const day = nativeDate.getUTCDate();
    return new TuiDay(year, month, day);
  }
  /**
   * Calculates {@link TuiDay} normalizing year, month and day. {@link NaN} is turned into minimal value.
   *
   * @param year any year value, including invalid
   * @param month any month value, including invalid (months start with 0)
   * @param day any day value, including invalid
   * @return normalized date
   */
  static normalizeOf(year, month, day) {
    const normalizedYear = TuiYear.normalizeYearPart(year);
    const normalizedMonth = TuiMonth.normalizeMonthPart(month);
    const normalizedDay = TuiDay.normalizeDayPart(day, normalizedMonth, normalizedYear);
    return new TuiDay(normalizedYear, normalizedMonth, normalizedDay);
  }
  static lengthBetween(from, to) {
    return Math.round((to.toLocalNativeDate().getTime() - from.toLocalNativeDate().getTime()) / (1000 * 60 * 60 * 24));
  }
  static parseRawDateString(date, dateMode = 'DMY') {
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(date.length === DATE_FILLER_LENGTH, '[parseRawDateString]: wrong date string length');
    switch (dateMode) {
      case 'YMD':
        return {
          day: parseInt(date.slice(8, 10), 10),
          month: parseInt(date.slice(5, 7), 10) - 1,
          year: parseInt(date.slice(0, 4), 10)
        };
      case 'MDY':
        return {
          day: parseInt(date.slice(3, 5), 10),
          month: parseInt(date.slice(0, 2), 10) - 1,
          year: parseInt(date.slice(6, 10), 10)
        };
      case 'DMY':
      default:
        return {
          day: parseInt(date.slice(0, 2), 10),
          month: parseInt(date.slice(3, 5), 10) - 1,
          year: parseInt(date.slice(6, 10), 10)
        };
    }
  }
  // TODO: Move month and year related code corresponding classes
  /**
   * Parsing a string with date with normalization
   *
   * @param rawDate date string
   * @param dateMode date format of the date string (DMY | MDY | YMD)
   * @return normalized date
   */
  static normalizeParse(rawDate, dateMode = 'DMY') {
    const {
      day,
      month,
      year
    } = this.parseRawDateString(rawDate, dateMode);
    return TuiDay.normalizeOf(year, month, day);
  }
  /**
   * Parsing a date stringified in a toJSON format
   * @param yearMonthDayString date string in format of YYYY-MM-DD
   * @return date
   * @throws exceptions if any part of the date is invalid
   */
  static jsonParse(yearMonthDayString) {
    const {
      day,
      month,
      year
    } = this.parseRawDateString(yearMonthDayString, 'YMD');
    if (!TuiYear.isValidYear(year)) {
      throw new taiga_ui_cdk_exceptions/* TuiInvalidYearException */.GB(year);
    }
    if (!TuiMonth.isValidMonth(year, month)) {
      throw new taiga_ui_cdk_exceptions/* TuiInvalidMonthException */.X0(month);
    }
    if (!Number.isInteger(day) || !(0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1)) {
      throw new taiga_ui_cdk_exceptions/* TuiInvalidDayException */.tt(day);
    }
    return new TuiDay(year, month, day);
  }
  static normalizeDayPart(day, month, year) {
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiMonth.isValidMonth(year, month));
    const monthDaysCount = TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year));
    return (0,taiga_ui_cdk_utils_math/* tuiNormalizeToIntNumber */.fS)(day, 1, monthDaysCount);
  }
  get formattedDayPart() {
    return String(this.day).padStart(2, '0');
  }
  get isWeekend() {
    const dayOfWeek = this.dayOfWeek(false);
    return dayOfWeek === taiga_ui_cdk_enums/* TuiDayOfWeek */.G.Saturday || dayOfWeek === taiga_ui_cdk_enums/* TuiDayOfWeek */.G.Sunday;
  }
  /**
   * Returns day of week
   *
   * @param startFromMonday whether week starts from Monday and not from Sunday
   * @return day of week (from 0 to 6)
   */
  dayOfWeek(startFromMonday = true) {
    const dayOfWeek = startFromMonday ? this.toLocalNativeDate().getDay() - 1 : this.toLocalNativeDate().getDay();
    return dayOfWeek < 0 ? 6 : dayOfWeek;
  }
  /**
   * Passed date is after current
   */
  dayBefore(another) {
    return this.monthBefore(another) || this.monthSame(another) && this.day < another.day;
  }
  /**
   * Passed date is after or equals to current
   */
  daySameOrBefore(another) {
    return this.monthBefore(another) || this.monthSame(another) && this.day <= another.day;
  }
  /**
   * Passed date is the same as current
   */
  daySame(another) {
    return this.monthSame(another) && this.day === another.day;
  }
  /**
   * Passed date is either before or the same as current
   */
  daySameOrAfter(another) {
    return this.monthAfter(another) || this.monthSame(another) && this.day >= another.day;
  }
  /**
   * Passed date is before current
   */
  dayAfter(another) {
    return this.monthAfter(another) || this.monthSame(another) && this.day > another.day;
  }
  /**
   * Clamping date between two limits
   *
   * @param min
   * @param max
   * @return clamped date
   */
  dayLimit(min, max) {
    if (min !== null && this.dayBefore(min)) {
      return min;
    }
    if (max !== null && this.dayAfter(max)) {
      return max;
    }
    return this;
  }
  /**
   * Immutably alters current day by passed offset
   *
   * If resulting month has more days than original one, date is rounded to the maximum day
   * in the resulting month. Offset of days will be calculated based on the resulted year and month
   * to not interfere with parent classes methods
   *
   * @param offset
   * @return new date object as a result of offsetting current
   */
  append({
    year = 0,
    month = 0,
    day = 0
  }) {
    const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;
    let years = Math.floor(totalMonths / MONTHS_IN_YEAR);
    let months = totalMonths % MONTHS_IN_YEAR;
    let days = Math.min(this.day, TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) + day;
    while (days > TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) {
      days -= TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));
      if (months === taiga_ui_cdk_enums/* TuiMonthNumber */.n.December) {
        years++;
        months = taiga_ui_cdk_enums/* TuiMonthNumber */.n.January;
      } else {
        months++;
      }
    }
    while (days < MIN_DAY) {
      if (months === taiga_ui_cdk_enums/* TuiMonthNumber */.n.January) {
        years--;
        months = taiga_ui_cdk_enums/* TuiMonthNumber */.n.December;
      } else {
        months--;
      }
      days += TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));
    }
    return new TuiDay(years, months, days);
  }
  /**
   * Returns formatted whole date
   */
  getFormattedDay(dateFormat, separator) {
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(separator.length === 1, 'Separator should consist of only 1 symbol');
    const dd = this.formattedDayPart;
    const mm = this.formattedMonthPart;
    const yyyy = this.formattedYear;
    switch (dateFormat) {
      case 'YMD':
        return `${yyyy}${separator}${mm}${separator}${dd}`;
      case 'MDY':
        return `${mm}${separator}${dd}${separator}${yyyy}`;
      case 'DMY':
      default:
        return `${dd}${separator}${mm}${separator}${yyyy}`;
    }
  }
  toString(dateFormat = 'DMY', separator = '.') {
    return this.getFormattedDay(dateFormat, separator);
  }
  toJSON() {
    return `${super.toJSON()}-${this.formattedDayPart}`;
  }
  /**
   * Returns native {@link Date} based on local time zone
   */
  toLocalNativeDate() {
    return new Date(this.year, this.month, this.day);
  }
  /**
   * Returns native {@link Date} based on UTC
   */
  toUtcNativeDate() {
    return new Date(Date.UTC(this.year, this.month, this.day));
  }
}

/**
 * An immutable range of two {@link TuiMonth} objects
 */
class TuiMonthRange {
  constructor(from, to) {
    this.from = from;
    this.to = to;
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(from.monthSameOrBefore(to));
  }
  static sort(month1, month2) {
    return month1.monthSameOrBefore(month2) ? new TuiMonthRange(month1, month2) : new TuiMonthRange(month2, month1);
  }
  get isSingleMonth() {
    return this.from.monthSame(this.to);
  }
  monthSame(another) {
    return this.from.monthSame(another.from) && this.to.monthSame(another.to);
  }
  toString() {
    return `${this.from}${RANGE_SEPARATOR_CHAR}${this.to}`;
  }
}

/**
 * An immutable range of two {@link TuiDay} objects
 */
class TuiDayRange extends TuiMonthRange {
  constructor(from, to) {
    super(from, to);
    this.from = from;
    this.to = to;
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(from.daySameOrBefore(to));
  }
  /**
   * Creates range from two days after sorting them
   *
   * @param day1
   * @param day2
   * @return new range with sorted days
   */
  static sort(day1, day2) {
    return day1.daySameOrBefore(day2) ? new TuiDayRange(day1, day2) : new TuiDayRange(day2, day1);
  }
  /**
   * Parse and correct a day range in string format
   *
   * @param rangeString a string of dates in a format dd.mm.yyyy - dd.mm.yyyy
   * @param dateMode {@link TuiDateMode}
   * @return normalized day range object
   */
  static normalizeParse(rangeString, dateMode = 'DMY') {
    const leftDay = TuiDay.normalizeParse(rangeString.slice(0, DATE_FILLER_LENGTH), dateMode);
    if (rangeString.length < DATE_RANGE_FILLER_LENGTH) {
      return new TuiDayRange(leftDay, leftDay);
    }
    return TuiDayRange.sort(leftDay, TuiDay.normalizeParse(rangeString.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length), dateMode));
  }
  get isSingleDay() {
    return this.from.daySame(this.to);
  }
  /**
   * Tests ranges for identity
   *
   * @param another second range to test against current
   * @return `true` if days are identical
   */
  daySame(another) {
    return this.from.daySame(another.from) && this.to.daySame(another.to);
  }
  /**
   * Locks range between two days included, or limits from one side if the other is null
   *
   * @param min
   * @param max
   * @return range — clamped range
   */
  dayLimit(min, max) {
    return new TuiDayRange(this.from.dayLimit(min, max), this.to.dayLimit(min, max));
  }
  /**
   * Human readable format.
   */
  getFormattedDayRange(dateFormat, dateSeparator) {
    const from = this.from.getFormattedDay(dateFormat, dateSeparator);
    const to = this.to.getFormattedDay(dateFormat, dateSeparator);
    return `${from}${RANGE_SEPARATOR_CHAR}${to}`;
  }
  toString(dateFormat = 'DMY', dateSeparator = '.') {
    return this.getFormattedDayRange(dateFormat, dateSeparator);
  }
}
const TUI_FIRST_DAY = new TuiDay(MIN_YEAR, MIN_MONTH, MIN_DAY);
const TUI_LAST_DAY = new TuiDay(MAX_YEAR, MAX_MONTH, 31);

/**
 * Immutable time object with hours, minutes, seconds and ms
 */
class TuiTime {
  constructor(hours, minutes, seconds = 0, ms = 0) {
    this.hours = hours;
    this.minutes = minutes;
    this.seconds = seconds;
    this.ms = ms;
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(TuiTime.isValidTime(hours, minutes, seconds, ms), 'Time must be real, but got:', hours, minutes, seconds, ms);
  }
  /**
   * Checks if time is valid
   */
  static isValidTime(hours, minutes, seconds = 0, ms = 0) {
    return Number.isInteger(hours) && (0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(hours, 0, HOURS_IN_DAY) && Number.isInteger(minutes) && (0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(minutes, 0, MINUTES_IN_HOUR) && Number.isInteger(seconds) && (0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(seconds, 0, SECONDS_IN_MINUTE) && Number.isInteger(ms) && (0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(ms, 0, 1000);
  }
  /**
   * Current UTC time.
   */
  static current() {
    return TuiTime.fromAbsoluteMilliseconds(Date.now() % MILLISECONDS_IN_DAY);
  }
  /**
   * Current time in local timezone
   */
  static currentLocal() {
    const date = new Date();
    return TuiTime.fromAbsoluteMilliseconds((Date.now() - date.getTimezoneOffset() * MILLISECONDS_IN_MINUTE) % MILLISECONDS_IN_DAY);
  }
  /**
   * Calculates TuiTime from milliseconds
   */
  static fromAbsoluteMilliseconds(milliseconds) {
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert(Number.isInteger(milliseconds));
    ngDevMode && taiga_ui_cdk_classes/* tuiAssert */.B.assert((0,taiga_ui_cdk_utils_math/* tuiInRange */.bQ)(milliseconds, 0, MILLISECONDS_IN_DAY), `Milliseconds must be below ${MILLISECONDS_IN_DAY} (milliseconds in a day).`);
    const hours = Math.floor(milliseconds / MILLISECONDS_IN_HOUR);
    const minutes = Math.floor(milliseconds % MILLISECONDS_IN_HOUR / MILLISECONDS_IN_MINUTE);
    const seconds = Math.floor(milliseconds % MILLISECONDS_IN_HOUR % MILLISECONDS_IN_MINUTE / 1000) || 0;
    const ms = Math.floor(milliseconds % MILLISECONDS_IN_HOUR % MILLISECONDS_IN_MINUTE % 1000) || 0;
    return new TuiTime(hours, minutes, seconds, ms);
  }
  /**
   * Parses string into TuiTime object
   */
  static fromString(time) {
    const hours = Number(time.slice(0, 2));
    const minutes = Number(time.slice(3, 5));
    const seconds = Number(time.slice(6, 8)) || 0;
    const ms = Number(time.slice(9, 12)) || 0;
    return new TuiTime(hours, minutes, seconds, ms);
  }
  /**
   * Converts Date object into TuiTime
   * @param date
   */
  static fromLocalNativeDate(date) {
    return new TuiTime(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
  }
  /**
   * Shifts time by hours and minutes
   */
  shift({
    hours = 0,
    minutes = 0,
    seconds = 0,
    ms = 0
  }) {
    const newMs = (1000 + this.ms + ms % 1000) % 1000;
    const secondsInMs = ms < 0 ? Math.ceil(ms / 1000) : Math.floor(ms / 1000);
    const secondsToAdd = secondsInMs + seconds;
    const newSeconds = (60 + this.seconds + secondsToAdd % 60) % 60;
    const minutesInSeconds = secondsToAdd < 0 ? Math.ceil(secondsToAdd / 60) : Math.floor(secondsToAdd / 60);
    const minutesToAdd = minutesInSeconds + minutes;
    const newMinutes = (60 + this.minutes + minutesToAdd % 60) % 60;
    const hoursInMinutes = minutesToAdd < 0 ? Math.ceil(minutesToAdd / 60) : Math.floor(minutesToAdd / 60);
    const hoursToAdd = hoursInMinutes + hours;
    const newHours = (24 + this.hours + hoursToAdd % 24) % 24;
    return new TuiTime(newHours, newMinutes, newSeconds, newMs);
  }
  /**
   * Converts TuiTime to string
   */
  toString(mode) {
    const needAddMs = mode === 'HH:MM:SS.MSS' || !mode && this.ms > 0;
    const needAddSeconds = needAddMs || mode === 'HH:MM:SS' || !mode && this.seconds > 0;
    return `${this.formatTime(this.hours)}:${this.formatTime(this.minutes)}` + `${needAddSeconds ? `:${this.formatTime(this.seconds)}` : ''}` + `${needAddMs ? `.${this.formatTime(this.ms, 3)}` : ''}`;
  }
  valueOf() {
    return this.toAbsoluteMilliseconds();
  }
  /**
   * Returns the primitive value of the given Date object.
   * Depending on the argument, the method can return either a string or a number.
   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive
   */
  [Symbol.toPrimitive](hint) {
    return Date.prototype[Symbol.toPrimitive].call(this, hint);
  }
  /**
   * Converts TuiTime to milliseconds
   */
  toAbsoluteMilliseconds() {
    return this.hours * MILLISECONDS_IN_HOUR + this.minutes * MILLISECONDS_IN_MINUTE + this.seconds * 1000 + this.ms;
  }
  formatTime(time, digits = 2) {
    return String(time).padStart(digits, '0');
  }
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-date-time.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/i18n/fesm2015/taiga-ui-i18n-enums.js
var taiga_ui_i18n_enums = __webpack_require__(2725);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/i18n/fesm2015/taiga-ui-i18n-tools.js + 2 modules
var taiga_ui_i18n_tools = __webpack_require__(4585);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-tokens.js






/**
 * Stream that emits calendar data change
 */
const TUI_CALENDAR_DATE_STREAM = new core_mjs_.InjectionToken('[TUI_CALENDAR_DATE_STREAM]');
function tuiDateStreamWithTransformer(transformer) {
  return {
    provide: TUI_CALENDAR_DATE_STREAM,
    deps: [[new Optional(), new Self(), NgControl], [new Optional(), transformer]],
    useFactory: tuiControlValueFactory
  };
}
const TUI_COUNTRIES_MASKS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)({
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AD]: '+376###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AE]: '+971-##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AF]: '+93##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AG]: '+1(268) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AI]: '+1(264) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AL]: '+355(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AM]: '+374##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AO]: '+244(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AR]: '+54(###) ####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AT]: '+43(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AU]: '+61#-####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AW]: '+297###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AZ]: '+994##-###-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BA]: '+387 ###-####-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BB]: '+1(246) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BD]: '+880##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BE]: '+32(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BF]: '+226##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BG]: '+359(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BH]: '+973####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BI]: '+257##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BJ]: '+229##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BL]: '+590 ## ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BM]: '+1(441) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BN]: '+673###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BO]: '+591#-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BQ]: '+599-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BR]: '+55(##) ####-#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BS]: '+1(242) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BT]: '+975#-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BW]: '+267##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BY]: '+375(##) ###-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BZ]: '+501###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CA]: '+1(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CD]: '+243(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CF]: '+236-##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CG]: '+242##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CH]: '+41##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CI]: '+225##-##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CL]: '+56#-####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CM]: '+237#####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CN]: '+86(###) ####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CO]: '+57(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CR]: '+506####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CU]: '+53#-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CV]: '+238(###) ##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CW]: '+5999-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CY]: '+357##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CZ]: '+420(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DE]: '+49(###) ###-###-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DJ]: '+253##-##-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DK]: '+45##-##-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DM]: '+1(767) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DO]: '+1(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DZ]: '+213##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.EC]: '+593##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.EE]: '+372####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.EG]: '+20(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ER]: '+291#-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ES]: '+34(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ET]: '+251##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FI]: '+358(###) ###-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FJ]: '+679##-#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FK]: '+500#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FM]: '+691###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FR]: '+33 ## ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GA]: '+241##-##-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GB]: '+44##-####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GD]: '+1(473) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GE]: '+995(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GF]: '+594 ## ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GH]: '+233(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GI]: '+350###-#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GL]: '+299##-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GM]: '+220(###) ##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GN]: '+224##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GP]: '+590 ## ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GQ]: '+240##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GR]: '+30(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GT]: '+502#-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GW]: '+245#-######',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GY]: '+592###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HK]: '+852####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HN]: '+504####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HR]: '+385##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HT]: '+509##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HU]: '+36(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ID]: '+62(###) ###-##-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IE]: '+353(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IL]: '+972##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IN]: '+91(####) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IQ]: '+964(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IR]: '+98(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IS]: '+354###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IT]: '+39(###) ####-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.JM]: '+1(876) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.JO]: '+962#-####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.JP]: '+81-##-####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KE]: '+254###-######',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KG]: '+996(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KH]: '+855##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KM]: '+269##-#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KN]: '+1(869) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KP]: '+850####-#############',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KR]: '+82##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KW]: '+965####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KY]: '+1(345) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KZ]: '+7(###) ###-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LA]: '+856##-##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LB]: '+961##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LC]: '+1(758) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LI]: '+423(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LK]: '+94##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LR]: '+231##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LS]: '+266#-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LT]: '+370(###) ##-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LU]: '+352(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LV]: '+371##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LY]: '+218##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MA]: '+212##-####-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MC]: '+377###-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MD]: '+373####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ME]: '+382##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MF]: '+590 ## ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MG]: '+261##-##-#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MK]: '+389##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ML]: '+223##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MM]: '+95##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MN]: '+976##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MO]: '+853####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MQ]: '+596 ## ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MR]: '+222##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MS]: '+1(664) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MT]: '+356####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MU]: '+230####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MV]: '+960###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MW]: '+265#-####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MX]: '+52(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MY]: '+60(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MZ]: '+258##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NA]: '+264##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NC]: '+687 ### ###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NE]: '+227##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NG]: '+234(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NI]: '+505####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NL]: '+31##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NO]: '+47(###) ##-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NP]: '+977##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NZ]: '+64(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.OM]: '+968##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PA]: '+507###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PE]: '+51(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PF]: '+689 ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PG]: '+675(###) ##-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PH]: '+63(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PK]: '+92(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PL]: '+48(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PT]: '+351##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PW]: '+680###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PY]: '+595(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.QA]: '+974####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RE]: '+262 ## ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RO]: '+40##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RS]: '+381##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RU]: '+7### ###-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RW]: '+250(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SA]: '+966#-####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SB]: '+677###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SC]: '+248#-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SD]: '+249##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SE]: '+46##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SG]: '+65####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SH]: '+290####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SI]: '+386##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SK]: '+421(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SL]: '+232##-######',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SM]: '+378####-######',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SN]: '+221##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SO]: '+252##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SR]: '+597###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ST]: '+239##-#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SV]: '+503##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SX]: '+1(721) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SY]: '+963##-####-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SZ]: '+268##-##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TC]: '+1(649) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TD]: '+235##-##-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TG]: '+228##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TH]: '+66##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TJ]: '+992##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TL]: '+670###-#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TM]: '+993#-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TN]: '+216##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TO]: '+676#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TR]: '+90(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TT]: '+1(868) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TW]: '+886#-####-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TZ]: '+255##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.UA]: '+380(##) ###-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.UG]: '+256(###) ###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.US]: '+1(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.UY]: '+598#-###-##-##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.UZ]: '+998##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VC]: '+1(784) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VE]: '+58(###) ###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VG]: '+1(284)###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VN]: '+84(###) ####-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VU]: '+678##-#####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.WS]: '+685##-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.XK]: '+383##-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.YE]: '+967###-###-###',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.YT]: '+262 ## ## ## ## ##',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ZA]: '+27##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ZM]: '+260##-###-####',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ZW]: '+263#-######'
});

// TODO: Refactor to use `AbstractTuiValueTransformer` and add ability to provide it for all controls
/**
 * Control value transformer of TuiDay to custom value format for InputDate* components
 */
const TUI_DATE_VALUE_TRANSFORMER = new core_mjs_.InjectionToken('[TUI_DATE_VALUE_TRANSFORMER]');
/**
 * Control value transformer for InputDateRange component
 */
const TUI_DATE_RANGE_VALUE_TRANSFORMER = new core_mjs_.InjectionToken('[TUI_DATE_RANGE_VALUE_TRANSFORMER]');
/**
 * Control value transformer for InputDateTime component
 */
const TUI_DATE_TIME_VALUE_TRANSFORMER = new core_mjs_.InjectionToken('[TUI_DATE_TIME_VALUE_TRANSFORMER]');
const TUI_PROMPT_WORDS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('prompt'));
const TUI_CANCEL_WORD = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('cancel'));
const TUI_DONE_WORD = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('done'));
const TUI_MORE_WORD = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('more'));
const TUI_HIDE_TEXT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('hide'));
const TUI_SHOW_ALL_TEXT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('showAll'));
const TUI_OTHER_DATE_TEXT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('otherDate'));
const TUI_CHOOSE_DAY_OR_RANGE_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('mobileCalendarTexts'));
const TUI_FROM_TO_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('range'));
const TUI_PLUS_MINUS_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('countTexts'));
const TUI_TIME_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('time'));
const TUI_DATE_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('dateTexts'));
const TUI_DIGITAL_INFORMATION_UNITS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('digitalInformationUnits'));
const taiga_ui_kit_tokens_TUI_COPY_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('copyTexts'));
const TUI_PASSWORD_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('passwordTexts'));
const TUI_CALENDAR_MONTHS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('shortCalendarMonths'));
const TUI_FILE_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('fileTexts'));
const TUI_PAGINATION_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('pagination'));
const TUI_INPUT_FILE_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('inputFileTexts'));
const TUI_MULTI_SELECT_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('multiSelectTexts'));
const TUI_COUNTRIES = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('countries'));
const TUI_INPUT_DATE_DEFAULT_OPTIONS = {
  icon: ({
    $implicit
  }) => $implicit === 's' ? 'tuiIconCalendar' : 'tuiIconCalendarLarge',
  min: TUI_FIRST_DAY,
  max: TUI_LAST_DAY,
  nativePicker: false
};
/**
 * Default parameters for InputDate component
 */
const TUI_INPUT_DATE_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_INPUT_DATE_DEFAULT_OPTIONS);
function tuiInputDateOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_DATE_OPTIONS, options, TUI_INPUT_DATE_DEFAULT_OPTIONS);
}
const TUI_DEFAULT_ITEMS_HANDLERS = {
  stringify: taiga_ui_cdk_constants/* TUI_DEFAULT_STRINGIFY */.Pd,
  identityMatcher: taiga_ui_cdk_constants/* TUI_DEFAULT_IDENTITY_MATCHER */.BJ,
  disabledItemHandler: taiga_ui_cdk_constants/* ALWAYS_FALSE_HANDLER */.Fr
};
/**
 * Default items handlers for components
 */
const taiga_ui_kit_tokens_TUI_ITEMS_HANDLERS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_DEFAULT_ITEMS_HANDLERS);
function tuiItemsHandlersProvider(options) {
  return tuiProvideOptions(taiga_ui_kit_tokens_TUI_ITEMS_HANDLERS, options, TUI_DEFAULT_ITEMS_HANDLERS);
}

/**
 * A component for mobile data picker
 */
const TUI_MOBILE_CALENDAR = new core_mjs_.InjectionToken('[TUI_MOBILE_CALENDAR]');

/**
 * A function to get localized formatted month
 */
const TUI_MONTH_FORMATTER = new core_mjs_.InjectionToken('[TUI_MONTH_FORMATTER]');

/**
 * Margin between tabs
 */
const TUI_TAB_MARGIN = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(24);

/**
 * Validation errors
 */
const TUI_VALIDATION_ERRORS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)({});

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-tokens.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-abstract.js






let taiga_ui_kit_abstract_AbstractTuiNativeSelect = /*#__PURE__*/(() => {
  class AbstractTuiNativeSelect {
    constructor(host, control, el, idService, itemsHandlers) {
      this.host = host;
      this.control = control;
      this.el = el;
      this.idService = idService;
      this.itemsHandlers = itemsHandlers;
      this.disabledItemHandler = null;
      this.datalist = null;
    }
    get id() {
      return this.el.nativeElement.id || this.idService.generate();
    }
  }
  AbstractTuiNativeSelect.ɵfac = function AbstractTuiNativeSelect_Factory(t) {
    return new (t || AbstractTuiNativeSelect)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_TEXTFIELD_HOST */.w2), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_abstract/* AbstractTuiControl */.Er), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiIdService */.BF), core_mjs_["ɵɵdirectiveInject"](taiga_ui_kit_tokens_TUI_ITEMS_HANDLERS));
  };
  AbstractTuiNativeSelect.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: AbstractTuiNativeSelect,
    viewQuery: function AbstractTuiNativeSelect_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](TuiDataListDirective, 7, core_mjs_.TemplateRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.datalist = _t.first);
      }
    },
    hostVars: 1,
    hostBindings: function AbstractTuiNativeSelect_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵhostProperty"]("id", ctx.id);
      }
    },
    inputs: {
      disabledItemHandler: "disabledItemHandler"
    }
  });
  return AbstractTuiNativeSelect;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-abstract.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-element.js


let taiga_ui_cdk_directives_element_TuiElementDirective = /*#__PURE__*/(() => {
  class TuiElementDirective {
    constructor({
      nativeElement
    }) {
      /**
       * @note:
       * Typically, when your constructor is invoked with new,
       * an object is created, its constructor is assigned to
       * the invoked constructor and the object is then assigned
       * to this before executing any operations specified
       * in your constructor method.
       *
       * ERROR TypeError: Class constructor ElementRef cannot be invoked without 'new'
       * https://github.com/taiga-family/taiga-ui/issues/3072
       *
       * This way we can instantiate object creation
       * without additional prototype chain for possible fix bug.
       */
      return new core_mjs_.ElementRef(nativeElement);
    }
  }
  TuiElementDirective.ɵfac = function TuiElementDirective_Factory(t) {
    return new (t || TuiElementDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
  };
  TuiElementDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiElementDirective,
    selectors: [["", "tuiElement", ""]],
    exportAs: ["elementRef"]
  });
  return TuiElementDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiElementModule = /*#__PURE__*/(() => {
  class TuiElementModule {}
  TuiElementModule.ɵfac = function TuiElementModule_Factory(t) {
    return new (t || TuiElementModule)();
  };
  TuiElementModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiElementModule
  });
  TuiElementModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiElementModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-element.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-data-list-wrapper.js











const taiga_ui_kit_components_data_list_wrapper_c0 = (/* unused pure expression or super */ null && (["labels", ""]));
function TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", text_r4, " ");
  }
}
function TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 7, 1);
    i0.ɵɵlistener("click", function TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_Template_button_click_0_listener() {
      const item_r2 = i0.ɵɵrestoreView(_r1).$implicit;
      const ctx_r2 = i0.ɵɵnextContext(3);
      return i0.ɵɵresetView(ctx_r2.itemClick.emit(item_r2));
    });
    i0.ɵɵtemplate(2, TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_ng_container_2_Template, 2, 1, "ng-container", 8);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const elementRef_r5 = i0.ɵɵreference(1);
    const ctx_r2 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("disabled", ctx_r2.disabledItemHandler(item_r2))("value", item_r2);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("polymorpheusOutlet", ctx_r2.itemContent)("polymorpheusOutletContext", ctx_r2.getContext(item_r2, elementRef_r5));
  }
}
function TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "tui-opt-group", 5);
    i0.ɵɵtemplate(1, TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_Template, 3, 4, "button", 6);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const group_r6 = ctx.$implicit;
    const index_r7 = ctx.index;
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("label", ctx_r2.labels[index_r7]);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", group_r6);
  }
}
function TuiDataListGroupWrapperComponent_tui_data_list_0_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "tui-data-list", 3);
    i0.ɵɵtemplate(1, TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_Template, 2, 2, "tui-opt-group", 4);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("emptyContent", ctx_r2.emptyContent)("size", ctx_r2.size);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r2.items);
  }
}
function TuiDataListGroupWrapperComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelement(0, "tui-loader", 9);
  }
}
function TuiDataListWrapperComponent_tui_data_list_0_button_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r4, " ");
  }
}
function TuiDataListWrapperComponent_tui_data_list_0_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "button", 5, 1);
    core_mjs_["ɵɵlistener"]("click", function TuiDataListWrapperComponent_tui_data_list_0_button_1_Template_button_click_0_listener() {
      const item_r2 = core_mjs_["ɵɵrestoreView"](_r1).$implicit;
      const ctx_r2 = core_mjs_["ɵɵnextContext"](2);
      return core_mjs_["ɵɵresetView"](ctx_r2.itemClick.emit(item_r2));
    });
    core_mjs_["ɵɵelementStart"](2, "span", 6);
    core_mjs_["ɵɵtemplate"](3, TuiDataListWrapperComponent_tui_data_list_0_button_1_ng_container_3_Template, 2, 1, "ng-container", 7);
    core_mjs_["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const elementRef_r5 = core_mjs_["ɵɵreference"](1);
    const ctx_r2 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵproperty"]("disabled", ctx_r2.disabledItemHandler(item_r2))("value", item_r2);
    core_mjs_["ɵɵadvance"](3);
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r2.itemContent)("polymorpheusOutletContext", ctx_r2.getContext(item_r2, elementRef_r5));
  }
}
function TuiDataListWrapperComponent_tui_data_list_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "tui-data-list", 3);
    core_mjs_["ɵɵtemplate"](1, TuiDataListWrapperComponent_tui_data_list_0_button_1_Template, 4, 4, "button", 4);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("emptyContent", ctx_r2.emptyContent)("size", ctx_r2.size);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngForOf", ctx_r2.items);
  }
}
function TuiDataListWrapperComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-loader", 8);
  }
}
const taiga_ui_kit_components_data_list_wrapper_c1 = "[_nghost-%COMP%]{display:block}.t-content[_ngcontent-%COMP%]{flex:1}.t-loader[_ngcontent-%COMP%]{margin:.75rem 0}";
let AbstractTuiDataListWrapper = /*#__PURE__*/(() => {
  class AbstractTuiDataListWrapper {
    constructor(itemsHandlers, defaultSize) {
      this.itemsHandlers = itemsHandlers;
      this.defaultSize = defaultSize;
      this.optionsQuery = taiga_ui_cdk_constants/* EMPTY_QUERY */.xQ;
      this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
      this.size = this.defaultSize;
      this.itemClick = new core_mjs_.EventEmitter();
      this.itemContent = ({
        $implicit
      }) => this.itemsHandlers.stringify($implicit);
    }
    getContext($implicit, {
      nativeElement
    }) {
      return {
        $implicit,
        active: (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(nativeElement)
      };
    }
    getOptions(includeDisabled = false) {
      return this.optionsQuery.filter(({
        disabled
      }) => includeDisabled || !disabled).map(({
        value
      }) => value).filter(taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj);
    }
  }
  AbstractTuiDataListWrapper.ɵfac = function AbstractTuiDataListWrapper_Factory(t) {
    core_mjs_["ɵɵinvalidFactory"]();
  };
  AbstractTuiDataListWrapper.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: AbstractTuiDataListWrapper,
    viewQuery: function AbstractTuiDataListWrapper_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](TuiOptionComponent, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.optionsQuery = _t);
      }
    },
    inputs: {
      disabledItemHandler: "disabledItemHandler",
      emptyContent: "emptyContent",
      size: "size",
      itemContent: "itemContent"
    },
    outputs: {
      itemClick: "itemClick"
    }
  });
  return AbstractTuiDataListWrapper;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDataListGroupWrapperComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDataListGroupWrapperComponent extends AbstractTuiDataListWrapper {
    constructor(itemsHandlers, controller) {
      super(itemsHandlers, (controller === null || controller === void 0 ? void 0 : controller.size) || 'm');
      this.items = [];
      this.labels = [];
    }
  }
  TuiDataListGroupWrapperComponent.ɵfac = function TuiDataListGroupWrapperComponent_Factory(t) {
    return new (t || TuiDataListGroupWrapperComponent)(i0.ɵɵdirectiveInject(TUI_ITEMS_HANDLERS), i0.ɵɵdirectiveInject(TuiTextfieldSizeDirective, 8));
  };
  TuiDataListGroupWrapperComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiDataListGroupWrapperComponent,
    selectors: [["tui-data-list-wrapper", "labels", ""]],
    inputs: {
      items: "items",
      labels: "labels"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsDataListAccessor(TuiDataListGroupWrapperComponent)]), i0.ɵɵInheritDefinitionFeature],
    attrs: taiga_ui_kit_components_data_list_wrapper_c0,
    decls: 3,
    vars: 2,
    consts: [["loading", ""], ["elementRef", "elementRef"], [3, "emptyContent", "size", 4, "ngIf", "ngIfElse"], [3, "emptyContent", "size"], [3, "label", 4, "ngFor", "ngForOf"], [3, "label"], ["automation-id", "tui-data-list-wrapper__option", "tuiElement", "", "tuiOption", "", 3, "disabled", "value", "click", 4, "ngFor", "ngForOf"], ["automation-id", "tui-data-list-wrapper__option", "tuiElement", "", "tuiOption", "", 3, "click", "disabled", "value"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-loader"]],
    template: function TuiDataListGroupWrapperComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵtemplate(0, TuiDataListGroupWrapperComponent_tui_data_list_0_Template, 2, 3, "tui-data-list", 2)(1, TuiDataListGroupWrapperComponent_ng_template_1_Template, 1, 0, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor);
      }
      if (rf & 2) {
        const loading_r8 = i0.ɵɵreference(2);
        i0.ɵɵproperty("ngIf", ctx.items)("ngIfElse", loading_r8);
      }
    },
    dependencies: [i1.TuiDataListComponent, i1.TuiOptionComponent, i1.TuiLoaderComponent, i2.NgIf, i2.NgForOf, i1.TuiOptGroupDirective, i3.TuiElementDirective, i4.PolymorpheusOutletDirective],
    styles: ["[_nghost-%COMP%]{display:block}.t-content[_ngcontent-%COMP%]{flex:1}.t-loader[_ngcontent-%COMP%]{margin:.75rem 0}"],
    changeDetection: 0
  });
  return TuiDataListGroupWrapperComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDataListWrapperComponent = /*#__PURE__*/(() => {
  class TuiDataListWrapperComponent extends AbstractTuiDataListWrapper {
    constructor(itemsHandlers, controller) {
      super(itemsHandlers, (controller === null || controller === void 0 ? void 0 : controller.size) || 'm');
      this.items = [];
    }
  }
  TuiDataListWrapperComponent.ɵfac = function TuiDataListWrapperComponent_Factory(t) {
    return new (t || TuiDataListWrapperComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_kit_tokens_TUI_ITEMS_HANDLERS), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_WATCHED_CONTROLLER, 8));
  };
  TuiDataListWrapperComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDataListWrapperComponent,
    selectors: [["tui-data-list-wrapper", 3, "labels", ""]],
    inputs: {
      items: "items"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_tokens/* tuiAsDataListAccessor */.WD)(TuiDataListWrapperComponent), TEXTFIELD_CONTROLLER_PROVIDER]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    decls: 3,
    vars: 2,
    consts: [["loading", ""], ["elementRef", "elementRef"], [3, "emptyContent", "size", 4, "ngIf", "ngIfElse"], [3, "emptyContent", "size"], ["automation-id", "tui-data-list-wrapper__option", "tuiElement", "", "tuiOption", "", 3, "disabled", "value", "click", 4, "ngFor", "ngForOf"], ["automation-id", "tui-data-list-wrapper__option", "tuiElement", "", "tuiOption", "", 3, "click", "disabled", "value"], [1, "t-content"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-data-list-wrapper__loader", 1, "t-loader"]],
    template: function TuiDataListWrapperComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵtemplate"](0, TuiDataListWrapperComponent_tui_data_list_0_Template, 2, 3, "tui-data-list", 2)(1, TuiDataListWrapperComponent_ng_template_1_Template, 1, 0, "ng-template", null, 0, core_mjs_["ɵɵtemplateRefExtractor"]);
      }
      if (rf & 2) {
        const loading_r6 = core_mjs_["ɵɵreference"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.items)("ngIfElse", loading_r6);
      }
    },
    dependencies: [TuiDataListComponent, TuiOptionComponent, taiga_ui_core_components_loader/* TuiLoaderComponent */.jT, common_mjs_.NgIf, common_mjs_.NgForOf, taiga_ui_cdk_directives_element_TuiElementDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA],
    styles: [taiga_ui_kit_components_data_list_wrapper_c1],
    changeDetection: 0
  });
  return TuiDataListWrapperComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDataListWrapperModule = /*#__PURE__*/(() => {
  class TuiDataListWrapperModule {}
  TuiDataListWrapperModule.ɵfac = function TuiDataListWrapperModule_Factory(t) {
    return new (t || TuiDataListWrapperModule)();
  };
  TuiDataListWrapperModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDataListWrapperModule
  });
  TuiDataListWrapperModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiElementModule, taiga_ui_core_components_data_list_TuiDataListModule, taiga_ui_core_components_loader/* TuiLoaderModule */.Yc]]
  });
  return TuiDataListWrapperModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-data-list-wrapper.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-stringify-content.js


let TuiStringifyContentPipe = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiStringifyContentPipe {
    transform(stringify) {
      return ({
        $implicit
      }) => stringify($implicit);
    }
  }
  TuiStringifyContentPipe.ɵfac = function TuiStringifyContentPipe_Factory(t) {
    return new (t || TuiStringifyContentPipe)();
  };
  TuiStringifyContentPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({
    name: "tuiStringifyContent",
    type: TuiStringifyContentPipe,
    pure: true
  });
  return TuiStringifyContentPipe;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiStringifyContentPipeModule = /*#__PURE__*/(() => {
  class TuiStringifyContentPipeModule {}
  TuiStringifyContentPipeModule.ɵfac = function TuiStringifyContentPipeModule_Factory(t) {
    return new (t || TuiStringifyContentPipeModule)();
  };
  TuiStringifyContentPipeModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiStringifyContentPipeModule
  });
  TuiStringifyContentPipeModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiStringifyContentPipeModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-pipes-stringify-content.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-arrow.js










/** Default values for arrow options */
function TuiArrowComponent_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 2);
  }
  if (rf & 2) {
    const src_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r1);
  }
}
function TuiArrowComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
const TUI_ARROW_DEFAULT_OPTIONS = {
  iconSmall: 'tuiIconChevronDown',
  iconLarge: 'tuiIconChevronDownLarge'
};
/**
 * Default parameters for arrow component
 */
const taiga_ui_kit_components_arrow_TUI_ARROW_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_ARROW_DEFAULT_OPTIONS);
function tuiArrowOptionsProvider(options) {
  return tuiProvideOptions(taiga_ui_kit_components_arrow_TUI_ARROW_OPTIONS, options, TUI_ARROW_DEFAULT_OPTIONS);
}
let TuiArrowComponent = /*#__PURE__*/(() => {
  class TuiArrowComponent {
    constructor(dropdown, textfieldSize, options) {
      this.dropdown = dropdown;
      this.textfieldSize = textfieldSize;
      this.options = options;
    }
    get rotated() {
      return this.dropdown.open;
    }
    get arrowIcon() {
      return (0,taiga_ui_core_utils_miscellaneous/* tuiSizeBigger */.Wu)(this.textfieldSize.size) ? this.options.iconLarge : this.options.iconSmall;
    }
  }
  TuiArrowComponent.ɵfac = function TuiArrowComponent_Factory(t) {
    return new (t || TuiArrowComponent)(core_mjs_["ɵɵdirectiveInject"](TuiHostedDropdownComponent), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_SIZE), core_mjs_["ɵɵdirectiveInject"](taiga_ui_kit_components_arrow_TUI_ARROW_OPTIONS));
  };
  TuiArrowComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiArrowComponent,
    selectors: [["tui-arrow"]],
    hostVars: 2,
    hostBindings: function TuiArrowComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("_rotated", ctx.rotated);
      }
    },
    decls: 3,
    vars: 4,
    consts: [[3, "src", 4, "polymorpheusOutlet"], [4, "ngIf"], [3, "src"]],
    template: function TuiArrowComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵtemplate"](0, TuiArrowComponent_tui_svg_0_Template, 1, 1, "tui-svg", 0)(1, TuiArrowComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
        core_mjs_["ɵɵpipe"](2, "async");
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.arrowIcon);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](2, 2, ctx.dropdown.openChange));
      }
    },
    dependencies: [taiga_ui_core_components_svg/* TuiSvgComponent */._Y, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.NgIf, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;cursor:pointer;pointer-events:none}._rotated[_nghost-%COMP%]{transform:rotate(180deg)}"],
    changeDetection: 0
  });
  return TuiArrowComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_ARROW = new tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS(TuiArrowComponent);
let TuiArrowModule = /*#__PURE__*/(() => {
  class TuiArrowModule {}
  TuiArrowModule.ɵfac = function TuiArrowModule_Factory(t) {
    return new (t || TuiArrowModule)();
  };
  TuiArrowModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiArrowModule
  });
  TuiArrowModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, taiga_ui_core_components_svg/* TuiSvgModule */.vl, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ]]
  });
  return TuiArrowModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_ARROW_DEFAULT_MODE = {
  interactive: TUI_ARROW,
  disabled: TUI_ARROW
};
/**
 * Type of icon in dropdowns for interactive or disable mode
 */
const TUI_ARROW_MODE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_ARROW_DEFAULT_MODE);
function tuiArrowModeProvider(options) {
  return tuiProvideOptions(TUI_ARROW_MODE, options, TUI_ARROW_DEFAULT_MODE);
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-arrow.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-directives-scroll-into-view.js








/**
 * Directive scrolls element into view inside tui-scrollbar
 */
let TuiScrollIntoViewDirective = /*#__PURE__*/(() => {
  class TuiScrollIntoViewDirective {
    constructor(el, destroy$) {
      this.el = el;
      this.destroy$ = destroy$;
    }
    set tuiScrollIntoView(scroll) {
      if (!scroll) {
        return;
      }
      // Timeout is necessary in order to give element render cycle to get into its final spot
      // (for example if it is inside dropdown box which has to be positioned first)
      (0,observable_timer/* timer */.O)(0).pipe((0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(() => {
        this.el.nativeElement.dispatchEvent(new CustomEvent(taiga_ui_core_constants/* TUI_SCROLL_INTO_VIEW */.Uk, {
          bubbles: true,
          detail: this.el.nativeElement
        }));
      });
    }
  }
  TuiScrollIntoViewDirective.ɵfac = function TuiScrollIntoViewDirective_Factory(t) {
    return new (t || TuiScrollIntoViewDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2));
  };
  TuiScrollIntoViewDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiScrollIntoViewDirective,
    selectors: [["", "tuiScrollIntoView", ""]],
    inputs: {
      tuiScrollIntoView: "tuiScrollIntoView"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])]
  });
  return TuiScrollIntoViewDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiScrollIntoViewModule = /*#__PURE__*/(() => {
  class TuiScrollIntoViewModule {}
  TuiScrollIntoViewModule.ɵfac = function TuiScrollIntoViewModule_Factory(t) {
    return new (t || TuiScrollIntoViewModule)();
  };
  TuiScrollIntoViewModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiScrollIntoViewModule
  });
  TuiScrollIntoViewModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiScrollIntoViewModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-directives-scroll-into-view.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-select-option.js













function TuiSelectOptionComponent_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 3);
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("src", ctx_r0.icons.check)("tuiScrollIntoView", true);
  }
}
function TuiSelectOptionComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "span", 4);
  }
}
let TuiSelectOptionComponent = /*#__PURE__*/(() => {
  class TuiSelectOptionComponent {
    constructor(icons, context, host, el, option, dataList, control, abstractControl) {
      this.icons = icons;
      this.context = context;
      this.host = host;
      this.el = el;
      this.option = option;
      this.dataList = dataList;
      this.control = control;
      this.abstractControl = abstractControl;
      this.changeDetection$ = new internal_Subject/* Subject */.B();
      this.selected$ = (0,merge/* merge */.h)(this.changeDetection$, this.control.valueChanges || empty/* EMPTY */.w, (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(this.el.nativeElement, 'animationstart')).pipe((0,operators_startWith/* startWith */.Z)(null), (0,operators_map/* map */.T)(() => this.selected), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)());
    }
    get matcher() {
      return this.host.identityMatcher || taiga_ui_cdk_constants/* TUI_DEFAULT_IDENTITY_MATCHER */.BJ;
    }
    ngOnInit() {
      /**
       * This would cause changes inside already checked parent component (during the same change detection cycle),
       * and it might cause ExpressionChanged error due to potential HostBinding
       * (for example, inside {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/ng_control_status.ts#L99 NgControlStatus}).
       * Microtask keeps it in the same frame but allows change detection to run.
       */
      void Promise.resolve().then(() => {
        var _a, _b;
        if ((0,taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj)(this.option.value) && !this.option.disabled) {
          (_b = (_a = this.host).checkOption) === null || _b === void 0 ? void 0 : _b.call(_a, this.option.value);
        }
      });
    }
    ngDoCheck() {
      this.changeDetection$.next();
    }
    get value() {
      var _a, _b;
      return (_b = (_a = this.abstractControl) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : this.control.value;
    }
    get selected() {
      return (0,taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj)(this.option.value) && (0,taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj)(this.value) && this.matcher(this.value, this.option.value);
    }
  }
  TuiSelectOptionComponent.ɵfac = function TuiSelectOptionComponent_Factory(t) {
    return new (t || TuiSelectOptionComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_COMMON_ICONS */._Z), core_mjs_["ɵɵdirectiveInject"](tinkoff_ng_polymorpheus/* POLYMORPHEUS_CONTEXT */.su), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_DATA_LIST_HOST */.KN), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](TuiOptionComponent), core_mjs_["ɵɵdirectiveInject"](TuiDataListComponent, 8), core_mjs_["ɵɵdirectiveInject"](fesm2022_forms/* NgControl */.vO), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_abstract/* AbstractTuiControl */.Er, 8));
  };
  TuiSelectOptionComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiSelectOptionComponent,
    selectors: [["tui-select-option"]],
    decls: 5,
    vars: 5,
    consts: [["dummy", ""], [3, "ngTemplateOutlet"], ["automation-id", "tui-select-option__checkmark", "class", "t-checkmark", 3, "src", "tuiScrollIntoView", 4, "ngIf", "ngIfElse"], ["automation-id", "tui-select-option__checkmark", 1, "t-checkmark", 3, "src", "tuiScrollIntoView"], [1, "t-dummy"]],
    template: function TuiSelectOptionComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵelementContainer"](0, 1);
        core_mjs_["ɵɵtemplate"](1, TuiSelectOptionComponent_tui_svg_1_Template, 1, 2, "tui-svg", 2);
        core_mjs_["ɵɵpipe"](2, "async");
        core_mjs_["ɵɵtemplate"](3, TuiSelectOptionComponent_ng_template_3_Template, 1, 0, "ng-template", null, 0, core_mjs_["ɵɵtemplateRefExtractor"]);
      }
      if (rf & 2) {
        const dummy_r2 = core_mjs_["ɵɵreference"](4);
        core_mjs_["ɵɵproperty"]("ngTemplateOutlet", ctx.context.$implicit);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](2, 3, ctx.selected$))("ngIfElse", dummy_r2);
      }
    },
    dependencies: [taiga_ui_core_components_svg/* TuiSvgComponent */._Y, common_mjs_.NgTemplateOutlet, common_mjs_.NgIf, TuiScrollIntoViewDirective, common_mjs_.AsyncPipe],
    styles: ["@keyframes _ngcontent-%COMP%_retrigger{0%{left:1px}to{left:2px}}[_nghost-%COMP%]{display:flex;flex:1;align-items:center;max-width:100%;animation:_ngcontent-%COMP%_retrigger 1s}.t-checkmark[_ngcontent-%COMP%]{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-border-start:.25rem solid transparent;border-inline-start:.25rem solid transparent}tui-data-list[data-list-size=\"s\"][_nghost-%COMP%]   .t-checkmark[_ngcontent-%COMP%], tui-data-list[data-list-size=\"s\"]   [_nghost-%COMP%]   .t-checkmark[_ngcontent-%COMP%]{-webkit-margin-end:-.375rem;margin-inline-end:-.375rem}tui-data-list[data-list-size=\"m\"][_nghost-%COMP%]   .t-checkmark[_ngcontent-%COMP%], tui-data-list[data-list-size=\"m\"]   [_nghost-%COMP%]   .t-checkmark[_ngcontent-%COMP%]{-webkit-margin-end:-.125rem;margin-inline-end:-.125rem}.t-dummy[_ngcontent-%COMP%]{width:1.75rem}"],
    changeDetection: 0
  });
  return TuiSelectOptionComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_SELECT_OPTION = new tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS(TuiSelectOptionComponent);
let TuiSelectOptionModule = /*#__PURE__*/(() => {
  class TuiSelectOptionModule {}
  TuiSelectOptionModule.ɵfac = function TuiSelectOptionModule_Factory(t) {
    return new (t || TuiSelectOptionModule)();
  };
  TuiSelectOptionModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiSelectOptionModule
  });
  TuiSelectOptionModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, taiga_ui_core_components_svg/* TuiSvgModule */.vl, TuiScrollIntoViewModule]]
  });
  return TuiSelectOptionModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-select-option.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-pipes-month.js





let TuiMonthPipe = /*#__PURE__*/(() => {
  class TuiMonthPipe {
    constructor(months$) {
      this.months$ = months$;
    }
    transform({
      month
    }) {
      return this.months$.pipe((0,operators_map/* map */.T)(months => months[month]));
    }
  }
  TuiMonthPipe.ɵfac = function TuiMonthPipe_Factory(t) {
    return new (t || TuiMonthPipe)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_MONTHS */.Fm, 16));
  };
  TuiMonthPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiMonth",
    type: TuiMonthPipe,
    pure: true
  });
  return TuiMonthPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiMonthPipeModule = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiMonthPipeModule {}
  TuiMonthPipeModule.ɵfac = function TuiMonthPipeModule_Factory(t) {
    return new (t || TuiMonthPipeModule)();
  };
  TuiMonthPipeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({
    type: TuiMonthPipeModule
  });
  TuiMonthPipeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});
  return TuiMonthPipeModule;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-pipes-month.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/identity.js
var identity = __webpack_require__(3669);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-providers.js






const TUI_MONTH_FORMATTER_PROVIDER = {
  provide: TUI_MONTH_FORMATTER,
  deps: [TuiMonthPipe],
  useFactory: pipe => month => month ? pipe.transform(month).pipe((0,operators_map/* map */.T)(formatted => `${formatted} ${month.formattedYear}`)) : (0,of.of)('')
};
const FIXED_DROPDOWN_CONTROLLER_PROVIDER = tuiDropdownOptionsProvider({
  limitWidth: 'fixed',
  align: 'right'
});
const TUI_VALUE_ACCESSOR_PROVIDER = {
  provide: taiga_ui_core_tokens/* TUI_VALUE_ACCESSOR */.r0,
  deps: [[new core_mjs_.Optional(), new core_mjs_.Self(), fesm2022_forms/* NG_VALUE_ACCESSOR */.kq]],
  useFactory: identity/* identity */.D
};

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-providers.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-select.js





















const taiga_ui_kit_components_select_c0 = (/* unused pure expression or super */ null && (["tuiSelect", ""]));
function TuiNativeSelectComponent_tui_data_list_wrapper_0_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelement(0, "tui-data-list-wrapper", 2);
    i0.ɵɵpipe(1, "tuiStringifyContent");
  }
  if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabledItemHandler", ctx_r0.disabledItemHandler || ctx_r0.itemsHandlers.disabledItemHandler)("itemContent", i0.ɵɵpipeBind1(1, 3, ctx_r0.stringify))("items", ctx_r0.items);
  }
}
function TuiNativeSelectComponent_option_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 3);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const option_r2 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabled", ctx_r0.disabledItemHandler ? ctx_r0.disabledItemHandler(option_r2) : ctx_r0.itemsHandlers.disabledItemHandler(option_r2))("selected", ctx_r0.selected(option_r2))("value", ctx_r0.stringify(option_r2));
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r0.stringify(option_r2), "\n");
  }
}
const taiga_ui_kit_components_select_c1 = (/* unused pure expression or super */ null && (["tuiSelect", "", "labels", ""]));
function TuiNativeSelectGroupComponent_tui_data_list_wrapper_0_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelement(0, "tui-data-list-wrapper", 2);
    i0.ɵɵpipe(1, "tuiStringifyContent");
  }
  if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("disabledItemHandler", ctx_r0.disabledItemHandler || ctx_r0.itemsHandlers.disabledItemHandler)("itemContent", i0.ɵɵpipeBind1(1, 4, ctx_r0.stringify))("items", ctx_r0.items)("labels", ctx_r0.labels);
  }
}
function TuiNativeSelectGroupComponent_optgroup_1_option_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "option", 5);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const option_r2 = ctx.$implicit;
    const ctx_r0 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("disabled", ctx_r0.disabledItemHandler ? ctx_r0.disabledItemHandler(option_r2) : ctx_r0.itemsHandlers.disabledItemHandler(option_r2))("selected", ctx_r0.selected(option_r2))("value", ctx_r0.stringify(option_r2));
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r0.stringify(option_r2), " ");
  }
}
function TuiNativeSelectGroupComponent_optgroup_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "optgroup", 3);
    i0.ɵɵtemplate(1, TuiNativeSelectGroupComponent_optgroup_1_option_1_Template, 2, 4, "option", 4);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const group_r3 = ctx.$implicit;
    const index_r4 = ctx.index;
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("label", ctx_r0.labels[index_r4]);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", group_r3);
  }
}
const taiga_ui_kit_components_select_c2 = "[_nghost-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}";
const taiga_ui_kit_components_select_c3 = ["*", [["input"]], [["select"]]];
const taiga_ui_kit_components_select_c4 = ["*", "input", "select"];
const taiga_ui_kit_components_select_c5 = (a0, a1) => ({
  $implicit: a0,
  active: a1
});
function TuiSelectComponent_ng_template_4_ng_content_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵprojection"](0, 2, ["*ngIf", "isMobile"]);
  }
}
function TuiSelectComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵtemplate"](0, TuiSelectComponent_ng_template_4_ng_content_0_Template, 1, 0, "ng-content", 6);
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("ngIf", ctx_r1.isMobile);
  }
}
function TuiSelectComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0, 7);
  }
}
function TuiSelectComponent_div_7_div_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "div", 10);
  }
  if (rf & 2) {
    const text_r3 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("textContent", text_r3);
  }
}
function TuiSelectComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 8);
    core_mjs_["ɵɵtemplate"](1, TuiSelectComponent_div_7_div_1_Template, 1, 1, "div", 9);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.computedContent)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction2"](2, taiga_ui_kit_components_select_c5, ctx_r1.value, ctx_r1.computedFocused));
  }
}
function TuiSelectComponent_ng_template_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiSelectComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 11);
    core_mjs_["ɵɵtemplate"](1, TuiSelectComponent_ng_template_8_ng_container_1_Template, 1, 0, "ng-container", 12);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.arrow);
  }
}
let TuiNativeSelectComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiNativeSelectComponent extends AbstractTuiNativeSelect {
    constructor() {
      super(...arguments);
      this.items = [];
    }
    get stringify() {
      return this.host.stringify;
    }
    selected(option) {
      return this.control.value === option;
    }
    onValueChange(index) {
      var _a;
      this.host.onValueChange(((_a = this.items) === null || _a === void 0 ? void 0 : _a[index]) || null);
    }
  }
  TuiNativeSelectComponent.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiNativeSelectComponent_BaseFactory;
    return function TuiNativeSelectComponent_Factory(t) {
      return (ɵTuiNativeSelectComponent_BaseFactory || (ɵTuiNativeSelectComponent_BaseFactory = i0.ɵɵgetInheritedFactory(TuiNativeSelectComponent)))(t || TuiNativeSelectComponent);
    };
  })();
  TuiNativeSelectComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiNativeSelectComponent,
    selectors: [["select", "tuiSelect", "", 3, "labels", "", 3, "multiple", ""]],
    hostVars: 4,
    hostBindings: function TuiNativeSelectComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵlistener("change", function TuiNativeSelectComponent_change_HostBindingHandler($event) {
          return ctx.onValueChange($event.target.options.selectedIndex);
        });
      }
      if (rf & 2) {
        i0.ɵɵhostProperty("disabled", ctx.host.disabled || ctx.control.readOnly)("tabIndex", ctx.host.focusable ? 0 : -1)("value", ctx.host.value);
        i0.ɵɵattribute("aria-invalid", ctx.host.invalid);
      }
    },
    inputs: {
      items: "items"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsDataList(TuiNativeSelectComponent), {
      provide: TemplateRef,
      deps: [TuiNativeSelectComponent],
      useFactory: ({
        datalist
      }) => datalist
    }, {
      provide: AbstractTuiNativeSelect,
      useExisting: TuiNativeSelectComponent
    }]), i0.ɵɵInheritDefinitionFeature],
    attrs: taiga_ui_kit_components_select_c0,
    decls: 2,
    vars: 1,
    consts: [[3, "disabledItemHandler", "itemContent", "items", 4, "tuiDataList"], [3, "disabled", "selected", "value", 4, "ngFor", "ngForOf"], [3, "disabledItemHandler", "itemContent", "items"], [3, "disabled", "selected", "value"]],
    template: function TuiNativeSelectComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵtemplate(0, TuiNativeSelectComponent_tui_data_list_wrapper_0_Template, 2, 5, "tui-data-list-wrapper", 0)(1, TuiNativeSelectComponent_option_1_Template, 2, 4, "option", 1);
      }
      if (rf & 2) {
        i0.ɵɵadvance();
        i0.ɵɵproperty("ngForOf", ctx.items);
      }
    },
    dependencies: [i1.TuiDataListWrapperComponent, i1$1.TuiDataListDirective, i3.NgForOf, i4.TuiStringifyContentPipe],
    styles: ["[_nghost-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}"],
    changeDetection: 0
  });
  return TuiNativeSelectComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiNativeSelectGroupComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiNativeSelectGroupComponent extends AbstractTuiNativeSelect {
    constructor() {
      super(...arguments);
      this.items = [];
      this.labels = [];
    }
    get stringify() {
      return this.host.stringify;
    }
    selected(option) {
      return this.control.value === option;
    }
    onValueChange(index) {
      var _a;
      const flatItems = (_a = this.items) === null || _a === void 0 ? void 0 : _a.reduce((acc, val) => acc.concat(val), []);
      this.host.onValueChange((flatItems === null || flatItems === void 0 ? void 0 : flatItems[index]) || null);
    }
  }
  TuiNativeSelectGroupComponent.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiNativeSelectGroupComponent_BaseFactory;
    return function TuiNativeSelectGroupComponent_Factory(t) {
      return (ɵTuiNativeSelectGroupComponent_BaseFactory || (ɵTuiNativeSelectGroupComponent_BaseFactory = i0.ɵɵgetInheritedFactory(TuiNativeSelectGroupComponent)))(t || TuiNativeSelectGroupComponent);
    };
  })();
  TuiNativeSelectGroupComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiNativeSelectGroupComponent,
    selectors: [["select", "tuiSelect", "", "labels", "", 3, "multiple", ""]],
    hostVars: 4,
    hostBindings: function TuiNativeSelectGroupComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵlistener("change", function TuiNativeSelectGroupComponent_change_HostBindingHandler($event) {
          return ctx.onValueChange($event.target.options.selectedIndex);
        });
      }
      if (rf & 2) {
        i0.ɵɵhostProperty("disabled", ctx.host.disabled || ctx.control.readOnly)("tabIndex", ctx.host.focusable ? 0 : -1)("value", ctx.host.value);
        i0.ɵɵattribute("aria-invalid", ctx.host.invalid);
      }
    },
    inputs: {
      items: "items",
      labels: "labels"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsDataList(TuiNativeSelectGroupComponent), {
      provide: TemplateRef,
      deps: [TuiNativeSelectGroupComponent],
      useFactory: ({
        datalist
      }) => datalist
    }, {
      provide: AbstractTuiNativeSelect,
      useExisting: TuiNativeSelectGroupComponent
    }]), i0.ɵɵInheritDefinitionFeature],
    attrs: taiga_ui_kit_components_select_c1,
    decls: 2,
    vars: 1,
    consts: [[3, "disabledItemHandler", "itemContent", "items", "labels", 4, "tuiDataList"], [3, "label", 4, "ngFor", "ngForOf"], [3, "disabledItemHandler", "itemContent", "items", "labels"], [3, "label"], [3, "disabled", "selected", "value", 4, "ngFor", "ngForOf"], [3, "disabled", "selected", "value"]],
    template: function TuiNativeSelectGroupComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵtemplate(0, TuiNativeSelectGroupComponent_tui_data_list_wrapper_0_Template, 2, 6, "tui-data-list-wrapper", 0)(1, TuiNativeSelectGroupComponent_optgroup_1_Template, 2, 2, "optgroup", 1);
      }
      if (rf & 2) {
        i0.ɵɵadvance();
        i0.ɵɵproperty("ngForOf", ctx.items);
      }
    },
    dependencies: [i1.TuiDataListGroupWrapperComponent, i1$1.TuiDataListDirective, i3.NgForOf, i4.TuiStringifyContentPipe],
    styles: [taiga_ui_kit_components_select_c2],
    changeDetection: 0
  });
  return TuiNativeSelectGroupComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_SELECT_DEFAULT_OPTIONS = {
  valueContent: ''
};
/**
 * Default parameters for Select component
 */
const TUI_SELECT_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_SELECT_DEFAULT_OPTIONS);
function tuiSelectOptionsProvider(options) {
  return tuiProvideOptions(TUI_SELECT_OPTIONS, options, TUI_SELECT_DEFAULT_OPTIONS);
}
let TuiSelectComponent = /*#__PURE__*/(() => {
  class TuiSelectComponent extends taiga_ui_cdk_abstract/* AbstractTuiNullableControl */.jc {
    constructor(control, cdr, textfieldCleaner, textfieldSize, arrowMode, itemsHandlers, options, isMobile) {
      super(control, cdr);
      this.textfieldCleaner = textfieldCleaner;
      this.textfieldSize = textfieldSize;
      this.arrowMode = arrowMode;
      this.itemsHandlers = itemsHandlers;
      this.options = options;
      this.isMobile = isMobile;
      this.stringify = this.itemsHandlers.stringify;
      this.identityMatcher = this.itemsHandlers.identityMatcher;
      this.valueContent = this.options.valueContent;
    }
    get size() {
      return this.textfieldSize.size;
    }
    get arrow() {
      return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
    }
    get nativeFocusableElement() {
      var _a, _b;
      return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
      return (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(this.nativeFocusableElement) || !!this.hostedDropdown && this.hostedDropdown.focused;
    }
    get nativeDropdownMode() {
      return !!this.nativeSelect && this.isMobile;
    }
    get computedValue() {
      return this.value === null ? '' : this.stringify(this.value) || ' ';
    }
    get computedContent() {
      return this.valueContent || this.computedValue;
    }
    onValueChange(value) {
      this.value = value || null;
    }
    onActiveZone(active) {
      this.updateFocused(active);
    }
    onKeyDownDelete() {
      if (this.textfieldCleaner.cleaner) {
        this.value = null;
      }
    }
    handleOption(option) {
      var _a;
      this.focusInput();
      this.value = option;
      (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
    }
    focusInput(preventScroll = false) {
      if (this.nativeFocusableElement) {
        this.nativeFocusableElement.focus({
          preventScroll
        });
      }
    }
  }
  TuiSelectComponent.ɵfac = function TuiSelectComponent_Factory(t) {
    return new (t || TuiSelectComponent)(core_mjs_["ɵɵdirectiveInject"](fesm2022_forms/* NgControl */.vO, 10), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_CLEANER), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_SIZE), core_mjs_["ɵɵdirectiveInject"](TUI_ARROW_MODE), core_mjs_["ɵɵdirectiveInject"](taiga_ui_kit_tokens_TUI_ITEMS_HANDLERS), core_mjs_["ɵɵdirectiveInject"](TUI_SELECT_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_MOBILE */.Td));
  };
  TuiSelectComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiSelectComponent,
    selectors: [["tui-select"]],
    contentQueries: function TuiSelectComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, taiga_ui_kit_abstract_AbstractTuiNativeSelect, 7);
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiDataListDirective, 5, core_mjs_.TemplateRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.nativeSelect = _t.first);
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.datalist = _t.first);
      }
    },
    viewQuery: function TuiSelectComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](TuiPrimitiveTextfieldComponent, 5);
        core_mjs_["ɵɵviewQuery"](TuiHostedDropdownComponent, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.textfield = _t.first);
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.hostedDropdown = _t.first);
      }
    },
    hostVars: 1,
    hostBindings: function TuiSelectComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-size", ctx.size);
      }
    },
    inputs: {
      stringify: "stringify",
      identityMatcher: "identityMatcher",
      valueContent: "valueContent"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_cdk_tokens/* tuiAsFocusableItemAccessor */.Jr)(TuiSelectComponent), (0,taiga_ui_cdk_abstract/* tuiAsControl */.SN)(TuiSelectComponent), (0,taiga_ui_core_tokens/* tuiAsDataListHost */.PU)(TuiSelectComponent), (0,taiga_ui_core_tokens/* tuiAsOptionContent */.NW)(TUI_SELECT_OPTION)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: taiga_ui_kit_components_select_c4,
    decls: 10,
    vars: 15,
    consts: [["select", ""], ["icon", ""], [1, "t-hosted", 3, "tuiActiveZoneChange", "canOpen", "content"], ["automation-id", "tui-select__textfield", 1, "t-textfield", 3, "keydown.backspace.prevent", "keydown.delete.prevent", "valueChange", "disabled", "editable", "focusable", "invalid", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldIcon", "value"], ["ngProjectAs", "select", 5, ["select"], 4, "ngTemplateOutlet"], ["automation-id", "tui-select__value", "ngProjectAs", "tuiContent", "class", "t-value", 5, ["tuiContent"], 4, "ngIf"], [4, "ngIf"], ["ngProjectAs", "select", 5, ["select"]], ["automation-id", "tui-select__value", "ngProjectAs", "tuiContent", 5, ["tuiContent"], 1, "t-value"], ["class", "t-primitive-value", 3, "textContent", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-primitive-value", 3, "textContent"], ["appearance", "icon", "tuiWrapper", "", 1, "t-icon"], [4, "polymorpheusOutlet"]],
    template: function TuiSelectComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = core_mjs_["ɵɵgetCurrentView"]();
        core_mjs_["ɵɵprojectionDef"](taiga_ui_kit_components_select_c3);
        core_mjs_["ɵɵelementStart"](0, "tui-hosted-dropdown", 2);
        core_mjs_["ɵɵlistener"]("tuiActiveZoneChange", function TuiSelectComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onActiveZone($event));
        });
        core_mjs_["ɵɵelementStart"](1, "tui-primitive-textfield", 3);
        core_mjs_["ɵɵlistener"]("keydown.backspace.prevent", function TuiSelectComponent_Template_tui_primitive_textfield_keydown_backspace_prevent_1_listener() {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onKeyDownDelete());
        })("keydown.delete.prevent", function TuiSelectComponent_Template_tui_primitive_textfield_keydown_delete_prevent_1_listener() {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onKeyDownDelete());
        })("valueChange", function TuiSelectComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onValueChange($event));
        });
        core_mjs_["ɵɵprojection"](2);
        core_mjs_["ɵɵprojection"](3, 1, ["ngProjectAs", "input", 5, ["input"]]);
        core_mjs_["ɵɵtemplate"](4, TuiSelectComponent_ng_template_4_Template, 1, 1, "ng-template", null, 0, core_mjs_["ɵɵtemplateRefExtractor"])(6, TuiSelectComponent_ng_container_6_Template, 1, 0, "ng-container", 4)(7, TuiSelectComponent_div_7_Template, 2, 5, "div", 5);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](8, TuiSelectComponent_ng_template_8_Template, 2, 1, "ng-template", null, 1, core_mjs_["ɵɵtemplateRefExtractor"]);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        const select_r4 = core_mjs_["ɵɵreference"](5);
        const icon_r5 = core_mjs_["ɵɵreference"](9);
        core_mjs_["ɵɵproperty"]("canOpen", ctx.interactive && !ctx.nativeDropdownMode)("content", ctx.datalist || "");
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("disabled", ctx.computedDisabled)("editable", false)("focusable", ctx.computedFocusable)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldIcon", ctx.arrow ? icon_r5 : "")("value", ctx.computedValue);
        core_mjs_["ɵɵadvance"](5);
        core_mjs_["ɵɵproperty"]("ngTemplateOutlet", select_r4);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.value !== null);
      }
    },
    dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, TuiPrimitiveTextfieldDirective, TuiTextfieldIconDirective, common_mjs_.NgIf, common_mjs_.NgTemplateOutlet, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, taiga_ui_core_directives_wrapper/* TuiWrapperDirective */.l],
    styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}[_nghost-%COMP%]:not(._readonly)     input:not(:disabled){cursor:pointer}._readonly[_nghost-%COMP%]     input{cursor:default}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-value[_ngcontent-%COMP%]{display:flex;width:100%;align-items:center}.t-primitive-value[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"],
    changeDetection: 0
  });
  return TuiSelectComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiSelectDirective = /*#__PURE__*/(() => {
  class TuiSelectDirective extends taiga_ui_core_abstract/* AbstractTuiTextfieldHost */.aX {
    get readOnly() {
      return true;
    }
    get value() {
      return this.host.computedValue;
    }
    get stringify() {
      return this.host.stringify;
    }
    onValueChange(value) {
      this.host.onValueChange(value);
    }
  }
  TuiSelectDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiSelectDirective_BaseFactory;
    return function TuiSelectDirective_Factory(t) {
      return (ɵTuiSelectDirective_BaseFactory || (ɵTuiSelectDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiSelectDirective)))(t || TuiSelectDirective);
    };
  })();
  TuiSelectDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiSelectDirective,
    selectors: [["tui-select"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_tokens/* tuiAsTextfieldHost */.Sc)(TuiSelectDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiSelectDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let taiga_ui_kit_components_select_TuiSelectModule = /*#__PURE__*/(() => {
  class TuiSelectModule {}
  TuiSelectModule.ɵfac = function TuiSelectModule_Factory(t) {
    return new (t || TuiSelectModule)();
  };
  TuiSelectModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiSelectModule
  });
  TuiSelectModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiSelectOptionModule, TuiArrowModule, taiga_ui_core_directives_wrapper/* TuiWrapperModule */.E, TuiTextfieldControllerModule, TuiDataListWrapperModule, taiga_ui_core_components_data_list_TuiDataListModule, TuiStringifyContentPipeModule]]
  });
  return TuiSelectModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-select.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-checked.js


let TuiCheckedDirective = /*#__PURE__*/(() => {
  class TuiCheckedDirective {
    constructor() {
      this.indeterminate = false;
      this.checked = false;
      this.tuiCheckedChange = new core_mjs_.EventEmitter();
    }
    get isChecked() {
      return this.checked;
    }
    get isIndeterminate() {
      return this.indeterminate;
    }
    set tuiChecked(checked) {
      this.checked = checked || false;
      this.indeterminate = checked === null;
    }
    onChange({
      checked
    }) {
      this.checked = checked;
      this.indeterminate = false;
      this.tuiCheckedChange.emit(checked);
    }
  }
  TuiCheckedDirective.ɵfac = function TuiCheckedDirective_Factory(t) {
    return new (t || TuiCheckedDirective)();
  };
  TuiCheckedDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiCheckedDirective,
    selectors: [["input", "tuiChecked", ""], ["input", "tuiCheckedChange", ""]],
    hostVars: 2,
    hostBindings: function TuiCheckedDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("change", function TuiCheckedDirective_change_HostBindingHandler($event) {
          return ctx.onChange($event.target);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵhostProperty"]("checked", ctx.isChecked)("indeterminate", ctx.isIndeterminate);
      }
    },
    inputs: {
      tuiChecked: "tuiChecked"
    },
    outputs: {
      tuiCheckedChange: "tuiCheckedChange"
    }
  });
  return TuiCheckedDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiCheckedModule = /*#__PURE__*/(() => {
  class TuiCheckedModule {}
  TuiCheckedModule.ɵfac = function TuiCheckedModule_Factory(t) {
    return new (t || TuiCheckedModule)();
  };
  TuiCheckedModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiCheckedModule
  });
  TuiCheckedModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiCheckedModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-checked.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-focused.js







/**
 * Directive to monitor focus/blur status, works with focusIn/focus-out
 * instead of focus/blur to sync events order with Internet Explorer and
 * other focus related directives that require bubbling
 */
let TuiFocusedDirective = /*#__PURE__*/(() => {
  class TuiFocusedDirective {
    constructor({
      nativeElement
    }, zone) {
      this.tuiFocusedChange = (0,merge/* merge */.h)((0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(nativeElement, 'focusin'), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(nativeElement, 'focusout')).pipe((0,operators_map/* map */.T)(() => (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(nativeElement)), (0,operators_startWith/* startWith */.Z)(false), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)(), skip(1), (0,taiga_ui_cdk_observables/* tuiZoneOptimized */.sX)(zone));
    }
  }
  TuiFocusedDirective.ɵfac = function TuiFocusedDirective_Factory(t) {
    return new (t || TuiFocusedDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone));
  };
  TuiFocusedDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiFocusedDirective,
    selectors: [["", "tuiFocusedChange", ""]],
    outputs: {
      tuiFocusedChange: "tuiFocusedChange"
    }
  });
  return TuiFocusedDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiFocusedModule = /*#__PURE__*/(() => {
  class TuiFocusedModule {}
  TuiFocusedModule.ɵfac = function TuiFocusedModule_Factory(t) {
    return new (t || TuiFocusedModule)();
  };
  TuiFocusedModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiFocusedModule
  });
  TuiFocusedModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiFocusedModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-focused.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-focus-visible.js





/**
 * Directive to imitate :focus-visible
 * (https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible)
 * in browsers that do not support it
 */
let TuiFocusVisibleDirective = /*#__PURE__*/(() => {
  class TuiFocusVisibleDirective {
    constructor(tuiFocusVisibleChange) {
      this.tuiFocusVisibleChange = tuiFocusVisibleChange;
    }
  }
  TuiFocusVisibleDirective.ɵfac = function TuiFocusVisibleDirective_Factory(t) {
    return new (t || TuiFocusVisibleDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiFocusVisibleService */.iF));
  };
  TuiFocusVisibleDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiFocusVisibleDirective,
    selectors: [["", "tuiFocusVisibleChange", ""]],
    outputs: {
      tuiFocusVisibleChange: "tuiFocusVisibleChange"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew, taiga_ui_cdk_services/* TuiFocusVisibleService */.iF])]
  });
  return TuiFocusVisibleDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiFocusVisibleModule = /*#__PURE__*/(() => {
  class TuiFocusVisibleModule {}
  TuiFocusVisibleModule.ɵfac = function TuiFocusVisibleModule_Factory(t) {
    return new (t || TuiFocusVisibleModule)();
  };
  TuiFocusVisibleModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiFocusVisibleModule
  });
  TuiFocusVisibleModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiFocusVisibleModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-focus-visible.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-pressed.js




let TuiPressedDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiPressedDirective {
    constructor(el, takeOnlyTrustedEvents) {
      this.el = el;
      this.takeOnlyTrustedEvents = takeOnlyTrustedEvents;
      this.tuiPressedChange = tuiPressedObservable(this.el.nativeElement, {
        onlyTrusted: this.takeOnlyTrustedEvents
      });
    }
  }
  TuiPressedDirective.ɵfac = function TuiPressedDirective_Factory(t) {
    return new (t || TuiPressedDirective)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(TUI_TAKE_ONLY_TRUSTED_EVENTS));
  };
  TuiPressedDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiPressedDirective,
    selectors: [["", "tuiPressedChange", ""]],
    outputs: {
      tuiPressedChange: "tuiPressedChange"
    }
  });
  return TuiPressedDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiPressedModule = /*#__PURE__*/(() => {
  class TuiPressedModule {}
  TuiPressedModule.ɵfac = function TuiPressedModule_Factory(t) {
    return new (t || TuiPressedModule)();
  };
  TuiPressedModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiPressedModule
  });
  TuiPressedModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiPressedModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-pressed.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-toggle.js













/** Default values for the toggle options. */
const taiga_ui_kit_components_toggle_c0 = ["focusableElement"];
const taiga_ui_kit_components_toggle_c1 = a0 => ({
  $implicit: a0
});
function TuiToggleComponent_tui_loader_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-loader", 7);
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("inheritColor", true)("showLoader", ctx_r1.value)("size", ctx_r1.loaderSize);
  }
}
function TuiToggleComponent_span_3_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 10);
  }
  if (rf & 2) {
    const src_r3 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r3);
  }
}
function TuiToggleComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "span", 8);
    core_mjs_["ɵɵtemplate"](1, TuiToggleComponent_span_3_tui_svg_1_Template, 1, 1, "tui-svg", 9);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.iconOn)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction1"](2, taiga_ui_kit_components_toggle_c1, ctx_r1.size));
  }
}
function TuiToggleComponent_tui_loader_5_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-loader", 7);
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("inheritColor", true)("showLoader", !ctx_r1.value)("size", ctx_r1.loaderSize);
  }
}
function TuiToggleComponent_span_6_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 12);
  }
  if (rf & 2) {
    const src_r4 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r4);
  }
}
function TuiToggleComponent_span_6_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "span", 8);
    core_mjs_["ɵɵtemplate"](1, TuiToggleComponent_span_6_tui_svg_1_Template, 1, 1, "tui-svg", 11);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.iconOff)("polymorpheusOutletContext", core_mjs_["ɵɵpureFunction1"](2, taiga_ui_kit_components_toggle_c1, ctx_r1.size));
  }
}
const TUI_TOGGLE_DEFAULT_OPTIONS = {
  icons: {
    toggleOff({
      $implicit
    }) {
      return $implicit === 'm' ? 'tuiIconToggleOff' : 'tuiIconToggleOffLarge';
    },
    toggleOn({
      $implicit
    }) {
      return $implicit === 'm' ? 'tuiIconToggleOn' : 'tuiIconToggleOnLarge';
    }
  },
  appearances: {
    checked: taiga_ui_core_enums/* TuiAppearance */.bC.Primary,
    unchecked: taiga_ui_core_enums/* TuiAppearance */.bC.Secondary
  },
  singleColor: false,
  showIcons: false,
  size: 'm'
};
/**
 * Default parameters for Toggle component
 */
const TUI_TOGGLE_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_TOGGLE_DEFAULT_OPTIONS);
function tuiToggleOptionsProvider(options) {
  return tuiProvideOptions(TUI_TOGGLE_OPTIONS, options, TUI_TOGGLE_DEFAULT_OPTIONS);
}
let TuiToggleComponent = /*#__PURE__*/(() => {
  class TuiToggleComponent extends taiga_ui_cdk_abstract/* AbstractTuiControl */.Er {
    constructor(control, cdr, modeDirective, options) {
      super(control, cdr);
      this.modeDirective = modeDirective;
      this.options = options;
      this.singleColor = this.options.singleColor;
      this.showIcons = this.options.showIcons;
      this.showLoader = false;
      this.size = this.options.size;
    }
    get iconOn() {
      return this.options.icons.toggleOn;
    }
    get iconOff() {
      return this.options.icons.toggleOff;
    }
    get nativeFocusableElement() {
      var _a, _b;
      return (_b = (_a = this.focusableElement) === null || _a === void 0 ? void 0 : _a.nativeElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
      return (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(this.nativeFocusableElement);
    }
    get appearance() {
      return this.singleColor || this.value ? this.options.appearances.checked : this.options.appearances.unchecked;
    }
    get sizeM() {
      return this.size === 'm';
    }
    get loaderSize() {
      return this.sizeM ? 'xs' : 's';
    }
    get hostMode() {
      var _a, _b;
      return (_b = (_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : null;
    }
    /** @deprecated use 'value' setter */
    onChecked(checked) {
      this.value = checked;
    }
    onFocused(focused) {
      this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
      this.updateFocusVisible(focusVisible);
    }
    getFallbackValue() {
      return false;
    }
  }
  TuiToggleComponent.ɵfac = function TuiToggleComponent_Factory(t) {
    return new (t || TuiToggleComponent)(core_mjs_["ɵɵdirectiveInject"](fesm2022_forms/* NgControl */.vO, 10), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_directives_mode/* TuiModeDirective */.h, 8), core_mjs_["ɵɵdirectiveInject"](TUI_TOGGLE_OPTIONS));
  };
  TuiToggleComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiToggleComponent,
    selectors: [["tui-toggle"]],
    viewQuery: function TuiToggleComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](taiga_ui_kit_components_toggle_c0, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.focusableElement = _t.first);
      }
    },
    hostVars: 4,
    hostBindings: function TuiToggleComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-size", ctx.size)("data-mode", ctx.hostMode);
        core_mjs_["ɵɵclassProp"]("_checked", ctx.value);
      }
    },
    inputs: {
      singleColor: "singleColor",
      showIcons: "showIcons",
      showLoader: "showLoader",
      size: "size"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_cdk_tokens/* tuiAsFocusableItemAccessor */.Jr)(TuiToggleComponent), (0,taiga_ui_cdk_abstract/* tuiAsControl */.SN)(TuiToggleComponent)]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    decls: 9,
    vars: 16,
    consts: [["focusableElement", ""], ["tuiWrapper", "", 3, "active", "appearance", "disabled", "focus", "hover", "invalid", "readOnly"], [1, "t-toggle"], ["class", "t-loader", 3, "inheritColor", "showLoader", "size", 4, "ngIf"], ["class", "t-icon-wrapper", 4, "ngIf"], [1, "t-circle"], ["automation-id", "tui-toggle__checkbox", "role", "switch", "type", "checkbox", 1, "t-checkbox", 3, "tuiCheckedChange", "tuiFocusedChange", "tuiFocusVisibleChange", "disabled", "id", "tuiFocusable", "tuiChecked"], [1, "t-loader", 3, "inheritColor", "showLoader", "size"], [1, "t-icon-wrapper"], ["automation-id", "tui-toggle__check-icon", "class", "t-icon", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-toggle__check-icon", 1, "t-icon", 3, "src"], ["automation-id", "tui-toggle__cancel-icon", "class", "t-icon t-icon_off", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-toggle__cancel-icon", 1, "t-icon", "t-icon_off", 3, "src"]],
    template: function TuiToggleComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = core_mjs_["ɵɵgetCurrentView"]();
        core_mjs_["ɵɵelementStart"](0, "div", 1)(1, "div", 2);
        core_mjs_["ɵɵtemplate"](2, TuiToggleComponent_tui_loader_2_Template, 1, 3, "tui-loader", 3)(3, TuiToggleComponent_span_3_Template, 2, 4, "span", 4);
        core_mjs_["ɵɵelement"](4, "div", 5);
        core_mjs_["ɵɵtemplate"](5, TuiToggleComponent_tui_loader_5_Template, 1, 3, "tui-loader", 3)(6, TuiToggleComponent_span_6_Template, 2, 4, "span", 4);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](7, "input", 6, 0);
        core_mjs_["ɵɵtwoWayListener"]("tuiCheckedChange", function TuiToggleComponent_Template_input_tuiCheckedChange_7_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          core_mjs_["ɵɵtwoWayBindingSet"](ctx.value, $event) || (ctx.value = $event);
          return core_mjs_["ɵɵresetView"]($event);
        });
        core_mjs_["ɵɵlistener"]("tuiFocusedChange", function TuiToggleComponent_Template_input_tuiFocusedChange_7_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onFocused($event));
        })("tuiFocusVisibleChange", function TuiToggleComponent_Template_input_tuiFocusVisibleChange_7_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onFocusVisible($event));
        });
        core_mjs_["ɵɵelementEnd"]()();
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("active", ctx.pseudoActive)("appearance", ctx.appearance)("disabled", ctx.computedDisabled)("focus", ctx.computedFocusVisible)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid)("readOnly", ctx.readOnly);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showLoader);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showIcons && !ctx.showLoader);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showLoader);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showIcons && !ctx.showLoader);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("disabled", ctx.disabled)("id", ctx.id)("tuiFocusable", ctx.focusable);
        core_mjs_["ɵɵtwoWayProperty"]("tuiChecked", ctx.value);
        core_mjs_["ɵɵattribute"]("aria-checked", ctx.value);
      }
    },
    dependencies: [taiga_ui_core_components_loader/* TuiLoaderComponent */.jT, taiga_ui_core_components_svg/* TuiSvgComponent */._Y, taiga_ui_core_directives_wrapper/* TuiWrapperDirective */.l, common_mjs_.NgIf, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, TuiCheckedDirective, TuiFocusableDirective, TuiFocusedDirective, TuiFocusVisibleDirective],
    styles: ["[_nghost-%COMP%]{position:relative;display:inline-block;vertical-align:middle;overflow:hidden;border-radius:6.25rem}[data-size=m][_nghost-%COMP%]{width:2rem;height:1rem}[data-size=l][_nghost-%COMP%]{width:3rem;height:1.5rem}.t-checkbox[_ngcontent-%COMP%]{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer}.t-checkbox[_ngcontent-%COMP%]:-webkit-autofill, .t-checkbox[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-checkbox[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}._disabled[_nghost-%COMP%]   .t-checkbox[_ngcontent-%COMP%]{pointer-events:none;cursor:default}.t-toggle[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center}[data-size=m][_nghost-%COMP%]   .t-toggle[_ngcontent-%COMP%]{width:3rem;height:1rem;transform:translate(-1rem)}[data-size=l][_nghost-%COMP%]   .t-toggle[_ngcontent-%COMP%]{width:4.5rem;height:1.5rem;transform:translate(-1.5rem)}._checked[_nghost-%COMP%]   .t-toggle[_ngcontent-%COMP%]{transform:translate(0)}.t-circle[_ngcontent-%COMP%]{margin:.125rem 0;flex-shrink:0;border-radius:100%;background-color:var(--tui-base-01)}._disabled[_nghost-%COMP%]   .t-circle_light[_ngcontent-%COMP%]{opacity:.24}[data-size=m][_nghost-%COMP%]   .t-circle[_ngcontent-%COMP%]{width:.75rem;height:.75rem}[data-size=l][_nghost-%COMP%]   .t-circle[_ngcontent-%COMP%]{width:1rem;height:1rem}._disabled[_nghost-%COMP%]   .t-circle[_ngcontent-%COMP%]{background-color:var(--tui-base-01)}.t-loader[_ngcontent-%COMP%]{min-width:auto}[_nghost-%COMP%]:not(._checked)   .t-loader[_ngcontent-%COMP%]{color:var(--tui-base-06)}[_nghost-%COMP%]:not(._checked)._disabled   .t-loader[_ngcontent-%COMP%]{color:var(--tui-base-05)}[_nghost-%COMP%]:not(._checked)[data-mode=onDark]   .t-loader[_ngcontent-%COMP%]{color:var(--tui-text-03-night)}[_nghost-%COMP%]:not(._checked)[data-mode=onDark]._disabled   .t-loader[_ngcontent-%COMP%]{color:var(--tui-clear-inverse-active)}[_nghost-%COMP%]:not(._checked)[data-mode=onLight]   .t-loader[_ngcontent-%COMP%]{color:var(--tui-text-03)}[_nghost-%COMP%]:not(._checked)[data-mode=onLight]._disabled   .t-loader[_ngcontent-%COMP%]{color:var(--tui-clear-active)}[data-size=m][_nghost-%COMP%]   .t-loader[_ngcontent-%COMP%]{width:.75rem;margin:0 .2rem;transform:scale(.75)}[data-size=l][_nghost-%COMP%]   .t-loader[_ngcontent-%COMP%]{width:1rem;margin:0 .25rem}.t-icon-wrapper[_ngcontent-%COMP%]{display:flex}.t-icon[_ngcontent-%COMP%]{opacity:.8}.t-icon_off[_ngcontent-%COMP%]{color:var(--tui-base-06)}._disabled[_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-base-05)}[data-mode=onDark][_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-text-03-night)}[data-mode=onDark]._disabled[_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-clear-inverse-active)}[data-mode=onLight][_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-text-03)}[data-mode=onLight]._disabled[_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-clear-active)}[data-size=m][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{width:1rem;height:1rem;transform:scale(.75)}[data-size=l][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{margin:0 .125rem;width:1.5rem;height:1.5rem}[_nghost-%COMP%]:hover   .t-icon[_ngcontent-%COMP%]{opacity:1}"],
    changeDetection: 0
  });
  return TuiToggleComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiToggleModule = /*#__PURE__*/(() => {
  class TuiToggleModule {}
  TuiToggleModule.ɵfac = function TuiToggleModule_Factory(t) {
    return new (t || TuiToggleModule)();
  };
  TuiToggleModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiToggleModule
  });
  TuiToggleModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, TuiFocusedModule, TuiFocusableModule, TuiPressedModule, TuiFocusVisibleModule, TuiCheckedModule, taiga_ui_core_directives_wrapper/* TuiWrapperModule */.E, taiga_ui_core_components_svg/* TuiSvgModule */.vl, taiga_ui_core_components_loader/* TuiLoaderModule */.Yc, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ]]
  });
  return TuiToggleModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-toggle.js.map
;// CONCATENATED MODULE: ./node_modules/@maskito/core/index.esm.js
const MASKITO_DEFAULT_ELEMENT_PREDICATE = e => e.querySelector('input,textarea') || e;
const index_esm_MASKITO_DEFAULT_OPTIONS = {
  mask: /^.*$/,
  preprocessors: [],
  postprocessors: [],
  plugins: [],
  overwriteMode: 'shift'
};
class MaskHistory {
  constructor() {
    this.now = null;
    this.past = [];
    this.future = [];
  }
  undo() {
    const state = this.past.pop();
    if (state && this.now) {
      this.future.push(this.now);
      this.updateElement(state, 'historyUndo');
    }
  }
  redo() {
    const state = this.future.pop();
    if (state && this.now) {
      this.past.push(this.now);
      this.updateElement(state, 'historyRedo');
    }
  }
  updateHistory(state) {
    if (!this.now) {
      this.now = state;
      return;
    }
    const isValueChanged = this.now.value !== state.value;
    const isSelectionChanged = this.now.selection.some((item, index) => item !== state.selection[index]);
    if (!isValueChanged && !isSelectionChanged) {
      return;
    }
    if (isValueChanged) {
      this.past.push(this.now);
      this.future = [];
    }
    this.now = state;
  }
  updateElement(state, inputType) {
    this.now = state;
    this.updateElementState(state, {
      inputType,
      data: null
    });
  }
}
function areElementValuesEqual(sampleState, ...states) {
  return states.every(({
    value
  }) => value === sampleState.value);
}
function areElementStatesEqual(sampleState, ...states) {
  return states.every(({
    value,
    selection
  }) => value === sampleState.value && selection[0] === sampleState.selection[0] && selection[1] === sampleState.selection[1]);
}
function applyOverwriteMode({
  value,
  selection
}, newCharacters, mode) {
  const [from, to] = selection;
  const computedMode = typeof mode === 'function' ? mode({
    value,
    selection
  }) : mode;
  return {
    value,
    selection: computedMode === 'replace' ? [from, from + newCharacters.length] : [from, to]
  };
}
function isFixedCharacter(char) {
  return typeof char === 'string';
}
function getLeadingFixedCharacters(mask, validatedValuePart, newCharacter, initialElementState) {
  let leadingFixedCharacters = '';
  for (let i = validatedValuePart.length; i < mask.length; i++) {
    const charConstraint = mask[i];
    const isInitiallyExisted = (initialElementState === null || initialElementState === void 0 ? void 0 : initialElementState.value[i]) === charConstraint;
    if (!isFixedCharacter(charConstraint) || charConstraint === newCharacter && !isInitiallyExisted) {
      return leadingFixedCharacters;
    }
    leadingFixedCharacters += charConstraint;
  }
  return leadingFixedCharacters;
}
function validateValueWithMask(value, maskExpression) {
  if (Array.isArray(maskExpression)) {
    return value.length === maskExpression.length && Array.from(value).every((char, i) => {
      const charConstraint = maskExpression[i];
      return isFixedCharacter(charConstraint) ? char === charConstraint : char.match(charConstraint);
    });
  }
  return maskExpression.test(value);
}
function guessValidValueByPattern(elementState, mask, initialElementState) {
  let maskedFrom = null;
  let maskedTo = null;
  const maskedValue = Array.from(elementState.value).reduce((validatedCharacters, char, charIndex) => {
    const leadingCharacters = getLeadingFixedCharacters(mask, validatedCharacters, char, initialElementState);
    const newValidatedChars = validatedCharacters + leadingCharacters;
    const charConstraint = mask[newValidatedChars.length];
    if (isFixedCharacter(charConstraint)) {
      return newValidatedChars + charConstraint;
    }
    if (!char.match(charConstraint)) {
      return newValidatedChars;
    }
    if (maskedFrom === null && charIndex >= elementState.selection[0]) {
      maskedFrom = newValidatedChars.length;
    }
    if (maskedTo === null && charIndex >= elementState.selection[1]) {
      maskedTo = newValidatedChars.length;
    }
    return newValidatedChars + char;
  }, '');
  const trailingFixedCharacters = getLeadingFixedCharacters(mask, maskedValue, '', initialElementState);
  return {
    value: validateValueWithMask(maskedValue + trailingFixedCharacters, mask) ? maskedValue + trailingFixedCharacters : maskedValue,
    selection: [maskedFrom !== null && maskedFrom !== void 0 ? maskedFrom : maskedValue.length, maskedTo !== null && maskedTo !== void 0 ? maskedTo : maskedValue.length]
  };
}
function guessValidValueByRegExp({
  value,
  selection
}, maskRegExp) {
  const [from, to] = selection;
  let newFrom = from;
  let newTo = to;
  const validatedValue = Array.from(value).reduce((validatedValuePart, char, i) => {
    const newPossibleValue = validatedValuePart + char;
    if (from === i) {
      newFrom = validatedValuePart.length;
    }
    if (to === i) {
      newTo = validatedValuePart.length;
    }
    return newPossibleValue.match(maskRegExp) ? newPossibleValue : validatedValuePart;
  }, '');
  return {
    value: validatedValue,
    selection: [newFrom, newTo]
  };
}
function calibrateValueByMask(elementState, mask, initialElementState = null) {
  if (validateValueWithMask(elementState.value, mask)) {
    return elementState;
  }
  const {
    value,
    selection
  } = Array.isArray(mask) ? guessValidValueByPattern(elementState, mask, initialElementState) : guessValidValueByRegExp(elementState, mask);
  return {
    selection,
    value: Array.isArray(mask) ? value.slice(0, mask.length) : value
  };
}
function removeFixedMaskCharacters(initialElementState, mask) {
  if (!Array.isArray(mask)) {
    return initialElementState;
  }
  const [from, to] = initialElementState.selection;
  const selection = [];
  const unmaskedValue = Array.from(initialElementState.value).reduce((rawValue, char, i) => {
    const charConstraint = mask[i];
    if (i === from) {
      selection.push(rawValue.length);
    }
    if (i === to) {
      selection.push(rawValue.length);
    }
    return isFixedCharacter(charConstraint) && charConstraint === char ? rawValue : rawValue + char;
  }, '');
  if (selection.length < 2) {
    selection.push(...new Array(2 - selection.length).fill(unmaskedValue.length));
  }
  return {
    value: unmaskedValue,
    selection: [selection[0], selection[1]]
  };
}
class MaskModel {
  constructor(initialElementState, maskOptions) {
    this.initialElementState = initialElementState;
    this.maskOptions = maskOptions;
    this.value = '';
    this.selection = [0, 0];
    const {
      value,
      selection
    } = calibrateValueByMask(initialElementState, this.getMaskExpression(initialElementState));
    this.value = value;
    this.selection = selection;
  }
  addCharacters([from, to], newCharacters) {
    const {
      value
    } = this;
    const maskExpression = this.getMaskExpression({
      value: value.slice(0, from) + newCharacters + value.slice(to),
      selection: [from + newCharacters.length, from + newCharacters.length]
    });
    const initialElementState = {
      value,
      selection: [from, to]
    };
    const unmaskedElementState = removeFixedMaskCharacters(initialElementState, maskExpression);
    const [unmaskedFrom, unmaskedTo] = applyOverwriteMode(unmaskedElementState, newCharacters, this.maskOptions.overwriteMode).selection;
    const newUnmaskedLeadingValuePart = unmaskedElementState.value.slice(0, unmaskedFrom) + newCharacters;
    const newCaretIndex = newUnmaskedLeadingValuePart.length;
    const maskedElementState = calibrateValueByMask({
      value: newUnmaskedLeadingValuePart + unmaskedElementState.value.slice(unmaskedTo),
      selection: [newCaretIndex, newCaretIndex]
    }, maskExpression, initialElementState);
    const isInvalidCharsInsertion =
    // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with
    value.slice(0, unmaskedFrom) === calibrateValueByMask({
      value: newUnmaskedLeadingValuePart,
      selection: [newCaretIndex, newCaretIndex]
    }, maskExpression, initialElementState).value;
    if (isInvalidCharsInsertion || areElementStatesEqual(this, maskedElementState) // If typing new characters does not change value
    ) {
      throw new Error('Invalid mask value');
    }
    this.value = maskedElementState.value;
    this.selection = maskedElementState.selection;
  }
  deleteCharacters([from, to]) {
    if (from === to || !to) {
      return;
    }
    const {
      value
    } = this;
    const maskExpression = this.getMaskExpression({
      value: value.slice(0, from) + value.slice(to),
      selection: [from, from]
    });
    const initialElementState = {
      value,
      selection: [from, to]
    };
    const unmaskedElementState = removeFixedMaskCharacters(initialElementState, maskExpression);
    const [unmaskedFrom, unmaskedTo] = unmaskedElementState.selection;
    const newUnmaskedValue = unmaskedElementState.value.slice(0, unmaskedFrom) + unmaskedElementState.value.slice(unmaskedTo);
    const maskedElementState = calibrateValueByMask({
      value: newUnmaskedValue,
      selection: [unmaskedFrom, unmaskedFrom]
    }, maskExpression, initialElementState);
    this.value = maskedElementState.value;
    this.selection = maskedElementState.selection;
  }
  getMaskExpression(elementState) {
    const {
      mask
    } = this.maskOptions;
    return typeof mask === 'function' ? mask(elementState) : mask;
  }
}
class EventListener {
  constructor(element) {
    this.element = element;
    this.listeners = [];
  }
  listen(eventType, fn, options) {
    const untypedFn = fn;
    this.element.addEventListener(eventType, untypedFn, options);
    this.listeners.push(() => this.element.removeEventListener(eventType, untypedFn));
  }
  destroy() {
    this.listeners.forEach(stopListen => stopListen());
  }
}

/**
 * Checks if the passed keyboard event match the required hotkey.
 *
 * We intentionally use legacy {@link KeyboardEvent#keyCode `keyCode`} property. It is more
 * "keyboard-layout"-independent than {@link KeyboardEvent#key `key`} or {@link KeyboardEvent#code `code`} properties.
 *
 * @example
 * input.addEventListener('keydown', (event) => {
 *     if (isHotkey(event, HotkeyModifier.CTRL | HotkeyModifier.SHIFT, HotkeyCode.Z)) {
 *         // redo hotkey pressed
 *     }
 * })
 *
 * @see {@link https://github.com/taiga-family/maskito/issues/315 `KeyboardEvent#code` issue}
 *
 * @return will return `true` only if the {@link HotkeyCode} matches and only the necessary
 * {@link HotkeyModifier modifiers} have been pressed
 */
function isHotkey(event, modifiers, hotkeyCode) {
  return event.ctrlKey === !!(modifiers & 1
  /* CTRL */) && event.altKey === !!(modifiers & 2
  /* ALT */) && event.shiftKey === !!(modifiers & 4
  /* SHIFT */) && event.metaKey === !!(modifiers & 8
  /* META */) && event.keyCode === hotkeyCode;
}
function isRedo(event) {
  return isHotkey(event, 1
  /* CTRL */, 89
  /* Y */) ||
  // Windows
  isHotkey(event, 1
  /* CTRL */ | 4
  /* SHIFT */, 90
  /* Z */) ||
  // Windows & Android
  isHotkey(event, 8
  /* META */ | 4
  /* SHIFT */, 90
  /* Z */) // macOS & iOS
  ;
}
function isUndo(event) {
  return isHotkey(event, 1
  /* CTRL */, 90
  /* Z */) ||
  // Windows & Android
  isHotkey(event, 8
  /* META */, 90
  /* Z */) // macOS & iOS
  ;
}

/**
 * "beforeinput" is more appropriate event for preprocessing of the input masking (than `keydown`):
 * - `keydown` is not triggered by predictive text from native mobile keyboards.
 * - `keydown` is triggered by system key combinations (we don't need them, and they should be manually filtered).
 * - Dropping text inside input triggers `beforeinput` (but not `keydown`).
 * ___
 * "beforeinput" is not supported by Chrome 49+ (only from 60+) and by Firefox 52+ (only from 87+).
 *
 * @see https://caniuse.com/?search=beforeinput
 * @see https://taiga-ui.dev/browser-support
 */
function isBeforeInputEventSupported(element) {
  return 'onbeforeinput' in element;
}
function isEventProducingCharacter({
  key,
  ctrlKey,
  metaKey,
  altKey
}) {
  const isSystemKeyCombinations = ctrlKey || metaKey || altKey;
  const isSingleUnicodeChar = /^.$/u.test(key); // 4-byte characters case (e.g. smile)

  return !isSystemKeyCombinations && key !== 'Backspace' && isSingleUnicodeChar;
}
function getLineSelection({
  value,
  selection
}, isForward) {
  const [from, to] = selection;
  if (from !== to) {
    return [from, to];
  }
  const nearestBreak = isForward ? value.slice(from).indexOf('\n') + 1 || value.length : value.slice(0, to).lastIndexOf('\n') + 1;
  const selectFrom = isForward ? from : nearestBreak;
  const selectTo = isForward ? nearestBreak : to;
  return [selectFrom, selectTo];
}
function getNotEmptySelection({
  value,
  selection
}, isForward) {
  const [from, to] = selection;
  if (from !== to) {
    return [from, to];
  }
  const notEmptySelection = isForward ? [from, to + 1] : [from - 1, to];
  return notEmptySelection.map(x => Math.min(Math.max(x, 0), value.length));
}
const TRAILING_SPACES_REG = /\s+$/g;
const LEADING_SPACES_REG = /^\s+/g;
const SPACE_REG = /\s/;
function getWordSelection({
  value,
  selection
}, isForward) {
  const [from, to] = selection;
  if (from !== to) {
    return [from, to];
  }
  if (isForward) {
    const valueAfterSelectionStart = value.slice(from);
    const [leadingSpaces] = valueAfterSelectionStart.match(LEADING_SPACES_REG) || [''];
    const nearestWordEndIndex = valueAfterSelectionStart.replace(LEADING_SPACES_REG, '') // TODO replace with `String.trimStart` after bumping Firefox to 61+
    .search(SPACE_REG);
    return [from, nearestWordEndIndex !== -1 ? from + leadingSpaces.length + nearestWordEndIndex : value.length];
  }
  const valueBeforeSelectionEnd = value.slice(0, to);
  const [trailingSpaces] = valueBeforeSelectionEnd.match(TRAILING_SPACES_REG) || [''];
  const selectedWordLength = valueBeforeSelectionEnd.replace(TRAILING_SPACES_REG, '') // TODO replace with `String.trimEnd` after bumping Firefox to 61+
  .split('').reverse().findIndex(char => char.match(SPACE_REG));
  return [selectedWordLength !== -1 ? to - trailingSpaces.length - selectedWordLength : 0, to];
}

/* eslint-disable @typescript-eslint/ban-types */

/**
 * @internal
 */
function maskitoPipe(processors = []) {
  return (initialData, ...readonlyArgs) => processors.reduce((data, fn) => Object.assign(Object.assign({}, data), fn(data, ...readonlyArgs)), initialData);
}
function index_esm_maskitoTransform(valueOrState, maskitoOptions) {
  const options = Object.assign(Object.assign({}, index_esm_MASKITO_DEFAULT_OPTIONS), maskitoOptions);
  const preprocessor = maskitoPipe(options.preprocessors);
  const postprocessor = maskitoPipe(options.postprocessors);
  const initialElementState = typeof valueOrState === 'string' ? {
    value: valueOrState,
    selection: [0, 0]
  } : valueOrState;
  const {
    elementState
  } = preprocessor({
    elementState: initialElementState,
    data: ''
  }, 'validation');
  const maskModel = new MaskModel(elementState, options);
  const {
    value,
    selection
  } = postprocessor(maskModel, initialElementState);
  return typeof valueOrState === 'string' ? value : {
    value,
    selection
  };
}
class Maskito extends MaskHistory {
  constructor(element, maskitoOptions) {
    super();
    this.element = element;
    this.maskitoOptions = maskitoOptions;
    this.isTextArea = this.element.nodeName === 'TEXTAREA';
    this.eventListener = new EventListener(this.element);
    this.options = Object.assign(Object.assign({}, index_esm_MASKITO_DEFAULT_OPTIONS), this.maskitoOptions);
    this.preprocessor = maskitoPipe(this.options.preprocessors);
    this.postprocessor = maskitoPipe(this.options.postprocessors);
    this.teardowns = this.options.plugins.map(plugin => plugin(this.element, this.options));
    this.ensureValueFitsMask();
    this.updateHistory(this.elementState);
    this.eventListener.listen('keydown', event => {
      if (isRedo(event)) {
        event.preventDefault();
        return this.redo();
      }
      if (isUndo(event)) {
        event.preventDefault();
        return this.undo();
      }
    });
    if (isBeforeInputEventSupported(element)) {
      this.eventListener.listen('beforeinput', event => {
        const isForward = event.inputType.includes('Forward');
        this.updateHistory(this.elementState);
        switch (event.inputType) {
          // historyUndo/historyRedo will not be triggered if value was modified programmatically
          case 'historyUndo':
            event.preventDefault();
            return this.undo();
          case 'historyRedo':
            event.preventDefault();
            return this.redo();
          case 'deleteByCut':
          case 'deleteContentBackward':
          case 'deleteContentForward':
            return this.handleDelete({
              event,
              isForward,
              selection: getNotEmptySelection(this.elementState, isForward)
            });
          case 'deleteWordForward':
          case 'deleteWordBackward':
            return this.handleDelete({
              event,
              isForward,
              selection: getWordSelection(this.elementState, isForward),
              force: true
            });
          case 'deleteSoftLineBackward':
          case 'deleteSoftLineForward':
          case 'deleteHardLineBackward':
          case 'deleteHardLineForward':
            return this.handleDelete({
              event,
              isForward,
              selection: getLineSelection(this.elementState, isForward),
              force: true
            });
          case 'insertCompositionText':
            return;
          // will be handled inside `compositionend` event

          case 'insertLineBreak':
            return this.handleEnter(event);
          case 'insertFromPaste':
          case 'insertText':
          case 'insertFromDrop':
          default:
            return this.handleInsert(event, event.data || '');
        }
      });
    } else {
      /** TODO: drop it after browser support bump (Firefox 87+)
       * Also, replace union types `Event | TypedInputEvent` with `TypedInputEvent` inside:
       *** {@link handleDelete}
       *** {@link handleInsert}
       */
      this.eventListener.listen('keydown', event => this.handleKeydown(event));
      this.eventListener.listen('paste', event => {
        var _a;
        return this.handleInsert(event, ((_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/plain')) || '');
      });
    }
    this.eventListener.listen('input', ({
      inputType
    }) => {
      if (inputType === 'insertCompositionText') {
        return; // will be handled inside `compositionend` event
      }
      this.ensureValueFitsMask();
      this.updateHistory(this.elementState);
    });
    this.eventListener.listen('compositionend', () => {
      this.ensureValueFitsMask();
      this.updateHistory(this.elementState);
    });
  }
  get elementState() {
    const {
      value,
      selectionStart,
      selectionEnd
    } = this.element;
    return {
      value,
      selection: [selectionStart || 0, selectionEnd || 0]
    };
  }
  get maxLength() {
    const {
      maxLength
    } = this.element;
    return maxLength === -1 ? Infinity : maxLength;
  }
  destroy() {
    this.eventListener.destroy();
    this.teardowns.forEach(teardown => teardown === null || teardown === void 0 ? void 0 : teardown());
  }
  updateElementState({
    value,
    selection
  }, eventInit = {
    inputType: 'insertText',
    data: null
  }) {
    const initialValue = this.elementState.value;
    this.updateValue(value);
    this.updateSelectionRange(selection);
    if (initialValue !== value) {
      this.dispatchInputEvent(eventInit);
    }
  }
  updateSelectionRange([from, to]) {
    var _a, _b;
    if (this.element.selectionStart !== from || this.element.selectionEnd !== to) {
      (_b = (_a = this.element).setSelectionRange) === null || _b === void 0 ? void 0 : _b.call(_a, from, to);
    }
  }
  updateValue(value) {
    this.element.value = value;
  }
  ensureValueFitsMask() {
    this.updateElementState(index_esm_maskitoTransform(this.elementState, this.options));
  }
  dispatchInputEvent(eventInit = {
    inputType: 'insertText',
    data: null
  }) {
    const globalObject = typeof window !== 'undefined' ? window : globalThis; // TODO: replace `globalObject` with `globalThis` after bumping Firefox to 65+
    // @see https://caniuse.com/?search=globalThis

    if (globalObject === null || globalObject === void 0 ? void 0 : globalObject.InputEvent) {
      this.element.dispatchEvent(new InputEvent('input', Object.assign(Object.assign({}, eventInit), {
        bubbles: true,
        cancelable: false
      })));
    }
  }
  handleKeydown(event) {
    const pressedKey = event.key;
    const isForward = pressedKey === 'Delete';
    switch (pressedKey) {
      case 'Backspace':
      case 'Delete':
        return this.handleDelete({
          event,
          isForward,
          selection: getNotEmptySelection(this.elementState, isForward)
        });
      case 'Enter':
        return this.handleEnter(event);
    }
    if (!isEventProducingCharacter(event)) {
      return;
    }
    this.handleInsert(event, pressedKey);
  }
  handleDelete({
    event,
    selection,
    isForward,
    force = false
  }) {
    const initialState = {
      value: this.elementState.value,
      selection
    };
    const [initialFrom, initialTo] = initialState.selection;
    const {
      elementState
    } = this.preprocessor({
      elementState: initialState,
      data: ''
    }, isForward ? 'deleteForward' : 'deleteBackward');
    const maskModel = new MaskModel(elementState, this.options);
    const [from, to] = elementState.selection;
    maskModel.deleteCharacters([from, to]);
    const newElementState = this.postprocessor(maskModel, initialState);
    const newPossibleValue = initialState.value.slice(0, initialFrom) + initialState.value.slice(initialTo);
    if (newPossibleValue === newElementState.value && !force) {
      return;
    }
    event.preventDefault();
    if (areElementValuesEqual(initialState, elementState, maskModel, newElementState)) {
      // User presses Backspace/Delete for the fixed value
      return this.updateSelectionRange(isForward ? [to, to] : [from, from]);
    } // TODO: drop it when `event: Event | TypedInputEvent` => `event: TypedInputEvent`

    const inputTypeFallback = isForward ? 'deleteContentForward' : 'deleteContentBackward';
    this.updateElementState(newElementState, {
      inputType: 'inputType' in event ? event.inputType : inputTypeFallback,
      data: null
    });
    this.updateHistory(newElementState);
  }
  handleInsert(event, data) {
    const initialElementState = this.elementState;
    const {
      elementState,
      data: insertedText = data
    } = this.preprocessor({
      data,
      elementState: initialElementState
    }, 'insert');
    const maskModel = new MaskModel(elementState, this.options);
    try {
      maskModel.addCharacters(elementState.selection, insertedText);
    } catch (_a) {
      return event.preventDefault();
    }
    const [from, to] = elementState.selection;
    const newPossibleValue = elementState.value.slice(0, from) + data + elementState.value.slice(to);
    const newElementState = this.postprocessor(maskModel, initialElementState);
    if (newElementState.value.length > this.maxLength) {
      return event.preventDefault();
    }
    if (newPossibleValue !== newElementState.value) {
      event.preventDefault();
      this.updateElementState(newElementState, {
        data,
        inputType: 'inputType' in event ? event.inputType : 'insertText'
      });
      this.updateHistory(newElementState);
    }
  }
  handleEnter(event) {
    if (this.isTextArea) {
      this.handleInsert(event, '\n');
    }
  }
}

;// CONCATENATED MODULE: ./node_modules/@maskito/kit/index.esm.js

const DEFAULT_DECIMAL_PSEUDO_SEPARATORS = ['.', ',', 'б', 'ю'];
const DEFAULT_MIN_DATE = new Date('0001-01-01');
const DEFAULT_MAX_DATE = new Date('9999-12-31');
const DEFAULT_TIME_SEGMENT_MAX_VALUES = {
  hours: 23,
  minutes: 59,
  seconds: 59,
  milliseconds: 999
};

/**
 * {@link https://unicode-table.com/en/00A0/ Non-breaking space}.
 */
const index_esm_CHAR_NO_BREAK_SPACE = '\u00A0';
/**
 * {@link https://unicode-table.com/en/2013/ EN dash}
 * is used to indicate a range of numbers or a span of time.
 * @example 2006–2022
 */

const CHAR_EN_DASH = '\u2013';
/**
 * {@link https://unicode-table.com/en/2014/ EM dash}
 * is used to mark a break in a sentence.
 * @example Taiga UI — powerful set of open source components for Angular
 * ___
 * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_HYPHEN}!
 */

const CHAR_EM_DASH = '\u2014';
/**
 * {@link https://unicode-table.com/en/002D/ Hyphen (minus sign)}
 * is used to combine words.
 * @example well-behaved
 * ___
 * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_EM_DASH}!
 */

const CHAR_HYPHEN = '\u002D';
/**
 * {@link https://unicode-table.com/en/2212/ Minus}
 * is used as math operator symbol or before negative digits.
 * ---
 * Can be used as `&minus;`. Don't confuse with {@link CHAR_HYPHEN}
 */

const CHAR_MINUS = '\u2212';
const POSSIBLE_DATE_RANGE_SEPARATOR = [CHAR_HYPHEN, CHAR_EN_DASH, CHAR_EM_DASH, CHAR_MINUS];
const POSSIBLE_DATE_TIME_SEPARATOR = (/* unused pure expression or super */ null && ([',', ' ']));
const TIME_FIXED_CHARACTERS = [':', '.'];
const TIME_SEGMENT_VALUE_LENGTHS = {
  hours: 2,
  minutes: 2,
  seconds: 2,
  milliseconds: 3
};

/**
 * Clamps a value between two inclusive limits
 *
 * @param value
 * @param min lower limit
 * @param max upper limit
 */
function clamp(value, min, max) {
  const clampedValue = Math.min(Number(max), Math.max(Number(min), Number(value)));
  return value instanceof Date ? new Date(clampedValue) : clampedValue;
}
function appendDate(initialDate, {
  day,
  month,
  year
} = {}) {
  const date = new Date(initialDate);
  if (day) {
    date.setDate(date.getDate() + day);
  }
  if (month) {
    date.setMonth(date.getMonth() + month);
  }
  if (year) {
    date.setFullYear(date.getFullYear() + year);
  }
  return date;
}
const getDateSegmentValueLength = dateString => {
  var _a, _b, _c;
  return {
    day: ((_a = dateString.match(/d/g)) === null || _a === void 0 ? void 0 : _a.length) || 0,
    month: ((_b = dateString.match(/m/g)) === null || _b === void 0 ? void 0 : _b.length) || 0,
    year: ((_c = dateString.match(/y/g)) === null || _c === void 0 ? void 0 : _c.length) || 0
  };
};
function dateToSegments(date) {
  return {
    day: String(date.getDate()).padStart(2, '0'),
    month: String(date.getMonth() + 1).padStart(2, '0'),
    year: String(date.getFullYear()).padStart(4, '0'),
    hours: String(date.getHours()).padStart(2, '0'),
    minutes: String(date.getMinutes()).padStart(2, '0'),
    seconds: String(date.getSeconds()).padStart(2, '0'),
    milliseconds: String(date.getMilliseconds()).padStart(3, '0')
  };
}
function isDateStringComplete(dateString, dateModeTemplate) {
  if (dateString.length < dateModeTemplate.length) {
    return false;
  }
  return dateString.split(/\D/).every(segment => !segment.match(/^0+$/));
}
function parseDateRangeString(dateRange, dateModeTemplate, rangeSeparator) {
  const digitsInDate = dateModeTemplate.replace(/\W/g, '').length;
  return dateRange.replace(rangeSeparator, '').match(new RegExp(`(\\D*\\d[^\\d\\s]*){1,${digitsInDate}}`, 'g')) || [];
}

/**
 * @deprecated use `Object.fromEntries` instead
 * (check browser support first https://caniuse.com/mdn-javascript_builtins_object_fromentries)
 * ___
 * TODO: after we bump Firefox to 63+ replace this function with `Object.fromEntries`.
 * TODO: Add `es2019.object` to `tsconfig.json` => `compilerOptions.lib`.
 *
 */
function getObjectFromEntries(keyValuePairs) {
  return keyValuePairs.reduce((obj, [key, val]) => Object.assign(Object.assign({}, obj), {
    [key]: val
  }), {});
}
function parseDateString(dateString, fullMode) {
  const cleanMode = fullMode.replace(/[^dmy]/g, '');
  const onlyDigitsDate = dateString.replace(/\D+/g, '');
  const dateSegments = {
    day: onlyDigitsDate.slice(cleanMode.indexOf('d'), cleanMode.lastIndexOf('d') + 1),
    month: onlyDigitsDate.slice(cleanMode.indexOf('m'), cleanMode.lastIndexOf('m') + 1),
    year: onlyDigitsDate.slice(cleanMode.indexOf('y'), cleanMode.lastIndexOf('y') + 1)
  };
  return getObjectFromEntries(Object.entries(dateSegments).filter(([_, value]) => Boolean(value)).sort(([a], [b]) => fullMode.toLowerCase().indexOf(a[0]) > fullMode.toLowerCase().indexOf(b[0]) ? 1 : -1));
}
function segmentsToDate(parsedDate, parsedTime) {
  var _a, _b, _c, _d, _e, _f, _g;
  const year = ((_a = parsedDate.year) === null || _a === void 0 ? void 0 : _a.length) === 2 ? `20${parsedDate.year}` : parsedDate.year;
  const date = new Date(Number(year !== null && year !== void 0 ? year : '0'), Number((_b = parsedDate.month) !== null && _b !== void 0 ? _b : '1') - 1, Number((_c = parsedDate.day) !== null && _c !== void 0 ? _c : '1'), Number((_d = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.hours) !== null && _d !== void 0 ? _d : '0'), Number((_e = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.minutes) !== null && _e !== void 0 ? _e : '0'), Number((_f = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.seconds) !== null && _f !== void 0 ? _f : '0'), Number((_g = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.milliseconds) !== null && _g !== void 0 ? _g : '0')); // needed for years less than 1900

  date.setFullYear(Number(year !== null && year !== void 0 ? year : '0'));
  return date;
}
const DATE_TIME_SEPARATOR = ', ';
function toDateString({
  day,
  month,
  year,
  hours,
  minutes,
  seconds,
  milliseconds
}, dateMode, timeMode) {
  var _a;
  const safeYear = ((_a = dateMode.match(/y/g)) === null || _a === void 0 ? void 0 : _a.length) === 2 ? year === null || year === void 0 ? void 0 : year.slice(-2) : year;
  const fullMode = dateMode + (timeMode ? DATE_TIME_SEPARATOR + timeMode : '');
  return fullMode.replace(/d+/g, day !== null && day !== void 0 ? day : '').replace(/m+/g, month !== null && month !== void 0 ? month : '').replace(/y+/g, safeYear !== null && safeYear !== void 0 ? safeYear : '').replace(/H+/g, hours !== null && hours !== void 0 ? hours : '').replace(/MSS/g, milliseconds !== null && milliseconds !== void 0 ? milliseconds : '').replace(/M+/g, minutes !== null && minutes !== void 0 ? minutes : '').replace(/S+/g, seconds !== null && seconds !== void 0 ? seconds : '').replace(/^\D+/g, '').replace(/\D+$/g, '');
}
function padWithZeroesUntilValid(segmentValue, paddedMaxValue, prefixedZeroesCount = 0) {
  if (Number(segmentValue.padEnd(paddedMaxValue.length, '0')) <= Number(paddedMaxValue)) {
    return {
      validatedSegmentValue: segmentValue,
      prefixedZeroesCount
    };
  }
  if (segmentValue.endsWith('0')) {
    // 00:|00 => Type 9 => 00:09|
    return padWithZeroesUntilValid(`0${segmentValue.slice(0, paddedMaxValue.length - 1)}`, paddedMaxValue, prefixedZeroesCount + 1);
  } // |19:00 => Type 2 => 2|0:00

  return padWithZeroesUntilValid(`${segmentValue.slice(0, paddedMaxValue.length - 1)}0`, paddedMaxValue, prefixedZeroesCount);
}
const dateMaxValues = {
  day: 31,
  month: 12,
  year: 9999
};
function validateDateString({
  dateString,
  dateModeTemplate,
  offset,
  selection: [from, to]
}) {
  const parsedDate = parseDateString(dateString, dateModeTemplate);
  const dateSegments = Object.entries(parsedDate);
  const validatedDateSegments = {};
  let paddedZeroes = 0;
  for (const [segmentName, segmentValue] of dateSegments) {
    const validatedDate = toDateString(validatedDateSegments, dateModeTemplate);
    const maxSegmentValue = dateMaxValues[segmentName];
    const fantomSeparator = validatedDate.length && 1;
    const lastSegmentDigitIndex = offset + validatedDate.length + fantomSeparator + getDateSegmentValueLength(dateModeTemplate)[segmentName];
    const isLastSegmentDigitAdded = lastSegmentDigitIndex >= from && lastSegmentDigitIndex === to;
    if (isLastSegmentDigitAdded && Number(segmentValue) > Number(maxSegmentValue)) {
      // 3|1.10.2010 => Type 9 => 3|1.10.2010
      return {
        validatedDateString: '',
        updatedSelection: [from, to]
      }; // prevent changes
    }
    if (isLastSegmentDigitAdded && Number(segmentValue) < 1) {
      // 31.0|1.2010 => Type 0 => 31.0|1.2010
      return {
        validatedDateString: '',
        updatedSelection: [from, to]
      }; // prevent changes
    }
    const {
      validatedSegmentValue,
      prefixedZeroesCount
    } = padWithZeroesUntilValid(segmentValue, `${maxSegmentValue}`);
    paddedZeroes += prefixedZeroesCount;
    validatedDateSegments[segmentName] = validatedSegmentValue;
  }
  const validatedDateString = toDateString(validatedDateSegments, dateModeTemplate);
  const addedDateSegmentSeparators = validatedDateString.length - dateString.length;
  return {
    validatedDateString,
    updatedSelection: [from + paddedZeroes + addedDateSegmentSeparators, to + paddedZeroes + addedDateSegmentSeparators]
  };
}

/**
 * Copy-pasted solution from lodash
 * @see https://lodash.com/docs/4.17.15#escapeRegExp
 */
const reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
const reHasRegExpChar = new RegExp(reRegExpChar.source);
function escapeRegExp(str) {
  return str && reHasRegExpChar.test(str) ? str.replace(reRegExpChar, '\\$&') : str;
}
function findCommonBeginningSubstr(a, b) {
  let res = '';
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return res;
    }
    res += a[i];
  }
  return res;
}

/**
 * Returns current active element, including shadow dom
 *
 * @return element or null
 */
function getFocused({
  activeElement
}) {
  if (!(activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot)) {
    return activeElement;
  }
  let element = activeElement.shadowRoot.activeElement;
  while (element === null || element === void 0 ? void 0 : element.shadowRoot) {
    element = element.shadowRoot.activeElement;
  }
  return element;
}
function index_esm_identity(x) {
  return x;
}
function isEmpty(entity) {
  return !entity || typeof entity === 'object' && Object.keys(entity).length === 0;
}
function raiseSegmentValueToMin(segments, fullMode) {
  const segmentsLength = getDateSegmentValueLength(fullMode);
  return getObjectFromEntries(Object.entries(segments).map(([key, value]) => {
    const segmentLength = segmentsLength[key];
    return [key, value.length === segmentLength && value.match(/^0+$/) ? '1'.padStart(segmentLength, '0') : value];
  }));
}
function createMinMaxDatePostprocessor({
  dateModeTemplate,
  min = DEFAULT_MIN_DATE,
  max = DEFAULT_MAX_DATE,
  rangeSeparator = '',
  dateSegmentSeparator = '.'
}) {
  return ({
    value,
    selection
  }) => {
    const endsWithRangeSeparator = rangeSeparator && value.endsWith(rangeSeparator);
    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);
    let validatedValue = '';
    for (const dateString of dateStrings) {
      validatedValue += validatedValue ? rangeSeparator : '';
      const parsedDate = parseDateString(dateString, dateModeTemplate);
      if (!isDateStringComplete(dateString, dateModeTemplate)) {
        const fixedDate = raiseSegmentValueToMin(parsedDate, dateModeTemplate);
        const fixedValue = toDateString(fixedDate, dateModeTemplate);
        const tail = dateString.endsWith(dateSegmentSeparator) ? dateSegmentSeparator : '';
        validatedValue += fixedValue + tail;
        continue;
      }
      const date = segmentsToDate(parsedDate);
      const clampedDate = clamp(date, min, max);
      validatedValue += toDateString(dateToSegments(clampedDate), dateModeTemplate);
    }
    return {
      selection,
      value: validatedValue + (endsWithRangeSeparator ? rangeSeparator : '')
    };
  };
}
function normalizeDatePreprocessor({
  dateModeTemplate,
  dateSegmentsSeparator,
  rangeSeparator = ''
}) {
  return ({
    elementState,
    data
  }) => {
    const separator = rangeSeparator ? new RegExp(`${rangeSeparator}|-`) : DATE_TIME_SEPARATOR;
    const possibleDates = data.split(separator);
    const dates = data.includes(DATE_TIME_SEPARATOR) ? [possibleDates[0]] : possibleDates;
    if (dates.every(date => date.trim().split(/\D/).length === dateModeTemplate.split(dateSegmentsSeparator).length)) {
      const newData = dates.map(date => normalizeDateString(date, dateModeTemplate, dateSegmentsSeparator)).join(rangeSeparator);
      return {
        elementState,
        data: `${newData}${data.includes(DATE_TIME_SEPARATOR) ? DATE_TIME_SEPARATOR + possibleDates[1] || '' : ''}`
      };
    }
    return {
      elementState,
      data
    };
  };
}
function normalizeDateString(dateString, template, separator) {
  const dateSegments = dateString.split(/\D/);
  const templateSegments = template.split(separator);
  const normalizedSegments = dateSegments.map((segment, index) => index === templateSegments.length - 1 ? segment : segment.padStart(templateSegments[index].length, '0'));
  return normalizedSegments.join(separator);
}
function maskitoPostfixPostprocessorGenerator(postfix) {
  const postfixRE = new RegExp(`${escapeRegExp(postfix)}$`);
  return postfix ? ({
    value,
    selection
  }, initialElementState) => {
    if (!value && !initialElementState.value.endsWith(postfix)) {
      // cases when developer wants input to be empty (programmatically)
      return {
        value,
        selection
      };
    }
    if (!value.endsWith(postfix) && !initialElementState.value.endsWith(postfix)) {
      return {
        selection,
        value: value + postfix
      };
    }
    const initialValueBeforePostfix = initialElementState.value.replace(postfixRE, '');
    const postfixWasModified = initialElementState.selection[1] >= initialValueBeforePostfix.length;
    const alreadyExistedValueBeforePostfix = findCommonBeginningSubstr(initialValueBeforePostfix, value);
    return {
      selection,
      value: Array.from(postfix).reverse().reduce((newValue, char, index) => {
        const i = newValue.length - 1 - index;
        const isInitiallyMirroredChar = alreadyExistedValueBeforePostfix[i] === char && postfixWasModified;
        return newValue[i] !== char || isInitiallyMirroredChar ? newValue.slice(0, i + 1) + char + newValue.slice(i + 1) : newValue;
      }, value)
    };
  } : index_esm_identity;
}
function maskitoPrefixPostprocessorGenerator(prefix) {
  return prefix ? ({
    value,
    selection
  }, initialElementState) => {
    if (value.startsWith(prefix) ||
    // already valid
    !value && !initialElementState.value.startsWith(prefix) // cases when developer wants input to be empty
    ) {
      return {
        value,
        selection
      };
    }
    const [from, to] = selection;
    const prefixedValue = Array.from(prefix).reduce((modifiedValue, char, i) => modifiedValue[i] === char ? modifiedValue : modifiedValue.slice(0, i) + char + modifiedValue.slice(i), value);
    const addedCharsCount = prefixedValue.length - value.length;
    return {
      selection: [from + addedCharsCount, to + addedCharsCount],
      value: prefixedValue
    };
  } : index_esm_identity;
}
function createValidDatePreprocessor({
  dateModeTemplate,
  dateSegmentsSeparator,
  rangeSeparator = ''
}) {
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    if (data === dateSegmentsSeparator) {
      return {
        elementState,
        data: selection[0] === value.length ? data : ''
      };
    }
    if (POSSIBLE_DATE_RANGE_SEPARATOR.includes(data)) {
      return {
        elementState,
        data: rangeSeparator
      };
    }
    const newCharacters = data.replace(new RegExp(`[^\\d${escapeRegExp(dateSegmentsSeparator)}${rangeSeparator}]`, 'g'), '');
    if (!newCharacters) {
      return {
        elementState,
        data: ''
      };
    }
    const [from, rawTo] = selection;
    let to = rawTo + data.length;
    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);
    const dateStrings = parseDateRangeString(newPossibleValue, dateModeTemplate, rangeSeparator);
    let validatedValue = '';
    const hasRangeSeparator = Boolean(rangeSeparator) && newPossibleValue.includes(rangeSeparator);
    for (const dateString of dateStrings) {
      const {
        validatedDateString,
        updatedSelection
      } = validateDateString({
        dateString,
        dateModeTemplate,
        offset: validatedValue ? validatedValue.length + rangeSeparator.length : 0,
        selection: [from, to]
      });
      if (dateString && !validatedDateString) {
        return {
          elementState,
          data: ''
        }; // prevent changes
      }
      to = updatedSelection[1];
      validatedValue += hasRangeSeparator && validatedValue ? rangeSeparator + validatedDateString : validatedDateString;
    }
    const newData = validatedValue.slice(from, to);
    return {
      elementState: {
        selection,
        value: validatedValue.slice(0, from) + newData.split(dateSegmentsSeparator).map(segment => '0'.repeat(segment.length)).join(dateSegmentsSeparator) + validatedValue.slice(to)
      },
      data: newData
    };
  };
}
function maskitoEventHandler(name, handler, eventListenerOptions) {
  return (element, maskitoOptions) => {
    const listener = () => handler(element, maskitoOptions);
    element.addEventListener(name, listener, eventListenerOptions);
    return () => element.removeEventListener(name, listener, eventListenerOptions);
  };
}
function maskitoAddOnFocusPlugin(value) {
  return maskitoEventHandler('focus', element => {
    if (!element.value) {
      element.value = value;
      element.dispatchEvent(new Event('input'));
    }
  });
}
function maskitoCaretGuard(guard) {
  return element => {
    const document = element.ownerDocument;
    let isPointerDown = 0;
    const onPointerDown = () => isPointerDown++;
    const onPointerUp = () => {
      isPointerDown = Math.max(--isPointerDown, 0);
    };
    const listener = () => {
      if (getFocused(document) !== element) {
        return;
      }
      if (isPointerDown) {
        return document.addEventListener('mouseup', listener, {
          once: true,
          passive: true
        });
      }
      const start = element.selectionStart || 0;
      const end = element.selectionEnd || 0;
      const [fromLimit, toLimit] = guard(element.value, [start, end]);
      if (fromLimit > start || toLimit < end) {
        element.setSelectionRange(clamp(start, fromLimit, toLimit), clamp(end, fromLimit, toLimit));
      }
    };
    document.addEventListener('selectionchange', listener, {
      passive: true
    });
    element.addEventListener('mousedown', onPointerDown, {
      passive: true
    });
    document.addEventListener('mouseup', onPointerUp, {
      passive: true
    });
    return () => {
      document.removeEventListener('selectionchange', listener);
      document.removeEventListener('mousedown', onPointerDown);
      document.removeEventListener('mouseup', onPointerUp);
    };
  };
}
function maskitoRejectEvent(element) {
  const listener = () => {
    const value = element.value;
    element.addEventListener('beforeinput', event => {
      if (event.defaultPrevented && value === element.value) {
        element.dispatchEvent(new CustomEvent('maskitoReject', {
          bubbles: true
        }));
      }
    }, {
      once: true
    });
  };
  element.addEventListener('beforeinput', listener, true);
  return () => element.removeEventListener('beforeinput', listener, true);
}
function maskitoRemoveOnBlurPlugin(value) {
  return maskitoEventHandler('blur', element => {
    if (element.value === value) {
      element.value = '';
      element.dispatchEvent(new Event('input'));
    }
  });
}
function maskitoWithPlaceholder(placeholder, focusedOnly = false) {
  const removePlaceholder = value => {
    for (let i = value.length - 1; i >= 0; i--) {
      if (value[i] !== placeholder[i]) {
        return value.slice(0, i + 1);
      }
    }
    return '';
  };
  const plugins = [maskitoCaretGuard(value => [0, removePlaceholder(value).length])];
  let focused = false;
  if (focusedOnly) {
    const focus = maskitoEventHandler('focus', element => {
      focused = true;
      element.value += placeholder.slice(element.value.length);
      element.dispatchEvent(new Event('input'));
    }, {
      capture: true
    });
    const blur = maskitoEventHandler('blur', element => {
      focused = false;
      element.value = removePlaceholder(element.value);
      element.dispatchEvent(new Event('input'));
    }, {
      capture: true
    });
    plugins.push(focus, blur);
  }
  return {
    plugins,
    removePlaceholder,
    preprocessors: [({
      elementState,
      data
    }) => {
      const {
        value,
        selection
      } = elementState;
      return {
        elementState: {
          selection,
          value: removePlaceholder(value)
        },
        data
      };
    }],
    postprocessors: [({
      value,
      selection
    }, initialElementState) => initialElementState.value && (focused || !focusedOnly) ? {
      value: value + placeholder.slice(value.length),
      selection
    } : {
      value,
      selection
    }]
  };
}
function createZeroPlaceholdersPreprocessor() {
  return ({
    elementState
  }, actionType) => {
    const {
      value,
      selection
    } = elementState;
    if (!value || isLastChar(value, selection)) {
      return {
        elementState
      };
    }
    const [from, to] = selection;
    const zeroes = value.slice(from, to).replace(/\d/g, '0');
    const newValue = value.slice(0, from) + zeroes + value.slice(to);
    if (actionType === 'validation' || actionType === 'insert' && from === to) {
      return {
        elementState: {
          selection,
          value: newValue
        }
      };
    }
    return {
      elementState: {
        selection: actionType === 'deleteBackward' || actionType === 'insert' ? [from, from] : [to, to],
        value: newValue
      }
    };
  };
}
function isLastChar(value, [_, to]) {
  return to === value.length;
}
function maskitoDateOptionsGenerator({
  mode,
  separator = '.',
  max,
  min
}) {
  const dateModeTemplate = mode.split('/').join(separator);
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: Array.from(dateModeTemplate).map(char => char === separator ? char : /\d/),
    overwriteMode: 'replace',
    preprocessors: [createZeroPlaceholdersPreprocessor(), normalizeDatePreprocessor({
      dateModeTemplate,
      dateSegmentsSeparator: separator
    }), createValidDatePreprocessor({
      dateModeTemplate,
      dateSegmentsSeparator: separator
    })],
    postprocessors: [createMinMaxDatePostprocessor({
      min,
      max,
      dateModeTemplate,
      dateSegmentSeparator: separator
    })]
  });
}
function createMinMaxRangeLengthPostprocessor({
  dateModeTemplate,
  rangeSeparator,
  minLength,
  maxLength,
  max = DEFAULT_MAX_DATE
}) {
  if (isEmpty(minLength) && isEmpty(maxLength)) {
    return index_esm_identity;
  }
  return ({
    value,
    selection
  }) => {
    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);
    if (dateStrings.length !== 2 || dateStrings.some(date => !isDateStringComplete(date, dateModeTemplate))) {
      return {
        value,
        selection
      };
    }
    const [fromDate, toDate] = dateStrings.map(dateString => segmentsToDate(parseDateString(dateString, dateModeTemplate)));
    const minDistantToDate = appendDate(fromDate, Object.assign(Object.assign({}, minLength), {
      // 06.02.2023 - 07.02.2023 => {minLength: {day: 3}} => 06.02.2023 - 08.02.2023
      // "from"-day is included in the range
      day: (minLength === null || minLength === void 0 ? void 0 : minLength.day) && minLength.day - 1
    }));
    const maxDistantToDate = !isEmpty(maxLength) ? appendDate(fromDate, Object.assign(Object.assign({}, maxLength), {
      day: (maxLength === null || maxLength === void 0 ? void 0 : maxLength.day) && maxLength.day - 1
    })) : max;
    const minLengthClampedToDate = clamp(toDate, minDistantToDate, max);
    const minMaxLengthClampedToDate = minLengthClampedToDate > maxDistantToDate ? maxDistantToDate : minLengthClampedToDate;
    return {
      selection,
      value: dateStrings[0] + rangeSeparator + toDateString(dateToSegments(minMaxLengthClampedToDate), dateModeTemplate)
    };
  };
}
function createSwapDatesPostprocessor({
  dateModeTemplate,
  rangeSeparator
}) {
  return ({
    value,
    selection
  }) => {
    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);
    const isDateRangeComplete = dateStrings.length === 2 && dateStrings.every(date => isDateStringComplete(date, dateModeTemplate));
    const [from, to] = selection;
    const caretAtTheEnd = from >= value.length;
    const allValueSelected = from === 0 && to >= value.length; // dropping text inside with a pointer

    if (!(caretAtTheEnd || allValueSelected) || !isDateRangeComplete) {
      return {
        value,
        selection
      };
    }
    const [fromDate, toDate] = dateStrings.map(dateString => segmentsToDate(parseDateString(dateString, dateModeTemplate)));
    return {
      selection,
      value: fromDate > toDate ? dateStrings.reverse().join(rangeSeparator) : value
    };
  };
}
function maskitoDateRangeOptionsGenerator({
  mode,
  separator = '.',
  min,
  max,
  minLength,
  maxLength,
  dateSeparator = separator,
  rangeSeparator = `${index_esm_CHAR_NO_BREAK_SPACE}${CHAR_EN_DASH}${index_esm_CHAR_NO_BREAK_SPACE}`
}) {
  const dateModeTemplate = mode.split('/').join(dateSeparator);
  const dateMask = Array.from(dateModeTemplate).map(char => char === dateSeparator ? char : /\d/);
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: [...dateMask, ...Array.from(rangeSeparator), ...dateMask],
    overwriteMode: 'replace',
    preprocessors: [createZeroPlaceholdersPreprocessor(), normalizeDatePreprocessor({
      dateModeTemplate,
      rangeSeparator,
      dateSegmentsSeparator: dateSeparator
    }), createValidDatePreprocessor({
      dateModeTemplate,
      rangeSeparator,
      dateSegmentsSeparator: dateSeparator
    })],
    postprocessors: [createMinMaxDatePostprocessor({
      min,
      max,
      dateModeTemplate,
      rangeSeparator,
      dateSegmentSeparator: dateSeparator
    }), createMinMaxRangeLengthPostprocessor({
      dateModeTemplate,
      minLength,
      maxLength,
      max,
      rangeSeparator
    }), createSwapDatesPostprocessor({
      dateModeTemplate,
      rangeSeparator
    })]
  });
}
function padTimeSegments(timeSegments) {
  return getObjectFromEntries(Object.entries(timeSegments).map(([segmentName, segmentValue]) => [segmentName, `${segmentValue}`.padEnd(TIME_SEGMENT_VALUE_LENGTHS[segmentName], '0')]));
}

/**
 * @param timeString can be with/without fixed characters
 */

function parseTimeString(timeString) {
  const onlyDigits = timeString.replace(/\D+/g, '');
  const timeSegments = {
    hours: onlyDigits.slice(0, 2),
    minutes: onlyDigits.slice(2, 4),
    seconds: onlyDigits.slice(4, 6),
    milliseconds: onlyDigits.slice(6, 9)
  };
  return getObjectFromEntries(Object.entries(timeSegments).filter(([_, value]) => Boolean(value)));
}
function toTimeString({
  hours = '',
  minutes = '',
  seconds = '',
  milliseconds = ''
}) {
  const mm = minutes && `:${minutes}`;
  const ss = seconds && `:${seconds}`;
  const ms = milliseconds && `.${milliseconds}`;
  return `${hours}${mm}${ss}${ms}`;
}
const TRAILING_TIME_SEGMENT_SEPARATOR_REG = new RegExp(`[${TIME_FIXED_CHARACTERS.map(escapeRegExp).join('')}]$`);
function validateTimeString({
  timeString,
  paddedMaxValues,
  offset,
  selection: [from, to]
}) {
  const parsedTime = parseTimeString(timeString);
  const possibleTimeSegments = Object.entries(parsedTime);
  const validatedTimeSegments = {};
  let paddedZeroes = 0;
  for (const [segmentName, segmentValue] of possibleTimeSegments) {
    const validatedTime = toTimeString(validatedTimeSegments);
    const maxSegmentValue = paddedMaxValues[segmentName];
    const fantomSeparator = validatedTime.length && 1;
    const lastSegmentDigitIndex = offset + validatedTime.length + fantomSeparator + TIME_SEGMENT_VALUE_LENGTHS[segmentName];
    const isLastSegmentDigitAdded = lastSegmentDigitIndex >= from && lastSegmentDigitIndex <= to;
    if (isLastSegmentDigitAdded && Number(segmentValue) > Number(maxSegmentValue)) {
      // 2|0:00 => Type 9 => 2|0:00
      return {
        validatedTimeString: '',
        updatedTimeSelection: [from, to]
      }; // prevent changes
    }
    const {
      validatedSegmentValue,
      prefixedZeroesCount
    } = padWithZeroesUntilValid(segmentValue, `${maxSegmentValue}`);
    paddedZeroes += prefixedZeroesCount;
    validatedTimeSegments[segmentName] = validatedSegmentValue;
  }
  const [trailingSegmentSeparator = ''] = timeString.match(TRAILING_TIME_SEGMENT_SEPARATOR_REG) || [];
  const validatedTimeString = toTimeString(validatedTimeSegments) + trailingSegmentSeparator;
  const addedDateSegmentSeparators = Math.max(validatedTimeString.length - timeString.length, 0);
  return {
    validatedTimeString,
    updatedTimeSelection: [from + paddedZeroes + addedDateSegmentSeparators, to + paddedZeroes + addedDateSegmentSeparators]
  };
}
function isDateTimeStringComplete(dateTimeString, dateMode, timeMode) {
  return dateTimeString.length >= dateMode.length + timeMode.length + DATE_TIME_SEPARATOR.length && dateTimeString.split(DATE_TIME_SEPARATOR)[0].split(/\D/).every(segment => !segment.match(/^0+$/));
}
function parseDateTimeString(dateTime, dateModeTemplate) {
  const hasSeparator = dateTime.includes(DATE_TIME_SEPARATOR);
  return [dateTime.slice(0, dateModeTemplate.length), dateTime.slice(hasSeparator ? dateModeTemplate.length + DATE_TIME_SEPARATOR.length : dateModeTemplate.length)];
}
function createMinMaxDateTimePostprocessor({
  dateModeTemplate,
  timeMode,
  min = DEFAULT_MIN_DATE,
  max = DEFAULT_MAX_DATE
}) {
  return ({
    value,
    selection
  }) => {
    const [dateString, timeString] = parseDateTimeString(value, dateModeTemplate);
    const parsedDate = parseDateString(dateString, dateModeTemplate);
    const parsedTime = parseTimeString(timeString);
    if (!isDateTimeStringComplete(value, dateModeTemplate, timeMode)) {
      const fixedDate = raiseSegmentValueToMin(parsedDate, dateModeTemplate);
      const {
        year,
        month,
        day
      } = isDateStringComplete(dateString, dateModeTemplate) ? dateToSegments(clamp(segmentsToDate(fixedDate), min, max)) : fixedDate;
      const fixedValue = toDateString(Object.assign({
        year,
        month,
        day
      }, parsedTime), dateModeTemplate, timeMode);
      const tail = value.slice(fixedValue.length);
      return {
        selection,
        value: fixedValue + tail
      };
    }
    const date = segmentsToDate(parsedDate, parsedTime);
    const clampedDate = clamp(date, min, max);
    const validatedValue = toDateString(dateToSegments(clampedDate), dateModeTemplate, timeMode);
    return {
      selection,
      value: validatedValue
    };
  };
}
function createValidDateTimePreprocessor({
  dateModeTemplate,
  dateSegmentsSeparator
}) {
  const invalidCharsRegExp = new RegExp(`[^\\d${TIME_FIXED_CHARACTERS.map(escapeRegExp).join('')}${escapeRegExp(dateSegmentsSeparator)}]+`);
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    if (data === dateSegmentsSeparator) {
      return {
        elementState,
        data: selection[0] === value.length ? data : ''
      };
    }
    if (POSSIBLE_DATE_TIME_SEPARATOR.includes(data)) {
      return {
        elementState,
        data: DATE_TIME_SEPARATOR
      };
    }
    const newCharacters = data.replace(invalidCharsRegExp, '');
    if (!newCharacters) {
      return {
        elementState,
        data: ''
      };
    }
    const [from, rawTo] = selection;
    let to = rawTo + data.length;
    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);
    const [dateString, timeString] = parseDateTimeString(newPossibleValue, dateModeTemplate);
    let validatedValue = '';
    const hasDateTimeSeparator = newPossibleValue.includes(DATE_TIME_SEPARATOR);
    const {
      validatedDateString,
      updatedSelection
    } = validateDateString({
      dateString,
      dateModeTemplate,
      offset: 0,
      selection: [from, to]
    });
    if (dateString && !validatedDateString) {
      return {
        elementState,
        data: ''
      }; // prevent changes
    }
    to = updatedSelection[1];
    validatedValue += validatedDateString;
    const paddedMaxValues = padTimeSegments(DEFAULT_TIME_SEGMENT_MAX_VALUES);
    const {
      validatedTimeString,
      updatedTimeSelection
    } = validateTimeString({
      timeString,
      paddedMaxValues,
      offset: validatedValue.length + DATE_TIME_SEPARATOR.length,
      selection: [from, to]
    });
    if (timeString && !validatedTimeString) {
      return {
        elementState,
        data: ''
      }; // prevent changes
    }
    to = updatedTimeSelection[1];
    validatedValue += hasDateTimeSeparator ? DATE_TIME_SEPARATOR + validatedTimeString : validatedTimeString;
    const newData = validatedValue.slice(from, to);
    return {
      elementState: {
        selection,
        value: validatedValue.slice(0, from) + newData.split(dateSegmentsSeparator).map(segment => '0'.repeat(segment.length)).join(dateSegmentsSeparator) + validatedValue.slice(to)
      },
      data: newData
    };
  };
}
function maskitoDateTimeOptionsGenerator({
  dateMode,
  timeMode,
  dateSeparator = '.',
  min,
  max
}) {
  const dateModeTemplate = dateMode.split('/').join(dateSeparator);
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: [...Array.from(dateModeTemplate).map(char => char === dateSeparator ? char : /\d/), ...DATE_TIME_SEPARATOR.split(''), ...Array.from(timeMode).map(char => TIME_FIXED_CHARACTERS.includes(char) ? char : /\d/)],
    overwriteMode: 'replace',
    preprocessors: [createZeroPlaceholdersPreprocessor(), normalizeDatePreprocessor({
      dateModeTemplate,
      dateSegmentsSeparator: dateSeparator
    }), createValidDateTimePreprocessor({
      dateModeTemplate,
      dateSegmentsSeparator: dateSeparator
    })],
    postprocessors: [createMinMaxDateTimePostprocessor({
      min,
      max,
      dateModeTemplate,
      timeMode
    })]
  });
}
function generateMaskExpression({
  decimalSeparator,
  isNegativeAllowed,
  precision,
  thousandSeparator,
  prefix,
  postfix,
  decimalPseudoSeparators = [],
  pseudoMinuses = []
}) {
  const computedPrefix = computeAllOptionalCharsRegExp(prefix);
  const digit = '\\d';
  const optionalMinus = isNegativeAllowed ? `[${CHAR_MINUS}${pseudoMinuses.map(x => `\\${x}`).join('')}]?` : '';
  const integerPart = thousandSeparator ? `[${digit}${escapeRegExp(thousandSeparator).replace(/\s/g, '\\s')}]*` : `[${digit}]*`;
  const decimalPart = precision > 0 ? `([${escapeRegExp(decimalSeparator)}${decimalPseudoSeparators.map(escapeRegExp).join('')}]${digit}{0,${Number.isFinite(precision) ? precision : ''}})?` : '';
  const computedPostfix = computeAllOptionalCharsRegExp(postfix);
  return new RegExp(`^${computedPrefix}${optionalMinus}${integerPart}${decimalPart}${computedPostfix}$`);
}
function computeAllOptionalCharsRegExp(str) {
  return str ? `${str.split('').map(char => `${escapeRegExp(char)}?`).join('')}` : '';
}
function maskitoParseNumber(maskedNumber, decimalSeparator = '.') {
  const hasNegativeSign = !!maskedNumber.match(new RegExp(`^\\D*[${CHAR_MINUS}\\${CHAR_HYPHEN}${CHAR_EN_DASH}${CHAR_EM_DASH}]`));
  const unmaskedNumber = maskedNumber.replace(new RegExp(`[^\\d${escapeRegExp(decimalSeparator)}]`, 'g'), '').replace(decimalSeparator, '.');
  return unmaskedNumber ? Number((hasNegativeSign ? CHAR_HYPHEN : '') + unmaskedNumber) : NaN;
}

/**
 * Convert number to string with replacing exponent part on decimals
 *
 * @param value the number
 * @return string representation of a number
 */
function stringifyNumberWithoutExp(value) {
  const valueAsString = String(value);
  const [numberPart, expPart] = valueAsString.split('e-');
  let valueWithoutExp = valueAsString;
  if (expPart) {
    const [, fractionalPart] = numberPart.split('.');
    const decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);
    valueWithoutExp = value.toFixed(decimalDigits);
  }
  return valueWithoutExp;
}
function validateDecimalPseudoSeparators({
  decimalSeparator,
  thousandSeparator,
  decimalPseudoSeparators = DEFAULT_DECIMAL_PSEUDO_SEPARATORS
}) {
  return decimalPseudoSeparators.filter(char => char !== thousandSeparator && char !== decimalSeparator);
}

/**
 * If `decimalZeroPadding` is `true`, it pads decimal part with zeroes
 * (until number of digits after decimalSeparator is equal to the `precision`).
 * @example 1,42 => (`precision` is equal to 4) => 1,4200.
 */

function createDecimalZeroPaddingPostprocessor({
  decimalSeparator,
  precision,
  decimalZeroPadding,
  postfix
}) {
  if (precision <= 0 || !decimalZeroPadding) {
    return index_esm_identity;
  }
  const trailingPostfixRegExp = new RegExp(`${escapeRegExp(postfix)}$`);
  return ({
    value,
    selection
  }) => {
    if (Number.isNaN(maskitoParseNumber(value, decimalSeparator))) {
      return {
        value,
        selection
      };
    }
    const [integerPart, decimalPart = ''] = value.replace(trailingPostfixRegExp, '').split(decimalSeparator);
    return {
      value: integerPart + decimalSeparator + decimalPart.padEnd(precision, '0') + postfix,
      selection
    };
  };
}

/**
 * This preprocessor works only once at initialization phase (when `new Maskito(...)` is executed).
 * This preprocessor helps to avoid conflicts during transition from one mask to another (for the same input).
 * For example, the developer changes postfix (or other mask's props) during run-time.
 * ```
 * let maskitoOptions = maskitoNumberOptionsGenerator({postfix: ' year'});
 * // [3 seconds later]
 * maskitoOptions = maskitoNumberOptionsGenerator({postfix: ' years'});
 * ```
 */

function createInitializationOnlyPreprocessor({
  decimalSeparator,
  decimalPseudoSeparators,
  pseudoMinuses
}) {
  let isInitializationPhase = true;
  const cleanNumberMask = generateMaskExpression({
    decimalSeparator,
    decimalPseudoSeparators,
    pseudoMinuses,
    prefix: '',
    postfix: '',
    thousandSeparator: '',
    precision: Infinity,
    isNegativeAllowed: true
  });
  return ({
    elementState,
    data
  }) => {
    if (!isInitializationPhase) {
      return {
        elementState,
        data
      };
    }
    isInitializationPhase = false;
    return {
      elementState: index_esm_maskitoTransform(elementState, {
        mask: cleanNumberMask
      }),
      data
    };
  };
}

/**
 * It removes repeated leading zeroes for integer part.
 * @example 0,|00005 => Backspace => |5
 * @example -0,|00005 => Backspace => -|5
 * @example User types "000000" => 0|
 * @example 0| => User types "5" => 5|
 */

function createLeadingZeroesValidationPostprocessor(decimalSeparator, thousandSeparator) {
  const trimLeadingZeroes = value => {
    const escapedThousandSeparator = escapeRegExp(thousandSeparator);
    return value.replace(
    // all leading zeroes followed by another zero
    new RegExp(`^(\\D+)?[0${escapedThousandSeparator}]+(?=0)`), '$1').replace(
    // zero followed by not-zero digit
    new RegExp(`^(\\D+)?[0${escapedThousandSeparator}]+(?=[1-9])`), '$1');
  };
  const countTrimmedZeroesBefore = (value, index) => {
    const valueBefore = value.slice(0, index);
    const followedByZero = value.slice(index).startsWith('0');
    return valueBefore.length - trimLeadingZeroes(valueBefore).length + (followedByZero ? 1 : 0);
  };
  return ({
    value,
    selection
  }) => {
    const [from, to] = selection;
    const hasDecimalSeparator = value.includes(decimalSeparator);
    const [integerPart, decimalPart = ''] = value.split(decimalSeparator);
    const zeroTrimmedIntegerPart = trimLeadingZeroes(integerPart);
    if (integerPart === zeroTrimmedIntegerPart) {
      return {
        value,
        selection
      };
    }
    const newFrom = from - countTrimmedZeroesBefore(value, from);
    const newTo = to - countTrimmedZeroesBefore(value, to);
    return {
      value: zeroTrimmedIntegerPart + (hasDecimalSeparator ? decimalSeparator : '') + decimalPart,
      selection: [Math.max(newFrom, 0), Math.max(newTo, 0)]
    };
  };
}

/**
 * This postprocessor is connected with {@link createMinMaxPlugin}:
 * both validate `min`/`max` bounds of entered value (but at the different point of time).
 */

function createMinMaxPostprocessor({
  min,
  max,
  decimalSeparator
}) {
  return ({
    value,
    selection
  }) => {
    const parsedNumber = maskitoParseNumber(value, decimalSeparator);
    const limitedValue =
    /**
     * We cannot limit lower bound if user enters positive number.
     * The same for upper bound and negative number.
     * ___
     * @example (min = 5)
     * Empty input => Without this condition user cannot type 42 (the first digit will be rejected)
     * ___
     * @example (max = -10)
     * Value is -10 => Without this condition user cannot delete 0 to enter another digit
     */
    parsedNumber > 0 ? Math.min(parsedNumber, max) : Math.max(parsedNumber, min);
    if (!Number.isNaN(parsedNumber) && limitedValue !== parsedNumber) {
      const newValue = `${limitedValue}`.replace('.', decimalSeparator).replace(CHAR_HYPHEN, CHAR_MINUS);
      return {
        value: newValue,
        selection: [newValue.length, newValue.length]
      };
    }
    return {
      value,
      selection
    };
  };
}

/**
 * Manage caret-navigation when user "deletes" non-removable digits or separators
 * @example 1,|42 => Backspace => 1|,42 (only if `decimalZeroPadding` is `true`)
 * @example 1|,42 => Delete => 1,|42 (only if `decimalZeroPadding` is `true`)
 * @example 0,|00 => Delete => 0,0|0 (only if `decimalZeroPadding` is `true`)
 * @example 1 |000 => Backspace => 1| 000 (always)
 */
function createNonRemovableCharsDeletionPreprocessor({
  decimalSeparator,
  thousandSeparator,
  decimalZeroPadding
}) {
  return ({
    elementState,
    data
  }, actionType) => {
    const {
      value,
      selection
    } = elementState;
    const [from, to] = selection;
    const selectedCharacters = value.slice(from, to);
    const nonRemovableSeparators = decimalZeroPadding ? [decimalSeparator, thousandSeparator] : [thousandSeparator];
    const areNonRemovableZeroesSelected = decimalZeroPadding && from > value.indexOf(decimalSeparator) && Boolean(selectedCharacters.match(/^0+$/gi));
    if (actionType !== 'deleteBackward' && actionType !== 'deleteForward' || !nonRemovableSeparators.includes(selectedCharacters) && !areNonRemovableZeroesSelected) {
      return {
        elementState,
        data
      };
    }
    return {
      elementState: {
        value,
        selection: actionType === 'deleteForward' ? [to, to] : [from, from]
      },
      data
    };
  };
}

/**
 * It pads integer part with zero if user types decimal separator (for empty input).
 * @example Empty input => User types "," (decimal separator) => 0,|
 */

function createNotEmptyIntegerPartPreprocessor({
  decimalSeparator,
  precision
}) {
  const startWithDecimalSepRegExp = new RegExp(`^\\D*${escapeRegExp(decimalSeparator)}`);
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    const [from] = selection;
    if (precision <= 0 || value.includes(decimalSeparator) || !data.match(startWithDecimalSepRegExp)) {
      return {
        elementState,
        data
      };
    }
    const digitsBeforeCursor = value.slice(0, from).match(/\d+/);
    return {
      elementState,
      data: digitsBeforeCursor ? data : `0${data}`
    };
  };
}

/**
 * It replaces pseudo characters with valid one.
 * @example User types '.' (but separator is equal to comma) => dot is replaced with comma.
 * @example User types hyphen / en-dash / em-dash => it is replaced with minus.
 */
function createPseudoCharactersPreprocessor(validCharacter, pseudoCharacters) {
  const pseudoCharactersRegExp = new RegExp(`[${pseudoCharacters.join('')}]`, 'gi');
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    return {
      elementState: {
        selection,
        value: value.replace(pseudoCharactersRegExp, validCharacter)
      },
      data: data.replace(pseudoCharactersRegExp, validCharacter)
    };
  };
}

/**
 * It rejects new typed decimal separator if it already exists in text field.
 * Behaviour is similar to native <input type="number"> (Chrome).
 * @example 1|23,45 => Press comma (decimal separator) => 1|23,45 (do nothing).
 */

function createRepeatedDecimalSeparatorPreprocessor(decimalSeparator) {
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    const [from, to] = selection;
    return {
      elementState,
      data: !value.includes(decimalSeparator) || value.slice(from, to + 1).includes(decimalSeparator) ? data : data.replace(new RegExp(escapeRegExp(decimalSeparator), 'gi'), '')
    };
  };
}

/**
 * It adds symbol for separating thousands.
 * @example 1000000 => (thousandSeparator is equal to space) => 1 000 000.
 */

function createThousandSeparatorPostprocessor({
  thousandSeparator,
  decimalSeparator,
  prefix,
  postfix
}) {
  if (!thousandSeparator) {
    return index_esm_identity;
  }
  const prefixReg = new RegExp(`^${escapeRegExp(prefix)}${CHAR_MINUS}?`);
  const postfixReg = new RegExp(`${escapeRegExp(postfix)}$`);
  const isAllSpaces = (...chars) => chars.every(x => /\s/.test(x));
  return ({
    value,
    selection
  }) => {
    const [integerPart, decimalPart = ''] = value.split(decimalSeparator);
    const [initialFrom, initialTo] = selection;
    let [from, to] = selection;
    const cleanIntegerPart = integerPart.replace(prefixReg, '').replace(postfixReg, '');
    const [integerPartPrefix = ''] = integerPart.match(prefixReg) || [];
    const [integerPartPostfix = ''] = integerPart.match(postfixReg) || [];
    const processedIntegerPart = Array.from(cleanIntegerPart).reduceRight((formattedValuePart, char, i) => {
      const isLeadingThousandSeparator = !i && char === thousandSeparator;
      const isPositionForSeparator = !isLeadingThousandSeparator && formattedValuePart.length && (formattedValuePart.length + 1) % 4 === 0;
      if (isPositionForSeparator && (char === thousandSeparator || isAllSpaces(char, thousandSeparator))) {
        return thousandSeparator + formattedValuePart;
      }
      if (char === thousandSeparator && !isPositionForSeparator) {
        if (i && i <= initialFrom) {
          from--;
        }
        if (i && i <= initialTo) {
          to--;
        }
        return formattedValuePart;
      }
      if (!isPositionForSeparator) {
        return char + formattedValuePart;
      }
      if (i <= initialFrom) {
        from++;
      }
      if (i <= initialTo) {
        to++;
      }
      return char + thousandSeparator + formattedValuePart;
    }, '');
    return {
      value: integerPartPrefix + processedIntegerPart + integerPartPostfix + (value.includes(decimalSeparator) ? decimalSeparator : '') + decimalPart,
      selection: [from, to]
    };
  };
}

/**
 * It drops decimal part if precision is zero.
 * @example User pastes '123.45' (but precision is zero) => 123
 */

function createZeroPrecisionPreprocessor(precision, decimalSeparator) {
  if (precision > 0) {
    return index_esm_identity;
  }
  const decimalPartRegExp = new RegExp(`${escapeRegExp(decimalSeparator)}.*$`, 'g');
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    const [from, to] = selection;
    const newValue = value.replace(decimalPartRegExp, '');
    return {
      elementState: {
        selection: [Math.min(from, newValue.length), Math.min(to, newValue.length)],
        value: newValue
      },
      data: data.replace(decimalPartRegExp, '')
    };
  };
}
const DUMMY_SELECTION = [0, 0];
/**
 * It removes repeated leading zeroes for integer part on blur-event.
 * @example 000000 => blur => 0
 * @example 00005 => blur => 5
 */

function createLeadingZeroesValidationPlugin(decimalSeparator, thousandSeparator) {
  const dropRepeatedLeadingZeroes = createLeadingZeroesValidationPostprocessor(decimalSeparator, thousandSeparator);
  return maskitoEventHandler('blur', element => {
    const newValue = dropRepeatedLeadingZeroes({
      value: element.value,
      selection: DUMMY_SELECTION
    }, {
      value: '',
      selection: DUMMY_SELECTION
    }).value;
    if (element.value !== newValue) {
      element.value = newValue;
      element.dispatchEvent(new Event('input'));
    }
  }, {
    capture: true
  });
}

/**
 * This plugin is connected with {@link createMinMaxPostprocessor}:
 * both validate `min`/`max` bounds of entered value (but at the different point of time).
 */

function createMinMaxPlugin({
  min,
  max,
  decimalSeparator
}) {
  return maskitoEventHandler('blur', (element, options) => {
    const parsedNumber = maskitoParseNumber(element.value, decimalSeparator);
    const clampedNumber = clamp(parsedNumber, min, max);
    if (!Number.isNaN(parsedNumber) && parsedNumber !== clampedNumber) {
      element.value = index_esm_maskitoTransform(stringifyNumberWithoutExp(clampedNumber), options);
      element.dispatchEvent(new Event('input'));
    }
  }, {
    capture: true
  });
}

/**
 * It pads EMPTY integer part with zero if decimal parts exists.
 * It works on blur event only!
 * @example 1|,23 => Backspace => Blur => 0,23
 */

function createNotEmptyIntegerPlugin(decimalSeparator) {
  return maskitoEventHandler('blur', element => {
    const newValue = element.value.replace(new RegExp(`^(\\D+)?${escapeRegExp(decimalSeparator)}`), `$10${decimalSeparator}`);
    if (newValue !== element.value) {
      element.value = newValue;
      element.dispatchEvent(new Event('input'));
    }
  }, {
    capture: true
  });
}
function maskitoNumberOptionsGenerator({
  max = Number.MAX_SAFE_INTEGER,
  min = Number.MIN_SAFE_INTEGER,
  precision = 0,
  thousandSeparator = index_esm_CHAR_NO_BREAK_SPACE,
  decimalSeparator = '.',
  decimalPseudoSeparators,
  decimalZeroPadding = false,
  prefix = '',
  postfix = ''
} = {}) {
  const pseudoMinuses = [CHAR_HYPHEN, CHAR_EN_DASH, CHAR_EM_DASH].filter(char => char !== thousandSeparator && char !== decimalSeparator);
  const validatedDecimalPseudoSeparators = validateDecimalPseudoSeparators({
    decimalSeparator,
    thousandSeparator,
    decimalPseudoSeparators
  });
  return Object.assign(Object.assign({}, index_esm_MASKITO_DEFAULT_OPTIONS), {
    mask: generateMaskExpression({
      decimalSeparator,
      precision,
      thousandSeparator,
      prefix,
      postfix,
      isNegativeAllowed: min < 0
    }),
    preprocessors: [createInitializationOnlyPreprocessor({
      decimalSeparator,
      decimalPseudoSeparators: validatedDecimalPseudoSeparators,
      pseudoMinuses
    }), createPseudoCharactersPreprocessor(CHAR_MINUS, pseudoMinuses), createPseudoCharactersPreprocessor(decimalSeparator, validatedDecimalPseudoSeparators), createNotEmptyIntegerPartPreprocessor({
      decimalSeparator,
      precision
    }), createNonRemovableCharsDeletionPreprocessor({
      decimalSeparator,
      decimalZeroPadding,
      thousandSeparator
    }), createZeroPrecisionPreprocessor(precision, decimalSeparator), createRepeatedDecimalSeparatorPreprocessor(decimalSeparator)],
    postprocessors: [createMinMaxPostprocessor({
      decimalSeparator,
      min,
      max
    }), maskitoPrefixPostprocessorGenerator(prefix), maskitoPostfixPostprocessorGenerator(postfix), createThousandSeparatorPostprocessor({
      decimalSeparator,
      thousandSeparator,
      prefix,
      postfix
    }), createDecimalZeroPaddingPostprocessor({
      decimalSeparator,
      decimalZeroPadding,
      precision,
      postfix
    })],
    plugins: [createLeadingZeroesValidationPlugin(decimalSeparator, thousandSeparator), createNotEmptyIntegerPlugin(decimalSeparator), createMinMaxPlugin({
      min,
      max,
      decimalSeparator
    })],
    overwriteMode: decimalZeroPadding ? ({
      value,
      selection: [from]
    }) => from <= value.indexOf(decimalSeparator) ? 'shift' : 'replace' : 'shift'
  });
}
function createMaxValidationPreprocessor(timeSegmentMaxValues) {
  const paddedMaxValues = padTimeSegments(timeSegmentMaxValues);
  const invalidCharsRegExp = new RegExp(`[^\\d${TIME_FIXED_CHARACTERS.map(escapeRegExp).join('')}]+`);
  return ({
    elementState,
    data
  }, actionType) => {
    if (actionType === 'deleteBackward' || actionType === 'deleteForward') {
      return {
        elementState,
        data
      };
    }
    const {
      value,
      selection
    } = elementState;
    if (actionType === 'validation') {
      const {
        validatedTimeString,
        updatedTimeSelection
      } = validateTimeString({
        timeString: value,
        paddedMaxValues,
        offset: 0,
        selection
      });
      return {
        elementState: {
          value: validatedTimeString,
          selection: updatedTimeSelection
        },
        data
      };
    }
    const newCharacters = data.replace(invalidCharsRegExp, '');
    const [from, rawTo] = selection;
    let to = rawTo + newCharacters.length; // to be conformed with `overwriteMode: replace`

    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);
    const {
      validatedTimeString,
      updatedTimeSelection
    } = validateTimeString({
      timeString: newPossibleValue,
      paddedMaxValues,
      offset: 0,
      selection: [from, to]
    });
    if (newPossibleValue && !validatedTimeString) {
      return {
        elementState,
        data: ''
      }; // prevent changes
    }
    to = updatedTimeSelection[1];
    const newData = validatedTimeString.slice(from, to);
    return {
      elementState: {
        selection,
        value: validatedTimeString.slice(0, from) + '0'.repeat(newData.length) + validatedTimeString.slice(to)
      },
      data: newData
    };
  };
}
function maskitoTimeOptionsGenerator({
  mode,
  timeSegmentMaxValues = {}
}) {
  const enrichedTimeSegmentMaxValues = Object.assign(Object.assign({}, DEFAULT_TIME_SEGMENT_MAX_VALUES), timeSegmentMaxValues);
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: Array.from(mode).map(char => TIME_FIXED_CHARACTERS.includes(char) ? char : /\d/),
    preprocessors: [createZeroPlaceholdersPreprocessor(), createMaxValidationPreprocessor(enrichedTimeSegmentMaxValues)],
    overwriteMode: 'replace'
  });
}

;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-utils-format.js



/**
 * Capitalizes a given string, replacing it with a lowercase string and making
 * the first letter of each word uppercase.
 *
 * @param value the input string
 * @return the capitalized string
 */
function tuiCapitalize(value) {
  return value.toLowerCase().replace(/(?:^|\s)\S/g, char => char.toUpperCase());
}
function taiga_ui_core_utils_format_tuiCapitalizeFirstLetter(value) {
  return `${value.charAt(0).toUpperCase()}${value.slice(1)}`;
}

/**
 * Convert number to string with replacing exponent part on decimals
 *
 * @param value the number
 * @return string representation of a number
 */
function tuiNumberToStringWithoutExp(value) {
  const valueAsString = String(value);
  const [numberPart, expPart] = valueAsString.split('e-');
  let valueWithoutExp = valueAsString;
  if (expPart) {
    const [, fractionalPart] = numberPart.split('.');
    const decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);
    valueWithoutExp = value.toFixed(decimalDigits);
  }
  return valueWithoutExp;
}

/**
 * Return fractional part of number
 *
 * @param value the number
 * @param precision number of digits of decimal part, null to keep untouched
 * @return the fractional part of number
 */
function tuiGetFractionPartPadded(value, precision) {
  const [, fractionPartPadded = ''] = tuiNumberToStringWithoutExp(value).split('.');
  return (0,taiga_ui_cdk_utils_miscellaneous/* tuiIsNumber */.sZ)(precision) ? fractionPartPadded.slice(0, Math.max(0, precision)) : fractionPartPadded;
}

/**
 * Formats number adding a thousand separators and correct decimal separator
 * padding decimal part with zeroes to given length
 *
 * @param value the input number
 * @param settings See {@link TuiNumberFormatSettings}
 * @return the formatted string
 */
function tuiFormatNumber(value, settings = {}) {
  const {
    decimalLimit,
    decimalSeparator,
    thousandSeparator,
    zeroPadding,
    rounding
  } = Object.assign(Object.assign({}, taiga_ui_core_constants/* TUI_DEFAULT_NUMBER_FORMAT */.RK), settings);
  const rounded = Number.isFinite(decimalLimit) ? (0,taiga_ui_cdk_utils_math/* tuiRoundWith */.Vj)({
    value,
    precision: decimalLimit,
    method: rounding
  }) : value;
  const integerPartString = String(Math.floor(Math.abs(rounded)));
  let fractionPartPadded = tuiGetFractionPartPadded(rounded, decimalLimit);
  if (Number.isFinite(decimalLimit)) {
    if (zeroPadding) {
      const zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);
      const zeroPartString = '0'.repeat(zeroPaddingSize);
      fractionPartPadded = `${fractionPartPadded}${zeroPartString}`;
    } else {
      fractionPartPadded = fractionPartPadded.replace(/0*$/, '');
    }
  }
  const remainder = integerPartString.length % 3;
  const sign = value < 0 ? taiga_ui_cdk_constants/* CHAR_HYPHEN */.SD : '';
  let result = sign + integerPartString.charAt(0);
  for (let i = 1; i < integerPartString.length; i++) {
    if (i % 3 === remainder && integerPartString.length > 3) {
      result += thousandSeparator;
    }
    result += integerPartString.charAt(i);
  }
  return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;
}

/**
 * TODO: delete in v4.0
 * @deprecated Use {@link https://maskito.dev/core-concepts/transformer maskitoTransform} instead<br/>
 * @example
 * import {maskitoTransform} from '@maskito/core';
 *
 * const mask = {
 *     mask: ['+', '1', ' ', /\d/, /\d/, /\d/, ')', ' ', /\d/, /\d/, /\d/, '-', /\d/, /\d/, /\d/, /\d/],
 * };
 * maskitoTransform('12125552368', mask); // +1 (212) 555-2368
 * ___
 * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,
 * adding parentheses and hyphens.
 *
 * @param value the input string
 * @param countryCode a country code
 * @param phoneMask a phone number mask
 * @return the formatted phone string of the form +7 XXX XXX-XX-XX
 */
function tuiFormatPhone(value, countryCode, phoneMask) {
  if (!value) {
    return '';
  }
  let result = countryCode;
  countryCode = countryCode.replace(/[()]/g, '');
  if (!value.startsWith(countryCode)) {
    value = countryCode + value.replace(CHAR_PLUS, '');
  }
  const splitPhoneMask = phoneMask.split('');
  const splitValue = value.slice(countryCode.length).split('');
  result += ' ';
  if (splitValue.length === 0) {
    return result;
  }
  for (const mask of splitPhoneMask) {
    if (splitValue.length === 0) {
      break;
    }
    if (mask === '#') {
      result += splitValue[0] || '';
      splitValue.splice(0, 1);
    } else {
      result += mask;
    }
  }
  return result;
}
function tuiOtherDecimalSymbol(symbol) {
  return symbol === '.' ? ',' : '.';
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-utils-format.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-value-accessor.js



let TuiValueAccessorDirective = /*#__PURE__*/(() => {
  class TuiValueAccessorDirective {}
  TuiValueAccessorDirective.ɵfac = function TuiValueAccessorDirective_Factory(t) {
    return new (t || TuiValueAccessorDirective)();
  };
  TuiValueAccessorDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiValueAccessorDirective,
    selectors: [["", "tuiValueAccessor", ""]],
    features: [core_mjs_["ɵɵProvidersFeature"]([TUI_VALUE_ACCESSOR_PROVIDER])]
  });
  return TuiValueAccessorDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiValueAccessorModule = /*#__PURE__*/(() => {
  class TuiValueAccessorModule {}
  TuiValueAccessorModule.ɵfac = function TuiValueAccessorModule_Factory(t) {
    return new (t || TuiValueAccessorModule)();
  };
  TuiValueAccessorModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiValueAccessorModule
  });
  TuiValueAccessorModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiValueAccessorModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-directives-value-accessor.js.map
;// CONCATENATED MODULE: ./node_modules/@maskito/angular/fesm2015/maskito-angular.js






let MaskitoCva = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class MaskitoCva {
    constructor(accessor) {
      this.accessor = accessor;
      this.maskito = MASKITO_DEFAULT_OPTIONS;
      const original = accessor.writeValue.bind(accessor);
      accessor.writeValue = value => {
        var _a;
        original(maskitoTransform(String(value !== null && value !== void 0 ? value : ''), (_a = this.maskito) !== null && _a !== void 0 ? _a : MASKITO_DEFAULT_OPTIONS));
      };
    }
  }
  MaskitoCva.ɵfac = function MaskitoCva_Factory(t) {
    return new (t || MaskitoCva)(i0.ɵɵdirectiveInject(i1.DefaultValueAccessor));
  };
  MaskitoCva.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: MaskitoCva,
    selectors: [["input", "maskito", ""], ["textarea", "maskito", ""]],
    hostBindings: function MaskitoCva_HostBindings(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵlistener("input", function MaskitoCva_input_HostBindingHandler($event) {
          return ctx.accessor._handleInput($event.target.value);
        })("blur", function MaskitoCva_blur_HostBindingHandler() {
          return ctx.accessor.onTouched();
        })("compositionstart", function MaskitoCva_compositionstart_HostBindingHandler() {
          return ctx.accessor._compositionStart();
        })("compositionend", function MaskitoCva_compositionend_HostBindingHandler($event) {
          return ctx.accessor._compositionEnd($event.target.value);
        });
      }
    },
    inputs: {
      maskito: "maskito"
    },
    features: [i0.ɵɵProvidersFeature([DefaultValueAccessor, {
      provide: NG_VALUE_ACCESSOR,
      multi: true,
      useExisting: DefaultValueAccessor
    }])]
  });
  return MaskitoCva;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let MaskitoDirective = /*#__PURE__*/(() => {
  class MaskitoDirective {
    constructor(ngZone, elementRef) {
      this.ngZone = ngZone;
      this.elementRef = elementRef;
      this.maskedElement = null;
      this.maskito = index_esm_MASKITO_DEFAULT_OPTIONS;
      this.maskitoElement = MASKITO_DEFAULT_ELEMENT_PREDICATE;
    }
    ngOnChanges() {
      var _a;
      return (0,tslib_es6/* __awaiter */.sH)(this, void 0, void 0, function* () {
        (_a = this.maskedElement) === null || _a === void 0 ? void 0 : _a.destroy();
        const predicate = this.maskitoElement;
        const predicateResult = yield predicate(this.elementRef.nativeElement);
        if (this.maskitoElement !== predicate) {
          // Ignore the result of the predicate if the
          // maskito element has changed before the predicate was resolved.
          return;
        }
        this.ngZone.runOutsideAngular(() => {
          var _a;
          this.maskedElement = new Maskito(predicateResult, (_a = this.maskito) !== null && _a !== void 0 ? _a : index_esm_MASKITO_DEFAULT_OPTIONS);
        });
      });
    }
    ngOnDestroy() {
      var _a;
      (_a = this.maskedElement) === null || _a === void 0 ? void 0 : _a.destroy();
    }
  }
  MaskitoDirective.ɵfac = function MaskitoDirective_Factory(t) {
    return new (t || MaskitoDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
  };
  MaskitoDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: MaskitoDirective,
    selectors: [["", "maskito", ""]],
    inputs: {
      maskito: "maskito",
      maskitoElement: "maskitoElement"
    },
    features: [core_mjs_["ɵɵNgOnChangesFeature"]]
  });
  return MaskitoDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let MaskitoPipe = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class MaskitoPipe {
    transform(value, maskitoOptions) {
      return maskitoTransform(String(value !== null && value !== void 0 ? value : ''), maskitoOptions !== null && maskitoOptions !== void 0 ? maskitoOptions : MASKITO_DEFAULT_OPTIONS);
    }
  }
  MaskitoPipe.ɵfac = function MaskitoPipe_Factory(t) {
    return new (t || MaskitoPipe)();
  };
  MaskitoPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({
    name: "maskito",
    type: MaskitoPipe,
    pure: true
  });
  return MaskitoPipe;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let MaskitoModule = /*#__PURE__*/(() => {
  class MaskitoModule {}
  MaskitoModule.ɵfac = function MaskitoModule_Factory(t) {
    return new (t || MaskitoModule)();
  };
  MaskitoModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: MaskitoModule
  });
  MaskitoModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return MaskitoModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=maskito-angular.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-number.js



















/** Default values for the input number options. */
const taiga_ui_kit_components_input_number_c0 = ["*", [["input"]], [["tuiContent"]]];
const taiga_ui_kit_components_input_number_c1 = ["*", "input", "tuiContent"];
function TuiInputNumberComponent_div_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r2 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r2, " ");
  }
}
function TuiInputNumberComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 6);
    core_mjs_["ɵɵtemplate"](1, TuiInputNumberComponent_div_4_ng_container_1_Template, 2, 1, "ng-container", 7);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    core_mjs_["ɵɵnextContext"]();
    const valueContent_r3 = core_mjs_["ɵɵreference"](9);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", valueContent_r3);
  }
}
function TuiInputNumberComponent_section_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "section", 8)(1, "button", 9);
    core_mjs_["ɵɵlistener"]("click.prevent", function TuiInputNumberComponent_section_5_Template_button_click_prevent_1_listener() {
      core_mjs_["ɵɵrestoreView"](_r4);
      const ctx_r4 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r4.onArrow(ctx_r4.step));
    })("mousedown.prevent", function TuiInputNumberComponent_section_5_Template_button_mousedown_prevent_1_listener() {
      core_mjs_["ɵɵrestoreView"](_r4);
      const ctx_r4 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r4.nativeFocusableElement == null ? null : ctx_r4.nativeFocusableElement.focus());
    });
    core_mjs_["ɵɵtext"](2, " + ");
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵelementStart"](3, "button", 9);
    core_mjs_["ɵɵlistener"]("click.prevent", function TuiInputNumberComponent_section_5_Template_button_click_prevent_3_listener() {
      core_mjs_["ɵɵrestoreView"](_r4);
      const ctx_r4 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r4.onArrow(-ctx_r4.step));
    })("mousedown.prevent", function TuiInputNumberComponent_section_5_Template_button_mousedown_prevent_3_listener() {
      core_mjs_["ɵɵrestoreView"](_r4);
      const ctx_r4 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r4.nativeFocusableElement == null ? null : ctx_r4.nativeFocusableElement.focus());
    });
    core_mjs_["ɵɵtext"](4, " - ");
    core_mjs_["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const ctx_r4 = core_mjs_["ɵɵnextContext"]();
    const textfield_r6 = core_mjs_["ɵɵreference"](1);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("appearance", textfield_r6.appearance)("disabled", !ctx_r4.canIncrement)("focusable", false)("icon", ctx_r4.options.icons.up);
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("appearance", textfield_r6.appearance)("disabled", !ctx_r4.canDecrement)("focusable", false)("icon", ctx_r4.options.icons.down);
  }
}
function TuiInputNumberComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiInputNumberComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵprojection"](0, 2);
  }
}
const TUI_INPUT_NUMBER_DEFAULT_OPTIONS = {
  icons: {
    up: 'tuiIconPlus',
    down: 'tuiIconMinus'
  },
  min: Number.MIN_SAFE_INTEGER,
  max: Number.MAX_SAFE_INTEGER,
  step: 0,
  decimal: 'not-zero',
  precision: 2
};
/**
 * Default parameters for input count component
 */
const TUI_INPUT_NUMBER_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_INPUT_NUMBER_DEFAULT_OPTIONS);
function tuiInputNumberOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_NUMBER_OPTIONS, options, TUI_INPUT_NUMBER_DEFAULT_OPTIONS);
}
const DEFAULT_MAX_LENGTH = 18;
const TUI_NUMBER_VALUE_TRANSFORMER = new core_mjs_.InjectionToken('');
let TuiInputNumberComponent = /*#__PURE__*/(() => {
  class TuiInputNumberComponent extends taiga_ui_cdk_abstract/* AbstractTuiNullableControl */.jc {
    constructor(control, cdr, transformer, options, numberFormat, isIOS, textfieldSize, controller) {
      super(control, cdr, transformer);
      this.options = options;
      this.numberFormat = numberFormat;
      this.isIOS = isIOS;
      this.textfieldSize = textfieldSize;
      this.controller = controller;
      this.unfinishedValue = '';
      this.min = this.options.min;
      this.max = this.options.max;
      this.decimal = this.options.decimal;
      this.precision = this.options.precision;
      this.step = this.options.step;
      /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
      this.prefix = '';
      /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
      this.postfix = '';
      this.polymorpheusValueContent = taiga_ui_cdk_constants/* EMPTY_QUERY */.xQ;
    }
    get size() {
      return this.textfieldSize.size;
    }
    get computedMin() {
      return this.computeMin(this.min, this.max);
    }
    get computedMax() {
      return this.computeMax(this.min, this.max);
    }
    get nativeFocusableElement() {
      return !this.textfield || this.computedDisabled ? null : this.textfield.nativeFocusableElement;
    }
    get focused() {
      var _a;
      return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
    }
    get isNegativeAllowed() {
      return this.computedMin < 0;
    }
    get inputMode() {
      if (this.isIOS && this.isNegativeAllowed) {
        // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'
        return 'text';
      }
      return this.decimal === 'never' ? 'numeric' : 'decimal';
    }
    get calculatedMaxLength() {
      const decimalPart = this.decimal !== 'never' && this.nativeValue.includes(this.numberFormat.decimalSeparator);
      const precision = decimalPart ? Math.min(this.precision + 1, 20) : 0;
      const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;
      return DEFAULT_MAX_LENGTH + precision + takeThousand;
    }
    get formattedValue() {
      return this.value !== null ? this.getFormattedValue(this.value || 0) : '';
    }
    get computedValue() {
      return this.focused ? this.nativeValue : this.formattedValue;
    }
    get canDecrement() {
      return this.interactive && (this.value || 0) > this.computedMin;
    }
    get canIncrement() {
      return this.interactive && (this.value || 0) < this.computedMax;
    }
    get computedPrefix() {
      return this.prefix || this.controller.prefix;
    }
    get computedPostfix() {
      const postfix = this.postfix || this.controller.postfix;
      return postfix && ` ${postfix}`;
    }
    get mask() {
      return this.calculateMask(this.precision, this.decimal, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, this.computedMin, this.computedMax, this.computedPrefix, this.computedPostfix);
    }
    onArrow(step) {
      if (!step) {
        return;
      }
      this.value = (0,taiga_ui_cdk_utils_math/* tuiClamp */.wN)((this.value || 0) + step, this.computedMin, this.computedMax);
      this.nativeValue = this.formattedValue;
    }
    onValueChange(nativeValue) {
      const parsedValue = maskitoParseNumber(nativeValue, this.numberFormat.decimalSeparator);
      this.unfinishedValue = null;
      if (Number.isNaN(parsedValue)) {
        this.value = null;
        return;
      }
      if (this.isNativeValueNotFinished) {
        this.unfinishedValue = nativeValue;
        return;
      }
      if (parsedValue < this.computedMin || parsedValue > this.computedMax) {
        return;
      }
      this.value = parsedValue;
    }
    onFocused(focused) {
      this.updateFocused(focused);
      const nativeNumberValue = this.unfinishedValue ? maskitoParseNumber(this.unfinishedValue, this.numberFormat.decimalSeparator) : this.nativeNumberValue;
      this.unfinishedValue = null;
      if (Number.isNaN(nativeNumberValue)) {
        this.nativeValue = focused ? this.computedPrefix + this.computedPostfix : '';
        this.value = null;
        return;
      }
      if (!focused) {
        this.value = nativeNumberValue;
        this.nativeValue = this.formattedValue;
      }
    }
    getFormattedValue(value) {
      const absValue = Math.abs(value);
      const hasFraction = absValue % 1 > 0;
      let decimalLimit = this.decimal === 'always' || hasFraction && this.decimal !== 'never' ? this.precision : 0;
      const fraction = hasFraction ? tuiGetFractionPartPadded(value, this.precision) : '';
      if (this.focused && this.decimal !== 'always') {
        decimalLimit = fraction.length;
      }
      return this.computedPrefix + tuiFormatNumber(value, Object.assign(Object.assign({}, this.numberFormat), {
        decimalLimit
      })).replace(taiga_ui_cdk_constants/* CHAR_HYPHEN */.SD, taiga_ui_cdk_constants/* CHAR_MINUS */.el) + this.computedPostfix;
    }
    get isNativeValueNotFinished() {
      const nativeNumberValue = this.nativeNumberValue;
      return nativeNumberValue < 0 ? nativeNumberValue > this.computedMax : nativeNumberValue < this.computedMin;
    }
    get nativeValue() {
      var _a;
      return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || '';
    }
    set nativeValue(value) {
      if (!this.textfield || !this.nativeFocusableElement) {
        return;
      }
      this.textfield.value = value;
      this.nativeFocusableElement.value = value;
    }
    writeValue(value) {
      super.writeValue(value);
      this.nativeValue = this.formattedValue;
    }
    get nativeNumberValue() {
      return maskitoParseNumber(this.nativeValue, this.numberFormat.decimalSeparator);
    }
    computeMin(min, max) {
      var _a, _b, _c, _d, _e, _f;
      return Math.min((_c = (_b = (_a = this.valueTransformer) === null || _a === void 0 ? void 0 : _a.fromControlValue(min)) !== null && _b !== void 0 ? _b : min) !== null && _c !== void 0 ? _c : this.options.min, (_f = (_e = (_d = this.valueTransformer) === null || _d === void 0 ? void 0 : _d.fromControlValue(max)) !== null && _e !== void 0 ? _e : max) !== null && _f !== void 0 ? _f : this.options.max);
    }
    computeMax(min, max) {
      var _a, _b, _c, _d, _e, _f;
      return Math.max((_c = (_b = (_a = this.valueTransformer) === null || _a === void 0 ? void 0 : _a.fromControlValue(min)) !== null && _b !== void 0 ? _b : min) !== null && _c !== void 0 ? _c : this.options.min, (_f = (_e = (_d = this.valueTransformer) === null || _d === void 0 ? void 0 : _d.fromControlValue(max)) !== null && _e !== void 0 ? _e : max) !== null && _f !== void 0 ? _f : this.options.max);
    }
    calculateMask(precision, decimalMode, decimalSeparator, thousandSeparator, min, max, prefix, postfix) {
      const _a = maskitoNumberOptionsGenerator({
          decimalSeparator,
          thousandSeparator,
          min,
          max,
          prefix,
          postfix,
          precision: decimalMode === 'never' ? 0 : precision,
          decimalZeroPadding: decimalMode === 'always'
        }),
        {
          plugins
        } = _a,
        options = (0,tslib_es6/* __rest */.Tt)(_a, ["plugins"]);
      return Object.assign(Object.assign({}, options), {
        plugins: [...plugins, maskitoCaretGuard(value => [prefix.length, value.length - postfix.length])]
      });
    }
  }
  TuiInputNumberComponent.ɵfac = function TuiInputNumberComponent_Factory(t) {
    return new (t || TuiInputNumberComponent)(core_mjs_["ɵɵdirectiveInject"](fesm2022_forms/* NgControl */.vO, 10), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](TUI_NUMBER_VALUE_TRANSFORMER, 8), core_mjs_["ɵɵdirectiveInject"](TUI_INPUT_NUMBER_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_NUMBER_FORMAT */.t9), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_IOS */.mg), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_SIZE), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_WATCHED_CONTROLLER));
  };
  TuiInputNumberComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiInputNumberComponent,
    selectors: [["tui-input-number"]],
    contentQueries: function TuiInputNumberComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.polymorpheusValueContent = _t);
      }
    },
    viewQuery: function TuiInputNumberComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](TuiPrimitiveTextfieldComponent, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.textfield = _t.first);
      }
    },
    hostVars: 1,
    hostBindings: function TuiInputNumberComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("keydown.arrowDown", function TuiInputNumberComponent_keydown_arrowDown_HostBindingHandler() {
          return ctx.onArrow(-ctx.step);
        })("keydown.arrowUp", function TuiInputNumberComponent_keydown_arrowUp_HostBindingHandler() {
          return ctx.onArrow(ctx.step);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-size", ctx.size);
      }
    },
    inputs: {
      min: "min",
      max: "max",
      decimal: "decimal",
      precision: "precision",
      step: "step",
      prefix: "prefix",
      postfix: "postfix"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_cdk_tokens/* tuiAsFocusableItemAccessor */.Jr)(TuiInputNumberComponent), (0,taiga_ui_cdk_abstract/* tuiAsControl */.SN)(TuiInputNumberComponent), TEXTFIELD_CONTROLLER_PROVIDER]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: taiga_ui_kit_components_input_number_c1,
    decls: 10,
    vars: 14,
    consts: [["textfield", ""], ["valueContent", ""], ["tuiTextfieldPostfix", "", "tuiTextfieldPrefix", "", "tuiValueAccessor", "", 1, "t-textfield", 3, "focusedChange", "valueChange", "disabled", "focusable", "invalid", "maskito", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "value"], ["ngProjectAs", "tuiContent", "class", "t-value-content", 5, ["tuiContent"], 4, "ngIf"], ["class", "t-buttons", 4, "ngIf"], [4, "ngIf"], ["ngProjectAs", "tuiContent", 5, ["tuiContent"], 1, "t-value-content"], [4, "polymorpheusOutlet"], [1, "t-buttons"], ["size", "s", "tuiIconButton", "", "type", "button", 1, "t-button", 3, "click.prevent", "mousedown.prevent", "appearance", "disabled", "focusable", "icon"]],
    template: function TuiInputNumberComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = core_mjs_["ɵɵgetCurrentView"]();
        core_mjs_["ɵɵprojectionDef"](taiga_ui_kit_components_input_number_c0);
        core_mjs_["ɵɵelementStart"](0, "tui-primitive-textfield", 2, 0);
        core_mjs_["ɵɵlistener"]("focusedChange", function TuiInputNumberComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onFocused($event));
        })("valueChange", function TuiInputNumberComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onValueChange($event));
        });
        core_mjs_["ɵɵprojection"](2);
        core_mjs_["ɵɵprojection"](3, 1, ["ngProjectAs", "input", 5, ["input"]]);
        core_mjs_["ɵɵtemplate"](4, TuiInputNumberComponent_div_4_Template, 2, 1, "div", 3);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](5, TuiInputNumberComponent_section_5_Template, 5, 8, "section", 4)(6, TuiInputNumberComponent_ng_container_6_Template, 1, 0, "ng-container", 5);
        core_mjs_["ɵɵpipe"](7, "async");
        core_mjs_["ɵɵtemplate"](8, TuiInputNumberComponent_ng_template_8_Template, 1, 0, "ng-template", null, 1, core_mjs_["ɵɵtemplateRefExtractor"]);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("disabled", ctx.computedDisabled)("focusable", ctx.focusable)("invalid", ctx.computedInvalid)("maskito", ctx.mask)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("value", ctx.computedValue);
        core_mjs_["ɵɵadvance"](4);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.polymorpheusValueContent.length);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.step);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](7, 12, ctx.polymorpheusValueContent.changes));
      }
    },
    dependencies: [TuiPrimitiveTextfieldComponent, taiga_ui_core_components_button/* TuiButtonComponent */.SM, TuiPrimitiveTextfieldDirective, TuiTextfieldPostfixDirective, TuiTextfieldPrefixDirective, TuiValueAccessorDirective, MaskitoDirective, common_mjs_.NgIf, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{display:flex;border-radius:var(--tui-radius-m);text-align:left}.t-textfield[_ngcontent-%COMP%]{flex:1;max-width:100%;border-radius:inherit;text-align:inherit}.t-textfield[_ngcontent-%COMP%]:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.t-value-content[_ngcontent-%COMP%]{width:100%}.t-buttons[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:stretch;margin-left:.125rem;border-radius:inherit}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]{flex-direction:row-reverse}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]:first-child{margin:0 0 0 .125rem;border-top-right-radius:inherit;border-bottom-right-radius:inherit}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]:last-child{border-radius:0}[data-size=m][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{width:calc(var(--tui-height-m) * .75)}[data-size=l][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{width:calc(var(--tui-height-l) * .75)}.t-button[_ngcontent-%COMP%]{display:flex;flex:1;height:auto;border-radius:0}.t-button[_ngcontent-%COMP%]:first-child{margin-bottom:.125rem;border-top-right-radius:inherit}.t-button[_ngcontent-%COMP%]:last-child{border-bottom-right-radius:inherit}"],
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiInputNumberComponent.prototype, "computeMin", null);
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiInputNumberComponent.prototype, "computeMax", null);
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiInputNumberComponent.prototype, "calculateMask", null);
  return TuiInputNumberComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiInputNumberDirective = /*#__PURE__*/(() => {
  class TuiInputNumberDirective extends taiga_ui_core_abstract/* AbstractTuiTextfieldHost */.aX {
    get value() {
      return this.host.computedValue;
    }
    onValueChange(value) {
      this.host.onValueChange(value);
    }
    ngDoCheck() {
      if (!this.host.nativeFocusableElement) {
        return;
      }
      this.host.nativeFocusableElement.inputMode = this.host.inputMode;
      this.host.nativeFocusableElement.maxLength = this.host.nativeFocusableElement.maxLength > 0 ? this.host.nativeFocusableElement.maxLength : this.host.calculatedMaxLength;
    }
  }
  TuiInputNumberDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiInputNumberDirective_BaseFactory;
    return function TuiInputNumberDirective_Factory(t) {
      return (ɵTuiInputNumberDirective_BaseFactory || (ɵTuiInputNumberDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiInputNumberDirective)))(t || TuiInputNumberDirective);
    };
  })();
  TuiInputNumberDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiInputNumberDirective,
    selectors: [["tui-input-number"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_tokens/* tuiAsTextfieldHost */.Sc)(TuiInputNumberDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiInputNumberDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiInputNumberModule = /*#__PURE__*/(() => {
  class TuiInputNumberModule {}
  TuiInputNumberModule.ɵfac = function TuiInputNumberModule_Factory(t) {
    return new (t || TuiInputNumberModule)();
  };
  TuiInputNumberModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiInputNumberModule
  });
  TuiInputNumberModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, MaskitoModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, taiga_ui_core_components_button/* TuiButtonModule */.Pv]]
  });
  return TuiInputNumberModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-input-number.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input.js










const taiga_ui_kit_components_input_c0 = ["*", [["input"]]];
const taiga_ui_kit_components_input_c1 = ["*", "input"];
let TuiInputComponent = /*#__PURE__*/(() => {
  class TuiInputComponent extends taiga_ui_cdk_abstract/* AbstractTuiControl */.Er {
    constructor(control, cdr, textfieldSize, valueTransformer) {
      super(control, cdr, valueTransformer);
      this.textfieldSize = textfieldSize;
      this.open = false;
    }
    get size() {
      return this.textfieldSize.size;
    }
    get nativeFocusableElement() {
      return this.computedDisabled || !this.textfield ? null : this.textfield.nativeFocusableElement;
    }
    get focused() {
      return (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(this.nativeFocusableElement) || !!this.hostedDropdown && this.hostedDropdown.focused;
    }
    get canOpen() {
      return this.interactive && !!this.datalist;
    }
    onValueChange(value) {
      this.value = value;
      this.open = true;
    }
    onActiveZone(active) {
      this.updateFocused(active);
    }
    handleOption(item) {
      this.setNativeValue(String(item));
      this.focusInput();
      this.value = String(item);
      this.open = false;
    }
    getFallbackValue() {
      return '';
    }
    focusInput(preventScroll = false) {
      if (this.nativeFocusableElement) {
        this.nativeFocusableElement.focus({
          preventScroll
        });
      }
    }
    setNativeValue(value) {
      if (this.nativeFocusableElement) {
        this.nativeFocusableElement.value = value;
      }
    }
  }
  TuiInputComponent.ɵfac = function TuiInputComponent_Factory(t) {
    return new (t || TuiInputComponent)(core_mjs_["ɵɵdirectiveInject"](fesm2022_forms/* NgControl */.vO, 10), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](TUI_TEXTFIELD_SIZE), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_abstract/* AbstractTuiValueTransformer */.bu, 8));
  };
  TuiInputComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiInputComponent,
    selectors: [["tui-input"]],
    contentQueries: function TuiInputComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiDataListDirective, 5, core_mjs_.TemplateRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.datalist = _t.first);
      }
    },
    viewQuery: function TuiInputComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](TuiHostedDropdownComponent, 5);
        core_mjs_["ɵɵviewQuery"](TuiPrimitiveTextfieldComponent, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.hostedDropdown = _t.first);
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.textfield = _t.first);
      }
    },
    hostVars: 1,
    hostBindings: function TuiInputComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-size", ctx.size);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([TUI_VALUE_ACCESSOR_PROVIDER, (0,taiga_ui_cdk_tokens/* tuiAsFocusableItemAccessor */.Jr)(TuiInputComponent), (0,taiga_ui_core_tokens/* tuiAsDataListHost */.PU)(TuiInputComponent), (0,taiga_ui_cdk_abstract/* tuiAsControl */.SN)(TuiInputComponent)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: taiga_ui_kit_components_input_c1,
    decls: 4,
    vars: 11,
    consts: [[1, "t-hosted", 3, "openChange", "tuiActiveZoneChange", "canOpen", "content", "open"], ["automation-id", "tui-input__textfield", 1, "t-textfield", 3, "valueChange", "disabled", "focusable", "invalid", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "value"]],
    template: function TuiInputComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"](taiga_ui_kit_components_input_c0);
        core_mjs_["ɵɵelementStart"](0, "tui-hosted-dropdown", 0);
        core_mjs_["ɵɵtwoWayListener"]("openChange", function TuiInputComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
          core_mjs_["ɵɵtwoWayBindingSet"](ctx.open, $event) || (ctx.open = $event);
          return $event;
        });
        core_mjs_["ɵɵlistener"]("tuiActiveZoneChange", function TuiInputComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
          return ctx.onActiveZone($event);
        });
        core_mjs_["ɵɵelementStart"](1, "tui-primitive-textfield", 1);
        core_mjs_["ɵɵlistener"]("valueChange", function TuiInputComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
          return ctx.onValueChange($event);
        });
        core_mjs_["ɵɵprojection"](2);
        core_mjs_["ɵɵprojection"](3, 1, ["ngProjectAs", "input", 5, ["input"]]);
        core_mjs_["ɵɵelementEnd"]()();
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("canOpen", ctx.canOpen)("content", ctx.datalist || "");
        core_mjs_["ɵɵtwoWayProperty"]("open", ctx.open);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("disabled", ctx.computedDisabled)("focusable", ctx.computedFocusable)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("value", ctx.value);
      }
    },
    dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, TuiPrimitiveTextfieldDirective],
    styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}"],
    changeDetection: 0
  });
  return TuiInputComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiInputDirective = /*#__PURE__*/(() => {
  class TuiInputDirective extends taiga_ui_core_abstract/* AbstractTuiTextfieldHost */.aX {
    onValueChange(value) {
      this.host.onValueChange(value);
    }
  }
  TuiInputDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiInputDirective_BaseFactory;
    return function TuiInputDirective_Factory(t) {
      return (ɵTuiInputDirective_BaseFactory || (ɵTuiInputDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](TuiInputDirective)))(t || TuiInputDirective);
    };
  })();
  TuiInputDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiInputDirective,
    selectors: [["tui-input"]],
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_core_tokens/* tuiAsTextfieldHost */.Sc)(TuiInputDirective)]), core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiInputDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiInputModule = /*#__PURE__*/(() => {
  class TuiInputModule {}
  TuiInputModule.ɵfac = function TuiInputModule_Factory(t) {
    return new (t || TuiInputModule)();
  };
  TuiInputModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiInputModule
  });
  TuiInputModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule]]
  });
  return TuiInputModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-input.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/pairwise.js
var pairwise = __webpack_require__(3946);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-accordion.js














const taiga_ui_kit_components_accordion_c0 = ["focusableElement"];
const taiga_ui_kit_components_accordion_c1 = ["*", [["", "tuiAccordionItemContent", ""]]];
const taiga_ui_kit_components_accordion_c2 = ["*", "[tuiAccordionItemContent]"];
function TuiAccordionItemComponent_ng_container_5_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 9);
  }
  if (rf & 2) {
    const src_r2 = ctx.polymorpheusOutlet;
    const ctx_r2 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵclassProp"]("t-icon_open", ctx_r2.open);
    core_mjs_["ɵɵproperty"]("src", src_r2);
  }
}
function TuiAccordionItemComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiAccordionItemComponent_ng_container_5_tui_svg_1_Template, 1, 3, "tui-svg", 8);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r2.options.iconLarge);
  }
}
function TuiAccordionItemComponent_ng_template_7_div_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r4, " ");
  }
}
function TuiAccordionItemComponent_ng_template_7_div_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 11);
    core_mjs_["ɵɵtemplate"](1, TuiAccordionItemComponent_ng_template_7_div_0_ng_container_1_Template, 2, 1, "ng-container", 12);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r2.lazyContent);
  }
}
function TuiAccordionItemComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵtemplate"](0, TuiAccordionItemComponent_ng_template_7_div_0_Template, 2, 1, "div", 10);
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("ngIf", ctx_r2.lazyContent);
  }
}
function TuiAccordionItemComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 13);
    core_mjs_["ɵɵprojection"](1, 1);
    core_mjs_["ɵɵelementEnd"]();
  }
}
const taiga_ui_kit_components_accordion_c3 = [[["tui-accordion-item"]]];
const taiga_ui_kit_components_accordion_c4 = ["tui-accordion-item"];
let TuiAccordionItemContentDirective = /*#__PURE__*/(() => {
  class TuiAccordionItemContentDirective extends tinkoff_ng_polymorpheus/* PolymorpheusTemplate */.A7 {
    constructor(templateRef, cdr) {
      super(templateRef, cdr);
    }
  }
  TuiAccordionItemContentDirective.ɵfac = function TuiAccordionItemContentDirective_Factory(t) {
    return new (t || TuiAccordionItemContentDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.TemplateRef, 2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef));
  };
  TuiAccordionItemContentDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiAccordionItemContentDirective,
    selectors: [["ng-template", "tuiAccordionItemContent", ""]],
    features: [core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiAccordionItemContentDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAccordionItemEagerContentDirective = /*#__PURE__*/(() => {
  class TuiAccordionItemEagerContentDirective {}
  TuiAccordionItemEagerContentDirective.ɵfac = function TuiAccordionItemEagerContentDirective_Factory(t) {
    return new (t || TuiAccordionItemEagerContentDirective)();
  };
  TuiAccordionItemEagerContentDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiAccordionItemEagerContentDirective,
    selectors: [["", "tuiAccordionItemContent", "", 5, "ng-template"]]
  });
  return TuiAccordionItemEagerContentDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAccordionItemComponent = /*#__PURE__*/(() => {
  class TuiAccordionItemComponent extends taiga_ui_cdk_abstract/* AbstractTuiInteractive */.Xb {
    constructor(cdr, mode$, options) {
      super();
      this.cdr = cdr;
      this.mode$ = mode$;
      this.options = options;
      this.noPadding = false;
      this.showArrow = true;
      this.borders = 'all';
      this.size = 'm';
      this.disabled = false;
      this.disableHover = false;
      this.open = false;
      this.async = false;
      this.openChange = new core_mjs_.EventEmitter();
    }
    get nativeFocusableElement() {
      return this.disabled || !this.focusableElement ? null : this.focusableElement.nativeElement;
    }
    get focused() {
      return (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(this.nativeFocusableElement);
    }
    onFocused(focused) {
      this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
      this.updateFocusVisible(focusVisible);
    }
    onRowToggle() {
      if (!this.disabled) {
        this.updateOpen(!this.open);
      }
    }
    onItemKeyDownEsc(event) {
      if (!this.open) {
        return;
      }
      event.stopPropagation();
      this.updateOpen(false);
    }
    close() {
      this.updateOpen(false);
      this.cdr.markForCheck();
    }
    updateOpen(open) {
      if (this.open === open) {
        return;
      }
      this.open = open;
      this.openChange.emit(open);
    }
  }
  TuiAccordionItemComponent.ɵfac = function TuiAccordionItemComponent_Factory(t) {
    return new (t || TuiAccordionItemComponent)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_MODE */.fL), core_mjs_["ɵɵdirectiveInject"](taiga_ui_kit_components_arrow_TUI_ARROW_OPTIONS));
  };
  TuiAccordionItemComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiAccordionItemComponent,
    selectors: [["tui-accordion-item"]],
    contentQueries: function TuiAccordionItemComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiAccordionItemEagerContentDirective, 5);
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiAccordionItemContentDirective, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.eagerContent = _t.first);
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.lazyContent = _t.first);
      }
    },
    viewQuery: function TuiAccordionItemComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](taiga_ui_kit_components_accordion_c0, 5);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.focusableElement = _t.first);
      }
    },
    hostVars: 8,
    hostBindings: function TuiAccordionItemComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("$.data-mode.attr", function TuiAccordionItemComponent___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-borders", ctx.borders)("data-size", ctx.size);
        core_mjs_["ɵɵclassProp"]("_no-padding", ctx.noPadding)("_has-arrow", ctx.showArrow)("_disabled", ctx.disabled);
      }
    },
    inputs: {
      noPadding: "noPadding",
      showArrow: "showArrow",
      borders: "borders",
      size: "size",
      disabled: "disabled",
      disableHover: "disableHover",
      open: "open",
      async: "async"
    },
    outputs: {
      openChange: "openChange"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([(0,taiga_ui_cdk_tokens/* tuiAsFocusableItemAccessor */.Jr)(TuiAccordionItemComponent), taiga_ui_core_providers/* MODE_PROVIDER */.si]), core_mjs_["ɵɵInheritDefinitionFeature"]],
    ngContentSelectors: taiga_ui_kit_components_accordion_c2,
    decls: 9,
    vars: 10,
    consts: [["focusableElement", ""], ["automation-id", "tui-accordion__item-wrapper", 1, "t-wrapper"], ["automation-id", "tui-accordion__item-header", "type", "button", 1, "t-header", 3, "click", "keydown.esc", "tuiFocusedChange", "tuiFocusVisibleChange", "disabled", "tuiFocusable"], ["automation-id", "tui-accordion__item-title", 1, "t-title"], [4, "ngIf"], [3, "async", "expanded"], ["tuiExpandContent", ""], ["class", "t-content", 4, "ngIf"], ["automation-id", "tui-accordion__item-arrow", "class", "t-icon", 3, "t-icon_open", "src", 4, "polymorpheusOutlet"], ["automation-id", "tui-accordion__item-arrow", 1, "t-icon", 3, "src"], ["automation-id", "tui-accordion__item-content", "class", "t-content", 4, "ngIf"], ["automation-id", "tui-accordion__item-content", 1, "t-content"], [4, "polymorpheusOutlet"], [1, "t-content"]],
    template: function TuiAccordionItemComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = core_mjs_["ɵɵgetCurrentView"]();
        core_mjs_["ɵɵprojectionDef"](taiga_ui_kit_components_accordion_c1);
        core_mjs_["ɵɵelementStart"](0, "div", 1)(1, "button", 2, 0);
        core_mjs_["ɵɵlistener"]("click", function TuiAccordionItemComponent_Template_button_click_1_listener() {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onRowToggle());
        })("keydown.esc", function TuiAccordionItemComponent_Template_button_keydown_esc_1_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onItemKeyDownEsc($event));
        })("tuiFocusedChange", function TuiAccordionItemComponent_Template_button_tuiFocusedChange_1_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onFocused($event));
        })("tuiFocusVisibleChange", function TuiAccordionItemComponent_Template_button_tuiFocusVisibleChange_1_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onFocusVisible($event));
        });
        core_mjs_["ɵɵelementStart"](3, "span", 3);
        core_mjs_["ɵɵprojection"](4);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](5, TuiAccordionItemComponent_ng_container_5_Template, 2, 1, "ng-container", 4);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](6, "tui-expand", 5);
        core_mjs_["ɵɵtemplate"](7, TuiAccordionItemComponent_ng_template_7_Template, 1, 1, "ng-template", 6)(8, TuiAccordionItemComponent_div_8_Template, 2, 0, "div", 7);
        core_mjs_["ɵɵelementEnd"]()();
      }
      if (rf & 2) {
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵclassProp"]("t-header_hoverable", !ctx.disableHover)("t-header_open", ctx.open);
        core_mjs_["ɵɵproperty"]("disabled", ctx.computedDisabled)("tuiFocusable", ctx.computedFocusable);
        core_mjs_["ɵɵadvance"](4);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showArrow);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("async", ctx.async)("expanded", ctx.open);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.eagerContent);
      }
    },
    dependencies: [taiga_ui_core_components_svg/* TuiSvgComponent */._Y, TuiExpandComponent, TuiFocusableDirective, TuiFocusedDirective, TuiFocusVisibleDirective, common_mjs_.NgIf, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, TuiExpandContentDirective],
    styles: ["[_nghost-%COMP%]{position:relative;display:block;overflow:hidden;border-radius:var(--tui-radius-l)}[data-borders=top-bottom][_nghost-%COMP%]{border-radius:0!important}.t-wrapper[_ngcontent-%COMP%]{position:relative;border-radius:inherit}.t-wrapper[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";box-sizing:border-box;border-radius:inherit;border:1px solid var(--tui-base-04);pointer-events:none}[_nghost-%COMP%]:not([data-borders])   .t-wrapper[_ngcontent-%COMP%]:after{border-width:0}[data-borders=all][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-width:1px}[data-borders=top-bottom][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-left-width:0;border-right-width:0}[data-borders=top][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-left-width:0;border-right-width:0;border-bottom-width:0}[data-borders=bottom][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-left-width:0;border-right-width:0;border-top-width:0}[data-mode=onDark][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-color:var(--tui-base-03)}[data-mode=onLight][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-color:var(--tui-text-01)}._focus-visible[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border:2px solid var(--tui-focus)}[_nghost-%COMP%]:not([data-mode])   .t-wrapper[_ngcontent-%COMP%]{background:var(--tui-base-01)}.t-header[_ngcontent-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;width:100%;font:var(--tui-font-text-l);align-items:center;box-sizing:border-box;border-bottom:1px solid var(--tui-base-04);min-height:var(--tui-height-l);padding:.75rem 1.25rem;color:var(--tui-text-01);cursor:pointer;text-align:left;outline:none}[data-mode=onDark][_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{color:var(--tui-text-01-night);border-color:var(--tui-base-03)}[data-mode=onLight][_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{border-color:var(--tui-text-01)}[_nghost-%COMP%]:not([data-borders])   .t-header[_ngcontent-%COMP%]{border-bottom-width:0;box-shadow:none}._has-arrow[_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{padding-right:.75rem}[data-mode=onDark][_nghost-%COMP%]   .t-header_open[_ngcontent-%COMP%]{background:var(--tui-clear-inverse)}[data-mode=onLight][_nghost-%COMP%]   .t-header_open[_ngcontent-%COMP%]{background:var(--tui-clear)}[data-size=s][_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{font:var(--tui-font-text-m);min-height:var(--tui-height-m);padding:.625rem .75rem .625rem 1rem}._no-padding[_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{padding-left:0;padding-right:0}._disabled[_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{cursor:default}.t-wrapper[_ngcontent-%COMP%]:hover:not([data-mode]) > .t-header_hoverable[_ngcontent-%COMP%]{background:var(--tui-base-02)}.t-wrapper[_ngcontent-%COMP%]:hover[data-mode=onDark] > .t-header_hoverable[_ngcontent-%COMP%]{background:var(--tui-clear-inverse)}.t-wrapper[_ngcontent-%COMP%]:hover[data-mode=onLight] > .t-header_hoverable[_ngcontent-%COMP%]{background:var(--tui-clear)}.t-title[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-right:0;flex-grow:1}._has-arrow[_nghost-%COMP%]   .t-title[_ngcontent-%COMP%]{margin-right:.5rem}.t-icon[_ngcontent-%COMP%]{transition-property:transform,color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;width:1.5rem;height:1.5rem;margin-left:auto;color:var(--tui-base-06)}.t-icon_open[_ngcontent-%COMP%]{transform:rotate(180deg)}[data-mode][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity)}[_nghost-%COMP%]:hover[data-mode]   .t-icon[_ngcontent-%COMP%]{opacity:.8}[data-mode=onDark][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}[data-mode=onLight][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{color:var(--tui-text-01)}[_nghost-%COMP%]:hover:not([data-mode])   .t-icon[_ngcontent-%COMP%]{color:var(--tui-base-07)}.t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-m);padding:1.25rem;word-wrap:break-word}[data-size=s][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-s);padding:1rem}"],
    changeDetection: 0
  });
  return TuiAccordionItemComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAccordionComponent = /*#__PURE__*/(() => {
  class TuiAccordionComponent {
    constructor(destroy$) {
      this.destroy$ = destroy$;
      this.closeOthers = true;
      this.rounded = true;
      this.accordionItems = taiga_ui_cdk_constants/* EMPTY_QUERY */.xQ;
    }
    ngAfterContentInit() {
      const {
        accordionItems
      } = this;
      const rows$ = (0,taiga_ui_cdk_observables/* tuiQueryListChanges */.MJ)(accordionItems);
      const newOpenRow$ = rows$.pipe((0,pairwise/* pairwise */.J)(), (0,operators_map/* map */.T)(([previous, current]) => current.find(item => !previous.includes(item) && item.open)), (0,filter/* filter */.p)(taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj));
      const rowsOpen$ = (0,merge/* merge */.h)(rows$.pipe((0,operators_switchMap/* switchMap */.n)(rows => (0,merge/* merge */.h)(...rows.map(row => row.openChange.pipe((0,filter/* filter */.p)(identity/* identity */.D), (0,operators_map/* map */.T)(() => row)))))), newOpenRow$).pipe((0,filter/* filter */.p)(() => this.closeOthers), (0,takeUntil/* takeUntil */.Q)(this.destroy$));
      rowsOpen$.subscribe(currentRow => {
        accordionItems.forEach(row => {
          if (currentRow !== row) {
            row.close();
          }
        });
      });
    }
  }
  TuiAccordionComponent.ɵfac = function TuiAccordionComponent_Factory(t) {
    return new (t || TuiAccordionComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2));
  };
  TuiAccordionComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiAccordionComponent,
    selectors: [["tui-accordion"]],
    contentQueries: function TuiAccordionComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiAccordionItemComponent, 4);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.accordionItems = _t);
      }
    },
    inputs: {
      closeOthers: "closeOthers",
      rounded: "rounded"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])],
    ngContentSelectors: taiga_ui_kit_components_accordion_c4,
    decls: 2,
    vars: 2,
    consts: [["automation-id", "tui-accordion__group", "orientation", "vertical", "size", "l", "tuiGroup", "", 1, "t-group", 3, "collapsed", "rounded"]],
    template: function TuiAccordionComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"](taiga_ui_kit_components_accordion_c3);
        core_mjs_["ɵɵelementStart"](0, "div", 0);
        core_mjs_["ɵɵprojection"](1);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("collapsed", true)("rounded", ctx.rounded);
      }
    },
    dependencies: [TuiGroupDirective],
    styles: ["[_nghost-%COMP%]{display:block}.t-group[_ngcontent-%COMP%]{display:flex}"],
    changeDetection: 0
  });
  return TuiAccordionComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiAccordionModule = /*#__PURE__*/(() => {
  class TuiAccordionModule {}
  TuiAccordionModule.ɵfac = function TuiAccordionModule_Factory(t) {
    return new (t || TuiAccordionModule)();
  };
  TuiAccordionModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiAccordionModule
  });
  TuiAccordionModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, TuiFocusedModule, TuiFocusVisibleModule, TuiFocusableModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, taiga_ui_core_components_svg/* TuiSvgModule */.vl, TuiGroupModule, TuiExpandModule]]
  });
  return TuiAccordionModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-accordion.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-utils-format.js
/**
 * Converts a string to an HSL color
 * @param value string to convert
 * @return HSL color string
 */
// @bad TODO: convert stringHashToHsl to stringHashToRgb
function tuiStringHashToHsl(value) {
  if (value === '') {
    return '';
  }
  let hash = 0;
  for (let i = 0; i < value.length; i++) {
    hash = value.charCodeAt(i) + ((hash << 5) - hash);
    hash &= hash;
  }
  const hue = hash % 360;
  const saturation = 60 + hash % 5;
  const lightness = 80 + hash % 5;
  return `hsl(${hue},${saturation}%,${lightness}%)`;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-utils-format.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-tag.js














/** Default values for the tag options. */
const taiga_ui_kit_components_tag_c0 = ["input"];
function TuiTagComponent_div_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r1, " ");
  }
}
function TuiTagComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 7);
    core_mjs_["ɵɵtemplate"](1, TuiTagComponent_div_1_ng_container_1_Template, 2, 1, "ng-container", 8);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.leftContent);
  }
}
function TuiTagComponent_tui_loader_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-loader", 9);
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("inheritColor", true)("size", ctx_r1.loaderSize);
  }
}
function TuiTagComponent_tui_svg_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "tui-svg", 10);
    core_mjs_["ɵɵlistener"]("click", function TuiTagComponent_tui_svg_4_Template_tui_svg_click_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r3);
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.remove($event));
    })("mousedown.stop.prevent.silent", function TuiTagComponent_tui_svg_4_Template_tui_svg_mousedown_stop_prevent_silent_0_listener() {
      core_mjs_["ɵɵrestoreView"](_r3);
      return core_mjs_["ɵɵresetView"](0);
    });
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("src", ctx_r1.icons.close);
  }
}
function TuiTagComponent_input_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "input", 11, 0);
    core_mjs_["ɵɵlistener"]("blur", function TuiTagComponent_input_5_Template_input_blur_0_listener() {
      core_mjs_["ɵɵrestoreView"](_r4);
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.onBlur());
    })("keydown", function TuiTagComponent_input_5_Template_input_keydown_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r4);
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.onKeyDown($event));
    })("ngModelChange", function TuiTagComponent_input_5_Template_input_ngModelChange_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r4);
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.onInput($event));
    });
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("ngModel", ctx_r1.editedText);
    core_mjs_["ɵɵattribute"]("maxLength", ctx_r1.maxLength);
  }
}
const TUI_TAG_DEFAULT_OPTIONS = {
  size: 'm',
  status: 'default',
  autoColor: false
};
/**
 * Default parameters for Tag component
 */
const TUI_TAG_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_TAG_DEFAULT_OPTIONS);
function tuiTagOptionsProvider(options) {
  return tuiProvideOptions(TUI_TAG_OPTIONS, options, TUI_TAG_DEFAULT_OPTIONS);
}
let TuiTagComponent = /*#__PURE__*/(() => {
  class TuiTagComponent {
    constructor(el, mode$, options, icons) {
      this.el = el;
      this.mode$ = mode$;
      this.options = options;
      this.icons = icons;
      // TODO: Possibly implement standard focus mechanisms and outline
      this.value = '';
      this.editable = false;
      this.separator = ',';
      this.maxLength = null;
      this.size = this.options.size;
      this.showLoader = false;
      this.status = this.options.status;
      this.hoverable = false;
      this.removable = false;
      this.disabled = false;
      this.autoColor = this.options.autoColor;
      this.edited = new core_mjs_.EventEmitter();
      this.editing = false;
      this.editedText = null;
    }
    set input(input) {
      if (input) {
        input.nativeElement.focus();
      }
    }
    get backgroundColor() {
      return this.autoColor ? tuiStringHashToHsl(this.value) : null;
    }
    get canRemove() {
      return this.removable && !this.disabled && !this.showLoader;
    }
    get displayText() {
      return this.editedText === null ? this.value : this.editedText;
    }
    get loaderSize() {
      return (0,taiga_ui_core_utils_miscellaneous/* tuiSizeBigger */.Wu)(this.size) ? 's' : 'xs';
    }
    edit(event) {
      if (!this.canEdit) {
        return;
      }
      event.preventDefault();
      this.editing = true;
      this.editedText = this.value;
    }
    remove(event) {
      if (!this.canRemove) {
        return;
      }
      event.preventDefault();
      event.stopPropagation();
      this.edited.emit('');
    }
    onInput(value) {
      const newTags = value.split(this.separator);
      if (newTags.length > 1) {
        this.save(String(newTags));
        return;
      }
      this.editedText = value;
    }
    onKeyDown(event) {
      event.stopPropagation();
      switch (event.key.toLowerCase()) {
        case 'enter':
          event.preventDefault();
          this.save(this.editedText || '');
          break;
        case 'escape':
        case 'esc':
          event.preventDefault();
          this.stopEditing();
          this.el.nativeElement.focus();
          break;
        default:
          break;
      }
    }
    onBlur() {
      if (this.editedText !== null) {
        this.save(this.editedText);
      }
    }
    get canEdit() {
      return this.editable && !this.disabled && !this.showLoader;
    }
    stopEditing() {
      this.editing = false;
      this.editedText = null;
    }
    save(value) {
      this.stopEditing();
      this.edited.emit(value.trim());
    }
  }
  TuiTagComponent.ɵfac = function TuiTagComponent_Factory(t) {
    return new (t || TuiTagComponent)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_MODE */.fL), core_mjs_["ɵɵdirectiveInject"](TUI_TAG_OPTIONS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_COMMON_ICONS */._Z));
  };
  TuiTagComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiTagComponent,
    selectors: [["tui-tag"], ["a", "tuiTag", ""], ["button", "tuiTag", ""]],
    viewQuery: function TuiTagComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](taiga_ui_kit_components_tag_c0, 5, core_mjs_.ElementRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.input = _t.first);
      }
    },
    hostVars: 10,
    hostBindings: function TuiTagComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("$.data-mode.attr", function TuiTagComponent___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        })("keydown.enter", function TuiTagComponent_keydown_enter_HostBindingHandler($event) {
          return ctx.edit($event);
        })("keydown.delete", function TuiTagComponent_keydown_delete_HostBindingHandler($event) {
          return ctx.remove($event);
        })("keydown.backspace", function TuiTagComponent_keydown_backspace_HostBindingHandler($event) {
          return ctx.remove($event);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-size", ctx.size)("data-status", ctx.status);
        core_mjs_["ɵɵclassProp"]("_hoverable", ctx.hoverable)("_disabled", ctx.disabled)("_autocolor", ctx.autoColor)("_editing", ctx.editing);
      }
    },
    inputs: {
      value: "value",
      editable: "editable",
      separator: "separator",
      maxLength: "maxLength",
      size: "size",
      showLoader: "showLoader",
      status: "status",
      hoverable: "hoverable",
      removable: "removable",
      disabled: "disabled",
      autoColor: "autoColor",
      leftContent: "leftContent"
    },
    outputs: {
      edited: "edited"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_core_providers/* MODE_PROVIDER */.si])],
    decls: 6,
    vars: 7,
    consts: [["input", ""], [1, "t-tag", 3, "dblclick"], ["class", "t-content", 4, "ngIf"], ["automation-id", "tui-tag__text", 1, "t-text", 3, "textContent"], ["class", "t-content", 3, "inheritColor", "size", 4, "ngIf"], ["automation-id", "tui-tag__remove", "class", "t-icon", 3, "src", "click", "mousedown.stop.prevent.silent", 4, "ngIf"], ["automation-id", "tui-tag__edit", "type", "text", "class", "t-edit", 3, "ngModel", "blur", "keydown", "ngModelChange", 4, "ngIf"], [1, "t-content"], [4, "polymorpheusOutlet"], [1, "t-content", 3, "inheritColor", "size"], ["automation-id", "tui-tag__remove", 1, "t-icon", 3, "click", "mousedown.stop.prevent.silent", "src"], ["automation-id", "tui-tag__edit", "type", "text", 1, "t-edit", 3, "blur", "keydown", "ngModelChange", "ngModel"]],
    template: function TuiTagComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵelementStart"](0, "div", 1);
        core_mjs_["ɵɵlistener"]("dblclick", function TuiTagComponent_Template_div_dblclick_0_listener($event) {
          return ctx.edit($event);
        });
        core_mjs_["ɵɵtemplate"](1, TuiTagComponent_div_1_Template, 2, 1, "div", 2);
        core_mjs_["ɵɵelement"](2, "span", 3);
        core_mjs_["ɵɵtemplate"](3, TuiTagComponent_tui_loader_3_Template, 1, 2, "tui-loader", 4)(4, TuiTagComponent_tui_svg_4_Template, 1, 1, "tui-svg", 5);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](5, TuiTagComponent_input_5_Template, 2, 2, "input", 6);
      }
      if (rf & 2) {
        core_mjs_["ɵɵstyleProp"]("background-color", ctx.backgroundColor);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.leftContent);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("textContent", ctx.displayText);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showLoader);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.canRemove);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.editing);
      }
    },
    dependencies: [taiga_ui_core_components_loader/* TuiLoaderComponent */.jT, taiga_ui_core_components_svg/* TuiSvgComponent */._Y, common_mjs_.NgIf, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, fesm2022_forms/* DefaultValueAccessor */.me, fesm2022_forms/* NgControlStatus */.BC, fesm2022_forms/* NgModel */.vS],
    styles: ["[_nghost-%COMP%]{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:inline-block;font:var(--tui-font-text-s);line-height:1.25rem;max-width:100%;cursor:default;outline:none;text-decoration:none;padding:0;border:0}[_nghost-%COMP%]:after{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";box-sizing:border-box;border-radius:inherit;pointer-events:none}._hoverable[_nghost-%COMP%]:hover[data-status=custom]:after, ._hoverable[_nghost-%COMP%]:active[data-status=custom]:after{background-color:var(--tui-clear)}[_nghost-%COMP%]:focus:after{border:2px solid var(--tui-focus)}[data-size=s][_nghost-%COMP%]{font:var(--tui-font-text-xs);line-height:1.25rem;border-radius:var(--tui-radius-xs)}[data-size=m][_nghost-%COMP%]{border-radius:var(--tui-radius-xs)}[data-size=l][_nghost-%COMP%]{border-radius:var(--tui-radius-s)}[data-status=primary][_nghost-%COMP%]{background-color:var(--tui-primary);color:var(--tui-primary-text)}[data-status=primary]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-primary-hover)}[data-status=primary]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-primary-active)}[data-status=error][_nghost-%COMP%]{background-color:var(--tui-error-bg);color:var(--tui-text-01)}[data-status=error]._hoverable[_nghost-%COMP%]:hover, [data-status=error]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-error-bg-hover)}[data-status=error][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-error-bg-night);color:var(--tui-text-01-night)}[data-status=error][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=error][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-error-bg-night-hover)}[data-status=success][_nghost-%COMP%]{background-color:var(--tui-success-bg);color:var(--tui-text-01)}[data-status=success]._hoverable[_nghost-%COMP%]:hover, [data-status=success]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-success-bg-hover)}[data-status=success][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-success-bg-night);color:var(--tui-text-01-night)}[data-status=success][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=success][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-success-bg-night-hover)}[data-status=warning][_nghost-%COMP%]{background-color:var(--tui-warning-bg);color:var(--tui-text-01)}[data-status=warning]._hoverable[_nghost-%COMP%]:hover, [data-status=warning]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-warning-bg-hover)}[data-status=warning][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-warning-bg-night);color:var(--tui-text-01-night)}[data-status=warning][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=warning][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-warning-bg-night-hover)}[data-status=default][_nghost-%COMP%]{color:var(--tui-text-01-night);background-color:var(--tui-base-06)}[data-status=default][_nghost-%COMP%]:not([data-mode])._hoverable:hover{background-color:var(--tui-base-07)}[data-status=default][_nghost-%COMP%]:not([data-mode])._hoverable:active{background-color:var(--tui-base-08)}[data-status=default][data-mode=onDark][_nghost-%COMP%]{color:var(--tui-text-01-night);background-color:var(--tui-clear-inverse)}[data-status=default][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-clear-inverse-hover)}[data-status=default][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-clear-inverse-active)}[data-status=default][data-mode=onDark][_nghost-%COMP%]:focus:after{border:2px solid var(--tui-base-01)}[data-status=default][data-mode=onLight][_nghost-%COMP%]{background-color:var(--tui-clear);color:var(--tui-text-01)}[data-status=default][data-mode=onLight]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-clear-hover)}[data-status=default][data-mode=onLight]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-clear-active)}._editing[_nghost-%COMP%]{background:transparent!important}._disabled[_nghost-%COMP%]{pointer-events:none;opacity:var(--tui-disabled-opacity)}._hoverable[_nghost-%COMP%]{cursor:pointer}._autocolor[_nghost-%COMP%]{color:#000c}.t-text[_ngcontent-%COMP%]{white-space:pre;overflow:hidden;text-overflow:ellipsis;padding-right:.02em}.t-tag[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;width:auto;align-items:center;font:inherit;border-radius:inherit}[data-size=s][_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{height:1.25rem;padding:0 .375rem}[data-size=m][_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{height:var(--tui-height-xs);padding:0 .5rem}[data-size=l][_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{height:var(--tui-height-s);padding:0 .75rem}._editing[_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{visibility:hidden}.t-edit[_ngcontent-%COMP%]{margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;font:inherit;color:var(--tui-text-01);width:100%;height:100%;box-sizing:border-box;padding:0 .5rem}.t-edit[_ngcontent-%COMP%]:-webkit-autofill, .t-edit[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-edit[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}[data-size=s][_nghost-%COMP%]   .t-edit[_ngcontent-%COMP%]{padding:0 .375rem}[data-size=m][_nghost-%COMP%]   .t-edit[_ngcontent-%COMP%]{padding:0 .5rem}[data-size=l][_nghost-%COMP%]   .t-edit[_ngcontent-%COMP%]{padding:0 .75rem}.t-icon[_ngcontent-%COMP%]{width:1rem;height:100%;cursor:pointer;pointer-events:all;opacity:var(--tui-disabled-opacity);-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:-.25rem;margin-inline-end:-.25rem}.t-icon[_ngcontent-%COMP%]:hover{opacity:1}[data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{-webkit-margin-start:0;margin-inline-start:0}[data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]     svg{transform:scale(.75)}.t-content[_ngcontent-%COMP%]{width:1rem;height:1rem;-webkit-margin-end:.25rem;margin-inline-end:.25rem}"],
    changeDetection: 0
  });
  return TuiTagComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTagModule = /*#__PURE__*/(() => {
  class TuiTagModule {}
  TuiTagModule.ɵfac = function TuiTagModule_Factory(t) {
    return new (t || TuiTagModule)();
  };
  TuiTagModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiTagModule
  });
  TuiTagModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, fesm2022_forms/* FormsModule */.YN, taiga_ui_core_components_svg/* TuiSvgModule */.vl, taiga_ui_core_components_loader/* TuiLoaderModule */.Yc, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ]]
  });
  return TuiTagModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-tag.js.map
// EXTERNAL MODULE: consume shared module (default) @angular/router@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/router/fesm2022/router.mjs)
var router_mjs_ = __webpack_require__(7688);
;// CONCATENATED MODULE: ./node_modules/@ng-web-apis/mutation-observer/fesm2015/ng-web-apis-mutation-observer.js



const MUTATION_OBSERVER_INIT = new core_mjs_.InjectionToken('MutationObserver config');
function booleanAttribute(element, attribute) {
  return element.getAttribute(attribute) !== null || undefined;
}
function mutationObserverInitFactory({
  nativeElement
}) {
  const attributeFilter = nativeElement.getAttribute('attributeFilter');
  return {
    attributeFilter: attributeFilter === null || attributeFilter === void 0 ? void 0 : attributeFilter.split(',').map(attr => attr.trim()),
    attributeOldValue: booleanAttribute(nativeElement, 'attributeOldValue'),
    attributes: booleanAttribute(nativeElement, 'attributes'),
    characterData: booleanAttribute(nativeElement, 'characterData'),
    characterDataOldValue: booleanAttribute(nativeElement, 'characterDataOldValue'),
    childList: booleanAttribute(nativeElement, 'childList'),
    subtree: booleanAttribute(nativeElement, 'subtree')
  };
}
const SafeObserver = typeof MutationObserver !== `undefined` ? MutationObserver : class {
  observe() {}
  disconnect() {}
  takeRecords() {
    return [];
  }
};
let MutationObserverDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class MutationObserverDirective extends SafeObserver {
    constructor({
      nativeElement
    }, config, _1, _2, _3, _4, _5, _6, _7) {
      super(records => {
        this.waMutationObserver.emit(records);
      });
      this.waMutationObserver = new EventEmitter();
      this.observe(nativeElement, config);
    }
    ngOnDestroy() {
      this.disconnect();
    }
  }
  MutationObserverDirective.ɵfac = function MutationObserverDirective_Factory(t) {
    return new (t || MutationObserverDirective)(i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(MUTATION_OBSERVER_INIT), i0.ɵɵinjectAttribute('attributeFilter'), i0.ɵɵinjectAttribute('attributeOldValue'), i0.ɵɵinjectAttribute('attributes'), i0.ɵɵinjectAttribute('characterData'), i0.ɵɵinjectAttribute('characterDataOldValue'), i0.ɵɵinjectAttribute('childList'), i0.ɵɵinjectAttribute('subtree'));
  };
  MutationObserverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: MutationObserverDirective,
    selectors: [["", "waMutationObserver", ""]],
    outputs: {
      waMutationObserver: "waMutationObserver"
    },
    exportAs: ["MutationObserver"],
    features: [i0.ɵɵProvidersFeature([{
      provide: MUTATION_OBSERVER_INIT,
      deps: [ElementRef],
      useFactory: mutationObserverInitFactory
    }]), i0.ɵɵInheritDefinitionFeature]
  });
  return MutationObserverDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let MutationObserverService = /*#__PURE__*/(() => {
  class MutationObserverService extends Observable/* Observable */.c {
    constructor({
      nativeElement
    }, config) {
      super(subscriber => {
        const observer = new MutationObserver(records => {
          subscriber.next(records);
        });
        observer.observe(nativeElement, config);
        return () => {
          observer.disconnect();
        };
      });
    }
  }
  MutationObserverService.ɵfac = function MutationObserverService_Factory(t) {
    return new (t || MutationObserverService)(core_mjs_["ɵɵinject"](core_mjs_.ElementRef), core_mjs_["ɵɵinject"](MUTATION_OBSERVER_INIT));
  };
  MutationObserverService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: MutationObserverService,
    factory: MutationObserverService.ɵfac
  });
  return MutationObserverService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let MutationObserverModule = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class MutationObserverModule {}
  MutationObserverModule.ɵfac = function MutationObserverModule_Factory(t) {
    return new (t || MutationObserverModule)();
  };
  MutationObserverModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({
    type: MutationObserverModule
  });
  MutationObserverModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});
  return MutationObserverModule;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Public API Surface of @ng-web-apis/mutation-observer
 */

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=ng-web-apis-mutation-observer.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-tabs.js






















/**
 * Stream of tab activation events
 */
const taiga_ui_kit_components_tabs_c0 = ["tuiTab", ""];
const taiga_ui_kit_components_tabs_c1 = ["*"];
function TuiTabComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiTabsComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiTabsComponent_tui_underline_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-underline", 2);
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("element", ctx_r0.activeElement);
  }
}
const taiga_ui_kit_components_tabs_c2 = (/* unused pure expression or super */ null && (["vertical", ""]));
function TuiTabsWithMoreComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0);
  }
}
function TuiTabsWithMoreComponent_ng_container_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0, 13);
  }
  if (rf & 2) {
    const item_r2 = core_mjs_["ɵɵnextContext"]().$implicit;
    core_mjs_["ɵɵproperty"]("ngTemplateOutlet", item_r2);
  }
}
function TuiTabsWithMoreComponent_ng_container_4_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div");
    core_mjs_["ɵɵelementContainer"](1, 13);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    const item_r2 = ctx_r2.$implicit;
    const index_r4 = ctx_r2.index;
    const ctx_r4 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵclassProp"]("t-overflown", ctx_r4.isOverflown(index_r4));
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngTemplateOutlet", item_r2);
  }
}
function TuiTabsWithMoreComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiTabsWithMoreComponent_ng_container_4_ng_container_1_Template, 1, 1, "ng-container", 12)(2, TuiTabsWithMoreComponent_ng_container_4_ng_template_2_Template, 2, 3, "ng-template", null, 2, core_mjs_["ɵɵtemplateRefExtractor"]);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const index_r4 = ctx.index;
    const hidden_r6 = core_mjs_["ɵɵreference"](3);
    const ctx_r4 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", index_r4 <= ctx_r4.lastVisibleIndex)("ngIfElse", hidden_r6);
  }
}
function TuiTabsWithMoreComponent_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r7 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r7, " ");
  }
}
function TuiTabsWithMoreComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵtext"](0);
    core_mjs_["ɵɵpipe"](1, "async");
    core_mjs_["ɵɵelement"](2, "tui-svg", 14);
  }
  if (rf & 2) {
    const ctx_r4 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", core_mjs_["ɵɵpipeBind1"](1, 4, ctx_r4.moreWord$), " ");
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵclassProp"]("t-icon_rotated", ctx_r4.open);
    core_mjs_["ɵɵproperty"]("src", ctx_r4.arrowOptions.iconSmall);
  }
}
function TuiTabsWithMoreComponent_ng_template_10_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0, 13);
  }
  if (rf & 2) {
    const item_r12 = core_mjs_["ɵɵnextContext"]().$implicit;
    core_mjs_["ɵɵproperty"]("ngTemplateOutlet", item_r12);
  }
}
function TuiTabsWithMoreComponent_ng_template_10_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "div", 17);
    core_mjs_["ɵɵlistener"]("tui-tab-activate", function TuiTabsWithMoreComponent_ng_template_10_div_2_Template_div_tui_tab_activate_0_listener() {
      const index_r11 = core_mjs_["ɵɵrestoreView"](_r10).index;
      const ctx_r4 = core_mjs_["ɵɵnextContext"](2);
      return core_mjs_["ɵɵresetView"](ctx_r4.onClick(index_r11));
    });
    core_mjs_["ɵɵtemplate"](1, TuiTabsWithMoreComponent_ng_template_10_div_2_ng_container_1_Template, 1, 1, "ng-container", 18);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const index_r11 = ctx.index;
    const ctx_r4 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", ctx_r4.shouldShow(index_r11));
  }
}
function TuiTabsWithMoreComponent_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "div", 15, 3);
    core_mjs_["ɵɵlistener"]("keydown.arrowDown.prevent", function TuiTabsWithMoreComponent_ng_template_10_Template_div_keydown_arrowDown_prevent_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r8);
      const element_r9 = core_mjs_["ɵɵreference"](1);
      const ctx_r4 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r4.onWrapperArrow($event, element_r9, false));
    })("keydown.arrowUp.prevent", function TuiTabsWithMoreComponent_ng_template_10_Template_div_keydown_arrowUp_prevent_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r8);
      const element_r9 = core_mjs_["ɵɵreference"](1);
      const ctx_r4 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r4.onWrapperArrow($event, element_r9, true));
    });
    core_mjs_["ɵɵtemplate"](2, TuiTabsWithMoreComponent_ng_template_10_div_2_Template, 2, 1, "div", 16);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r4 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("ngForOf", ctx_r4.items);
  }
}
function TuiTabsWithMoreComponent_tui_underline_12_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-underline", 19);
  }
  if (rf & 2) {
    const ctx_r4 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("element", ctx_r4.activeElement);
  }
}
const TUI_TAB_EVENT = new core_mjs_.InjectionToken('[TUI_TAB_EVENT]');
const TUI_TAB_ACTIVATE = 'tui-tab-activate';
const TUI_TAB_PROVIDERS = [taiga_ui_cdk_services/* TuiDestroyService */.ew, taiga_ui_cdk_services/* TuiFocusVisibleService */.iF, taiga_ui_core_services/* TuiRouterLinkActiveService */.z3, {
  provide: TUI_TAB_EVENT,
  deps: [core_mjs_.ElementRef, taiga_ui_core_services/* TuiRouterLinkActiveService */.z3, [new core_mjs_.Optional(), MutationObserverService], [new core_mjs_.Optional(), router_mjs_.RouterLinkActive]],
  useFactory: ({
    nativeElement
  }, routerLinkActiveService, mutationObserverService, routerLinkActive) => {
    const mutationObserver = routerLinkActive && mutationObserverService ? mutationObserverService.pipe((0,filter/* filter */.p)(() => routerLinkActive.isActive)) : empty/* EMPTY */.w;
    return (0,merge/* merge */.h)(mutationObserver, routerLinkActiveService.pipe((0,filter/* filter */.p)(identity/* identity */.D)), nativeElement.matches('button') ? (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(nativeElement, 'click') : empty/* EMPTY */.w).pipe((0,operators_map/* map */.T)(() => nativeElement.dispatchEvent(new CustomEvent(TUI_TAB_ACTIVATE, {
      bubbles: true
    }))));
  }
}, taiga_ui_core_providers/* MODE_PROVIDER */.si];
let TuiTabComponent = /*#__PURE__*/(() => {
  class TuiTabComponent {
    constructor(routerLinkActive, el, mode$, event$, margin) {
      this.routerLinkActive = routerLinkActive;
      this.el = el;
      this.mode$ = mode$;
      this.event$ = event$;
      this.margin = margin;
    }
    get isActive() {
      return !!this.routerLinkActive && this.routerLinkActive.isActive;
    }
    ngOnDestroy() {
      if ((0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(this.el.nativeElement)) {
        this.el.nativeElement.blur();
      }
    }
  }
  TuiTabComponent.ɵfac = function TuiTabComponent_Factory(t) {
    return new (t || TuiTabComponent)(core_mjs_["ɵɵdirectiveInject"](router_mjs_.RouterLinkActive, 8), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_MODE */.fL), core_mjs_["ɵɵdirectiveInject"](TUI_TAB_EVENT), core_mjs_["ɵɵdirectiveInject"](TUI_TAB_MARGIN));
  };
  TuiTabComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiTabComponent,
    selectors: [["a", "tuiTab", "", 3, "routerLink", ""], ["a", "tuiTab", "", "routerLink", "", "routerLinkActive", ""], ["button", "tuiTab", ""]],
    hostAttrs: ["type", "button"],
    hostVars: 6,
    hostBindings: function TuiTabComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("$.data-mode.attr", function TuiTabComponent___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵstyleProp"]("cursor", "pointer")("--tui-tab-margin", ctx.margin, "px");
        core_mjs_["ɵɵclassProp"]("_active", ctx.isActive);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"](TUI_TAB_PROVIDERS)],
    attrs: taiga_ui_kit_components_tabs_c0,
    ngContentSelectors: taiga_ui_kit_components_tabs_c1,
    decls: 4,
    vars: 3,
    consts: [[4, "ngIf"], [1, "t-highlight"]],
    template: function TuiTabComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵtemplate"](0, TuiTabComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
        core_mjs_["ɵɵpipe"](1, "async");
        core_mjs_["ɵɵelementStart"](2, "span", 1);
        core_mjs_["ɵɵprojection"](3);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](1, 1, ctx.event$));
      }
    },
    dependencies: [common_mjs_.NgIf, common_mjs_.AsyncPipe],
    styles: ["._underline[_nghost-%COMP%]:hover:not(._active), ._underline   [_nghost-%COMP%]:hover:not(._active){box-shadow:inset 0 -2px var(--tui-base-03)}tui-tabs    > [_nghost-%COMP%]:first-child, tui-tabs    > [_nghost-%COMP%]:first-child, [tuiTabs]    > [_nghost-%COMP%]:first-child, [tuiTabs]    > [_nghost-%COMP%]:first-child, tui-tabs    > :first-child[_nghost-%COMP%], tui-tabs    > :first-child   [_nghost-%COMP%], [tuiTabs]    > :first-child[_nghost-%COMP%], [tuiTabs]    > :first-child   [_nghost-%COMP%]{margin-left:0}[_nghost-%COMP%]{transition-property:color,box-shadow,opacity,background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;position:relative;display:flex;flex-shrink:0;height:100%;box-sizing:border-box;justify-content:space-between;line-height:1.5rem;align-items:center;white-space:nowrap;cursor:pointer;outline:none;color:inherit;margin-left:var(--tui-tab-margin, 1.5rem)}[_nghost-%COMP%]:disabled{opacity:var(--tui-disabled-opacity);pointer-events:none}[_nghost-%COMP%]:not([data-mode])._active{opacity:1;color:var(--tui-text-01);box-shadow:none}[data-mode=onDark][_nghost-%COMP%]{color:#ffffffb8}[data-mode=onDark][_nghost-%COMP%]:hover, [data-mode=onDark]._active[_nghost-%COMP%]{color:#fff}[data-mode=onDark][_nghost-%COMP%]:focus-visible   .t-highlight[_ngcontent-%COMP%]{background:var(--tui-clear-inverse);color:var(--tui-text-01)}[data-mode=onLight][_nghost-%COMP%]{color:var(--tui-text-02)}[data-mode=onLight][_nghost-%COMP%]:hover, [data-mode=onLight]._active[_nghost-%COMP%]{color:var(--tui-text-01)}[data-mode=onLight][_nghost-%COMP%]:focus-visible   .t-highlight[_ngcontent-%COMP%]{background:var(--tui-text-01);color:#fff}[_nghost-%COMP%]:focus-visible   .t-highlight[_ngcontent-%COMP%]{background:var(--tui-selection)}._android[_nghost-%COMP%]{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;height:3rem;flex:1;flex-shrink:0;justify-content:center;margin:0;text-transform:uppercase;color:var(--tui-base-09);opacity:.5;font-size:.875rem;font-weight:500;letter-spacing:-.008125rem;font-family:-apple-system,BlinkMacSystemFont,Roboto,\"Helvetica Neue\",sans-serif}._android[_nghost-%COMP%]:hover{box-shadow:none}._android._active[_nghost-%COMP%]{opacity:1;color:var(--tui-base-09)}._android[_nghost-%COMP%]   .t-highlight[_ngcontent-%COMP%]{width:auto}._ios[_nghost-%COMP%]{height:1.75rem;flex:1;flex-shrink:0;justify-content:center;margin:0;color:var(--tui-base-01);opacity:1;font-size:.8125rem;font-weight:500;letter-spacing:-.005rem;font-family:-apple-system,BlinkMacSystemFont,Roboto,\"Helvetica Neue\",sans-serif}._ios[_nghost-%COMP%]:hover{box-shadow:none}._ios._active[_nghost-%COMP%]{font-size:.875rem;font-weight:600;color:var(--tui-link)}._ios[_nghost-%COMP%]   .t-highlight[_ngcontent-%COMP%]{width:auto}@media (hover: hover){[_nghost-%COMP%]:hover{color:var(--tui-text-01)}}.t-highlight[_ngcontent-%COMP%]{display:inline-flex;width:100%;align-items:center;justify-content:inherit}.t-highlight[_ngcontent-%COMP%]    >*{flex-shrink:0}tui-tabs[data-vertical][_nghost-%COMP%], tui-tabs[data-vertical]   [_nghost-%COMP%], [tuiTabs][data-vertical][_nghost-%COMP%], [tuiTabs][data-vertical]   [_nghost-%COMP%]{min-height:2.75rem;height:auto;white-space:normal;margin:0;text-align:left;padding:.25rem 1.25rem .25rem 0}tui-tabs[data-vertical][_nghost-%COMP%]:after, tui-tabs[data-vertical]   [_nghost-%COMP%]:after, [tuiTabs][data-vertical][_nghost-%COMP%]:after, [tuiTabs][data-vertical]   [_nghost-%COMP%]:after{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;content:\"\";position:absolute;top:0;bottom:0;right:0;width:2px;background:var(--tui-primary);transform:scaleX(0);transform-origin:right}tui-tabs[data-vertical][_nghost-%COMP%]:hover, tui-tabs[data-vertical]   [_nghost-%COMP%]:hover, [tuiTabs][data-vertical][_nghost-%COMP%]:hover, [tuiTabs][data-vertical]   [_nghost-%COMP%]:hover{box-shadow:inset -2px 0 var(--tui-base-03)}tui-tabs[data-vertical]._active[_nghost-%COMP%]:after, tui-tabs[data-vertical]   ._active[_nghost-%COMP%]:after, [tuiTabs][data-vertical]._active[_nghost-%COMP%]:after, [tuiTabs][data-vertical]   ._active[_nghost-%COMP%]:after{transform:none}tui-tabs[data-vertical=\"right\"][_nghost-%COMP%], tui-tabs[data-vertical=\"right\"]   [_nghost-%COMP%], [tuiTabs][data-vertical=\"right\"][_nghost-%COMP%], [tuiTabs][data-vertical=\"right\"]   [_nghost-%COMP%]{text-align:right;padding:.25rem 0 .25rem 1.25rem}tui-tabs[data-vertical=\"right\"][_nghost-%COMP%]:after, tui-tabs[data-vertical=\"right\"]   [_nghost-%COMP%]:after, [tuiTabs][data-vertical=\"right\"][_nghost-%COMP%]:after, [tuiTabs][data-vertical=\"right\"]   [_nghost-%COMP%]:after{right:auto;left:0;transform-origin:left}tui-tabs[data-vertical=\"right\"][_nghost-%COMP%]:hover, tui-tabs[data-vertical=\"right\"]   [_nghost-%COMP%]:hover, [tuiTabs][data-vertical=\"right\"][_nghost-%COMP%]:hover, [tuiTabs][data-vertical=\"right\"]   [_nghost-%COMP%]:hover{box-shadow:inset 2px 0 var(--tui-base-03)}"],
    changeDetection: 0
  });
  return TuiTabComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTabsDirective = /*#__PURE__*/(() => {
  class TuiTabsDirective {
    constructor(el) {
      this.el = el;
      this.activeItemIndex = 0;
      this.activeItemIndexChange = new core_mjs_.EventEmitter();
    }
    get tabs() {
      return Array.from(this.el.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
      return this.tabs[this.activeItemIndex] || null;
    }
    onActivate(event, element) {
      const index = this.tabs.findIndex(tab => tab === element);
      event.stopPropagation();
      if (index === this.activeItemIndex) {
        return;
      }
      this.activeItemIndexChange.emit(index);
      this.activeItemIndex = index;
    }
    moveFocus(current, step) {
      const {
        tabs
      } = this;
      (0,taiga_ui_cdk_utils_focus/* tuiMoveFocus */.yO)(tabs.indexOf(current), tabs, step);
    }
    ngAfterViewChecked() {
      const {
        tabs,
        activeElement
      } = this;
      tabs.forEach(nativeElement => {
        const active = nativeElement === activeElement;
        nativeElement.classList.toggle('_active', active);
        nativeElement.setAttribute('tabIndex', active ? '0' : '-1');
      });
    }
  }
  TuiTabsDirective.ɵfac = function TuiTabsDirective_Factory(t) {
    return new (t || TuiTabsDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
  };
  TuiTabsDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiTabsDirective,
    selectors: [["tui-tabs"], ["nav", "tuiTabs", ""]],
    hostBindings: function TuiTabsDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("tui-tab-activate", function TuiTabsDirective_tui_tab_activate_HostBindingHandler($event) {
          return ctx.onActivate($event, $event.target);
        });
      }
    },
    inputs: {
      activeItemIndex: "activeItemIndex"
    },
    outputs: {
      activeItemIndexChange: "activeItemIndexChange"
    }
  });
  return TuiTabsDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TABS_DEFAULT_OPTIONS = {
  underline: true,
  exposeActive: true,
  itemsLimit: Infinity,
  minMoreWidth: 0
};
/**
 * Default parameters for Tabs component
 */
const TUI_TABS_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_TABS_DEFAULT_OPTIONS);
function tuiTabsOptionsProvider(options) {
  return tuiProvideOptions(TUI_TABS_OPTIONS, options, TUI_TABS_DEFAULT_OPTIONS);
}
let TuiUnderlineComponent = /*#__PURE__*/(() => {
  class TuiUnderlineComponent {
    constructor({
      nativeElement
    }, zone, animationFrame$, mode$) {
      this.zone = zone;
      this.animationFrame$ = animationFrame$;
      this.mode$ = mode$;
      this.el$ = new ReplaySubject/* ReplaySubject */.m(1);
      this.refresh$ = this.el$.pipe((0,operators_switchMap/* switchMap */.n)(element => element ? this.animationFrame$.pipe((0,operators_map/* map */.T)(() => element), (0,taiga_ui_cdk_observables/* tuiZonefree */.rB)(this.zone)) : (0,of.of)(null)), (0,share/* share */.u)());
      this.transition$ = asCallable(this.el$.pipe((0,operators_map/* map */.T)(element => element && 'all'), (0,debounceTime/* debounceTime */.B)(50)));
      this.transform$ = asCallable(this.refresh$.pipe((0,operators_map/* map */.T)(element => element ? `translate3d(${element.offsetLeft}px, 0, 0)` : null)));
      this.width$ = asCallable(this.refresh$.pipe((0,operators_map/* map */.T)(element => (element === null || element === void 0 ? void 0 : element.clientWidth) || 0)));
      nativeElement['$.style.transitionProperty'] = this.transition$;
      nativeElement['$.style.transform'] = this.transform$;
      nativeElement['$.style.width.px'] = this.width$;
    }
    set element(element) {
      this.el$.next(element);
    }
  }
  TuiUnderlineComponent.ɵfac = function TuiUnderlineComponent_Factory(t) {
    return new (t || TuiUnderlineComponent)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.NgZone), core_mjs_["ɵɵdirectiveInject"](ng_web_apis_common/* ANIMATION_FRAME */.dJ), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_MODE */.fL));
  };
  TuiUnderlineComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiUnderlineComponent,
    selectors: [["tui-underline"]],
    hostBindings: function TuiUnderlineComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("$.data-mode.attr", function TuiUnderlineComponent___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        })("$.style.transitionProperty", function TuiUnderlineComponent___style_transitionProperty_HostBindingHandler() {
          return ctx.transition$();
        })("$.style.transform", function TuiUnderlineComponent___style_transform_HostBindingHandler() {
          return ctx.transform$();
        })("$.style.width.px", function TuiUnderlineComponent___style_width_px_HostBindingHandler() {
          return ctx.width$();
        });
      }
    },
    inputs: {
      element: "element"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_core_providers/* MODE_PROVIDER */.si])],
    decls: 0,
    vars: 0,
    template: function TuiUnderlineComponent_Template(rf, ctx) {},
    styles: ["[_nghost-%COMP%]{transition-property:none;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;left:0;height:100%;color:var(--tui-primary);transform:scale(0);box-shadow:inset 0 -.1875rem 0 -.0625rem;pointer-events:none}[data-mode=onDark][_nghost-%COMP%]{color:var(--tui-text-01-night)}[data-mode=onLight][_nghost-%COMP%]{color:var(--tui-text-02)}"],
    changeDetection: 0
  });
  return TuiUnderlineComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTabsComponent = /*#__PURE__*/(() => {
  class TuiTabsComponent {
    constructor(options, el, tabs, cdr, resize$) {
      this.options = options;
      this.el = el;
      this.tabs = tabs;
      this.children = taiga_ui_cdk_constants/* EMPTY_QUERY */.xQ;
      this.underline = this.options.underline;
      resize$.pipe((0,filter/* filter */.p)(() => this.underline)).subscribe(() => {
        cdr.detectChanges();
      });
    }
    /** @deprecated use `activeItemIndex` from {@link TuiTabsDirective} instead */
    get activeItemIndex() {
      return this.tabs.activeItemIndex;
    }
    /** @deprecated use `activeItemIndex` from {@link TuiTabsDirective} instead */
    set activeItemIndex(index) {
      this.tabs.activeItemIndex = index;
    }
    get activeElement() {
      return this.tabs.activeElement;
    }
    onKeyDownArrow(current, step) {
      this.tabs.moveFocus(current, step);
    }
    ngAfterViewChecked() {
      this.scrollTo(this.tabs.activeItemIndex);
    }
    scrollTo(index) {
      const element = this.tabs.tabs[index];
      if (!element) {
        return;
      }
      const {
        offsetLeft,
        offsetWidth
      } = element;
      const {
        nativeElement
      } = this.el;
      if (offsetLeft < nativeElement.scrollLeft) {
        nativeElement.scrollLeft = offsetLeft;
      }
      if (offsetLeft + offsetWidth > nativeElement.scrollLeft + nativeElement.offsetWidth) {
        nativeElement.scrollLeft = offsetLeft + offsetWidth - nativeElement.offsetWidth;
      }
    }
  }
  TuiTabsComponent.ɵfac = function TuiTabsComponent_Factory(t) {
    return new (t || TuiTabsComponent)(core_mjs_["ɵɵdirectiveInject"](TUI_TABS_OPTIONS), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](TuiTabsDirective), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiResizeService */.mC));
  };
  TuiTabsComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiTabsComponent,
    selectors: [["tui-tabs", 3, "vertical", ""], ["nav", "tuiTabs", "", 3, "vertical", ""]],
    contentQueries: function TuiTabsComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiTabComponent, 4);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.children = _t);
      }
    },
    hostVars: 2,
    hostBindings: function TuiTabsComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵlistener"]("keydown.arrowRight.prevent", function TuiTabsComponent_keydown_arrowRight_prevent_HostBindingHandler($event) {
          return ctx.onKeyDownArrow($event.target, 1);
        })("keydown.arrowLeft.prevent", function TuiTabsComponent_keydown_arrowLeft_prevent_HostBindingHandler($event) {
          return ctx.onKeyDownArrow($event.target, -1);
        });
      }
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("_underline", ctx.underline);
      }
    },
    inputs: {
      underline: "underline"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew, taiga_ui_cdk_services/* TuiResizeService */.mC, MutationObserverService, {
      provide: MUTATION_OBSERVER_INIT,
      useValue: {
        childList: true
      }
    }])],
    ngContentSelectors: taiga_ui_kit_components_tabs_c1,
    decls: 4,
    vars: 4,
    consts: [[4, "ngIf"], ["class", "t-underline", 3, "element", 4, "ngIf"], [1, "t-underline", 3, "element"]],
    template: function TuiTabsComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵtemplate"](0, TuiTabsComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
        core_mjs_["ɵɵpipe"](1, "async");
        core_mjs_["ɵɵprojection"](2);
        core_mjs_["ɵɵtemplate"](3, TuiTabsComponent_tui_underline_3_Template, 1, 1, "tui-underline", 1);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](1, 2, ctx.children.changes));
        core_mjs_["ɵɵadvance"](3);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.underline);
      }
    },
    dependencies: [TuiUnderlineComponent, common_mjs_.NgIf, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{scrollbar-width:none;-ms-overflow-style:none;position:relative;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:auto;isolation:isolate}[_nghost-%COMP%]::-webkit-scrollbar, [_nghost-%COMP%]::-webkit-scrollbar-thumb{display:none}.t-underline[_ngcontent-%COMP%]{z-index:-1}"],
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiTabsComponent.prototype, "scrollTo", null);
  return TuiTabsComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTabsVerticalComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiTabsVerticalComponent {
    constructor(tabs) {
      this.tabs = tabs;
      this.vertical = 'left';
    }
    onKeyDownArrow(current, step) {
      this.tabs.moveFocus(current, step);
    }
  }
  TuiTabsVerticalComponent.ɵfac = function TuiTabsVerticalComponent_Factory(t) {
    return new (t || TuiTabsVerticalComponent)(i0.ɵɵdirectiveInject(TuiTabsDirective));
  };
  TuiTabsVerticalComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiTabsVerticalComponent,
    selectors: [["tui-tabs", "vertical", ""], ["nav", "tuiTabs", "", "vertical", ""]],
    hostVars: 1,
    hostBindings: function TuiTabsVerticalComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵlistener("keydown.arrowDown.prevent", function TuiTabsVerticalComponent_keydown_arrowDown_prevent_HostBindingHandler($event) {
          return ctx.onKeyDownArrow($event.target, 1);
        })("keydown.arrowUp.prevent", function TuiTabsVerticalComponent_keydown_arrowUp_prevent_HostBindingHandler($event) {
          return ctx.onKeyDownArrow($event.target, -1);
        });
      }
      if (rf & 2) {
        i0.ɵɵattribute("data-vertical", ctx.vertical);
      }
    },
    inputs: {
      vertical: "vertical"
    },
    attrs: taiga_ui_kit_components_tabs_c2,
    ngContentSelectors: taiga_ui_kit_components_tabs_c1,
    decls: 1,
    vars: 0,
    template: function TuiTabsVerticalComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵprojection(0);
      }
    },
    styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;font:var(--tui-font-text-m);color:var(--tui-text-02);box-shadow:inset -1px 0 var(--tui-base-03)}[data-vertical=right][_nghost-%COMP%]{box-shadow:inset 1px 0 var(--tui-base-03)}"],
    changeDetection: 0
  });
  return TuiTabsVerticalComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_TABS_REFRESH = new core_mjs_.InjectionToken('[TUI_TABS_REFRESH]');
const TUI_TABS_PROVIDERS = [taiga_ui_cdk_services/* TuiResizeService */.mC, taiga_ui_cdk_services/* TuiDestroyService */.ew, MutationObserverService, tuiDropdownOptionsProvider({
  align: 'right'
}), {
  provide: MUTATION_OBSERVER_INIT,
  useValue: {
    childList: true,
    subtree: true,
    characterData: true
  }
}, {
  provide: TUI_TABS_REFRESH,
  deps: [taiga_ui_cdk_services/* TuiResizeService */.mC, MutationObserverService, taiga_ui_cdk_services/* TuiDestroyService */.ew, common_mjs_.DOCUMENT, core_mjs_.ElementRef, core_mjs_.ChangeDetectorRef],
  useFactory: (resize$, mutations$, destroy$, {
    body
  }, {
    nativeElement
  }, cdr) => (0,merge/* merge */.h)(resize$, mutations$.pipe((0,tap/* tap */.M)(() => cdr.detectChanges()))).pipe(
  // Ignoring cases when host is detached from DOM
  (0,filter/* filter */.p)(() => body.contains(nativeElement)), (0,debounceTime/* debounceTime */.B)(0), (0,operators_startWith/* startWith */.Z)(null), (0,takeUntil/* takeUntil */.Q)(destroy$))
}];
let TuiTabsWithMoreComponent = /*#__PURE__*/(() => {
  class TuiTabsWithMoreComponent {
    constructor(options, margin, refresh$, el, cdr, moreWord$, arrowOptions) {
      this.options = options;
      this.margin = margin;
      this.refresh$ = refresh$;
      this.el = el;
      this.cdr = cdr;
      this.moreWord$ = moreWord$;
      this.arrowOptions = arrowOptions;
      this.maxIndex = Infinity;
      this.underline = this.options.underline;
      this.itemsLimit = this.options.itemsLimit;
      this.activeItemIndexChange = new core_mjs_.EventEmitter();
      this.items = taiga_ui_cdk_constants/* EMPTY_QUERY */.xQ;
      this.activeItemIndex = 0;
      this.open = false;
    }
    set itemIndex(activeItemIndex) {
      this.activeItemIndex = activeItemIndex;
      this.maxIndex = this.getMaxIndex();
    }
    // TODO: Improve performance
    get tabs() {
      return Array.from(this.el.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
      var _a;
      const {
        tabs
      } = this;
      const safeActiveIndex = (0,taiga_ui_cdk_utils_math/* tuiClamp */.wN)(this.activeItemIndex || 0, 0, tabs.length - 2);
      return this.options.exposeActive || this.lastVisibleIndex >= safeActiveIndex ? tabs[safeActiveIndex] || null : ((_a = this.moreButton) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
    }
    get isMoreAlone() {
      return this.lastVisibleIndex < 0 && !this.options.exposeActive;
    }
    get isMoreVisible() {
      return this.lastVisibleIndex < this.items.length - 1;
    }
    get isMoreFocusable() {
      return !!this.moreButton && (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(this.moreButton.nativeElement);
    }
    get isMoreActive() {
      return this.open || !this.options.exposeActive && this.lastVisibleIndex < this.activeItemIndex;
    }
    get lastVisibleIndex() {
      if (this.itemsLimit + 1 >= this.items.length) {
        return this.maxIndex;
      }
      const offset = this.itemsLimit - 1 > this.activeItemIndex || !this.options.exposeActive ? 1 : 2;
      return Math.min(this.itemsLimit - offset, this.maxIndex);
    }
    ngAfterViewInit() {
      this.refresh$.pipe((0,operators_map/* map */.T)(() => this.getMaxIndex()), (0,filter/* filter */.p)(maxIndex => this.maxIndex !== maxIndex)).subscribe(maxIndex => {
        this.maxIndex = maxIndex;
        this.cdr.detectChanges();
      });
    }
    onActiveItemIndexChange(activeItemIndex) {
      this.updateActiveItemIndex(activeItemIndex);
    }
    onClick(index) {
      this.open = false;
      this.focusMore();
      this.updateActiveItemIndex(index);
    }
    onArrowRight(event) {
      if ((0,taiga_ui_cdk_utils_dom/* tuiIsElement */.ru)(event.target) && (0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(event.target)) {
        this.focusMore();
      }
    }
    onArrowLeft() {
      const {
        tabs
      } = this;
      let index = tabs.length - 2;
      while (index >= 0) {
        tabs[index].focus();
        if ((0,taiga_ui_cdk_utils_focus/* tuiIsNativeFocused */.X)(tabs[index])) {
          return;
        }
        index--;
      }
    }
    onWrapperArrow(event, wrapper, previous) {
      const button = event.target;
      const target = (0,taiga_ui_cdk_utils_focus/* tuiGetClosestFocusable */.km)({
        initial: button,
        root: wrapper,
        previous
      });
      if (target) {
        target.focus();
      }
    }
    isOverflown(index) {
      return index !== this.activeItemIndex || !this.options.exposeActive;
    }
    shouldShow(index) {
      return index > this.lastVisibleIndex && this.isOverflown(index);
    }
    focusMore() {
      if (this.moreButton) {
        this.moreButton.nativeElement.focus();
      }
    }
    getMaxIndex() {
      const {
        tabs,
        activeItemIndex,
        margin
      } = this;
      if (tabs.length < 2) {
        return 0;
      }
      const {
        exposeActive,
        minMoreWidth
      } = this.options;
      const {
        clientWidth
      } = this.el.nativeElement;
      const activeWidth = tabs[activeItemIndex] ? tabs[activeItemIndex].scrollWidth : 0;
      const moreWidth = Math.max(tabs[tabs.length - 1].scrollWidth, minMoreWidth);
      let maxIndex = tabs.length - 2;
      let total = tabs.reduce((acc, {
        scrollWidth
      }) => acc + scrollWidth, 0) + maxIndex * margin - tabs[tabs.length - 1].scrollWidth;
      if (total <= clientWidth) {
        return Infinity;
      }
      while (maxIndex) {
        total -= tabs[maxIndex].scrollWidth + margin;
        maxIndex--;
        const activeDisplaced = exposeActive && activeItemIndex > maxIndex;
        const activeOffset = activeDisplaced ? activeWidth + margin : 0;
        const currentWidth = total + activeOffset + moreWidth + margin;
        // Needed for different rounding of visible and hidden elements scrollWidth
        const safetyOffset = (0,taiga_ui_cdk_utils_math/* tuiToInt */.Zi)(this.maxIndex === maxIndex - 1);
        if (currentWidth + safetyOffset < clientWidth) {
          return maxIndex;
        }
      }
      return -1;
    }
    updateActiveItemIndex(activeItemIndex) {
      this.itemIndex = activeItemIndex;
      this.activeItemIndexChange.emit(activeItemIndex);
    }
  }
  TuiTabsWithMoreComponent.ɵfac = function TuiTabsWithMoreComponent_Factory(t) {
    return new (t || TuiTabsWithMoreComponent)(core_mjs_["ɵɵdirectiveInject"](TUI_TABS_OPTIONS), core_mjs_["ɵɵdirectiveInject"](TUI_TAB_MARGIN), core_mjs_["ɵɵdirectiveInject"](TUI_TABS_REFRESH), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](TUI_MORE_WORD), core_mjs_["ɵɵdirectiveInject"](taiga_ui_kit_components_arrow_TUI_ARROW_OPTIONS));
  };
  TuiTabsWithMoreComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiTabsWithMoreComponent,
    selectors: [["tui-tabs-with-more"], ["nav", "tuiTabsWithMore", ""]],
    contentQueries: function TuiTabsWithMoreComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiItemDirective, 4, core_mjs_.TemplateRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.items = _t);
      }
    },
    viewQuery: function TuiTabsWithMoreComponent_Query(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵviewQuery"](TuiTabComponent, 5, core_mjs_.ElementRef);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.moreButton = _t.first);
      }
    },
    hostVars: 2,
    hostBindings: function TuiTabsWithMoreComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("_underline", ctx.underline);
      }
    },
    inputs: {
      moreContent: "moreContent",
      dropdownContent: "dropdownContent",
      underline: "underline",
      itemIndex: [core_mjs_["ɵɵInputFlags"].None, "activeItemIndex", "itemIndex"],
      itemsLimit: "itemsLimit"
    },
    outputs: {
      activeItemIndexChange: "activeItemIndexChange"
    },
    features: [core_mjs_["ɵɵProvidersFeature"](TUI_TABS_PROVIDERS)],
    decls: 13,
    vars: 17,
    consts: [["more", ""], ["dropdown", ""], ["hidden", ""], ["element", ""], [4, "ngIf"], [1, "t-wrapper"], [1, "t-tabs", 3, "activeItemIndexChange", "keydown.arrowRight", "activeItemIndex", "underline"], [4, "ngFor", "ngForOf"], [1, "t-more_wrapper", 3, "openChange", "content", "open"], ["tuiTab", "", 3, "keydown.arrowLeft.prevent", "tuiFocusable"], [4, "polymorpheusOutlet"], [3, "element", 4, "ngIf"], [3, "ngTemplateOutlet", 4, "ngIf", "ngIfElse"], [3, "ngTemplateOutlet"], [1, "t-icon", 3, "src"], [1, "t-dropdown", 3, "keydown.arrowDown.prevent", "keydown.arrowUp.prevent"], ["class", "t-dropdown-item", 3, "tui-tab-activate", 4, "ngFor", "ngForOf"], [1, "t-dropdown-item", 3, "tui-tab-activate"], [3, "ngTemplateOutlet", 4, "ngIf"], [3, "element"]],
    template: function TuiTabsWithMoreComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = core_mjs_["ɵɵgetCurrentView"]();
        core_mjs_["ɵɵtemplate"](0, TuiTabsWithMoreComponent_ng_container_0_Template, 1, 0, "ng-container", 4);
        core_mjs_["ɵɵpipe"](1, "async");
        core_mjs_["ɵɵelementStart"](2, "div", 5)(3, "tui-tabs", 6);
        core_mjs_["ɵɵlistener"]("activeItemIndexChange", function TuiTabsWithMoreComponent_Template_tui_tabs_activeItemIndexChange_3_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onActiveItemIndexChange($event));
        })("keydown.arrowRight", function TuiTabsWithMoreComponent_Template_tui_tabs_keydown_arrowRight_3_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onArrowRight($event));
        });
        core_mjs_["ɵɵtemplate"](4, TuiTabsWithMoreComponent_ng_container_4_Template, 4, 2, "ng-container", 7);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](5, "tui-hosted-dropdown", 8);
        core_mjs_["ɵɵtwoWayListener"]("openChange", function TuiTabsWithMoreComponent_Template_tui_hosted_dropdown_openChange_5_listener($event) {
          core_mjs_["ɵɵrestoreView"](_r1);
          core_mjs_["ɵɵtwoWayBindingSet"](ctx.open, $event) || (ctx.open = $event);
          return core_mjs_["ɵɵresetView"]($event);
        });
        core_mjs_["ɵɵelementStart"](6, "button", 9);
        core_mjs_["ɵɵlistener"]("keydown.arrowLeft.prevent", function TuiTabsWithMoreComponent_Template_button_keydown_arrowLeft_prevent_6_listener() {
          core_mjs_["ɵɵrestoreView"](_r1);
          return core_mjs_["ɵɵresetView"](ctx.onArrowLeft());
        });
        core_mjs_["ɵɵtemplate"](7, TuiTabsWithMoreComponent_ng_container_7_Template, 2, 1, "ng-container", 10);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](8, TuiTabsWithMoreComponent_ng_template_8_Template, 3, 6, "ng-template", null, 0, core_mjs_["ɵɵtemplateRefExtractor"]);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](10, TuiTabsWithMoreComponent_ng_template_10_Template, 3, 1, "ng-template", null, 1, core_mjs_["ɵɵtemplateRefExtractor"])(12, TuiTabsWithMoreComponent_tui_underline_12_Template, 1, 1, "tui-underline", 11);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        const more_r13 = core_mjs_["ɵɵreference"](9);
        const dropdown_r14 = core_mjs_["ɵɵreference"](11);
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](1, 15, ctx.items.changes));
        core_mjs_["ɵɵadvance"](3);
        core_mjs_["ɵɵproperty"]("activeItemIndex", ctx.activeItemIndex)("underline", false);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngForOf", ctx.items);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵclassProp"]("t-overflown", !ctx.isMoreVisible);
        core_mjs_["ɵɵproperty"]("content", ctx.dropdownContent || dropdown_r14);
        core_mjs_["ɵɵtwoWayProperty"]("open", ctx.open);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵclassProp"]("_active", ctx.isMoreActive)("t-no-margin", ctx.isMoreAlone);
        core_mjs_["ɵɵproperty"]("tuiFocusable", ctx.isMoreFocusable);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.moreContent || more_r13);
        core_mjs_["ɵɵadvance"](5);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.underline);
      }
    },
    dependencies: [TuiTabsComponent, TuiHostedDropdownComponent, TuiTabComponent, taiga_ui_core_components_svg/* TuiSvgComponent */._Y, TuiUnderlineComponent, common_mjs_.NgIf, TuiTabsDirective, common_mjs_.NgForOf, common_mjs_.NgTemplateOutlet, TuiFocusableDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{position:relative;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);box-sizing:border-box;color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:hidden}.t-wrapper[_ngcontent-%COMP%]{position:relative;display:flex}.t-tabs[_ngcontent-%COMP%]{height:inherit;font-size:inherit;font-weight:inherit;overflow:visible;box-shadow:none;color:inherit}.t-overflown[_ngcontent-%COMP%]{display:flex;margin:0;width:0;max-width:0;overflow:hidden;visibility:hidden}.t-more_wrapper[_ngcontent-%COMP%]{height:100%;pointer-events:none}.t-more_wrapper[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{pointer-events:auto}.t-icon[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:-.25rem;vertical-align:bottom}.t-icon_rotated[_ngcontent-%COMP%]{transform:rotate(180deg)}.t-dropdown[_ngcontent-%COMP%]{padding:.25rem 0}.t-dropdown[_ngcontent-%COMP%]     *[tuiTab]{width:calc(100% - .75rem);height:2.75rem;justify-content:flex-start;margin:.125rem .375rem;padding:0 .625rem;line-height:1.5rem;border-radius:var(--tui-radius-s);font:var(--tui-font-text-m);color:var(--tui-text-01)}.t-dropdown[_ngcontent-%COMP%]     *[tuiTab]:before{display:none}.t-dropdown[_ngcontent-%COMP%]     *[tuiTab]:hover, .t-dropdown[_ngcontent-%COMP%]     *[tuiTab]:focus, .t-dropdown[_ngcontent-%COMP%]     *[tuiTab]._active{box-shadow:none;background:var(--tui-clear)}.t-dropdown[_ngcontent-%COMP%]     *[tuiTab] .t-highlight{background:transparent!important}.t-dropdown-item[_ngcontent-%COMP%]{display:flex;flex-direction:column}.t-no-margin[_ngcontent-%COMP%]{margin-left:0}"],
    changeDetection: 0
  });
  return TuiTabsWithMoreComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTabsModule = /*#__PURE__*/(() => {
  class TuiTabsModule {}
  TuiTabsModule.ɵfac = function TuiTabsModule_Factory(t) {
    return new (t || TuiTabsModule)();
  };
  TuiTabsModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiTabsModule
  });
  TuiTabsModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiHostedDropdownModule, taiga_ui_core_components_svg/* TuiSvgModule */.vl, TuiFocusableModule, TuiItemModule]]
  });
  return TuiTabsModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-tabs.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-radio.js












/** Default values for the checkbox options. */
const taiga_ui_kit_components_radio_c0 = (/* unused pure expression or super */ null && (["focusableElement"]));
const TUI_RADIO_DEFAULT_OPTIONS = {
  size: 'm',
  appearances: {
    unchecked: taiga_ui_core_enums/* TuiAppearance */.bC.Outline,
    checked: taiga_ui_core_enums/* TuiAppearance */.bC.Primary
  }
};
/**
 * Default parameters for Radio component
 */
const TUI_RADIO_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_RADIO_DEFAULT_OPTIONS);
function tuiRadioOptionsProvider(options) {
  return tuiProvideOptions(TUI_RADIO_OPTIONS, options, TUI_RADIO_DEFAULT_OPTIONS);
}
let taiga_ui_kit_components_radio_TuiRadioComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiRadioComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, options, radioGroup) {
      super(control, cdr);
      this.options = options;
      this.radioGroup = radioGroup;
      this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
      this.name = null;
      this.size = this.options.size;
      this.pseudoDisabled = false;
    }
    get appearance() {
      return this.checked ? this.options.appearances.checked : this.options.appearances.unchecked;
    }
    get computedDisabled() {
      return this.disabled || this.pseudoDisabled;
    }
    get nativeFocusableElement() {
      return !this.focusableElement || this.computedDisabled ? null : this.focusableElement.nativeElement;
    }
    get focused() {
      return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get checked() {
      return this.value === null ? this.item === null : this.item !== undefined && this.item !== null && this.identityMatcher(this.value, this.item);
    }
    get computedName() {
      return this.name || this.radioGroupName || this.controlName || '';
    }
    get isFocusable() {
      return !this.readOnly && this.computedFocusable;
    }
    onChecked(checked) {
      if (checked) {
        this.value = this.item !== undefined ? this.item : this.fallbackValue;
      }
    }
    onFocused(focused) {
      this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
      this.updateFocusVisible(focusVisible);
    }
    get radioGroupName() {
      return this.radioGroup === null ? null : this.radioGroup.name;
    }
  }
  TuiRadioComponent.ɵfac = function TuiRadioComponent_Factory(t) {
    return new (t || TuiRadioComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_RADIO_OPTIONS), i0.ɵɵdirectiveInject(TuiRadioGroupComponent, 8));
  };
  TuiRadioComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiRadioComponent,
    selectors: [["tui-radio"]],
    viewQuery: function TuiRadioComponent_Query(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵviewQuery(taiga_ui_kit_components_radio_c0, 5);
      }
      if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
      }
    },
    hostVars: 3,
    hostBindings: function TuiRadioComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        i0.ɵɵattribute("data-size", ctx.size);
        i0.ɵɵclassProp("_disabled", ctx.computedDisabled);
      }
    },
    inputs: {
      item: "item",
      identityMatcher: "identityMatcher",
      name: "name",
      size: "size",
      pseudoDisabled: "pseudoDisabled"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiRadioComponent), tuiAsControl(TuiRadioComponent)]), i0.ɵɵInheritDefinitionFeature],
    decls: 4,
    vars: 13,
    consts: [["focusableElement", ""], ["tuiWrapper", "", 3, "active", "appearance", "disabled", "focus", "hover", "invalid"], [1, "t-mark"], ["type", "radio", 1, "t-native", 3, "tuiCheckedChange", "tuiFocusedChange", "tuiFocusVisibleChange", "disabled", "id", "tuiChecked", "tuiFocusable"]],
    template: function TuiRadioComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "div", 1);
        i0.ɵɵelement(1, "div", 2);
        i0.ɵɵelementStart(2, "input", 3, 0);
        i0.ɵɵlistener("tuiCheckedChange", function TuiRadioComponent_Template_input_tuiCheckedChange_2_listener($event) {
          i0.ɵɵrestoreView(_r1);
          return i0.ɵɵresetView(ctx.onChecked($event));
        })("tuiFocusedChange", function TuiRadioComponent_Template_input_tuiFocusedChange_2_listener($event) {
          i0.ɵɵrestoreView(_r1);
          return i0.ɵɵresetView(ctx.onFocused($event));
        })("tuiFocusVisibleChange", function TuiRadioComponent_Template_input_tuiFocusVisibleChange_2_listener($event) {
          i0.ɵɵrestoreView(_r1);
          return i0.ɵɵresetView(ctx.onFocusVisible($event));
        });
        i0.ɵɵelementEnd()();
      }
      if (rf & 2) {
        i0.ɵɵproperty("active", ctx.pseudoActive)("appearance", ctx.appearance)("disabled", ctx.computedDisabled)("focus", ctx.computedFocusVisible)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid);
        i0.ɵɵadvance();
        i0.ɵɵclassProp("t-mark_visible", ctx.checked);
        i0.ɵɵadvance();
        i0.ɵɵproperty("disabled", ctx.computedDisabled)("id", ctx.id)("tuiChecked", ctx.checked)("tuiFocusable", ctx.isFocusable);
        i0.ɵɵattribute("name", ctx.computedName);
      }
    },
    dependencies: [i1.TuiWrapperDirective, i2.TuiCheckedDirective, i2.TuiFocusableDirective, i2.TuiFocusedDirective, i2.TuiFocusVisibleDirective],
    styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;flex-shrink:0;border-radius:100%}[data-size=m][_nghost-%COMP%]{width:1rem;height:1rem}[data-size=l][_nghost-%COMP%]{width:1.5rem;height:1.5rem}._readonly[_nghost-%COMP%]{pointer-events:none}.t-mark[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;background-color:currentColor;border-radius:100%;transform:scale(0)}.t-mark_visible[_ngcontent-%COMP%]{transform:scale(1)}[data-size=m][_nghost-%COMP%]   .t-mark[_ngcontent-%COMP%]{margin:.25rem;width:.5rem;height:.5rem}[data-size=l][_nghost-%COMP%]   .t-mark[_ngcontent-%COMP%]{margin:.4375rem;width:.625rem;height:.625rem}.t-native[_ngcontent-%COMP%]{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.t-native[_ngcontent-%COMP%]:-webkit-autofill, .t-native[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-native[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}._disabled[_nghost-%COMP%]   .t-native[_ngcontent-%COMP%]{cursor:default}"],
    changeDetection: 0
  });
  return TuiRadioComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiRadioModule = /*#__PURE__*/(() => {
  class TuiRadioModule {}
  TuiRadioModule.ɵfac = function TuiRadioModule_Factory(t) {
    return new (t || TuiRadioModule)();
  };
  TuiRadioModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiRadioModule
  });
  TuiRadioModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule, taiga_ui_core_directives_wrapper/* TuiWrapperModule */.E]]
  });
  return TuiRadioModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-radio.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-radio-block.js











const taiga_ui_kit_components_radio_block_c0 = (/* unused pure expression or super */ null && (["*"]));
function TuiRadioBlockComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainer(0);
  }
}
let TuiRadioBlockComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiRadioBlockComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, modeDirective) {
      super(control, cdr);
      this.modeDirective = modeDirective;
      this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
      this.contentAlign = 'right';
      this.size = 'l';
      this.hideRadio = false;
      this.pseudoDisabled = false;
    }
    get nativeFocusableElement() {
      var _a, _b;
      return (_b = (_a = this.radio) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    get focused() {
      return !!this.radio && this.radio.focused;
    }
    get computedDisabled() {
      return this.disabled || this.pseudoDisabled;
    }
    get checked() {
      var _a;
      return !!((_a = this.radio) === null || _a === void 0 ? void 0 : _a.checked) && this.hideRadio;
    }
    get checkboxSize() {
      return this.size === 'l' ? 'l' : 'm';
    }
    get appearance() {
      var _a;
      if (!((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode)) {
        return this.checked ? TuiAppearance.WhiteblockActive : TuiAppearance.Whiteblock;
      }
      return this.checked ? TuiAppearance.Primary : TuiAppearance.Secondary;
    }
    onFocused(focused) {
      this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
      this.updateFocusVisible(focusVisible);
    }
    /** @deprecated use 'value' setter */
    onModelChange(value) {
      this.value = value;
    }
  }
  TuiRadioBlockComponent.ɵfac = function TuiRadioBlockComponent_Factory(t) {
    return new (t || TuiRadioBlockComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TuiModeDirective, 8));
  };
  TuiRadioBlockComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiRadioBlockComponent,
    selectors: [["tui-radio-block"]],
    viewQuery: function TuiRadioBlockComponent_Query(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵviewQuery(TuiRadioComponent, 5);
      }
      if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.radio = _t.first);
      }
    },
    hostVars: 8,
    hostBindings: function TuiRadioBlockComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        i0.ɵɵattribute("data-align", ctx.contentAlign)("data-size", ctx.size);
        i0.ɵɵclassProp("_hidden_input", ctx.hideRadio)("_disabled", ctx.computedDisabled)("_active", ctx.checked);
      }
    },
    inputs: {
      item: "item",
      identityMatcher: "identityMatcher",
      contentAlign: "contentAlign",
      size: "size",
      hideRadio: "hideRadio",
      pseudoDisabled: "pseudoDisabled"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiRadioBlockComponent), tuiAsControl(TuiRadioBlockComponent)]), i0.ɵɵInheritDefinitionFeature],
    ngContentSelectors: taiga_ui_kit_components_radio_block_c0,
    decls: 7,
    vars: 22,
    consts: [[4, "ngIf"], ["tuiWrapper", "", 1, "t-wrapper", 3, "active", "appearance", "disabled", "focus", "hover", "invalid"], [1, "t-view", 3, "ngModelChange", "focusedChange", "focusVisibleChange", "focusable", "identityMatcher", "item", "name", "nativeId", "pseudoActive", "pseudoDisabled", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "size", "ngModel"], [1, "t-label"], [1, "t-content"]],
    template: function TuiRadioBlockComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TuiRadioBlockComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
        i0.ɵɵpipe(1, "async");
        i0.ɵɵelementStart(2, "label", 1)(3, "tui-radio", 2);
        i0.ɵɵtwoWayListener("ngModelChange", function TuiRadioBlockComponent_Template_tui_radio_ngModelChange_3_listener($event) {
          i0.ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);
          return $event;
        });
        i0.ɵɵlistener("focusedChange", function TuiRadioBlockComponent_Template_tui_radio_focusedChange_3_listener($event) {
          return ctx.onFocused($event);
        })("focusVisibleChange", function TuiRadioBlockComponent_Template_tui_radio_focusVisibleChange_3_listener($event) {
          return ctx.onFocusVisible($event);
        });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(4, "div", 3)(5, "div", 4);
        i0.ɵɵprojection(6);
        i0.ɵɵelementEnd()()();
      }
      if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.modeDirective && i0.ɵɵpipeBind1(1, 20, ctx.modeDirective.change$));
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("active", ctx.pseudoActive)("appearance", ctx.appearance)("disabled", ctx.computedDisabled)("focus", ctx.computedFocusVisible)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid);
        i0.ɵɵadvance();
        i0.ɵɵproperty("focusable", ctx.focusable)("identityMatcher", ctx.identityMatcher)("item", ctx.item)("name", ctx.computedName || "")("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoDisabled", ctx.computedDisabled)("pseudoFocus", false)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.computedInvalid)("readOnly", ctx.readOnly)("size", ctx.checkboxSize);
        i0.ɵɵtwoWayProperty("ngModel", ctx.value);
      }
    },
    dependencies: [i1.TuiRadioComponent, i2.NgIf, i3.TuiWrapperDirective, i4.NgControlStatus, i4.NgModel, i2.AsyncPipe],
    styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);display:inline-block;vertical-align:top;align-items:flex-start;border-radius:var(--tui-radius-m)}[data-size=xs][_nghost-%COMP%]{font:var(--tui-font-text-xs)}[data-size=m][_nghost-%COMP%], [data-size=l][_nghost-%COMP%]{font:var(--tui-font-text-m)}._disabled[_nghost-%COMP%], ._readonly[_nghost-%COMP%]{pointer-events:none}.t-wrapper[_ngcontent-%COMP%]{position:relative;display:flex;align-items:inherit;box-sizing:border-box;border-radius:inherit;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;padding:0 1rem 0 0}[data-size=xs][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-right:.5rem}[data-align=right][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{flex-direction:row-reverse;padding:0 0 0 1rem}[data-align=right][data-size=xs][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-left:.5rem}[data-size=xs]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 .5rem}[data-size=xs]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:not(._focused):after{border-width:1px}[data-size=s]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 1rem}[data-size=m]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 1.5rem}[data-size=l]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 2.25rem}[data-size=xs][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-xs) / 2 - .5rem) .25rem;transform:scale(.75)}[data-size=s][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-s) / 2 - .5rem) .5rem}[data-size=m][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-m) / 2 - .5rem) .75rem}[data-size=l][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-l) / 2 - .75rem) 1rem}._hidden_input[_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{position:absolute;height:1px;width:1px;margin:-1px;border:0;padding:0;overflow:hidden;clip:rect(0,0,0,0);-webkit-clip-path:inset(0);clip-path:inset(0)}.t-label[_ngcontent-%COMP%]{display:flex;flex-grow:1;align-self:flex-start;align-items:center;overflow:hidden}[data-size=xs][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-xs)}[data-size=s][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-s)}[data-size=m][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-m)}[data-size=l][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-l)}._hidden_input[_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{text-align:center;justify-content:center}.t-content[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"],
    changeDetection: 0
  });
  return TuiRadioBlockComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiRadioBlockModule = /*#__PURE__*/(() => {
  class TuiRadioBlockModule {}
  TuiRadioBlockModule.ɵfac = function TuiRadioBlockModule_Factory(t) {
    return new (t || TuiRadioBlockModule)();
  };
  TuiRadioBlockModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiRadioBlockModule
  });
  TuiRadioBlockModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, fesm2022_forms/* FormsModule */.YN, TuiRadioModule, taiga_ui_core_directives_wrapper/* TuiWrapperModule */.E]]
  });
  return TuiRadioBlockModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-radio-block.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-components-primitive-checkbox.js











/** Default values for the checkbox options. */
const taiga_ui_core_components_primitive_checkbox_c0 = (/* unused pure expression or super */ null && (["*"]));
const taiga_ui_core_components_primitive_checkbox_c1 = a0 => ({
  $implicit: a0
});
function TuiPrimitiveCheckboxComponent_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelement(0, "tui-svg", 2);
  }
  if (rf & 2) {
    const src_r1 = ctx.polymorpheusOutlet;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("t-mark_on", !ctx_r1.empty);
    i0.ɵɵproperty("src", src_r1);
  }
}
const TUI_CHECKBOX_DEFAULT_OPTIONS = {
  size: 'm',
  appearances: {
    unchecked: taiga_ui_core_enums/* TuiAppearance */.bC.Outline,
    checked: taiga_ui_core_enums/* TuiAppearance */.bC.Primary,
    indeterminate: taiga_ui_core_enums/* TuiAppearance */.bC.Primary
  },
  icons: {
    checked: ({
      $implicit
    }) => $implicit === 'm' ? 'tuiIconCheck' : 'tuiIconCheckLarge',
    indeterminate: ({
      $implicit
    }) => $implicit === 'm' ? 'tuiIconMinus' : 'tuiIconMinusLarge'
  }
};
/**
 * Default parameters for checkbox component
 */
const taiga_ui_core_components_primitive_checkbox_TUI_CHECKBOX_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_CHECKBOX_DEFAULT_OPTIONS);
function tuiCheckboxOptionsProvider(options) {
  return tuiProvideOptions(taiga_ui_core_components_primitive_checkbox_TUI_CHECKBOX_OPTIONS, options, TUI_CHECKBOX_DEFAULT_OPTIONS);
}
let TuiPrimitiveCheckboxComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiPrimitiveCheckboxComponent {
    constructor(options) {
      this.options = options;
      this.size = this.options.size;
      this.disabled = false;
      this.focused = false;
      this.hovered = false;
      this.pressed = false;
      this.invalid = false;
      this.icon = this.options.icons.checked;
      this.value = false;
    }
    set valueSetter(value) {
      if (value !== false) {
        this.setCurrentIcon(value);
      }
      this.value = value;
    }
    get appearance() {
      switch (this.value) {
        case false:
          return this.options.appearances.unchecked;
        case true:
          return this.options.appearances.checked;
        default:
          return this.options.appearances.indeterminate;
      }
    }
    get empty() {
      return this.value === false;
    }
    setCurrentIcon(value) {
      this.icon = value === null ? this.options.icons.indeterminate : this.options.icons.checked;
    }
  }
  TuiPrimitiveCheckboxComponent.ɵfac = function TuiPrimitiveCheckboxComponent_Factory(t) {
    return new (t || TuiPrimitiveCheckboxComponent)(i0.ɵɵdirectiveInject(taiga_ui_core_components_primitive_checkbox_TUI_CHECKBOX_OPTIONS));
  };
  TuiPrimitiveCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiPrimitiveCheckboxComponent,
    selectors: [["tui-primitive-checkbox"]],
    hostVars: 1,
    hostBindings: function TuiPrimitiveCheckboxComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        i0.ɵɵattribute("data-size", ctx.size);
      }
    },
    inputs: {
      size: "size",
      disabled: "disabled",
      focused: "focused",
      hovered: "hovered",
      pressed: "pressed",
      invalid: "invalid",
      valueSetter: [i0.ɵɵInputFlags.None, "value", "valueSetter"]
    },
    ngContentSelectors: taiga_ui_core_components_primitive_checkbox_c0,
    decls: 3,
    vars: 10,
    consts: [["tuiWrapper", "", 3, "active", "appearance", "disabled", "focus", "hover", "invalid"], ["class", "t-mark", 3, "t-mark_on", "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-mark", 3, "src"]],
    template: function TuiPrimitiveCheckboxComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵtemplate(1, TuiPrimitiveCheckboxComponent_tui_svg_1_Template, 1, 3, "tui-svg", 1);
        i0.ɵɵprojection(2);
        i0.ɵɵelementEnd();
      }
      if (rf & 2) {
        i0.ɵɵproperty("active", ctx.pressed)("appearance", ctx.appearance)("disabled", ctx.disabled)("focus", ctx.focused)("hover", ctx.hovered)("invalid", ctx.invalid);
        i0.ɵɵadvance();
        i0.ɵɵproperty("polymorpheusOutlet", ctx.icon)("polymorpheusOutletContext", i0.ɵɵpureFunction1(8, taiga_ui_core_components_primitive_checkbox_c1, ctx.size));
      }
    },
    dependencies: [i1.TuiSvgComponent, i2.TuiWrapperDirective, i3.PolymorpheusOutletDirective],
    styles: ["[_nghost-%COMP%]{display:block;font-size:0;flex-shrink:0}[data-size=m][_nghost-%COMP%]{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}[data-size=l][_nghost-%COMP%]{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}.t-mark[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.t-mark_on[_ngcontent-%COMP%]{transform:scale(1)}"],
    changeDetection: 0
  });
  return TuiPrimitiveCheckboxComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiPrimitiveCheckboxModule = /*#__PURE__*/(() => {
  class TuiPrimitiveCheckboxModule {}
  TuiPrimitiveCheckboxModule.ɵfac = function TuiPrimitiveCheckboxModule_Factory(t) {
    return new (t || TuiPrimitiveCheckboxModule)();
  };
  TuiPrimitiveCheckboxModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiPrimitiveCheckboxModule
  });
  TuiPrimitiveCheckboxModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[taiga_ui_core_components_svg/* TuiSvgModule */.vl, taiga_ui_core_directives_wrapper/* TuiWrapperModule */.E, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ]]
  });
  return TuiPrimitiveCheckboxModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-primitive-checkbox.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-checkbox.js









const taiga_ui_kit_components_checkbox_c0 = (/* unused pure expression or super */ null && (["focusableElement"]));
let taiga_ui_kit_components_checkbox_TuiCheckboxComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiCheckboxComponent extends AbstractTuiNullableControl {
    constructor(control, options, cdr) {
      super(control, cdr);
      this.options = options;
      this.size = this.options.size;
    }
    get nativeFocusableElement() {
      return !this.focusableElement || this.computedDisabled ? null : this.focusableElement.nativeElement;
    }
    get focused() {
      return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get computedFocusable() {
      return this.interactive && this.focusable;
    }
    /** @deprecated use 'value' setter */
    onChecked(checked) {
      this.value = checked;
    }
    onFocused(focused) {
      this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
      this.updateFocusVisible(focusVisible);
    }
  }
  TuiCheckboxComponent.ɵfac = function TuiCheckboxComponent_Factory(t) {
    return new (t || TuiCheckboxComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(TUI_CHECKBOX_OPTIONS), i0.ɵɵdirectiveInject(ChangeDetectorRef));
  };
  TuiCheckboxComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiCheckboxComponent,
    selectors: [["tui-checkbox"]],
    viewQuery: function TuiCheckboxComponent_Query(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵviewQuery(taiga_ui_kit_components_checkbox_c0, 5);
      }
      if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
      }
    },
    hostVars: 1,
    hostBindings: function TuiCheckboxComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        i0.ɵɵattribute("data-size", ctx.size);
      }
    },
    inputs: {
      size: "size"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiCheckboxComponent), tuiAsControl(TuiCheckboxComponent)]), i0.ɵɵInheritDefinitionFeature],
    decls: 3,
    vars: 11,
    consts: [["focusableElement", ""], [3, "disabled", "focused", "hovered", "invalid", "pressed", "size", "value"], ["automation-id", "tui-checkbox__native", "type", "checkbox", 1, "t-native", 3, "tuiCheckedChange", "tuiFocusedChange", "tuiFocusVisibleChange", "disabled", "id", "tuiFocusable", "tuiChecked"]],
    template: function TuiCheckboxComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = i0.ɵɵgetCurrentView();
        i0.ɵɵelementStart(0, "tui-primitive-checkbox", 1)(1, "input", 2, 0);
        i0.ɵɵtwoWayListener("tuiCheckedChange", function TuiCheckboxComponent_Template_input_tuiCheckedChange_1_listener($event) {
          i0.ɵɵrestoreView(_r1);
          i0.ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);
          return i0.ɵɵresetView($event);
        });
        i0.ɵɵlistener("tuiFocusedChange", function TuiCheckboxComponent_Template_input_tuiFocusedChange_1_listener($event) {
          i0.ɵɵrestoreView(_r1);
          return i0.ɵɵresetView(ctx.onFocused($event));
        })("tuiFocusVisibleChange", function TuiCheckboxComponent_Template_input_tuiFocusVisibleChange_1_listener($event) {
          i0.ɵɵrestoreView(_r1);
          return i0.ɵɵresetView(ctx.onFocusVisible($event));
        });
        i0.ɵɵelementEnd()();
      }
      if (rf & 2) {
        i0.ɵɵproperty("disabled", ctx.disabled)("focused", ctx.computedFocusVisible)("hovered", ctx.pseudoHover)("invalid", ctx.computedInvalid)("pressed", ctx.pseudoActive)("size", ctx.size)("value", ctx.value);
        i0.ɵɵadvance();
        i0.ɵɵproperty("disabled", ctx.disabled)("id", ctx.id)("tuiFocusable", ctx.computedFocusable);
        i0.ɵɵtwoWayProperty("tuiChecked", ctx.value);
      }
    },
    dependencies: [i1.TuiPrimitiveCheckboxComponent, i2.TuiCheckedDirective, i2.TuiFocusableDirective, i2.TuiFocusedDirective, i2.TuiFocusVisibleDirective],
    styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;flex-shrink:0}[data-size=m][_nghost-%COMP%]{width:1rem;height:1rem}[data-size=l][_nghost-%COMP%]{width:1.5rem;height:1.5rem}._readonly[_nghost-%COMP%]   tui-primitive-checkbox[_ngcontent-%COMP%]{pointer-events:none}.t-native[_ngcontent-%COMP%]{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.t-native[_ngcontent-%COMP%]:-webkit-autofill, .t-native[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-native[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}"],
    changeDetection: 0
  });
  return TuiCheckboxComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiCheckboxModule = /*#__PURE__*/(() => {
  class TuiCheckboxModule {}
  TuiCheckboxModule.ɵfac = function TuiCheckboxModule_Factory(t) {
    return new (t || TuiCheckboxModule)();
  };
  TuiCheckboxModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiCheckboxModule
  });
  TuiCheckboxModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPrimitiveCheckboxModule]]
  });
  return TuiCheckboxModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-checkbox.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-checkbox-labeled.js










const taiga_ui_kit_components_checkbox_labeled_c0 = (/* unused pure expression or super */ null && (["*"]));
let TuiCheckboxLabeledComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiCheckboxLabeledComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, mode$, options) {
      super(control, cdr);
      this.mode$ = mode$;
      this.options = options;
      this.size = this.options.size;
    }
    get focused() {
      return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get nativeFocusableElement() {
      var _a, _b;
      return (_b = (_a = this.checkbox) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
    }
    onFocused(focused) {
      this.updateFocused(focused);
    }
    /** @deprecated use 'value' setter */
    onModelChange(value) {
      this.value = value;
    }
  }
  TuiCheckboxLabeledComponent.ɵfac = function TuiCheckboxLabeledComponent_Factory(t) {
    return new (t || TuiCheckboxLabeledComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_MODE), i0.ɵɵdirectiveInject(TUI_CHECKBOX_OPTIONS));
  };
  TuiCheckboxLabeledComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiCheckboxLabeledComponent,
    selectors: [["tui-checkbox-labeled"]],
    viewQuery: function TuiCheckboxLabeledComponent_Query(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵviewQuery(TuiCheckboxComponent, 5);
      }
      if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkbox = _t.first);
      }
    },
    hostVars: 1,
    hostBindings: function TuiCheckboxLabeledComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵlistener("$.data-mode.attr", function TuiCheckboxLabeledComponent___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        });
      }
      if (rf & 2) {
        i0.ɵɵattribute("data-size", ctx.size);
      }
    },
    inputs: {
      size: "size"
    },
    features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiCheckboxLabeledComponent), tuiAsControl(TuiCheckboxLabeledComponent), MODE_PROVIDER]), i0.ɵɵInheritDefinitionFeature],
    ngContentSelectors: taiga_ui_kit_components_checkbox_labeled_c0,
    decls: 4,
    vars: 12,
    consts: [[1, "t-wrapper"], [3, "ngModelChange", "focusedChange", "disabled", "focusable", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "size", "ngModel"], [1, "t-content"]],
    template: function TuiCheckboxLabeledComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "label", 0)(1, "tui-checkbox", 1);
        i0.ɵɵtwoWayListener("ngModelChange", function TuiCheckboxLabeledComponent_Template_tui_checkbox_ngModelChange_1_listener($event) {
          i0.ɵɵtwoWayBindingSet(ctx.value, $event) || (ctx.value = $event);
          return $event;
        });
        i0.ɵɵlistener("focusedChange", function TuiCheckboxLabeledComponent_Template_tui_checkbox_focusedChange_1_listener($event) {
          return ctx.onFocused($event);
        });
        i0.ɵɵelementEnd();
        i0.ɵɵelementStart(2, "div", 2);
        i0.ɵɵprojection(3);
        i0.ɵɵelementEnd()();
      }
      if (rf & 2) {
        i0.ɵɵadvance();
        i0.ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.focusable)("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.computedInvalid)("readOnly", ctx.readOnly)("size", ctx.size);
        i0.ɵɵtwoWayProperty("ngModel", ctx.value);
        i0.ɵɵadvance();
        i0.ɵɵclassProp("t-content_disabled", ctx.computedDisabled);
      }
    },
    dependencies: [i1.TuiCheckboxComponent, i2.NgControlStatus, i2.NgModel],
    styles: ["[_nghost-%COMP%]{position:relative;display:block;line-height:0}._disabled[_nghost-%COMP%], ._readonly[_nghost-%COMP%]{pointer-events:none}.t-wrapper[_ngcontent-%COMP%]{display:inline-flex;max-width:100%;cursor:pointer}._disabled[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{cursor:default}[data-mode=onDark][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}.t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-s);line-height:1rem;word-wrap:break-word;min-width:0}.t-content_disabled[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity)}[data-size=m][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{margin-left:.5rem}[data-size=l][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-m);margin-left:.75rem}"],
    changeDetection: 0
  });
  return TuiCheckboxLabeledComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiCheckboxLabeledModule = /*#__PURE__*/(() => {
  class TuiCheckboxLabeledModule {}
  TuiCheckboxLabeledModule.ɵfac = function TuiCheckboxLabeledModule_Factory(t) {
    return new (t || TuiCheckboxLabeledModule)();
  };
  TuiCheckboxLabeledModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiCheckboxLabeledModule
  });
  TuiCheckboxLabeledModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, fesm2022_forms/* FormsModule */.YN, TuiCheckboxModule]]
  });
  return TuiCheckboxLabeledModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-kit-components-checkbox-labeled.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-interfaces.js
const TUI_EXAMPLE_PRIMARY_FILE_NAME = {
  TS: 'TypeScript',
  LESS: 'LESS',
  HTML: 'HTML'
};

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-addon-doc-interfaces.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/addon-mobile/fesm2015/taiga-ui-addon-mobile-directives-sidebar.js







const taiga_ui_addon_mobile_directives_sidebar_c0 = ["tuiSidebar", ""];
function TuiSidebarComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", text_r1, " ");
  }
}
let TuiSidebarDirective = /*#__PURE__*/(() => {
  class TuiSidebarDirective extends tinkoff_ng_polymorpheus/* PolymorpheusTemplate */.A7 {
    constructor(content, injector, portalService, cdr) {
      super(content, cdr);
      this.content = content;
      this.injector = injector;
      this.portalService = portalService;
      this.component = new tinkoff_ng_polymorpheus/* PolymorpheusComponent */.lS(TuiSidebarComponent, this.injector);
      this.sidebarRef = null;
      this.direction = 'left';
      this.autoWidth = false;
    }
    set tuiSidebar(open) {
      if (open) {
        this.show();
      } else {
        this.hide();
      }
    }
    ngOnDestroy() {
      this.hide();
    }
    show() {
      if (this.sidebarRef !== null) {
        return;
      }
      this.sidebarRef = this.portalService.add(this.component);
      this.sidebarRef.changeDetectorRef.detectChanges();
    }
    hide() {
      if (this.sidebarRef === null) {
        return;
      }
      this.portalService.remove(this.sidebarRef);
      this.sidebarRef = null;
    }
  }
  TuiSidebarDirective.ɵfac = function TuiSidebarDirective_Factory(t) {
    return new (t || TuiSidebarDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.TemplateRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.Injector), core_mjs_["ɵɵdirectiveInject"](TuiDropdownPortalService), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef));
  };
  TuiSidebarDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiSidebarDirective,
    selectors: [["", "tuiSidebar", ""]],
    inputs: {
      direction: [core_mjs_["ɵɵInputFlags"].None, "tuiSidebarDirection", "direction"],
      autoWidth: [core_mjs_["ɵɵInputFlags"].None, "tuiSidebarAutoWidth", "autoWidth"],
      tuiSidebar: "tuiSidebar"
    },
    features: [core_mjs_["ɵɵInheritDefinitionFeature"]]
  });
  return TuiSidebarDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiSidebarComponent = /*#__PURE__*/(() => {
  class TuiSidebarComponent {
    constructor(options, directive) {
      this.options = options;
      this.directive = directive;
      this.left = Object.assign(Object.assign({}, this.options), {
        value: 'left'
      });
      this.right = Object.assign(Object.assign({}, this.options), {
        value: 'right'
      });
    }
    get animation() {
      return this.direction === 'left' ? this.left : this.right;
    }
    get directionHostClass() {
      return `t-${this.directive.direction}`;
    }
    get direction() {
      return this.directive.direction;
    }
    get content() {
      return this.directive.content;
    }
    get autoWidth() {
      return this.directive.autoWidth;
    }
    ngDoCheck() {
      this.directive.check();
    }
  }
  TuiSidebarComponent.ɵfac = function TuiSidebarComponent_Factory(t) {
    return new (t || TuiSidebarComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_ANIMATION_OPTIONS */.fx), core_mjs_["ɵɵdirectiveInject"](TuiSidebarDirective));
  };
  TuiSidebarComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiSidebarComponent,
    selectors: [["aside", "tuiSidebar", ""]],
    hostVars: 3,
    hostBindings: function TuiSidebarComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵsyntheticHostProperty"]("@tuiSlideIn", ctx.animation);
        core_mjs_["ɵɵclassMap"](ctx.directionHostClass);
      }
    },
    attrs: taiga_ui_addon_mobile_directives_sidebar_c0,
    decls: 2,
    vars: 3,
    consts: [["tuiActiveZone", "", 1, "t-wrapper"], [4, "polymorpheusOutlet"]],
    template: function TuiSidebarComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵelementStart"](0, "div", 0);
        core_mjs_["ɵɵtemplate"](1, TuiSidebarComponent_ng_container_1_Template, 2, 1, "ng-container", 1);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("t-wrapper_auto-width", ctx.autoWidth);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.content);
      }
    },
    dependencies: [taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA],
    styles: ["[_nghost-%COMP%]{position:fixed;top:0;left:0;width:100%;height:100%;display:flex}[_nghost-%COMP%]:before, [_nghost-%COMP%]:after{position:absolute;top:0;left:0;width:100%;content:\"\";height:100%;background:rgba(0,0,0,.38);animation:tuiFadeIn var(--tui-duration)}[_nghost-%COMP%]:before{left:-100%;width:200%}[_nghost-%COMP%]:after{left:100%}.ng-animating[_nghost-%COMP%]:before, .ng-animating[_nghost-%COMP%]:after{opacity:0;transition:opacity var(--tui-duration)}.t-right[_nghost-%COMP%]{justify-content:flex-end}.t-left[_nghost-%COMP%]{justify-content:flex-start}.t-wrapper[_ngcontent-%COMP%]{position:relative;display:flex;flex-direction:column;background:var(--tui-base-01);box-shadow:0 10rem var(--tui-base-01);width:17.25rem}.t-wrapper_auto-width[_ngcontent-%COMP%]{width:auto}"],
    data: {
      animation: [tuiSlideIn]
    },
    changeDetection: 0
  });
  return TuiSidebarComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiSidebarModule = /*#__PURE__*/(() => {
  class TuiSidebarModule {}
  TuiSidebarModule.ɵfac = function TuiSidebarModule_Factory(t) {
    return new (t || TuiSidebarModule)();
  };
  TuiSidebarModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiSidebarModule
  });
  TuiSidebarModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[TuiActiveZoneModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ]]
  });
  return TuiSidebarModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-addon-mobile-directives-sidebar.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-directives.js








let TuiScrollIntoViewLinkDirective = /*#__PURE__*/(() => {
  class TuiScrollIntoViewLinkDirective {
    constructor(destroy$, {
      nativeElement
    }, readyToScroll$) {
      this.readyToScroll$ = readyToScroll$;
      this.scroll$ = new ReplaySubject/* ReplaySubject */.m(1);
      this.readyToScroll$.pipe((0,filter/* filter */.p)(Boolean), (0,operators_switchMap/* switchMap */.n)(() => this.scroll$), (0,debounceTime/* debounceTime */.B)(750), (0,filter/* filter */.p)(shallWe => shallWe && !!(0,taiga_ui_cdk_utils_dom/* tuiGetElementObscures */.J0)(nativeElement)), (0,takeUntil/* takeUntil */.Q)(destroy$)).subscribe(() => {
        nativeElement.scrollIntoView();
      });
    }
    set tuiScrollIntoViewLink(shallWe) {
      this.scroll$.next(shallWe);
    }
  }
  TuiScrollIntoViewLinkDirective.ɵfac = function TuiScrollIntoViewLinkDirective_Factory(t) {
    return new (t || TuiScrollIntoViewLinkDirective)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_PAGE_LOADED */.Aq));
  };
  TuiScrollIntoViewLinkDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiScrollIntoViewLinkDirective,
    selectors: [["", "tuiScrollIntoViewLink", ""]],
    inputs: {
      tuiScrollIntoViewLink: "tuiScrollIntoViewLink"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([taiga_ui_cdk_services/* TuiDestroyService */.ew])]
  });
  return TuiScrollIntoViewLinkDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiScrollIntoViewLinkModule = /*#__PURE__*/(() => {
  class TuiScrollIntoViewLinkModule {}
  TuiScrollIntoViewLinkModule.ɵfac = function TuiScrollIntoViewLinkModule_Factory(t) {
    return new (t || TuiScrollIntoViewLinkModule)();
  };
  TuiScrollIntoViewLinkModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiScrollIntoViewLinkModule
  });
  TuiScrollIntoViewLinkModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiScrollIntoViewLinkModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTextCodeDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiTextCodeDirective {
    constructor() {
      this.code = '';
    }
  }
  TuiTextCodeDirective.ɵfac = function TuiTextCodeDirective_Factory(t) {
    return new (t || TuiTextCodeDirective)();
  };
  TuiTextCodeDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: TuiTextCodeDirective,
    selectors: [["code", "tuiText", ""]],
    hostVars: 1,
    hostBindings: function TuiTextCodeDirective_HostBindings(rf, ctx) {
      if (rf & 2) {
        i0.ɵɵhostProperty("textContent", ctx.code);
      }
    },
    inputs: {
      code: [i0.ɵɵInputFlags.None, "tuiText", "code"]
    }
  });
  return TuiTextCodeDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiTextCodeModule = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiTextCodeModule {}
  TuiTextCodeModule.ɵfac = function TuiTextCodeModule_Factory(t) {
    return new (t || TuiTextCodeModule)();
  };
  TuiTextCodeModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({
    type: TuiTextCodeModule
  });
  TuiTextCodeModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});
  return TuiTextCodeModule;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-addon-doc-directives.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-services.js





const TUI_THEME_STORAGE_DEFAULT_KEY = 'tuiTheme';
const TUI_THEME_DEFAULT_NAME = 'Taiga UI';
const TUI_THEME_STORAGE_KEY = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_THEME_STORAGE_DEFAULT_KEY);
const TUI_THEME_NAME = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_THEME_DEFAULT_NAME);
let TuiThemeService = /*#__PURE__*/(() => {
  class TuiThemeService extends internal_BehaviorSubject/* BehaviorSubject */.t {
    constructor(initialTheme, key, storage) {
      super(storage.getItem(key) || initialTheme);
      this.initialTheme = initialTheme;
      this.key = key;
      this.storage = storage;
    }
    next(theme) {
      this.storage.setItem(this.key, theme);
      super.next(theme);
    }
    get isDefaultTheme() {
      return this.value === TUI_THEME_DEFAULT_NAME;
    }
  }
  TuiThemeService.ɵfac = function TuiThemeService_Factory(t) {
    return new (t || TuiThemeService)(core_mjs_["ɵɵinject"](TUI_THEME_NAME), core_mjs_["ɵɵinject"](TUI_THEME_STORAGE_KEY), core_mjs_["ɵɵinject"](ng_web_apis_common/* LOCAL_STORAGE */.Wd));
  };
  TuiThemeService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiThemeService,
    factory: TuiThemeService.ɵfac,
    providedIn: 'root'
  });
  return TuiThemeService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_THEME_NIGHT_STORAGE_DEFAULT_KEY = 'tuiNight';
const TUI_THEME_NIGHT_STORAGE_KEY = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_THEME_NIGHT_STORAGE_DEFAULT_KEY);
const TUI_USE_DEFAULT_NIGHT_THEME = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(true);
let TuiThemeNightService = /*#__PURE__*/(() => {
  class TuiThemeNightService extends internal_BehaviorSubject/* BehaviorSubject */.t {
    constructor(win, storage, key, useDefaultNightTheme) {
      super(storage.getItem(key) === 'true' || storage.getItem(key) === null && win.matchMedia('(prefers-color-scheme: dark)').matches);
      this.win = win;
      this.storage = storage;
      this.key = key;
      this.useDefaultNightTheme = useDefaultNightTheme;
    }
    next(night) {
      this.storage.setItem(this.key, String(night));
      super.next(night);
    }
    toggle() {
      this.next(!this.value);
    }
  }
  TuiThemeNightService.ɵfac = function TuiThemeNightService_Factory(t) {
    return new (t || TuiThemeNightService)(core_mjs_["ɵɵinject"](ng_web_apis_common/* WINDOW */.jf), core_mjs_["ɵɵinject"](ng_web_apis_common/* LOCAL_STORAGE */.Wd), core_mjs_["ɵɵinject"](TUI_THEME_NIGHT_STORAGE_KEY), core_mjs_["ɵɵinject"](TUI_USE_DEFAULT_NIGHT_THEME));
  };
  TuiThemeNightService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiThemeNightService,
    factory: TuiThemeNightService.ɵfac,
    providedIn: 'root'
  });
  return TuiThemeNightService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-addon-doc-services.js.map
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-components.js







































const taiga_ui_addon_doc_components_c0 = ["*"];
function TuiDocCodeComponent_p_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "p", 2);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", ctx_r0.filename, "\n");
  }
}
function TuiDocCodeComponent_pre_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "pre", 3);
    core_mjs_["ɵɵtext"](1, "    ");
    core_mjs_["ɵɵelement"](2, "code", 4);
    core_mjs_["ɵɵtext"](3, "\n    ");
    core_mjs_["ɵɵelementStart"](4, "div", 5);
    core_mjs_["ɵɵtext"](5, "\n        ");
    core_mjs_["ɵɵelementStart"](6, "button", 6);
    core_mjs_["ɵɵpipe"](7, "async");
    core_mjs_["ɵɵlistener"]("click", function TuiDocCodeComponent_pre_1_Template_button_click_6_listener() {
      core_mjs_["ɵɵrestoreView"](_r2);
      const ctx_r0 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r0.copy$.next());
    });
    core_mjs_["ɵɵtext"](8, "\n        ");
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵtext"](9, "\n        ");
    core_mjs_["ɵɵprojection"](10);
    core_mjs_["ɵɵtext"](11, "\n    ");
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵtext"](12, "\n");
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const content_r3 = ctx.$implicit;
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("lineNumbers", true)("highlight", content_r3);
    core_mjs_["ɵɵadvance"](4);
    core_mjs_["ɵɵproperty"]("icon", core_mjs_["ɵɵpipeBind1"](7, 4, ctx_r0.icon$) || "tuiIconCopyLarge")("cdkCopyToClipboard", content_r3);
  }
}
function TuiDocCopyComponent_button_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 1);
    i0.ɵɵlistener("click", function TuiDocCopyComponent_button_0_Template_button_click_0_listener() {
      i0.ɵɵrestoreView(_r1);
      const ctx_r1 = i0.ɵɵnextContext();
      return i0.ɵɵresetView(ctx_r1.onClick());
    });
    i0.ɵɵelementStart(1, "span", 2);
    i0.ɵɵpipe(2, "async");
    i0.ɵɵelementStart(3, "span", 3);
    i0.ɵɵprojection(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtext(5);
    i0.ɵɵelementEnd()();
  }
  if (rf & 2) {
    const texts_r3 = ctx.ngIf;
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("title", texts_r3[0]);
    i0.ɵɵadvance();
    i0.ɵɵclassProp("t-content_moved", i0.ɵɵpipeBind1(2, 5, ctx_r1.copied$));
    i0.ɵɵadvance(2);
    i0.ɵɵattribute("data-text", texts_r3[0]);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", texts_r3[1], " ");
  }
}
const taiga_ui_addon_doc_components_c1 = (/* unused pure expression or super */ null && (["content"]));
const taiga_ui_addon_doc_components_c2 = (/* unused pure expression or super */ null && (["resizer"]));
const taiga_ui_addon_doc_components_c3 = () => [1, 0];
const taiga_ui_addon_doc_components_c4 = () => ({
  standalone: true
});
function TuiDocDemoComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵtext(0);
    i0.ɵɵelementStart(1, "a", 12)(2, "code");
    i0.ɵɵtext(3, "tuiMode");
    i0.ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵtextInterpolate1(" ", ctx_r1.texts[0], " ");
  }
}
function TuiDocDemoComponent_ng_container_3_tui_data_list_wrapper_3_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelement(0, "tui-data-list-wrapper", 15);
  }
  if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("items", ctx_r1.items);
  }
}
function TuiDocDemoComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵelementStart(1, "tui-select", 13);
    i0.ɵɵlistener("ngModelChange", function TuiDocDemoComponent_ng_container_3_Template_tui_select_ngModelChange_1_listener($event) {
      i0.ɵɵrestoreView(_r3);
      const ctx_r1 = i0.ɵɵnextContext();
      return i0.ɵɵresetView(ctx_r1.onModeChange($event));
    });
    i0.ɵɵtext(2, " tuiMode ");
    i0.ɵɵtemplate(3, TuiDocDemoComponent_ng_container_3_tui_data_list_wrapper_3_Template, 1, 1, "tui-data-list-wrapper", 14);
    i0.ɵɵelementEnd();
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const tooltip_r4 = i0.ɵɵreference(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngModel", ctx_r1.mode)("tuiHintContent", tooltip_r4)("tuiTextfieldCleaner", true);
  }
}
function TuiDocDemoComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵtext(0, " tuiMode: ");
    i0.ɵɵelement(1, "tui-tooltip", 16);
    i0.ɵɵelementStart(2, "div", 17)(3, "tui-radio-block", 18);
    i0.ɵɵlistener("ngModelChange", function TuiDocDemoComponent_ng_template_4_Template_tui_radio_block_ngModelChange_3_listener($event) {
      i0.ɵɵrestoreView(_r5);
      const ctx_r1 = i0.ɵɵnextContext();
      return i0.ɵɵresetView(ctx_r1.onModeChange($event));
    });
    i0.ɵɵtext(4, " null ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(5, "tui-radio-block", 19);
    i0.ɵɵlistener("ngModelChange", function TuiDocDemoComponent_ng_template_4_Template_tui_radio_block_ngModelChange_5_listener($event) {
      i0.ɵɵrestoreView(_r5);
      const ctx_r1 = i0.ɵɵnextContext();
      return i0.ɵɵresetView(ctx_r1.onModeChange($event));
    });
    i0.ɵɵtext(6, " onDark ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "tui-radio-block", 20);
    i0.ɵɵlistener("ngModelChange", function TuiDocDemoComponent_ng_template_4_Template_tui_radio_block_ngModelChange_7_listener($event) {
      i0.ɵɵrestoreView(_r5);
      const ctx_r1 = i0.ɵɵnextContext();
      return i0.ɵɵresetView(ctx_r1.onModeChange($event));
    });
    i0.ɵɵtext(8, " onLight ");
    i0.ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    const tooltip_r4 = i0.ɵɵreference(2);
    i0.ɵɵadvance();
    i0.ɵɵproperty("content", tooltip_r4);
    i0.ɵɵadvance();
    i0.ɵɵproperty("collapsed", true);
    i0.ɵɵadvance();
    i0.ɵɵproperty("hideRadio", true)("item", null)("ngModel", ctx_r1.mode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("hideRadio", true)("ngModel", ctx_r1.mode);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("hideRadio", true)("ngModel", ctx_r1.mode);
  }
}
function TuiDocDemoComponent_form_12_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelement(0, "tui-svg", 27);
  }
  if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵclassProp("t-icon_rotated", ctx_r1.expanded);
    i0.ɵɵproperty("src", ctx_r1.options.iconSmall);
  }
}
function TuiDocDemoComponent_form_12_ng_template_8_tui_data_list_wrapper_6_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelement(0, "tui-data-list-wrapper", 15);
  }
  if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(3);
    i0.ɵɵproperty("items", ctx_r1.updateOnVariants);
  }
}
function TuiDocDemoComponent_form_12_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "pre", 28);
    i0.ɵɵtext(1);
    i0.ɵɵpipe(2, "json");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "div", 29)(4, "tui-select", 30);
    i0.ɵɵlistener("ngModelChange", function TuiDocDemoComponent_form_12_ng_template_8_Template_tui_select_ngModelChange_4_listener($event) {
      i0.ɵɵrestoreView(_r7);
      const ctx_r1 = i0.ɵɵnextContext(2);
      return i0.ɵɵresetView(ctx_r1.updateOnChange($event));
    });
    i0.ɵɵtext(5, " updateOn ");
    i0.ɵɵtemplate(6, TuiDocDemoComponent_form_12_ng_template_8_tui_data_list_wrapper_6_Template, 1, 1, "tui-data-list-wrapper", 14);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(7, "button", 31);
    i0.ɵɵtext(8, " Reset ");
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(9, "button", 32);
    i0.ɵɵtext(10, " Submit ");
    i0.ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext(2);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1("Form data: ", i0.ɵɵpipeBind1(2, 3, ctx_r1.testForm.value), "");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("ngModel", ctx_r1.updateOn)("ngModelOptions", i0.ɵɵpureFunction0(5, taiga_ui_addon_doc_components_c4));
  }
}
function TuiDocDemoComponent_form_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "form", 21)(1, "div", 22);
    i0.ɵɵelementContainer(2, 23);
    i0.ɵɵelementEnd();
    i0.ɵɵelementStart(3, "button", 24);
    i0.ɵɵlistener("click", function TuiDocDemoComponent_form_12_Template_button_click_3_listener() {
      i0.ɵɵrestoreView(_r6);
      const ctx_r1 = i0.ɵɵnextContext();
      return i0.ɵɵresetView(ctx_r1.toggleDetails());
    });
    i0.ɵɵtext(4);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(5, TuiDocDemoComponent_form_12_ng_template_5_Template, 1, 3, "ng-template", null, 4, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementStart(7, "tui-expand", 25);
    i0.ɵɵtemplate(8, TuiDocDemoComponent_form_12_ng_template_8_Template, 11, 6, "ng-template", 26);
    i0.ɵɵelementEnd()();
  }
  if (rf & 2) {
    const icon_r8 = i0.ɵɵreference(6);
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵproperty("formGroup", ctx_r1.testForm);
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngTemplateOutlet", ctx_r1.template);
    i0.ɵɵadvance();
    i0.ɵɵproperty("iconRight", icon_r8);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", ctx_r1.texts[2], " ");
    i0.ɵɵadvance(3);
    i0.ɵɵproperty("expanded", ctx_r1.expanded);
  }
}
function TuiDocDocumentationComponent_h1_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "h1", 6);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", ctx_r0.heading, "\n");
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_th_6_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "th", 14);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"](3);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", ctx_r0.texts[3], " ");
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_tui_badge_6_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-badge", 26);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_tui_badge_8_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-badge", 27);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_ng_container_13_a_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "a", 29);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r2 = core_mjs_["ɵɵnextContext"]().$implicit;
    core_mjs_["ɵɵattribute"]("href", item_r2.reference, core_mjs_["ɵɵsanitizeUrl"]);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", item_r2.type, " ");
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_ng_container_13_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵtext"](0);
  }
  if (rf & 2) {
    const item_r2 = core_mjs_["ɵɵnextContext"]().$implicit;
    core_mjs_["ɵɵtextInterpolate1"](" ", item_r2.type, " ");
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_ng_container_13_span_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "span");
    core_mjs_["ɵɵtext"](1, "\xA0|\xA0");
    core_mjs_["ɵɵelementEnd"]();
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_ng_container_13_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_ng_container_13_a_1_Template, 2, 2, "a", 28)(2, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_ng_container_13_ng_template_2_Template, 1, 1, "ng-template", null, 0, core_mjs_["ɵɵtemplateRefExtractor"])(4, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_ng_container_13_span_4_Template, 2, 0, "span", 5);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const last_r3 = ctx.last;
    const default_r4 = core_mjs_["ɵɵreference"](3);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", item_r2.reference)("ngIfElse", default_r4);
    core_mjs_["ɵɵadvance"](3);
    core_mjs_["ɵɵproperty"]("ngIf", !last_r3);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_tui_select_1_tui_data_list_wrapper_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-data-list-wrapper", 36);
  }
  if (rf & 2) {
    core_mjs_["ɵɵnextContext"](2);
    const selectContent_r7 = core_mjs_["ɵɵreference"](3);
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](2).$implicit;
    core_mjs_["ɵɵproperty"]("itemContent", selectContent_r7)("items", propertyConnector_r6.documentationPropertyValues);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_tui_select_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "tui-select", 33);
    core_mjs_["ɵɵpipe"](1, "tuiShowCleanerPipe");
    core_mjs_["ɵɵlistener"]("ngModelChange", function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_tui_select_1_Template_tui_select_ngModelChange_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r5);
      const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](3).$implicit;
      return core_mjs_["ɵɵresetView"](propertyConnector_r6.onValueChange($event));
    });
    core_mjs_["ɵɵelementStart"](2, "code", 34);
    core_mjs_["ɵɵtext"](3, "null");
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵtemplate"](4, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_tui_select_1_tui_data_list_wrapper_4_Template, 1, 2, "tui-data-list-wrapper", 35);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    core_mjs_["ɵɵnextContext"]();
    const selectContent_r7 = core_mjs_["ɵɵreference"](3);
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](2).$implicit;
    core_mjs_["ɵɵproperty"]("nativeId", propertyConnector_r6.attrName)("ngModel", propertyConnector_r6.documentationPropertyValue)("tuiTextfieldCleaner", core_mjs_["ɵɵpipeBind1"](1, 5, propertyConnector_r6.documentationPropertyType))("tuiTextfieldLabelOutside", true)("valueContent", selectContent_r7);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "code");
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵpipe"](2, "tuiInspectAny");
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const data_r8 = ctx.$implicit;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate"](core_mjs_["ɵɵpipeBind1"](2, 1, data_r8));
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_toggle_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "tui-toggle", 43);
    core_mjs_["ɵɵlistener"]("ngModelChange", function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_toggle_1_Template_tui_toggle_ngModelChange_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r9);
      const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
      return core_mjs_["ɵɵresetView"](propertyConnector_r6.onValueChange($event));
    });
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
    core_mjs_["ɵɵproperty"]("nativeId", propertyConnector_r6.attrName)("ngModel", propertyConnector_r6.documentationPropertyValue)("showIcons", true);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_primitive_textfield_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "tui-primitive-textfield", 44);
    core_mjs_["ɵɵlistener"]("valueChange", function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_primitive_textfield_2_Template_tui_primitive_textfield_valueChange_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r10);
      const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
      return core_mjs_["ɵɵresetView"](propertyConnector_r6.onValueChange($event));
    });
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
    core_mjs_["ɵɵproperty"]("nativeId", propertyConnector_r6.attrName)("tuiTextfieldCleaner", true)("tuiTextfieldLabelOutside", true)("value", propertyConnector_r6.documentationPropertyValue || "");
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_div_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "div", 45)(1, "tui-primitive-textfield", 46);
    core_mjs_["ɵɵpipe"](2, "tuiGetOpacity");
    core_mjs_["ɵɵpipe"](3, "tuiGetColorPipe");
    core_mjs_["ɵɵlistener"]("valueChange", function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_div_3_Template_tui_primitive_textfield_valueChange_1_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r11);
      const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
      const ctx_r0 = core_mjs_["ɵɵnextContext"](3);
      return core_mjs_["ɵɵresetView"](ctx_r0.onColorChange(propertyConnector_r6, $event));
    });
    core_mjs_["ɵɵelement"](4, "input", 47);
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵelementStart"](5, "tui-input-number", 48);
    core_mjs_["ɵɵpipe"](6, "tuiGetOpacity");
    core_mjs_["ɵɵlistener"]("ngModelChange", function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_div_3_Template_tui_input_number_ngModelChange_5_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r11);
      const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
      const ctx_r0 = core_mjs_["ɵɵnextContext"](3);
      return core_mjs_["ɵɵresetView"](ctx_r0.onOpacityChange(propertyConnector_r6, $event));
    });
    core_mjs_["ɵɵtext"](7, " Opacity ");
    core_mjs_["ɵɵelementEnd"]()();
  }
  if (rf & 2) {
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("tuiInputOpacity", core_mjs_["ɵɵpipeBind1"](2, 8, propertyConnector_r6.documentationPropertyValue))("tuiTextfieldLabelOutside", true)("value", core_mjs_["ɵɵpipeBind1"](3, 10, propertyConnector_r6.documentationPropertyValue));
    core_mjs_["ɵɵattribute"]("id", propertyConnector_r6.attrName);
    core_mjs_["ɵɵadvance"](4);
    core_mjs_["ɵɵproperty"]("max", 100)("min", 0)("ngModel", core_mjs_["ɵɵpipeBind1"](6, 12, propertyConnector_r6.documentationPropertyValue))("step", 1);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_input_number_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "tui-input-number", 49);
    core_mjs_["ɵɵlistener"]("ngModelChange", function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_input_number_4_Template_tui_input_number_ngModelChange_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r12);
      const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
      return core_mjs_["ɵɵresetView"](propertyConnector_r6.onValueChange($event || 0));
    });
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
    core_mjs_["ɵɵproperty"]("nativeId", propertyConnector_r6.attrName)("ngModel", propertyConnector_r6.documentationPropertyValue)("step", 1)("tuiTextfieldLabelOutside", true);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_ng_container_5_tui_primitive_textfield_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "tui-primitive-textfield", 44);
    core_mjs_["ɵɵlistener"]("valueChange", function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_ng_container_5_tui_primitive_textfield_1_Template_tui_primitive_textfield_valueChange_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r13);
      const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](5).$implicit;
      return core_mjs_["ɵɵresetView"](propertyConnector_r6.onValueChange($event));
    });
    core_mjs_["ɵɵtext"](1, " Default content ");
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](5).$implicit;
    core_mjs_["ɵɵproperty"]("nativeId", propertyConnector_r6.attrName)("tuiTextfieldCleaner", true)("tuiTextfieldLabelOutside", true)("value", propertyConnector_r6.documentationPropertyValue.toString());
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_ng_container_5_tui_primitive_textfield_1_Template, 2, 4, "tui-primitive-textfield", 50);
    core_mjs_["ɵɵpipe"](2, "tuiIsPrimitivePolymorpheusContentPipe");
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](4).$implicit;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](2, 1, propertyConnector_r6.documentationPropertyValue));
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0, 37);
    core_mjs_["ɵɵtemplate"](1, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_toggle_1_Template, 1, 3, "tui-toggle", 38)(2, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_primitive_textfield_2_Template, 1, 4, "tui-primitive-textfield", 39)(3, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_div_3_Template, 8, 14, "div", 40)(4, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_tui_input_number_4_Template, 1, 4, "tui-input-number", 41)(5, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_ng_container_5_Template, 3, 3, "ng-container", 42);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](3).$implicit;
    core_mjs_["ɵɵproperty"]("ngSwitch", propertyConnector_r6.documentationPropertyType);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngSwitchCase", "boolean");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngSwitchCase", "string");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngSwitchCase", "color");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngSwitchCase", "number");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngSwitchCase", "PolymorpheusContent");
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_tui_select_1_Template, 5, 7, "tui-select", 32)(2, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_2_Template, 3, 3, "ng-template", null, 2, core_mjs_["ɵɵtemplateRefExtractor"])(4, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_ng_template_4_Template, 6, 6, "ng-template", null, 3, core_mjs_["ɵɵtemplateRefExtractor"]);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const noItems_r14 = core_mjs_["ɵɵreference"](5);
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](2).$implicit;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", propertyConnector_r6.hasItems)("ngIfElse", noItems_r14);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "tui-notification", 51);
    core_mjs_["ɵɵpipe"](1, "async");
    core_mjs_["ɵɵtext"](2, " Emit! ");
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"](2).$implicit;
    core_mjs_["ɵɵproperty"]("@emitEvent", core_mjs_["ɵɵpipeBind1"](1, 1, propertyConnector_r6.emits$));
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "td", 30);
    core_mjs_["ɵɵtemplate"](1, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_container_1_Template, 6, 2, "ng-container", 31)(2, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_ng_template_2_Template, 3, 3, "ng-template", null, 1, core_mjs_["ɵɵtemplateRefExtractor"]);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const elseEmitter_r15 = core_mjs_["ɵɵreference"](3);
    const propertyConnector_r6 = core_mjs_["ɵɵnextContext"]().$implicit;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", propertyConnector_r6.shouldShowValues)("ngIfElse", elseEmitter_r15);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "tr", 15)(1, "td", 16)(2, "div", 17)(3, "code", 18);
    core_mjs_["ɵɵtext"](4);
    core_mjs_["ɵɵpipe"](5, "tuiStripOptionalPipe");
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵtemplate"](6, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_tui_badge_6_Template, 1, 0, "tui-badge", 19);
    core_mjs_["ɵɵpipe"](7, "tuiIsOptionalPipe");
    core_mjs_["ɵɵtemplate"](8, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_tui_badge_8_Template, 1, 0, "tui-badge", 20);
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵelementContainer"](9, 21);
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵelementStart"](10, "td", 16)(11, "span", 22)(12, "code", 23);
    core_mjs_["ɵɵtemplate"](13, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_ng_container_13_Template, 5, 3, "ng-container", 24);
    core_mjs_["ɵɵpipe"](14, "tuiDocTypeReference");
    core_mjs_["ɵɵelementEnd"]()()();
    core_mjs_["ɵɵtemplate"](15, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_td_15_Template, 4, 2, "td", 25);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const propertyConnector_r6 = ctx.$implicit;
    const ctx_r0 = core_mjs_["ɵɵnextContext"](3);
    core_mjs_["ɵɵclassProp"]("t-deprecated", propertyConnector_r6.documentationPropertyDeprecated);
    core_mjs_["ɵɵadvance"](3);
    core_mjs_["ɵɵstyleProp"]("color", "var(--tui-accent-active)");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", core_mjs_["ɵɵpipeBind1"](5, 10, propertyConnector_r6.attrName), " ");
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind1"](7, 12, propertyConnector_r6.attrName));
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("ngIf", propertyConnector_r6.documentationPropertyDeprecated);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngTemplateOutlet", propertyConnector_r6.template);
    core_mjs_["ɵɵadvance"](4);
    core_mjs_["ɵɵproperty"]("ngForOf", core_mjs_["ɵɵpipeBind1"](14, 14, propertyConnector_r6.documentationPropertyType));
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("ngIf", ctx_r0.showValues);
  }
}
function TuiDocDocumentationComponent_ng_container_2_table_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "table", 8)(1, "tr", 9)(2, "th", 10);
    core_mjs_["ɵɵtext"](3);
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵelementStart"](4, "th", 11);
    core_mjs_["ɵɵtext"](5);
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵtemplate"](6, TuiDocDocumentationComponent_ng_container_2_table_1_th_6_Template, 2, 1, "th", 12);
    core_mjs_["ɵɵelementEnd"]();
    core_mjs_["ɵɵtemplate"](7, TuiDocDocumentationComponent_ng_container_2_table_1_tr_7_Template, 16, 16, "tr", 13);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const properties_r16 = core_mjs_["ɵɵnextContext"]().ngIf;
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"](3);
    core_mjs_["ɵɵtextInterpolate"](ctx_r0.texts[2]);
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵtextInterpolate"](ctx_r0.type);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", ctx_r0.showValues && !ctx_r0.isAPI);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngForOf", properties_r16);
  }
}
function TuiDocDocumentationComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiDocDocumentationComponent_ng_container_2_table_1_Template, 8, 4, "table", 7);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const properties_r16 = ctx.ngIf;
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", properties_r16.length);
  }
}
const taiga_ui_addon_doc_components_c5 = a0 => ({
  $implicit: a0
});
function TuiDocExampleComponent_h3_0_span_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelement(0, "span", 10);
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    i0.ɵɵproperty("textContent", text_r1);
  }
}
function TuiDocExampleComponent_h3_0_a_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "a", 11);
    i0.ɵɵpipe(1, "async");
    i0.ɵɵlistener("click", function TuiDocExampleComponent_h3_0_a_2_Template_a_click_0_listener($event) {
      i0.ɵɵrestoreView(_r2);
      const ctx_r2 = i0.ɵɵnextContext(2);
      return i0.ɵɵresetView(ctx_r2.copyExampleLink($event.currentTarget));
    });
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("fragment", ctx_r2.id)("icon", ctx_r2.options.linkIcon)("title", i0.ɵɵpipeBind1(1, 3, ctx_r2.copy$));
  }
}
function TuiDocExampleComponent_h3_0_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "h3", 7);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_h3_0_span_1_Template, 1, 1, "span", 8)(2, TuiDocExampleComponent_h3_0_a_2_Template, 2, 5, "a", 9);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("polymorpheusOutlet", ctx_r2.heading);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", ctx_r2.id);
  }
}
function TuiDocExampleComponent_h4_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", text_r4, " ");
  }
}
function TuiDocExampleComponent_h4_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "h4", 12);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_h4_1_ng_container_1_Template, 2, 1, "ng-container", 13);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("polymorpheusOutlet", ctx_r2.description);
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_1_ng_container_2_button_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r6 = ctx.polymorpheusOutlet;
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", text_r6, " ");
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_1_ng_container_2_button_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "button", 23);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_div_2_ng_container_1_div_1_ng_container_2_button_1_ng_container_1_Template, 2, 1, "ng-container", 13);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const tab_r7 = i0.ɵɵnextContext().$implicit;
    const ctx_r2 = i0.ɵɵnextContext(4);
    i0.ɵɵadvance();
    i0.ɵɵproperty("polymorpheusOutlet", ctx_r2.getTabTitle(tab_r7));
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_div_2_ng_container_1_div_1_ng_container_2_button_1_Template, 2, 1, "button", 22);
    i0.ɵɵelementContainerEnd();
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const editContent_r10 = ctx.polymorpheusOutlet;
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", editContent_r10, " ");
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_ng_container_2_ng_container_1_Template, 2, 1, "ng-container", 13);
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const content_r11 = ctx.ngIf;
    i0.ɵɵadvance();
    i0.ɵɵproperty("polymorpheusOutlet", content_r11);
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "button", 26);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext(5);
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" Edit on ", ctx_r2.codeEditor.name, " ");
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "tui-loader", 24);
    i0.ɵɵpipe(1, "async");
    i0.ɵɵlistener("click", function TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_Template_tui_loader_click_0_listener() {
      i0.ɵɵrestoreView(_r8);
      const files_r9 = i0.ɵɵnextContext(3).ngIf;
      const ctx_r2 = i0.ɵɵnextContext();
      return i0.ɵɵresetView(ctx_r2.edit(files_r9));
    });
    i0.ɵɵtemplate(2, TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_ng_container_2_Template, 2, 1, "ng-container", 25)(3, TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_ng_template_3_Template, 2, 1, "ng-template", null, 2, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const defaultEditContent_r12 = i0.ɵɵreference(4);
    const ctx_r2 = i0.ɵɵnextContext(4);
    i0.ɵɵproperty("overlay", true)("showLoader", !!i0.ɵɵpipeBind1(1, 4, ctx_r2.loading$));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("ngIf", ctx_r2.codeEditor == null ? null : ctx_r2.codeEditor.content)("ngIfElse", defaultEditContent_r12);
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "div", 18)(1, "tui-tabs-with-more", 19);
    i0.ɵɵtwoWayListener("activeItemIndexChange", function TuiDocExampleComponent_div_2_ng_container_1_div_1_Template_tui_tabs_with_more_activeItemIndexChange_1_listener($event) {
      i0.ɵɵrestoreView(_r5);
      const ctx_r2 = i0.ɵɵnextContext(3);
      i0.ɵɵtwoWayBindingSet(ctx_r2.activeItemIndex, $event) || (ctx_r2.activeItemIndex = $event);
      return i0.ɵɵresetView($event);
    });
    i0.ɵɵtemplate(2, TuiDocExampleComponent_div_2_ng_container_1_div_1_ng_container_2_Template, 2, 0, "ng-container", 20);
    i0.ɵɵelementEnd();
    i0.ɵɵtemplate(3, TuiDocExampleComponent_div_2_ng_container_1_div_1_tui_loader_3_Template, 5, 6, "tui-loader", 21);
    i0.ɵɵpipe(4, "tuiMapper");
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const tabs_r13 = i0.ɵɵnextContext().ngIf;
    const files_r9 = i0.ɵɵnextContext().ngIf;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵtwoWayProperty("activeItemIndex", ctx_r2.activeItemIndex);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", tabs_r13);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind2(4, 3, files_r9, ctx_r2.visible));
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainer(0, 29);
  }
  if (rf & 2) {
    i0.ɵɵnextContext(4);
    const preview_r14 = i0.ɵɵreference(5);
    i0.ɵɵproperty("ngTemplateOutlet", preview_r14);
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_2_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainer(0, 30);
  }
  if (rf & 2) {
    const tabs_r13 = i0.ɵɵnextContext(2).ngIf;
    const files_r9 = i0.ɵɵnextContext().ngIf;
    const ctx_r2 = i0.ɵɵnextContext();
    const codeSection_r15 = i0.ɵɵreference(7);
    i0.ɵɵproperty("ngTemplateOutlet", codeSection_r15)("ngTemplateOutletContext", i0.ɵɵpureFunction1(2, taiga_ui_addon_doc_components_c5, (files_r9 == null ? null : files_r9[tabs_r13[ctx_r2.activeItemIndex]]) || ""));
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 27);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_div_2_ng_container_1_div_2_ng_container_1_Template, 1, 1, "ng-container", 28)(2, TuiDocExampleComponent_div_2_ng_container_1_div_2_ng_template_2_Template, 1, 4, "ng-template", null, 3, i0.ɵɵtemplateRefExtractor);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const index_r16 = ctx.index;
    const anotherTab_r17 = i0.ɵɵreference(3);
    const ctx_r2 = i0.ɵɵnextContext(3);
    i0.ɵɵclassProp("t-content_animated", !ctx_r2.isE2E)("t-content_visible", ctx_r2.activeItemIndex === index_r16);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", index_r16 === ctx_r2.defaultTabIndex)("ngIfElse", anotherTab_r17);
  }
}
function TuiDocExampleComponent_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_div_2_ng_container_1_div_1_Template, 5, 6, "div", 16)(2, TuiDocExampleComponent_div_2_ng_container_1_div_2_Template, 4, 6, "div", 17);
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const tabs_r13 = ctx.ngIf;
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", tabs_r13.length > 1);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", tabs_r13);
  }
}
function TuiDocExampleComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 14);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_div_2_ng_container_1_Template, 3, 2, "ng-container", 15);
    i0.ɵɵpipe(2, "tuiDocExampleGetTabs");
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const files_r9 = ctx.ngIf;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind2(2, 1, files_r9, ctx_r2.defaultTab));
  }
}
function TuiDocExampleComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "div", 31);
    i0.ɵɵprojection(1);
    i0.ɵɵelementEnd();
  }
}
function TuiDocExampleComponent_ng_template_6_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtext(1);
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r18 = ctx.polymorpheusOutlet;
    i0.ɵɵadvance();
    i0.ɵɵtextInterpolate1(" ", text_r18, " ");
  }
}
function TuiDocExampleComponent_ng_template_6_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementContainerStart(0);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_ng_template_6_ng_container_1_ng_container_1_Template, 2, 1, "ng-container", 33);
    i0.ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const action_r19 = ctx.$implicit;
    const code_r20 = i0.ɵɵnextContext().$implicit;
    i0.ɵɵadvance();
    i0.ɵɵproperty("polymorpheusOutlet", action_r19)("polymorpheusOutletContext", i0.ɵɵpureFunction1(2, taiga_ui_addon_doc_components_c5, code_r20));
  }
}
function TuiDocExampleComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "tui-doc-code", 32);
    i0.ɵɵtemplate(1, TuiDocExampleComponent_ng_template_6_ng_container_1_Template, 2, 4, "ng-container", 20);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const code_r20 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵproperty("code", code_r20);
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r2.codeActions);
  }
}
const _c6 = (a0, a1) => ({
  item: a0,
  index: a1
});
const _c7 = () => ({
  exact: false
});
function TuiDocNavigationComponent_ng_container_3_tui_data_list_1_tui_opt_group_1_a_1_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 17);
  }
  if (rf & 2) {
    const icon_r4 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", icon_r4);
  }
}
function TuiDocNavigationComponent_ng_container_3_tui_data_list_1_tui_opt_group_1_a_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "a", 15);
    core_mjs_["ɵɵlistener"]("click", function TuiDocNavigationComponent_ng_container_3_tui_data_list_1_tui_opt_group_1_a_1_Template_a_click_0_listener() {
      core_mjs_["ɵɵrestoreView"](_r1);
      const ctx_r1 = core_mjs_["ɵɵnextContext"](4);
      const input_r3 = core_mjs_["ɵɵreference"](1);
      return core_mjs_["ɵɵresetView"](ctx_r1.onClick(input_r3));
    });
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵtemplate"](2, TuiDocNavigationComponent_ng_container_3_tui_data_list_1_tui_opt_group_1_a_1_tui_svg_2_Template, 1, 1, "tui-svg", 16);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    core_mjs_["ɵɵproperty"]("fragment", item_r5.fragment)("routerLink", item_r5.route)("target", item_r5.target || "_self");
    core_mjs_["ɵɵattribute"]("rel", item_r5.rel);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", item_r5.title, " ");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", item_r5.icon);
  }
}
function TuiDocNavigationComponent_ng_container_3_tui_data_list_1_tui_opt_group_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "tui-opt-group", 13);
    core_mjs_["ɵɵtemplate"](1, TuiDocNavigationComponent_ng_container_3_tui_data_list_1_tui_opt_group_1_a_1_Template, 3, 6, "a", 14);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const group_r6 = ctx.$implicit;
    const index_r7 = ctx.index;
    const ctx_r1 = core_mjs_["ɵɵnextContext"](3);
    core_mjs_["ɵɵproperty"]("label", ctx_r1.labels[index_r7] || "");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngForOf", group_r6);
  }
}
function TuiDocNavigationComponent_ng_container_3_tui_data_list_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "tui-data-list");
    core_mjs_["ɵɵtemplate"](1, TuiDocNavigationComponent_ng_container_3_tui_data_list_1_tui_opt_group_1_Template, 2, 2, "tui-opt-group", 12);
    core_mjs_["ɵɵpipe"](2, "async");
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngForOf", core_mjs_["ɵɵpipeBind1"](2, 1, ctx_r1.filtered$));
  }
}
function TuiDocNavigationComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiDocNavigationComponent_ng_container_3_tui_data_list_1_Template, 3, 3, "tui-data-list", 11);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
}
function TuiDocNavigationComponent_tui_accordion_item_8_ng_template_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0, 22);
  }
  if (rf & 2) {
    const item_r10 = ctx.$implicit;
    const subIndex_r11 = ctx.index;
    const index_r9 = core_mjs_["ɵɵnextContext"](2).index;
    core_mjs_["ɵɵnextContext"]();
    const pages_r12 = core_mjs_["ɵɵreference"](12);
    core_mjs_["ɵɵproperty"]("ngTemplateOutlet", pages_r12)("ngTemplateOutletContext", core_mjs_["ɵɵpureFunction2"](2, _c6, item_r10, index_r9 * 100 + subIndex_r11));
  }
}
function TuiDocNavigationComponent_tui_accordion_item_8_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 21);
    core_mjs_["ɵɵtemplate"](1, TuiDocNavigationComponent_tui_accordion_item_8_ng_template_4_ng_container_1_Template, 1, 5, "ng-container", 10);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const index_r9 = core_mjs_["ɵɵnextContext"]().index;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngForOf", ctx_r1.items[index_r9]);
  }
}
function TuiDocNavigationComponent_tui_accordion_item_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "tui-accordion-item", 18);
    core_mjs_["ɵɵtwoWayListener"]("openChange", function TuiDocNavigationComponent_tui_accordion_item_8_Template_tui_accordion_item_openChange_0_listener($event) {
      const index_r9 = core_mjs_["ɵɵrestoreView"](_r8).index;
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      core_mjs_["ɵɵtwoWayBindingSet"](ctx_r1.openPagesArr[index_r9], $event) || (ctx_r1.openPagesArr[index_r9] = $event);
      return core_mjs_["ɵɵresetView"]($event);
    });
    core_mjs_["ɵɵelementStart"](1, "span", 19)(2, "strong");
    core_mjs_["ɵɵtext"](3);
    core_mjs_["ɵɵelementEnd"]()();
    core_mjs_["ɵɵtemplate"](4, TuiDocNavigationComponent_tui_accordion_item_8_ng_template_4_Template, 2, 1, "ng-template", 20);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const label_r13 = ctx.$implicit;
    const index_r9 = ctx.index;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("borders", null);
    core_mjs_["ɵɵtwoWayProperty"]("open", !!ctx_r1.openPagesArr[index_r9]);
    core_mjs_["ɵɵadvance"](3);
    core_mjs_["ɵɵtextInterpolate"](label_r13);
  }
}
function TuiDocNavigationComponent_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0, 22);
  }
  if (rf & 2) {
    const item_r14 = ctx.$implicit;
    const index_r15 = ctx.index;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    const pages_r12 = core_mjs_["ɵɵreference"](12);
    core_mjs_["ɵɵproperty"]("ngTemplateOutlet", pages_r12)("ngTemplateOutletContext", core_mjs_["ɵɵpureFunction2"](2, _c6, item_r14, ctx_r1.items.length - 1 + index_r15));
  }
}
function TuiDocNavigationComponent_ng_template_11_a_0_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 17);
  }
  if (rf & 2) {
    const icon_r17 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", icon_r17);
  }
}
function TuiDocNavigationComponent_ng_template_11_a_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "a", 24);
    core_mjs_["ɵɵlistener"]("click", function TuiDocNavigationComponent_ng_template_11_a_0_Template_a_click_0_listener() {
      core_mjs_["ɵɵrestoreView"](_r16);
      const ctx_r1 = core_mjs_["ɵɵnextContext"](2);
      return core_mjs_["ɵɵresetView"](ctx_r1.closeMenu());
    });
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵtemplate"](2, TuiDocNavigationComponent_ng_template_11_a_0_tui_svg_2_Template, 1, 1, "tui-svg", 16);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const item_r18 = core_mjs_["ɵɵnextContext"]().item;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("routerLink", item_r18.route)("target", item_r18.target || "_self")("tuiScrollIntoViewLink", ctx_r1.isActive(item_r18.route));
    core_mjs_["ɵɵattribute"]("rel", item_r18.rel);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", item_r18.title, " ");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", item_r18.icon);
  }
}
function TuiDocNavigationComponent_ng_template_11_ng_template_1_button_1_tui_svg_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 17);
  }
  if (rf & 2) {
    const icon_r21 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", icon_r21);
  }
}
function TuiDocNavigationComponent_ng_template_11_ng_template_1_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r19 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "button", 30);
    core_mjs_["ɵɵlistener"]("click", function TuiDocNavigationComponent_ng_template_11_ng_template_1_button_1_Template_button_click_0_listener() {
      core_mjs_["ɵɵrestoreView"](_r19);
      const index_r20 = core_mjs_["ɵɵnextContext"](2).index;
      const ctx_r1 = core_mjs_["ɵɵnextContext"]();
      return core_mjs_["ɵɵresetView"](ctx_r1.onGroupClick(index_r20));
    });
    core_mjs_["ɵɵelement"](1, "tui-svg", 31);
    core_mjs_["ɵɵtext"](2);
    core_mjs_["ɵɵtemplate"](3, TuiDocNavigationComponent_ng_template_11_ng_template_1_button_1_tui_svg_3_Template, 1, 1, "tui-svg", 16);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r21 = core_mjs_["ɵɵnextContext"](2);
    const index_r20 = ctx_r21.index;
    const item_r18 = ctx_r21.item;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵclassProp"]("t-chevron_active", !!ctx_r1.openPagesGroupsArr[index_r20]);
    core_mjs_["ɵɵproperty"]("src", ctx_r1.icons.more);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", item_r18.title, " ");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", item_r18.icon);
  }
}
function TuiDocNavigationComponent_ng_template_11_ng_template_1_a_4_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-svg", 17);
  }
  if (rf & 2) {
    const icon_r24 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", icon_r24);
  }
}
function TuiDocNavigationComponent_ng_template_11_ng_template_1_a_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "a", 32);
    core_mjs_["ɵɵlistener"]("click", function TuiDocNavigationComponent_ng_template_11_ng_template_1_a_4_Template_a_click_0_listener() {
      core_mjs_["ɵɵrestoreView"](_r23);
      const ctx_r1 = core_mjs_["ɵɵnextContext"](3);
      return core_mjs_["ɵɵresetView"](ctx_r1.closeMenu());
    });
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵtemplate"](2, TuiDocNavigationComponent_ng_template_11_ng_template_1_a_4_tui_svg_2_Template, 1, 1, "tui-svg", 16);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const subPage_r25 = ctx.$implicit;
    const ctx_r1 = core_mjs_["ɵɵnextContext"](3);
    core_mjs_["ɵɵproperty"]("fragment", subPage_r25.fragment)("routerLink", subPage_r25.route)("target", subPage_r25.target || "_self")("tuiScrollIntoViewLink", ctx_r1.isActive(subPage_r25.route));
    core_mjs_["ɵɵattribute"]("rel", subPage_r25.rel);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate1"](" ", subPage_r25.title, " ");
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("polymorpheusOutlet", subPage_r25.icon);
  }
}
function TuiDocNavigationComponent_ng_template_11_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "div", 25);
    core_mjs_["ɵɵtemplate"](1, TuiDocNavigationComponent_ng_template_11_ng_template_1_button_1_Template, 4, 5, "button", 26);
    core_mjs_["ɵɵelementStart"](2, "tui-expand", 27)(3, "div", 28);
    core_mjs_["ɵɵtemplate"](4, TuiDocNavigationComponent_ng_template_11_ng_template_1_a_4_Template, 3, 7, "a", 29);
    core_mjs_["ɵɵelementEnd"]()()();
  }
  if (rf & 2) {
    const ctx_r21 = core_mjs_["ɵɵnextContext"]();
    const index_r20 = ctx_r21.index;
    const item_r18 = ctx_r21.item;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("routerLinkActiveOptions", core_mjs_["ɵɵpureFunction0"](4, _c7));
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", item_r18.subPages);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("expanded", !!ctx_r1.openPagesGroupsArr[index_r20]);
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵproperty"]("ngForOf", ctx_r1.$pages(item_r18.subPages));
  }
}
function TuiDocNavigationComponent_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵtemplate"](0, TuiDocNavigationComponent_ng_template_11_a_0_Template, 3, 6, "a", 23)(1, TuiDocNavigationComponent_ng_template_11_ng_template_1_Template, 5, 5, "ng-template", null, 2, core_mjs_["ɵɵtemplateRefExtractor"]);
  }
  if (rf & 2) {
    const item_r18 = ctx.item;
    const subPagesTemplate_r26 = core_mjs_["ɵɵreference"](2);
    core_mjs_["ɵɵproperty"]("ngIf", !item_r18.subPages)("ngIfElse", subPagesTemplate_r26);
  }
}
const _c8 = ["tuiDocHeader", ""];
function TuiDocHeaderComponent_tui_doc_navigation_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-doc-navigation", 4);
  }
}
function TuiDocHeaderComponent_img_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "img", 5);
  }
  if (rf & 2) {
    const src_r1 = ctx.polymorpheusOutlet;
    core_mjs_["ɵɵproperty"]("src", src_r1, core_mjs_["ɵɵsanitizeUrl"]);
  }
}
function TuiDocSeeAlsoComponent_ng_container_2_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtext"](1);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵtextInterpolate"](", ");
  }
}
function TuiDocSeeAlsoComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵelement"](1, "a", 2);
    core_mjs_["ɵɵtemplate"](2, TuiDocSeeAlsoComponent_ng_container_2_ng_container_2_Template, 2, 1, "ng-container", 3);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const last_r2 = ctx.last;
    const ctx_r2 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("innerText", item_r1)("routerLink", ctx_r2.getRouterLink(item_r1));
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", !last_r2);
  }
}
function TuiDocSourceCodeComponent_a_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "a", 1);
  }
  if (rf & 2) {
    const link_r1 = ctx.polymorpheusOutlet;
    const ctx_r1 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("href", link_r1, core_mjs_["ɵɵsanitizeUrl"])("icon", ctx_r1.icons.code)("title", ctx_r1.text);
  }
}
function TuiLanguageSwitcherComponent_tui_data_list_2_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r1 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "button", 3);
    i0.ɵɵpipe(1, "titlecase");
    i0.ɵɵlistener("click", function TuiLanguageSwitcherComponent_tui_data_list_2_button_1_Template_button_click_0_listener() {
      const name_r2 = i0.ɵɵrestoreView(_r1).$implicit;
      const ctx_r2 = i0.ɵɵnextContext(2);
      return i0.ɵɵresetView(ctx_r2.switcher.setLanguage(name_r2));
    });
    i0.ɵɵelement(2, "img", 4);
    i0.ɵɵpipe(3, "tuiFlag");
    i0.ɵɵtext(4);
    i0.ɵɵpipe(5, "titlecase");
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const name_r2 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext(2);
    i0.ɵɵproperty("value", i0.ɵɵpipeBind1(1, 3, name_r2));
    i0.ɵɵadvance(2);
    i0.ɵɵproperty("src", i0.ɵɵpipeBind1(3, 5, ctx_r2.flags.get(name_r2)), i0.ɵɵsanitizeUrl);
    i0.ɵɵadvance(2);
    i0.ɵɵtextInterpolate1(" ", i0.ɵɵpipeBind1(5, 7, name_r2), " ");
  }
}
function TuiLanguageSwitcherComponent_tui_data_list_2_Template(rf, ctx) {
  if (rf & 1) {
    i0.ɵɵelementStart(0, "tui-data-list");
    i0.ɵɵtemplate(1, TuiLanguageSwitcherComponent_tui_data_list_2_button_1_Template, 6, 9, "button", 2);
    i0.ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵadvance();
    i0.ɵɵproperty("ngForOf", ctx_r2.names);
  }
}
const _c9 = [[["tuiDocNavigation"]], [["tuiDocHeader"]], [["tuiOverContent"]], [["tuiOverDialogs"]], [["tuiOverAlerts"]], [["tuiOverPortals"]], [["tuiOverHints"]]];
const _c10 = ["tuiDocNavigation", "tuiDocHeader", "tuiOverContent", "tuiOverDialogs", "tuiOverAlerts", "tuiOverPortals", "tuiOverHints"];
function TuiDocMainComponent_tui_theme_night_0_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-theme-night");
  }
}
const _c11 = a0 => ({
  exact: a0
});
function TuiDocPageComponent_tui_tag_3_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-tag", 9);
  }
}
function TuiDocPageComponent_tui_tag_4_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-tag", 10);
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("autoColor", true)("value", ctx_r0.package);
  }
}
function TuiDocPageComponent_tui_tabs_with_more_5_ng_container_1_ng_container_1_a_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementStart"](0, "a", 14);
    core_mjs_["ɵɵpipe"](1, "tuiReplace");
    core_mjs_["ɵɵtext"](2);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const tabName_r3 = core_mjs_["ɵɵnextContext"]().ngIf;
    const first_r4 = core_mjs_["ɵɵnextContext"]().first;
    const ctx_r0 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵproperty"]("routerLink", first_r4 ? "./" : core_mjs_["ɵɵpipeBind3"](1, 3, tabName_r3, ctx_r0.from, ctx_r0.to))("routerLinkActiveOptions", core_mjs_["ɵɵpureFunction1"](7, _c11, first_r4));
    core_mjs_["ɵɵadvance"](2);
    core_mjs_["ɵɵtextInterpolate1"](" ", tabName_r3, " ");
  }
}
function TuiDocPageComponent_tui_tabs_with_more_5_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiDocPageComponent_tui_tabs_with_more_5_ng_container_1_ng_container_1_a_1_Template, 3, 9, "a", 13);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
}
function TuiDocPageComponent_tui_tabs_with_more_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiDocPageComponent_tui_tabs_with_more_5_ng_container_1_ng_container_1_Template, 2, 0, "ng-container", 12);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const tab_r5 = ctx.$implicit;
    const index_r6 = ctx.index;
    const ctx_r0 = core_mjs_["ɵɵnextContext"](2);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", tab_r5.pageTab || ctx_r0.defaultTabs[index_r6]);
  }
}
function TuiDocPageComponent_tui_tabs_with_more_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = core_mjs_["ɵɵgetCurrentView"]();
    core_mjs_["ɵɵelementStart"](0, "tui-tabs-with-more", 11);
    core_mjs_["ɵɵtwoWayListener"]("activeItemIndexChange", function TuiDocPageComponent_tui_tabs_with_more_5_Template_tui_tabs_with_more_activeItemIndexChange_0_listener($event) {
      core_mjs_["ɵɵrestoreView"](_r2);
      const ctx_r0 = core_mjs_["ɵɵnextContext"]();
      core_mjs_["ɵɵtwoWayBindingSet"](ctx_r0.activeItemIndex, $event) || (ctx_r0.activeItemIndex = $event);
      return core_mjs_["ɵɵresetView"]($event);
    });
    core_mjs_["ɵɵtemplate"](1, TuiDocPageComponent_tui_tabs_with_more_5_ng_container_1_Template, 2, 1, "ng-container", 8);
    core_mjs_["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵtwoWayProperty"]("activeItemIndex", ctx_r0.activeItemIndex);
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngForOf", ctx_r0.tabConnectors);
  }
}
function TuiDocPageComponent_tui_doc_see_also_9_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelement"](0, "tui-doc-see-also", 15);
  }
  if (rf & 2) {
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵproperty"]("seeAlso", ctx_r0.seeAlso);
  }
}
function TuiDocPageComponent_ng_container_10_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainer"](0, 17);
  }
  if (rf & 2) {
    const tab_r7 = core_mjs_["ɵɵnextContext"]().$implicit;
    core_mjs_["ɵɵproperty"]("ngTemplateOutlet", tab_r7.template);
  }
}
function TuiDocPageComponent_ng_container_10_Template(rf, ctx) {
  if (rf & 1) {
    core_mjs_["ɵɵelementContainerStart"](0);
    core_mjs_["ɵɵtemplate"](1, TuiDocPageComponent_ng_container_10_ng_container_1_Template, 1, 1, "ng-container", 16);
    core_mjs_["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const index_r8 = ctx.index;
    const ctx_r0 = core_mjs_["ɵɵnextContext"]();
    core_mjs_["ɵɵadvance"]();
    core_mjs_["ɵɵproperty"]("ngIf", index_r8 === ctx_r0.activeItemIndex);
  }
}
let TuiDocCodeComponent = /*#__PURE__*/(() => {
  class TuiDocCodeComponent {
    constructor(markdownCodeProcessor) {
      this.markdownCodeProcessor = markdownCodeProcessor;
      this.rawLoader$$ = new internal_BehaviorSubject/* BehaviorSubject */.t('');
      this.filename = '';
      this.copy$ = new internal_Subject/* Subject */.B();
      this.icon$ = this.copy$.pipe((0,operators_switchMap/* switchMap */.n)(() => (0,observable_timer/* timer */.O)(2000).pipe((0,operators_map/* map */.T)(() => 'tuiIconCopyLarge'), (0,operators_startWith/* startWith */.Z)('tuiIconCheckLarge'))));
      this.processor$ = this.rawLoader$$.pipe((0,operators_switchMap/* switchMap */.n)(taiga_ui_addon_doc_utils/* tuiRawLoad */.XZ), (0,operators_map/* map */.T)(value => this.markdownCodeProcessor(value)));
    }
    set code(code) {
      this.rawLoader$$.next(code);
    }
    get hasFilename() {
      return !!this.filename;
    }
  }
  TuiDocCodeComponent.ɵfac = function TuiDocCodeComponent_Factory(t) {
    return new (t || TuiDocCodeComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_EXAMPLE_MARKDOWN_CODE_PROCESSOR */.Wl));
  };
  TuiDocCodeComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDocCodeComponent,
    selectors: [["tui-doc-code"]],
    hostVars: 2,
    hostBindings: function TuiDocCodeComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("_has-filename", ctx.hasFilename);
      }
    },
    inputs: {
      filename: "filename",
      code: "code"
    },
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 3,
    vars: 4,
    consts: [["class", "t-header", 4, "ngIf"], ["class", "t-code", 4, "ngFor", "ngForOf"], [1, "t-header"], [1, "t-code"], [3, "lineNumbers", "highlight"], [1, "t-code-actions"], ["tuiIconButton", "", "appearance", "icon", "size", "xs", 1, "t-copy-button", 3, "click", "icon", "cdkCopyToClipboard"]],
    template: function TuiDocCodeComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵtemplate"](0, TuiDocCodeComponent_p_0_Template, 2, 1, "p", 0)(1, TuiDocCodeComponent_pre_1_Template, 13, 6, "pre", 1);
        core_mjs_["ɵɵpipe"](2, "async");
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", ctx.filename);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngForOf", core_mjs_["ɵɵpipeBind1"](2, 2, ctx.processor$));
      }
    },
    dependencies: [taiga_ui_core_components_button/* TuiButtonComponent */.SM, common_mjs_.NgIf, common_mjs_.NgForOf, ngx_highlightjs/* Highlight */.f4, CdkCopyToClipboard, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{display:block}.t-header[_ngcontent-%COMP%]{font:var(--tui-font-text-s);font-weight:bold}.t-header[_ngcontent-%COMP%] + .t-code[_ngcontent-%COMP%]{border-radius:.25rem}.t-code[_ngcontent-%COMP%]{position:relative;margin:0;white-space:normal;outline:1px solid var(--tui-base-03)}.t-code[_ngcontent-%COMP%]     .hljs-ln{width:-webkit-max-content;width:max-content}.t-code[_ngcontent-%COMP%] + .t-code[_ngcontent-%COMP%]{margin-top:1rem}.t-code-actions[_ngcontent-%COMP%]{position:absolute;top:.75rem;right:.75rem;display:flex;justify-content:center;align-items:center;flex-direction:row-reverse}tui-root._mobile[_nghost-%COMP%]   .t-code-actions[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-code-actions[_ngcontent-%COMP%]{padding:.3125rem;border-radius:.25rem;border:1px solid var(--tui-base-04)}.t-copy-button[_ngcontent-%COMP%] +*:not(:empty){margin-right:.375rem}.hljs[_ngcontent-%COMP%]:not(:empty){font:var(--tui-font-text-m);font-size:.875rem;padding:1.5rem 2rem;font-family:monospace;word-wrap:break-word;white-space:pre-wrap}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm){.hljs[_ngcontent-%COMP%]:not(:empty)::-webkit-scrollbar, .hljs[_ngcontent-%COMP%]:not(:empty)::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:.375rem solid transparent}.hljs[_ngcontent-%COMP%]:not(:empty)::-webkit-scrollbar{background-color:transparent}.hljs[_ngcontent-%COMP%]:not(:empty)::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}.hljs[_ngcontent-%COMP%]:not(:empty)::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}.hljs[_ngcontent-%COMP%]:not(:empty)::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}tui-root._mobile[_nghost-%COMP%]   .hljs[_ngcontent-%COMP%]:not(:empty), tui-root._mobile   [_nghost-%COMP%]   .hljs[_ngcontent-%COMP%]:not(:empty){padding:1rem}.t-code-actions[_ngcontent-%COMP%], .hljs[_ngcontent-%COMP%]:not(:empty){background:var(--tui-base-01)}@supports (background: color-mix(in srgb,var(--tui-base-01),#222 2%)){.t-code-actions[_ngcontent-%COMP%], .hljs[_ngcontent-%COMP%]:not(:empty){background:color-mix(in srgb,var(--tui-base-01),#222 2%)}}"],
    changeDetection: 0
  });
  return TuiDocCodeComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocCodeModule = /*#__PURE__*/(() => {
  class TuiDocCodeModule {}
  TuiDocCodeModule.ɵfac = function TuiDocCodeModule_Factory(t) {
    return new (t || TuiDocCodeModule)();
  };
  TuiDocCodeModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocCodeModule
  });
  TuiDocCodeModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, taiga_ui_core_components_svg/* TuiSvgModule */.vl, ngx_highlightjs/* HighlightModule */.fw, taiga_ui_core_components_button/* TuiButtonModule */.Pv, ClipboardModule]]
  });
  return TuiDocCodeModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const COPIED_TIMEOUT = 1500;
let TuiDocCopyComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDocCopyComponent {
    constructor(texts$) {
      this.texts$ = texts$;
      this.copy$ = new Subject();
    }
    get copied$() {
      return this.copy$.pipe(switchMap(() => timer(COPIED_TIMEOUT).pipe(map(ALWAYS_FALSE_HANDLER), startWith(true))));
    }
    onClick() {
      this.copy$.next();
    }
  }
  TuiDocCopyComponent.ɵfac = function TuiDocCopyComponent_Factory(t) {
    return new (t || TuiDocCopyComponent)(i0.ɵɵdirectiveInject(TUI_COPY_TEXTS));
  };
  TuiDocCopyComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiDocCopyComponent,
    selectors: [["tui-doc-copy"]],
    features: [i0.ɵɵProvidersFeature([TuiDestroyService])],
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 2,
    vars: 3,
    consts: [["appearance", "", "size", "s", "tuiButton", "", "type", "button", "class", "t-copy", 3, "title", "click", 4, "ngIf"], ["appearance", "", "size", "s", "tuiButton", "", "type", "button", 1, "t-copy", 3, "click", "title"], [1, "t-content"], [1, "t-initial"]],
    template: function TuiDocCopyComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TuiDocCopyComponent_button_0_Template, 6, 7, "button", 0);
        i0.ɵɵpipe(1, "async");
      }
      if (rf & 2) {
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(1, 1, ctx.texts$));
      }
    },
    dependencies: [i2.TuiButtonComponent, i4.NgIf, i4.AsyncPipe],
    styles: ["[_nghost-%COMP%]{position:relative;display:inline-block;vertical-align:middle;border-radius:var(--tui-radius-m)}.t-copy[_ngcontent-%COMP%]{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;width:100%;color:var(--tui-text-01);background:var(--tui-base-01);overflow:hidden}.t-copy[_ngcontent-%COMP%]:hover{background:var(--tui-base-02)}.t-initial[_ngcontent-%COMP%]{white-space:nowrap}.t-initial[_ngcontent-%COMP%]:empty:before{content:attr(data-text)}.t-content[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;flex-direction:column;transform:translateY(1rem);text-align:center;line-height:2rem}.t-content_moved[_ngcontent-%COMP%]{transform:translateY(-1rem)}"],
    changeDetection: 0
  });
  __decorate([tuiPure], TuiDocCopyComponent.prototype, "copied$", null);
  return TuiDocCopyComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocCopyModule = /*#__PURE__*/(() => {
  class TuiDocCopyModule {}
  TuiDocCopyModule.ɵfac = function TuiDocCopyModule_Factory(t) {
    return new (t || TuiDocCopyModule)();
  };
  TuiDocCopyModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocCopyModule
  });
  TuiDocCopyModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, taiga_ui_core_components_button/* TuiButtonModule */.Pv]]
  });
  return TuiDocCopyModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const taiga_ui_addon_doc_components_MIN_WIDTH = 160;
let TuiDocDemoComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDocDemoComponent {
    constructor(options, isMobile, el, locationRef, urlSerializer, texts, urlStateHandler) {
      var _a, _b;
      this.options = options;
      this.isMobile = isMobile;
      this.el = el;
      this.locationRef = locationRef;
      this.urlSerializer = urlSerializer;
      this.texts = texts;
      this.urlStateHandler = urlStateHandler;
      this.control = null;
      this.sticky = true;
      this.template = null;
      this.updateOnVariants = ['change', 'blur', 'submit'];
      this.updateOn = this.params.updateOn || this.updateOnVariants[0];
      this.opaque = tuiCoerceValueIsTrue((_a = this.params.sandboxOpaque) !== null && _a !== void 0 ? _a : true);
      this.expanded = tuiCoerceValueIsTrue((_b = this.params.sandboxExpanded) !== null && _b !== void 0 ? _b : false);
      this.mode = this.params.tuiMode || null;
      this.sandboxWidth = tuiToInteger(this.params.sandboxWidth);
      this.change$ = new Subject();
      this.items = ['onLight', 'onDark'];
    }
    onResize() {
      this.updateWidth();
      this.onMouseUp();
    }
    onMouseUp() {
      this.updateUrl({
        sandboxWidth: this.sandboxWidth
      });
    }
    ngOnInit() {
      this.createForm();
      this.updateWidth(this.sandboxWidth + this.delta);
    }
    onModeChange(mode) {
      this.mode = mode;
      this.updateUrl({
        sandboxWidth: this.sandboxWidth
      });
      this.change$.next();
    }
    toggleDetails() {
      this.expanded = !this.expanded;
      this.updateUrl({
        sandboxExpanded: this.expanded
      });
    }
    changeOpaque(opaque) {
      this.opaque = opaque;
      this.updateUrl({
        sandboxOpaque: this.opaque
      });
    }
    updateOnChange(updateOn) {
      this.updateOn = updateOn;
      this.updateUrl({
        updateOn
      });
      this.createForm();
    }
    updateWidth(width = NaN) {
      if (!this.resizer || !this.resizeable || !this.content) {
        return;
      }
      const safe = width || this.resizeable.nativeElement.clientWidth;
      const total = this.el.nativeElement.clientWidth;
      const clamped = Math.round(tuiClamp(safe, taiga_ui_addon_doc_components_MIN_WIDTH, total)) - this.delta;
      const validated = safe < total ? clamped : NaN;
      this.resizer.nativeElement.textContent = String(clamped || '-');
      this.resizeable.nativeElement.style.width = validated ? tuiPx(safe) : '';
      this.sandboxWidth = validated;
    }
    get delta() {
      return this.resizeable && this.content ? this.resizeable.nativeElement.clientWidth - this.content.nativeElement.clientWidth : 0;
    }
    updateUrl(params) {
      const tree = this.getUrlTree();
      const {
        queryParams
      } = tree;
      delete queryParams.sandboxWidth;
      delete queryParams.tuiMode;
      tree.queryParams = Object.assign(Object.assign({}, queryParams), tuiCleanObject(Object.assign({
        tuiMode: this.mode
      }, params)));
      this.locationRef.go(this.urlStateHandler(tree));
    }
    createForm() {
      const {
        control,
        updateOn
      } = this;
      if (control) {
        this.testForm = new FormGroup({
          testValue: control
        }, {
          updateOn
        });
      }
    }
    getUrlTree() {
      return this.urlSerializer.parse(this.locationRef.path());
    }
    get params() {
      return this.getUrlTree().queryParams;
    }
  }
  TuiDocDemoComponent.ɵfac = function TuiDocDemoComponent_Factory(t) {
    return new (t || TuiDocDemoComponent)(i0.ɵɵdirectiveInject(TUI_ARROW_OPTIONS), i0.ɵɵdirectiveInject(TUI_IS_MOBILE), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Location$1), i0.ɵɵdirectiveInject(UrlSerializer), i0.ɵɵdirectiveInject(TUI_DOC_DEMO_TEXTS), i0.ɵɵdirectiveInject(TUI_DOC_URL_STATE_HANDLER));
  };
  TuiDocDemoComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiDocDemoComponent,
    selectors: [["tui-doc-demo"]],
    contentQueries: function TuiDocDemoComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        i0.ɵɵcontentQuery(dirIndex, TemplateRef, 5);
      }
      if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);
      }
    },
    viewQuery: function TuiDocDemoComponent_Query(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵviewQuery(TuiResizeableDirective, 7);
        i0.ɵɵviewQuery(taiga_ui_addon_doc_components_c1, 7);
        i0.ɵɵviewQuery(taiga_ui_addon_doc_components_c2, 7);
      }
      if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizeable = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.content = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.resizer = _t.first);
      }
    },
    hostVars: 2,
    hostBindings: function TuiDocDemoComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵlistener("resize", function TuiDocDemoComponent_resize_HostBindingHandler() {
          return ctx.onResize();
        }, false, i0.ɵɵresolveWindow)("mouseup.silent", function TuiDocDemoComponent_mouseup_silent_HostBindingHandler() {
          return ctx.onMouseUp();
        }, false, i0.ɵɵresolveDocument);
      }
      if (rf & 2) {
        i0.ɵɵclassProp("_sticky", ctx.sticky);
      }
    },
    inputs: {
      control: "control",
      sticky: "sticky"
    },
    features: [i0.ɵɵProvidersFeature([TuiDestroyService, {
      provide: TuiModeDirective,
      useExisting: forwardRef(() => TuiDocDemoComponent)
    }])],
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 16,
    vars: 14,
    consts: [["tooltip", ""], ["desktop", ""], ["content", ""], ["resizer", ""], ["icon", ""], [1, "t-bg-toggle", 3, "tuiMode"], [4, "ngIf", "ngIfElse"], ["size", "m", 1, "t-checkbox", 3, "ngModelChange", "ngModel"], ["tuiResizeable", "", 1, "t-wrapper"], ["id", "demo-content", 1, "t-content"], ["class", "t-form", 3, "formGroup", 4, "ngIf"], [1, "t-resizer", 3, "tuiSizeChange", "tuiResizer"], ["routerLink", "/directives/mode", "tuiLink", "", "tuiMode", "onDark"], ["tuiTextfieldSize", "s", 1, "t-mode", 3, "ngModelChange", "ngModel", "tuiHintContent", "tuiTextfieldCleaner"], [3, "items", 4, "tuiDataList"], [3, "items"], ["describeId", "form", 3, "content"], ["tuiGroup", "", 1, "t-group", 3, "collapsed"], ["nativeId", "form", "size", "s", 1, "tui-group__auto-width-item", 3, "ngModelChange", "hideRadio", "item", "ngModel"], ["item", "onDark", "nativeId", "form", "size", "s", 1, "tui-group__auto-width-item", 3, "ngModelChange", "hideRadio", "ngModel"], ["item", "onLight", "nativeId", "form", "size", "s", 1, "tui-group__auto-width-item", 3, "ngModelChange", "hideRadio", "ngModel"], [1, "t-form", 3, "formGroup"], [1, "t-input-wrapper"], [3, "ngTemplateOutlet"], ["automation-id", "tui-demo-button__toggle-details", "size", "s", "tuiButton", "", "type", "button", 1, "t-button", 3, "click", "iconRight"], [1, "t-expand", 3, "expanded"], ["tuiExpandContent", ""], [1, "t-icon", 3, "src"], [1, "t-value"], ["tuiGroup", "", 1, "t-form-controls"], ["automation-id", "tui-demo-select__expand-update-on", "tuiTextfieldSize", "s", 1, "t-select", 3, "ngModelChange", "ngModel", "ngModelOptions"], ["automation-id", "tui-demo-button__reset-state", "size", "s", "tuiButton", "", "type", "reset", 1, "tui-group__auto-width-item"], ["automation-id", "tui-demo-button__submit-state", "size", "s", "tuiButton", "", "type", "submit", 1, "tui-group__auto-width-item"]],
    template: function TuiDocDemoComponent_Template(rf, ctx) {
      if (rf & 1) {
        const _r1 = i0.ɵɵgetCurrentView();
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 5);
        i0.ɵɵtemplate(1, TuiDocDemoComponent_ng_template_1_Template, 4, 1, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor)(3, TuiDocDemoComponent_ng_container_3_Template, 4, 3, "ng-container", 6)(4, TuiDocDemoComponent_ng_template_4_Template, 9, 9, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
        i0.ɵɵelementStart(6, "tui-checkbox-labeled", 7);
        i0.ɵɵlistener("ngModelChange", function TuiDocDemoComponent_Template_tui_checkbox_labeled_ngModelChange_6_listener($event) {
          i0.ɵɵrestoreView(_r1);
          return i0.ɵɵresetView(ctx.changeOpaque($event));
        });
        i0.ɵɵtext(7);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(8, "div", 8)(9, "div", 9)(10, "div", null, 2);
        i0.ɵɵtemplate(12, TuiDocDemoComponent_form_12_Template, 9, 5, "form", 10);
        i0.ɵɵprojection(13);
        i0.ɵɵelementEnd()();
        i0.ɵɵelementStart(14, "div", 11, 3);
        i0.ɵɵlistener("tuiSizeChange", function TuiDocDemoComponent_Template_div_tuiSizeChange_14_listener($event) {
          i0.ɵɵrestoreView(_r1);
          return i0.ɵɵresetView(ctx.updateWidth($event[0]));
        });
        i0.ɵɵelementEnd()();
      }
      if (rf & 2) {
        const desktop_r9 = i0.ɵɵreference(5);
        i0.ɵɵproperty("tuiMode", null);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngIf", ctx.isMobile)("ngIfElse", desktop_r9);
        i0.ɵɵadvance(3);
        i0.ɵɵproperty("ngModel", ctx.opaque);
        i0.ɵɵadvance();
        i0.ɵɵtextInterpolate1(" ", ctx.texts[1], " ");
        i0.ɵɵadvance();
        i0.ɵɵclassProp("t-wrapper_dark", ctx.mode === "onDark")("t-wrapper_gray", ctx.mode === "onLight")("t-wrapper_transparent", !ctx.opaque);
        i0.ɵɵadvance(4);
        i0.ɵɵproperty("ngIf", ctx.testForm);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("tuiResizer", i0.ɵɵpureFunction0(13, taiga_ui_addon_doc_components_c3));
      }
    },
    dependencies: [i2.TuiLinkComponent, i1.TuiSelectComponent, i1.TuiDataListWrapperComponent, i2.TuiTooltipComponent, i1.TuiRadioBlockComponent, i1.TuiCheckboxLabeledComponent, i2.TuiButtonComponent, i2.TuiSvgComponent, i2.TuiExpandComponent, i2.TuiModeDirective, i6.RouterLinkWithHref, i4.NgIf, i1.TuiSelectDirective, i2.TuiTextfieldSizeDirective, i5.NgControlStatus, i5.NgModel, i2.TuiHintOptionsDirective, i2.TuiTextfieldCleanerDirective, i2.TuiDataListDirective, i2.TuiGroupDirective, i6$1.TuiResizeableDirective, i5.ɵNgNoValidate, i5.NgControlStatusGroup, i5.FormGroupDirective, i4.NgTemplateOutlet, i2.TuiExpandContentDirective, i6$1.TuiResizerDirective, i4.JsonPipe],
    styles: ["[_nghost-%COMP%]{position:relative;display:block;min-width:100%;margin:1.5rem 0}.t-bg-toggle[_ngcontent-%COMP%]{position:absolute;bottom:calc(100% + .75rem);display:flex;align-items:center;justify-content:flex-end;pointer-events:none;width:100%}.t-bg-toggle[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{pointer-events:auto}.t-wrapper[_ngcontent-%COMP%]{box-shadow:var(--tui-shadow-dropdown);display:flex;border:1px solid var(--tui-base-03);border-radius:var(--tui-radius-m);max-width:100%;min-height:6rem;width:100%;min-width:10rem;background-color:var(--tui-base-01);overflow:hidden}.t-wrapper.t-wrapper_transparent[_ngcontent-%COMP%]{background-image:linear-gradient(45deg,var(--tui-base-02) 25%,transparent 25%),linear-gradient(-45deg,var(--tui-base-02) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--tui-base-02) 75%),linear-gradient(-45deg,transparent 75%,var(--tui-base-02) 75%);background-size:1.25rem 1.25rem;background-position:0 0,0 .625rem,.625rem -.625rem,-.625rem 0}.t-wrapper.t-wrapper_dark[_ngcontent-%COMP%]{background-color:#454e58;color:var(--tui-base-01)}.t-wrapper.t-wrapper_gray[_ngcontent-%COMP%]{background-color:#e5e7ea}.t-wrapper.t-wrapper_dark.t-wrapper_transparent[_ngcontent-%COMP%]{background-image:linear-gradient(45deg,var(--tui-focus) 25%,transparent 25%),linear-gradient(-45deg,var(--tui-focus) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--tui-focus) 75%),linear-gradient(-45deg,transparent 75%,var(--tui-focus) 75%)}.t-wrapper.t-wrapper_gray.t-wrapper_transparent[_ngcontent-%COMP%]{background-image:linear-gradient(45deg,var(--tui-base-05) 25%,transparent 25%),linear-gradient(-45deg,var(--tui-base-05) 25%,transparent 25%),linear-gradient(45deg,transparent 75%,var(--tui-base-05) 75%),linear-gradient(-45deg,transparent 75%,var(--tui-base-05) 75%)}tui-root._mobile[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{min-height:auto}.t-content[_ngcontent-%COMP%]{flex:1 1 0;min-width:0;padding:1.5rem;box-sizing:border-box;overflow:hidden}tui-root._mobile[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:1rem}.t-form[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;align-items:flex-start}.t-input-wrapper[_ngcontent-%COMP%]{width:100%;margin-bottom:.5rem}.t-expand[_ngcontent-%COMP%]{width:100%}.t-icon[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-icon_rotated[_ngcontent-%COMP%]{transform:rotate(180deg)}.t-value[_ngcontent-%COMP%]{flex:1;background:var(--tui-clear-inverse);padding:.75rem;border-radius:.25rem}.t-mode[_ngcontent-%COMP%]{width:12.5rem}.t-select[_ngcontent-%COMP%]{max-width:15rem}.t-resizer[_ngcontent-%COMP%]{box-shadow:var(--tui-shadow-dropdown);position:relative;width:3.5rem;min-height:inherit;display:flex;align-items:center;justify-content:center;flex-shrink:0;border-left:1px solid var(--tui-base-03);outline:none;background:var(--tui-base-01);color:var(--tui-text-01)}.t-resizer[_ngcontent-%COMP%]:before, .t-resizer[_ngcontent-%COMP%]:after{content:\"\";position:absolute;top:.75rem;left:50%;bottom:calc(50% + 1rem);width:1px;background:var(--tui-base-04);box-shadow:-.25rem 0 var(--tui-base-04);transform:translate(0)}.t-resizer[_ngcontent-%COMP%]:after{bottom:.75rem;top:calc(50% + 1rem)}tui-root._mobile[_nghost-%COMP%]   .t-resizer[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-resizer[_ngcontent-%COMP%]{display:none}.t-resizer-text[_ngcontent-%COMP%]{font:var(--tui-font-text-s);position:relative;z-index:1;padding:.75rem;background:var(--tui-base-01)}.wrapper_light[_ngcontent-%COMP%]   .t-resizer-text[_ngcontent-%COMP%]{background:#3e464e}.t-group[_ngcontent-%COMP%], .t-checkbox[_ngcontent-%COMP%]{margin-left:.75rem}.t-button[_ngcontent-%COMP%], .t-form-controls[_ngcontent-%COMP%]{margin-top:.75rem}@supports ((position: -webkit-sticky) or (position: sticky)){@media screen and (min-height: 37.5rem){._sticky[_nghost-%COMP%]{position:-webkit-sticky;position:sticky;top:4.625rem;z-index:2}}}"],
    changeDetection: 0
  });
  __decorate([tuiPure], TuiDocDemoComponent.prototype, "updateUrl", null);
  return TuiDocDemoComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocDemoModule = /*#__PURE__*/(() => {
  class TuiDocDemoModule {}
  TuiDocDemoModule.ɵfac = function TuiDocDemoModule_Factory(t) {
    return new (t || TuiDocDemoModule)();
  };
  TuiDocDemoModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocDemoModule
  });
  TuiDocDemoModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, fesm2022_forms/* ReactiveFormsModule */.X1, fesm2022_forms/* FormsModule */.YN, router_mjs_.RouterModule, taiga_ui_core_components_link/* TuiLinkModule */.l, taiga_ui_core_components_button/* TuiButtonModule */.Pv, taiga_ui_kit_components_select_TuiSelectModule, TuiExpandModule, TuiGroupModule, TuiTooltipModule, taiga_ui_core_directives_mode/* TuiModeModule */.Q, TuiRadioBlockModule, TuiCheckboxLabeledModule, taiga_ui_core_components_svg/* TuiSvgModule */.vl, TuiDataListWrapperModule, taiga_ui_core_components_data_list_TuiDataListModule, TuiTextfieldControllerModule, TuiHintModule, TuiResizerModule]]
  });
  return TuiDocDemoModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocTabComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDocTabComponent {
    constructor() {
      this.src = '';
    }
  }
  TuiDocTabComponent.ɵfac = function TuiDocTabComponent_Factory(t) {
    return new (t || TuiDocTabComponent)();
  };
  TuiDocTabComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiDocTabComponent,
    selectors: [["tui-doc-tab"]],
    inputs: {
      src: "src"
    },
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 3,
    vars: 1,
    consts: [[1, "t-tab"], [1, "t-icon", 3, "src"]],
    template: function TuiDocTabComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵelement(1, "tui-svg", 1);
        i0.ɵɵprojection(2);
        i0.ɵɵelementEnd();
      }
      if (rf & 2) {
        i0.ɵɵadvance();
        i0.ɵɵproperty("src", ctx.src);
      }
    },
    dependencies: [i2.TuiSvgComponent],
    styles: [".t-tab[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;padding:0 .5rem;grid-gap:.5rem;gap:.5rem;color:var(--tui-text-01)}.t-tab[_ngcontent-%COMP%]   .t-icon[_ngcontent-%COMP%]{width:1rem;height:1rem;color:var(--tui-text-01)}"],
    changeDetection: 0
  });
  return TuiDocTabComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocTabModule = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDocTabModule {}
  TuiDocTabModule.ɵfac = function TuiDocTabModule_Factory(t) {
    return new (t || TuiDocTabModule)();
  };
  TuiDocTabModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({
    type: TuiDocTabModule
  });
  TuiDocTabModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({
    imports: [[TuiSvgModule]]
  });
  return TuiDocTabModule;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const SERIALIZED_SUFFIX = '$';
// @bad TODO: refactor output and value sync
let TuiDocDocumentationPropertyConnectorDirective = /*#__PURE__*/(() => {
  class TuiDocDocumentationPropertyConnectorDirective {
    constructor(template, locationRef, activatedRoute, urlSerializer, urlStateHandler, alerts) {
      this.template = template;
      this.locationRef = locationRef;
      this.activatedRoute = activatedRoute;
      this.urlSerializer = urlSerializer;
      this.urlStateHandler = urlStateHandler;
      this.alerts = alerts;
      this.documentationPropertyName = '';
      this.documentationPropertyMode = null;
      this.documentationPropertyType = '';
      this.documentationPropertyDeprecated = false;
      this.documentationPropertyValues = null;
      this.documentationPropertyValueChange = new core_mjs_.EventEmitter();
      this.changed$ = new internal_Subject/* Subject */.B();
      this.emits$ = new internal_BehaviorSubject/* BehaviorSubject */.t(1);
    }
    ngOnInit() {
      this.parseParams(this.activatedRoute.snapshot.queryParams);
    }
    get attrName() {
      switch (this.documentationPropertyMode) {
        case 'input':
          return `[${this.documentationPropertyName}]`;
        case 'output':
          return `(${this.documentationPropertyName})`;
        case 'input-output':
          return `[(${this.documentationPropertyName})]`;
        default:
          return this.documentationPropertyName;
      }
    }
    get hasItems() {
      return !!this.documentationPropertyValues;
    }
    get shouldShowValues() {
      return this.documentationPropertyMode !== 'output';
    }
    ngOnChanges() {
      this.changed$.next();
    }
    onValueChange(value) {
      this.documentationPropertyValue = value;
      this.documentationPropertyValueChange.emit(value);
      this.setQueryParam(value);
    }
    emitEvent(event) {
      // For more convenient debugging
      console.info(this.attrName, event);
      this.emits$.next(this.emits$.value + 1);
      let content;
      if (event !== undefined) {
        content = (0,taiga_ui_addon_doc_utils/* tuiInspectAny */.NZ)(event, 2);
      }
      this.alerts.open(content, {
        label: this.attrName
      }).subscribe();
    }
    parseParams(params) {
      const propertyValue = params[this.documentationPropertyName];
      const propertyValueWithSuffix = params[`${this.documentationPropertyName}${SERIALIZED_SUFFIX}`];
      if (!propertyValue && !propertyValueWithSuffix) {
        return;
      }
      let value = !!propertyValueWithSuffix && this.documentationPropertyValues ? this.documentationPropertyValues[propertyValueWithSuffix] : (0,taiga_ui_addon_doc_utils/* tuiCoerceValue */.TZ)(propertyValue);
      if (this.documentationPropertyType === 'string' && (0,taiga_ui_cdk_utils_miscellaneous/* tuiIsNumber */.sZ)(value)) {
        value = value.toString();
      }
      this.onValueChange(value);
    }
    setQueryParam(value) {
      const tree = this.urlSerializer.parse(this.locationRef.path());
      const isValueAvailableByKey = value instanceof Object;
      const computedValue = isValueAvailableByKey && this.documentationPropertyValues ? this.documentationPropertyValues.indexOf(value) : value;
      const suffix = isValueAvailableByKey ? SERIALIZED_SUFFIX : '';
      const propName = this.documentationPropertyName + suffix;
      tree.queryParams = Object.assign(Object.assign({}, tree.queryParams), {
        [propName]: computedValue
      });
      this.locationRef.go(this.urlStateHandler(tree));
    }
  }
  TuiDocDocumentationPropertyConnectorDirective.ɵfac = function TuiDocDocumentationPropertyConnectorDirective_Factory(t) {
    return new (t || TuiDocDocumentationPropertyConnectorDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.TemplateRef), core_mjs_["ɵɵdirectiveInject"](common_mjs_.Location), core_mjs_["ɵɵdirectiveInject"](router_mjs_.ActivatedRoute), core_mjs_["ɵɵdirectiveInject"](router_mjs_.UrlSerializer), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_URL_STATE_HANDLER */.TA), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_components_alert_TuiAlertService));
  };
  TuiDocDocumentationPropertyConnectorDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDocDocumentationPropertyConnectorDirective,
    selectors: [["ng-template", "documentationPropertyName", ""]],
    inputs: {
      documentationPropertyName: "documentationPropertyName",
      documentationPropertyMode: "documentationPropertyMode",
      documentationPropertyType: "documentationPropertyType",
      documentationPropertyValue: "documentationPropertyValue",
      documentationPropertyDeprecated: "documentationPropertyDeprecated",
      documentationPropertyValues: "documentationPropertyValues"
    },
    outputs: {
      documentationPropertyValueChange: "documentationPropertyValueChange"
    },
    exportAs: ["documentationProperty"],
    features: [core_mjs_["ɵɵNgOnChangesFeature"]]
  });
  return TuiDocDocumentationPropertyConnectorDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiGetColorPipe = /*#__PURE__*/(() => {
  class TuiGetColorPipe {
    transform(color) {
      if (color.length === 4) {
        return color.split('').reduce((result, current) => [...result, current, current], []).join('').replace('#', '');
      }
      if (color.startsWith('#')) {
        return color;
      }
      if (color === 'transparent') {
        return '#000000';
      }
      const parsed = color.replace('rgb(', '').replace('rgba(', '').replace(')', '').replace(' ', '').split(',').map(v => Number.parseInt(v, 10));
      return tuiRgbToHex(...parsed);
    }
  }
  TuiGetColorPipe.ɵfac = function TuiGetColorPipe_Factory(t) {
    return new (t || TuiGetColorPipe)();
  };
  TuiGetColorPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiGetColorPipe",
    type: TuiGetColorPipe,
    pure: true
  });
  return TuiGetColorPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiGetOpacityPipe = /*#__PURE__*/(() => {
  class TuiGetOpacityPipe {
    transform(color) {
      if (color.startsWith('#') || color.startsWith('rgb(')) {
        return 100;
      }
      if (color === 'transparent') {
        return 0;
      }
      const lastComma = color.lastIndexOf(',');
      const parsed = color.slice(lastComma).replace(')', '').replace(' ', '').replace(',', '');
      return Math.round(Number.parseFloat(parsed) * 100);
    }
  }
  TuiGetOpacityPipe.ɵfac = function TuiGetOpacityPipe_Factory(t) {
    return new (t || TuiGetOpacityPipe)();
  };
  TuiGetOpacityPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiGetOpacity",
    type: TuiGetOpacityPipe,
    pure: true
  });
  return TuiGetOpacityPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiInputOpacityDirective = /*#__PURE__*/(() => {
  class TuiInputOpacityDirective {
    constructor(renderer, focusable) {
      this.renderer = renderer;
      this.focusable = focusable;
    }
    set tuiInputOpacity(opacity) {
      const {
        nativeFocusableElement
      } = this.focusable;
      if (nativeFocusableElement) {
        this.renderer.setStyle(nativeFocusableElement, 'opacity', opacity / 100);
      }
    }
  }
  TuiInputOpacityDirective.ɵfac = function TuiInputOpacityDirective_Factory(t) {
    return new (t || TuiInputOpacityDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.Renderer2), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_FOCUSABLE_ITEM_ACCESSOR */.aX));
  };
  TuiInputOpacityDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiInputOpacityDirective,
    selectors: [["", "tuiInputOpacity", ""]],
    inputs: {
      tuiInputOpacity: "tuiInputOpacity"
    }
  });
  return TuiInputOpacityDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiStripOptionalPipe = /*#__PURE__*/(() => {
  class TuiStripOptionalPipe {
    transform(name) {
      return name.replace('?', '');
    }
  }
  TuiStripOptionalPipe.ɵfac = function TuiStripOptionalPipe_Factory(t) {
    return new (t || TuiStripOptionalPipe)();
  };
  TuiStripOptionalPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiStripOptionalPipe",
    type: TuiStripOptionalPipe,
    pure: true
  });
  return TuiStripOptionalPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiIsOptionalPipe = /*#__PURE__*/(() => {
  class TuiIsOptionalPipe {
    transform(name) {
      return name.includes('?');
    }
  }
  TuiIsOptionalPipe.ɵfac = function TuiIsOptionalPipe_Factory(t) {
    return new (t || TuiIsOptionalPipe)();
  };
  TuiIsOptionalPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiIsOptionalPipe",
    type: TuiIsOptionalPipe,
    pure: true
  });
  return TuiIsOptionalPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocTypeReferencePipe = /*#__PURE__*/(() => {
  class TuiDocTypeReferencePipe {
    constructor(parser, linkHandler) {
      this.parser = parser;
      this.linkHandler = linkHandler;
    }
    transform(original) {
      return this.parser(original).map(({
        type,
        extracted
      }) => {
        var _a, _b;
        return {
          type,
          extracted,
          reference: (_b = (_a = this.linkHandler) === null || _a === void 0 ? void 0 : _a.call(this, extracted)) !== null && _b !== void 0 ? _b : null
        };
      }).sort((a, b) => {
        var _a, _b, _c;
        return (_c = (_a = b.reference) === null || _a === void 0 ? void 0 : _a.localeCompare((_b = a.reference) !== null && _b !== void 0 ? _b : '')) !== null && _c !== void 0 ? _c : -1;
      });
    }
  }
  TuiDocTypeReferencePipe.ɵfac = function TuiDocTypeReferencePipe_Factory(t) {
    return new (t || TuiDocTypeReferencePipe)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_TYPE_REFERENCE_PARSER */.xH, 16), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_TYPE_REFERENCE_HANDLER */.Y$, 16));
  };
  TuiDocTypeReferencePipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiDocTypeReference",
    type: TuiDocTypeReferencePipe,
    pure: true
  });
  return TuiDocTypeReferencePipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiShowCleanerPipe = /*#__PURE__*/(() => {
  class TuiShowCleanerPipe {
    transform(type) {
      return type.includes('null');
    }
  }
  TuiShowCleanerPipe.ɵfac = function TuiShowCleanerPipe_Factory(t) {
    return new (t || TuiShowCleanerPipe)();
  };
  TuiShowCleanerPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiShowCleanerPipe",
    type: TuiShowCleanerPipe,
    pure: true
  });
  return TuiShowCleanerPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiInspectPipe = /*#__PURE__*/(() => {
  class TuiInspectPipe {
    constructor(isE2E) {
      this.isE2E = isE2E;
    }
    transform(value, depth = 2) {
      if (this.isE2E && typeof value === 'function') {
        /**
         * @description:
         * When developing in production mode the webpack bundler minify
         * functions in different ways, then due to which the string content
         * of the function may differ from build to build, which can be to
         * various problems when screenshot testing on e2e.
         */
        return 'λ(x) => y';
      }
      return (0,taiga_ui_addon_doc_utils/* tuiInspectAny */.NZ)(value, depth);
    }
  }
  TuiInspectPipe.ɵfac = function TuiInspectPipe_Factory(t) {
    return new (t || TuiInspectPipe)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_tokens/* TUI_IS_E2E */.Hs, 16));
  };
  TuiInspectPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiInspectAny",
    type: TuiInspectPipe,
    pure: true
  });
  return TuiInspectPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiIsPrimitivePolymorpheusContentPipe = /*#__PURE__*/(() => {
  class TuiIsPrimitivePolymorpheusContentPipe {
    transform(value) {
      return (0,taiga_ui_cdk_utils_miscellaneous/* tuiIsString */.YB)(value) || (0,taiga_ui_cdk_utils_miscellaneous/* tuiIsNumber */.sZ)(value);
    }
  }
  TuiIsPrimitivePolymorpheusContentPipe.ɵfac = function TuiIsPrimitivePolymorpheusContentPipe_Factory(t) {
    return new (t || TuiIsPrimitivePolymorpheusContentPipe)();
  };
  TuiIsPrimitivePolymorpheusContentPipe.ɵpipe = /* @__PURE__ */core_mjs_["ɵɵdefinePipe"]({
    name: "tuiIsPrimitivePolymorpheusContentPipe",
    type: TuiIsPrimitivePolymorpheusContentPipe,
    pure: true
  });
  return TuiIsPrimitivePolymorpheusContentPipe;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

// @bad TODO subscribe propertiesConnectors changes
// @bad TODO refactor to make more flexible
let TuiDocDocumentationComponent = /*#__PURE__*/(() => {
  class TuiDocDocumentationComponent {
    constructor(cdr, texts, excludedProperties, destroy$, getColor, getOpacity) {
      this.cdr = cdr;
      this.texts = texts;
      this.excludedProperties = excludedProperties;
      this.destroy$ = destroy$;
      this.getColor = getColor;
      this.getOpacity = getOpacity;
      this.heading = '';
      this.showValues = true;
      this.isAPI = false;
      this.propertiesConnectors = taiga_ui_cdk_constants/* EMPTY_QUERY */.xQ;
      this.activeItemIndex = 0;
      this.matcher = (item, exclusions) => !exclusions.has(item.documentationPropertyName);
    }
    ngAfterContentInit() {
      (0,taiga_ui_cdk_observables/* tuiQueryListChanges */.MJ)(this.propertiesConnectors).pipe((0,operators_switchMap/* switchMap */.n)(items => (0,merge/* merge */.h)(...items.map(({
        changed$
      }) => changed$))), (0,taiga_ui_cdk_observables/* tuiWatch */.Eb)(this.cdr), (0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe();
    }
    get type() {
      return this.isAPI ? this.texts[0] : this.texts[1];
    }
    onColorChange(connector, color) {
      const opacity = this.getOpacity.transform(connector.documentationPropertyValue || '');
      if (opacity === 100) {
        connector.onValueChange(color);
        return;
      }
      const rgb = tuiHexToRgb(color).join(', ');
      const result = `rgba(${rgb}, ${opacity / 100})`;
      connector.onValueChange(result);
    }
    onOpacityChange(connector, opacity) {
      const hex = this.getColor.transform(connector.documentationPropertyValue || '');
      const rgb = tuiHexToRgb(hex);
      const result = `rgba(${rgb}, ${(opacity || 0) / 100})`;
      connector.onValueChange(result);
    }
  }
  TuiDocDocumentationComponent.ɵfac = function TuiDocDocumentationComponent_Factory(t) {
    return new (t || TuiDocDocumentationComponent)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_DOCUMENTATION_TEXTS */.q9), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_EXCLUDED_PROPERTIES */.vr), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](TuiGetColorPipe), core_mjs_["ɵɵdirectiveInject"](TuiGetOpacityPipe));
  };
  TuiDocDocumentationComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDocDocumentationComponent,
    selectors: [["tui-doc-documentation"]],
    contentQueries: function TuiDocDocumentationComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiDocDocumentationPropertyConnectorDirective, 4);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.propertiesConnectors = _t);
      }
    },
    inputs: {
      heading: "heading",
      showValues: "showValues",
      isAPI: "isAPI"
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([TuiGetColorPipe, TuiGetOpacityPipe, taiga_ui_cdk_services/* TuiDestroyService */.ew])],
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 4,
    vars: 6,
    consts: [["default", ""], ["elseEmitter", ""], ["selectContent", ""], ["noItems", ""], ["class", "t-heading", 4, "ngIf"], [4, "ngIf"], [1, "t-heading"], ["class", "t-table", 4, "ngIf"], [1, "t-table"], [1, "t-row", "t-row_header"], [1, "t-th", "t-cell", "t-cell_prop"], [1, "t-th"], ["class", "t-th t-cell t-th_value", 4, "ngIf"], ["class", "t-row", 3, "t-deprecated", 4, "ngFor", "ngForOf"], [1, "t-th", "t-cell", "t-th_value"], [1, "t-row"], [1, "t-cell"], ["automation-id", "tui-documentation__property-name", 1, "t-property", "t-additional-info"], [1, "t-property-code"], ["size", "s", "status", "neutral", "value", "Optional", 4, "ngIf"], ["size", "s", "status", "error", "value", "Deprecated", 4, "ngIf"], [3, "ngTemplateOutlet"], [1, "type"], [1, "t-code-type"], [4, "ngFor", "ngForOf"], ["class", "t-cell t-cell_value", 4, "ngIf"], ["size", "s", "status", "neutral", "value", "Optional"], ["size", "s", "status", "error", "value", "Deprecated"], ["target", "_blank", "class", "t-code-reference", 4, "ngIf", "ngIfElse"], ["target", "_blank", 1, "t-code-reference"], [1, "t-cell", "t-cell_value"], [4, "ngIf", "ngIfElse"], ["tuiDropdownLimitWidth", "min", "tuiTextfieldSize", "m", 3, "nativeId", "ngModel", "tuiTextfieldCleaner", "tuiTextfieldLabelOutside", "valueContent", "ngModelChange", 4, "ngIf", "ngIfElse"], ["tuiDropdownLimitWidth", "min", "tuiTextfieldSize", "m", 3, "ngModelChange", "nativeId", "ngModel", "tuiTextfieldCleaner", "tuiTextfieldLabelOutside", "valueContent"], [1, "t-exception"], [3, "itemContent", "items", 4, "tuiDataList"], [3, "itemContent", "items"], [3, "ngSwitch"], ["size", "l", 3, "nativeId", "ngModel", "showIcons", "ngModelChange", 4, "ngSwitchCase"], ["tuiTextfieldSize", "m", 3, "nativeId", "tuiTextfieldCleaner", "tuiTextfieldLabelOutside", "value", "valueChange", 4, "ngSwitchCase"], ["tuiGroup", "", 4, "ngSwitchCase"], ["tuiTextfieldSize", "m", 3, "nativeId", "ngModel", "step", "tuiTextfieldLabelOutside", "ngModelChange", 4, "ngSwitchCase"], [4, "ngSwitchCase"], ["size", "l", 3, "ngModelChange", "nativeId", "ngModel", "showIcons"], ["tuiTextfieldSize", "m", 3, "valueChange", "nativeId", "tuiTextfieldCleaner", "tuiTextfieldLabelOutside", "value"], ["tuiGroup", ""], ["tuiTextfieldSize", "m", 3, "valueChange", "tuiInputOpacity", "tuiTextfieldLabelOutside", "value"], ["tuiTextfield", "", "type", "text"], ["tuiTextfieldSize", "m", 3, "ngModelChange", "max", "min", "ngModel", "step"], ["tuiTextfieldSize", "m", 3, "ngModelChange", "nativeId", "ngModel", "step", "tuiTextfieldLabelOutside"], ["tuiTextfieldSize", "m", 3, "nativeId", "tuiTextfieldCleaner", "tuiTextfieldLabelOutside", "value", "valueChange", 4, "ngIf"], [1, "t-output"]],
    template: function TuiDocDocumentationComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵtemplate"](0, TuiDocDocumentationComponent_h1_0_Template, 2, 1, "h1", 4);
        core_mjs_["ɵɵprojection"](1);
        core_mjs_["ɵɵtemplate"](2, TuiDocDocumentationComponent_ng_container_2_Template, 2, 1, "ng-container", 5);
        core_mjs_["ɵɵpipe"](3, "tuiFilter");
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", ctx.heading);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngIf", core_mjs_["ɵɵpipeBind3"](3, 2, ctx.propertiesConnectors, ctx.matcher, ctx.excludedProperties));
      }
    },
    dependencies: [TuiBadgeComponent, TuiSelectComponent, TuiDataListWrapperComponent, TuiToggleComponent, TuiPrimitiveTextfieldComponent, TuiTextfieldComponent, TuiInputNumberComponent, taiga_ui_core_components_notification/* TuiNotificationComponent */.v, common_mjs_.NgIf, common_mjs_.NgForOf, common_mjs_.NgTemplateOutlet, TuiSelectDirective, TuiDropdownOptionsDirective, taiga_ui_core_directives_textfield_controller_TuiTextfieldSizeDirective, fesm2022_forms/* NgControlStatus */.BC, fesm2022_forms/* NgModel */.vS, TuiTextfieldCleanerDirective, TuiTextfieldLabelOutsideDirective, TuiDataListDirective, common_mjs_.NgSwitch, common_mjs_.NgSwitchCase, TuiPrimitiveTextfieldDirective, TuiGroupDirective, TuiInputOpacityDirective, TuiInputNumberDirective, TuiFilterPipe, TuiStripOptionalPipe, TuiIsOptionalPipe, TuiDocTypeReferencePipe, TuiShowCleanerPipe, TuiInspectPipe, TuiGetOpacityPipe, TuiGetColorPipe, TuiIsPrimitivePolymorpheusContentPipe, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{display:block;min-width:100%}.t-table[_ngcontent-%COMP%]{width:100%;table-layout:fixed}.t-row[_ngcontent-%COMP%]:not(:last-child){border-bottom:1px solid var(--tui-base-03)}tui-root._mobile[_nghost-%COMP%]   .t-row[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-row[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap}tui-root._mobile[_nghost-%COMP%]   .t-row_header[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-row_header[_ngcontent-%COMP%]{display:none}.t-cell[_ngcontent-%COMP%]{padding:1rem 1rem .875rem}.t-cell[_ngcontent-%COMP%]:first-child{padding-left:0}.t-cell[_ngcontent-%COMP%]:last-child{padding-right:0}.t-cell_prop[_ngcontent-%COMP%]{width:40%}.t-cell_value[_ngcontent-%COMP%]{text-align:right}tui-root._mobile[_nghost-%COMP%]   .t-cell[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-cell[_ngcontent-%COMP%]{width:100%;height:auto;padding:.5rem 0;text-align:left}.t-th[_ngcontent-%COMP%]{padding:.5rem 1rem;color:var(--tui-text-02);font-weight:normal;text-align:left}.t-th_value[_ngcontent-%COMP%]{max-width:20rem;text-align:right}tui-root._mobile[_nghost-%COMP%]   .t-th_value[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-th_value[_ngcontent-%COMP%]{width:9.375rem}.t-property[_ngcontent-%COMP%]{font:var(--tui-font-text-m);margin-bottom:.25rem;font-family:monospace;color:#8f75d1}tui-root._mobile[_nghost-%COMP%]   .t-property[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-property[_ngcontent-%COMP%]{padding:.5rem 0}.t-type[_ngcontent-%COMP%]{font-family:monospace}.t-deprecated[_ngcontent-%COMP%]   .t-property-code[_ngcontent-%COMP%]{text-decoration:line-through}.t-deprecated-label[_ngcontent-%COMP%]{margin-right:.125rem;color:var(--tui-error-fill);font-size:.75rem}.t-additional-info[_ngcontent-%COMP%]{display:flex;grid-gap:.3125rem;gap:.3125rem;align-items:center}.t-exception[_ngcontent-%COMP%]{display:block;width:-webkit-max-content;width:max-content}.t-output[_ngcontent-%COMP%]{text-align:left;opacity:0}.t-heading[_ngcontent-%COMP%]{font:var(--tui-font-heading-4)}.t-code-type[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;align-items:center;justify-content:flex-start}.t-code-reference[_ngcontent-%COMP%]{display:inline-flex;color:var(--tui-link);text-decoration:none;align-items:center;justify-content:center;grid-gap:3px;gap:3px}.t-code-reference[_ngcontent-%COMP%]:after{content:\"\";font-size:1rem;width:1rem;height:1rem;background:currentColor;-webkit-mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1rem\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line></svg>') center / 100%;mask:url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1rem\" height=\"1rem\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"></path><polyline points=\"15 3 21 3 21 9\"></polyline><line x1=\"10\" y1=\"14\" x2=\"21\" y2=\"3\"></line></svg>') center / 100%}"],
    data: {
      animation: [(0,animations/* trigger */.hZ)('emitEvent', [(0,animations/* transition */.kY)(':increment', [(0,animations/* style */.iF)({
        opacity: 1
      }), (0,animations/* animate */.i0)('500ms ease-in')])])]
    },
    changeDetection: 0
  });
  return TuiDocDocumentationComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiInputOpacityModule = /*#__PURE__*/(() => {
  class TuiInputOpacityModule {}
  TuiInputOpacityModule.ɵfac = function TuiInputOpacityModule_Factory(t) {
    return new (t || TuiInputOpacityModule)();
  };
  TuiInputOpacityModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiInputOpacityModule
  });
  TuiInputOpacityModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return TuiInputOpacityModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocDocumentationModule = /*#__PURE__*/(() => {
  class TuiDocDocumentationModule {}
  TuiDocDocumentationModule.ɵfac = function TuiDocDocumentationModule_Factory(t) {
    return new (t || TuiDocDocumentationModule)();
  };
  TuiDocDocumentationModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocDocumentationModule
  });
  TuiDocDocumentationModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, fesm2022_forms/* FormsModule */.YN, router_mjs_.RouterModule, TuiBadgeModule, taiga_ui_kit_components_select_TuiSelectModule, TuiToggleModule, taiga_ui_core_components_link/* TuiLinkModule */.l, TuiInputNumberModule, taiga_ui_core_directives_mode/* TuiModeModule */.Q, TuiGroupModule, TuiInputOpacityModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiDropdownModule, taiga_ui_core_components_data_list_TuiDataListModule, TuiDataListWrapperModule, taiga_ui_core_components_notification/* TuiNotificationModule */.O, TuiFilterPipeModule]]
  });
  return TuiDocDocumentationModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI_DOC_EXAMPLE_DEFAULT_OPTIONS = {
  codeEditorVisibilityHandler: files => Boolean(files[TUI_EXAMPLE_PRIMARY_FILE_NAME.TS] && files[TUI_EXAMPLE_PRIMARY_FILE_NAME.HTML]),
  tabTitles: new Map(),
  fullsize: true,
  linkIcon: 'tuiIconLink'
};
/**
 * Default parameters for DocExample component
 */
const TUI_DOC_EXAMPLE_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_DOC_EXAMPLE_DEFAULT_OPTIONS);
function tuiDocExampleOptionsProvider(options) {
  return tuiProvideOptions(TUI_DOC_EXAMPLE_OPTIONS, options, TUI_DOC_EXAMPLE_DEFAULT_OPTIONS);
}
let TuiDocExampleGetTabsPipe = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDocExampleGetTabsPipe {
    transform(content, defaultTab) {
      return [defaultTab, ...Object.keys(content)];
    }
  }
  TuiDocExampleGetTabsPipe.ɵfac = function TuiDocExampleGetTabsPipe_Factory(t) {
    return new (t || TuiDocExampleGetTabsPipe)();
  };
  TuiDocExampleGetTabsPipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({
    name: "tuiDocExampleGetTabs",
    type: TuiDocExampleGetTabsPipe,
    pure: true
  });
  return TuiDocExampleGetTabsPipe;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocExampleComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiDocExampleComponent {
    constructor(clipboard, alerts, location, copyTexts$, texts, codeEditor, processContent, isE2E, codeActions, options) {
      this.clipboard = clipboard;
      this.alerts = alerts;
      this.location = location;
      this.copyTexts$ = copyTexts$;
      this.texts = texts;
      this.codeEditor = codeEditor;
      this.processContent = processContent;
      this.isE2E = isE2E;
      this.codeActions = codeActions;
      this.options = options;
      this.rawLoader$$ = new BehaviorSubject({});
      this.id = null;
      this.fullsize = this.options.fullsize;
      this.componentName = this.location.pathname.slice(1);
      this.defaultTabIndex = 0;
      this.defaultTab = this.texts[this.defaultTabIndex];
      this.activeItemIndex = this.defaultTabIndex;
      this.copy$ = this.copyTexts$.pipe(map(([copy]) => copy));
      this.processor$ = this.rawLoader$$.pipe(switchMap(tuiRawLoadRecord), map(value => this.processContent(value)));
      this.loading$ = new Subject();
      this.visible = files => Boolean(this.codeEditor && this.options.codeEditorVisibilityHandler(files));
    }
    set content(content) {
      this.rawLoader$$.next(content);
    }
    getTabTitle(fileName) {
      return this.options.tabTitles.get(fileName) || fileName;
    }
    copyExampleLink({
      href
    }) {
      this.clipboard.copy(href);
      this.alerts.open(this.texts[1], {
        label: this.texts[2],
        status: 'success'
      }).subscribe();
    }
    edit(files) {
      var _a;
      this.loading$.next(true);
      (_a = this.codeEditor) === null || _a === void 0 ? void 0 : _a.edit(this.componentName, this.id || '', files).then(() => this.loading$.next(false)).catch(() => this.loading$.next(false));
    }
  }
  TuiDocExampleComponent.ɵfac = function TuiDocExampleComponent_Factory(t) {
    return new (t || TuiDocExampleComponent)(i0.ɵɵdirectiveInject(Clipboard), i0.ɵɵdirectiveInject(TuiAlertService), i0.ɵɵdirectiveInject(LOCATION), i0.ɵɵdirectiveInject(TUI_COPY_TEXTS), i0.ɵɵdirectiveInject(TUI_DOC_EXAMPLE_TEXTS), i0.ɵɵdirectiveInject(TUI_DOC_CODE_EDITOR, 8), i0.ɵɵdirectiveInject(TUI_DOC_EXAMPLE_CONTENT_PROCESSOR), i0.ɵɵdirectiveInject(TUI_IS_E2E), i0.ɵɵdirectiveInject(TUI_DOC_CODE_ACTIONS), i0.ɵɵdirectiveInject(TUI_DOC_EXAMPLE_OPTIONS));
  };
  TuiDocExampleComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiDocExampleComponent,
    selectors: [["tui-doc-example"]],
    hostVars: 2,
    hostBindings: function TuiDocExampleComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        i0.ɵɵclassProp("_fullsize", ctx.fullsize);
      }
    },
    inputs: {
      id: "id",
      heading: "heading",
      description: "description",
      content: "content",
      fullsize: "fullsize",
      componentName: "componentName"
    },
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 8,
    vars: 5,
    consts: [["preview", ""], ["codeSection", ""], ["defaultEditContent", ""], ["anotherTab", ""], ["class", "t-title", 4, "ngIf"], ["class", "t-description", 4, "ngIf"], ["class", "t-example", 4, "ngIf"], [1, "t-title"], [3, "textContent", 4, "polymorpheusOutlet"], ["appearance", "icon", "routerLink", ".", "size", "xs", "tuiIconButton", "", "type", "button", "class", "t-link-icon", 3, "fragment", "icon", "title", "click", 4, "ngIf"], [3, "textContent"], ["appearance", "icon", "routerLink", ".", "size", "xs", "tuiIconButton", "", "type", "button", 1, "t-link-icon", 3, "click", "fragment", "icon", "title"], [1, "t-description"], [4, "polymorpheusOutlet"], [1, "t-example"], [4, "ngIf"], ["class", "t-tabs-wrapper", 4, "ngIf"], ["class", "t-content", 3, "t-content_animated", "t-content_visible", 4, "ngFor", "ngForOf"], [1, "t-tabs-wrapper"], [1, "t-tabs", 3, "activeItemIndexChange", "activeItemIndex"], [4, "ngFor", "ngForOf"], ["size", "xs", 3, "overlay", "showLoader", "click", 4, "ngIf"], ["tuiTab", "", 4, "tuiItem"], ["tuiTab", ""], ["size", "xs", 3, "click", "overlay", "showLoader"], [4, "ngIf", "ngIfElse"], ["appearance", "flat", "size", "s", "tuiButton", "", "type", "button"], [1, "t-content"], [3, "ngTemplateOutlet", 4, "ngIf", "ngIfElse"], [3, "ngTemplateOutlet"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["automation-id", "tui-doc-example", 1, "t-demo"], [3, "code"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"]],
    template: function TuiDocExampleComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵtemplate(0, TuiDocExampleComponent_h3_0_Template, 3, 2, "h3", 4)(1, TuiDocExampleComponent_h4_1_Template, 2, 1, "h4", 5)(2, TuiDocExampleComponent_div_2_Template, 3, 4, "div", 6);
        i0.ɵɵpipe(3, "async");
        i0.ɵɵtemplate(4, TuiDocExampleComponent_ng_template_4_Template, 2, 0, "ng-template", null, 0, i0.ɵɵtemplateRefExtractor)(6, TuiDocExampleComponent_ng_template_6_Template, 2, 2, "ng-template", null, 1, i0.ɵɵtemplateRefExtractor);
      }
      if (rf & 2) {
        i0.ɵɵproperty("ngIf", ctx.heading);
        i0.ɵɵadvance();
        i0.ɵɵproperty("ngIf", ctx.description);
        i0.ɵɵadvance();
        i0.ɵɵproperty("ngIf", i0.ɵɵpipeBind1(3, 3, ctx.processor$));
      }
    },
    dependencies: [i2.TuiButtonComponent, i1.TuiTabsWithMoreComponent, i1.TuiTabComponent, i2.TuiLoaderComponent, TuiDocCodeComponent, i4.NgIf, i5$1.PolymorpheusOutletDirective, i6.RouterLinkWithHref, i4.NgForOf, i6$1.TuiItemDirective, i4.NgTemplateOutlet, i4.AsyncPipe, TuiDocExampleGetTabsPipe, i6$1.TuiMapperPipe],
    styles: ["[_nghost-%COMP%]{position:relative;display:block;padding-top:3.5rem;clear:right}[_nghost-%COMP%]:target{animation:1s .3s tuiShaking}[_nghost-%COMP%]   tui-root._mobile[_nghost-%COMP%], tui-root._mobile   [_nghost-%COMP%]{padding-top:2rem}.t-title[_ngcontent-%COMP%]{font:var(--tui-font-heading-5);margin:0 0 .5rem}tui-root._mobile[_nghost-%COMP%]   .t-title[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-title[_ngcontent-%COMP%]{font:var(--tui-font-heading-6)}.t-description[_ngcontent-%COMP%]{font:var(--tui-font-text-m);font-weight:normal;margin:0}.t-title[_ngcontent-%COMP%]:first-letter, .t-description[_ngcontent-%COMP%]:first-letter{text-transform:capitalize}.t-example[_ngcontent-%COMP%]{position:relative;margin-top:1.5rem;border:1px solid var(--tui-base-03);border-radius:var(--tui-radius-m);box-shadow:0 .125rem .1875rem #0000001a;overflow:hidden}tui-root._mobile[_nghost-%COMP%]   .t-example[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-example[_ngcontent-%COMP%]{margin-top:.75rem}.t-tabs-wrapper[_ngcontent-%COMP%]{display:flex;padding:0 .875rem 0 2rem;box-shadow:inset 0 -1px var(--tui-base-03);justify-content:space-between;align-items:center}tui-root._mobile[_nghost-%COMP%]   .t-tabs-wrapper[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-tabs-wrapper[_ngcontent-%COMP%]{padding:0 .875rem 0 1rem}.t-tabs[_ngcontent-%COMP%]{flex-grow:1}.t-demo[_ngcontent-%COMP%]{padding:2rem;max-width:100%;box-sizing:border-box;overflow-x:auto}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm){.t-demo[_ngcontent-%COMP%]::-webkit-scrollbar, .t-demo[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:.375rem solid transparent}.t-demo[_ngcontent-%COMP%]::-webkit-scrollbar{background-color:transparent}.t-demo[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}.t-demo[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}.t-demo[_ngcontent-%COMP%]::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}tui-root._mobile[_nghost-%COMP%]   .t-demo[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-demo[_ngcontent-%COMP%]{padding:1rem}[_nghost-%COMP%]:not(._fullsize)   .t-demo[_ngcontent-%COMP%]{width:-webkit-min-content;width:min-content;min-width:20rem}.t-link-icon[_ngcontent-%COMP%]{margin-left:.3rem;vertical-align:baseline}.t-content[_ngcontent-%COMP%]{will-change:opacity;height:0;visibility:hidden;opacity:0}.t-content_animated[_ngcontent-%COMP%]{transition:opacity .3s ease-in-out}.t-content_visible[_ngcontent-%COMP%]{height:auto;visibility:visible;opacity:1}"],
    changeDetection: 0
  });
  return TuiDocExampleComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocExampleModule = /*#__PURE__*/(() => {
  class TuiDocExampleModule {}
  TuiDocExampleModule.ɵfac = function TuiDocExampleModule_Factory(t) {
    return new (t || TuiDocExampleModule)();
  };
  TuiDocExampleModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocExampleModule
  });
  TuiDocExampleModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, ClipboardModule, TuiTabsModule, taiga_ui_core_components_button/* TuiButtonModule */.Pv, TuiDocCopyModule, TuiDocCodeModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiMapperPipeModule, taiga_ui_core_components_loader/* TuiLoaderModule */.Yc, router_mjs_.RouterModule]]
  });
  return TuiDocExampleModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function labelsProviderFactory(pages) {
  return pages.map(({
    section
  }) => section).filter(taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj).filter((item, index, array) => array.indexOf(item) === index);
}
/**
 * Page title
 */
const NAVIGATION_TITLE = new core_mjs_.InjectionToken('[NAVIGATION_TITLE]');
/**
 * Navigation sections labels for search
 */
const NAVIGATION_LABELS = new core_mjs_.InjectionToken('[NAVIGATION_LABELS]');
/**
 * Navigation pages
 */
const NAVIGATION_ITEMS = new core_mjs_.InjectionToken('[NAVIGATION_ITEMS]');
const NAVIGATION_PROVIDERS = [taiga_ui_cdk_services/* TuiDestroyService */.ew, {
  provide: NAVIGATION_TITLE,
  deps: [router_mjs_.Router, router_mjs_.ActivatedRoute, taiga_ui_addon_doc_tokens/* TUI_DOC_TITLE */.xq, taiga_ui_cdk_services/* TuiDestroyService */.ew],
  useFactory: (router, activatedRoute, titlePrefix, destroy$) => router.events.pipe((0,filter/* filter */.p)(event => event instanceof router_mjs_.NavigationEnd), (0,operators_map/* map */.T)(() => activatedRoute.firstChild), (0,filter/* filter */.p)(taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj), (0,mergeMap/* mergeMap */.Z)(({
    data
  }) => data), (0,operators_map/* map */.T)(({
    title
  }) => `${titlePrefix}${title}`), (0,takeUntil/* takeUntil */.Q)(destroy$))
}, {
  provide: NAVIGATION_LABELS,
  deps: [taiga_ui_addon_doc_tokens/* TUI_DOC_PAGES */.rm],
  useFactory: labelsProviderFactory
}, {
  provide: NAVIGATION_ITEMS,
  deps: [taiga_ui_addon_doc_tokens/* TUI_DOC_PAGES */.rm],
  useFactory: pages => {
    const labels = labelsProviderFactory(pages);
    return [...labels.map(label => pages.filter(({
      section
    }) => section === label)), pages.filter(page => !page.section)];
  }
}];
let TuiDocNavigationComponent = /*#__PURE__*/(() => {
  class TuiDocNavigationComponent {
    constructor(cdr, titleService, title$, mode, sidebar, labels, items, searchText, router, activatedRoute, destroy$, readyToScroll$, docIcons, icons, doc) {
      this.title$ = title$;
      this.mode = mode;
      this.sidebar = sidebar;
      this.labels = labels;
      this.items = items;
      this.searchText = searchText;
      this.router = router;
      this.activatedRoute = activatedRoute;
      this.destroy$ = destroy$;
      this.readyToScroll$ = readyToScroll$;
      this.docIcons = docIcons;
      this.icons = icons;
      this.doc = doc;
      this.menuOpen = false;
      this.openPagesArr = [];
      this.openPagesGroupsArr = [];
      this.active = '';
      this.search = new fesm2022_forms/* FormControl */.MJ('');
      this.filtered$ = (0,taiga_ui_cdk_observables/* tuiControlValue */.lD)(this.search).pipe((0,filter/* filter */.p)(search => search.trim().length > 2), (0,operators_map/* map */.T)(search => this.filterItems(this.flattenSubPages(this.items), search)));
      this.mode$ = this.mode.change$.pipe((0,operators_startWith/* startWith */.Z)(null), (0,operators_map/* map */.T)(() => this.mode.mode || 'onLight'));
      title$.subscribe(title => {
        cdr.markForCheck();
        titleService.setTitle(title);
        this.openActivePageGroup();
      });
      (0,observable_combineLatest/* combineLatest */.z)([this.router.events.pipe((0,filter/* filter */.p)(event => event instanceof router_mjs_.Scroll)), this.title$.pipe((0,operators_switchMap/* switchMap */.n)(() => this.readyToScroll$.pipe((0,filter/* filter */.p)(Boolean))))]).pipe((0,take/* take */.s)(1), (0,operators_map/* map */.T)(([event]) => event.anchor || ''), (0,filter/* filter */.p)(Boolean), (0,takeUntil/* takeUntil */.Q)(this.destroy$)).subscribe(anchor => this.navigateToAnchorLink(anchor));
    }
    get canOpen() {
      var _a, _b;
      return ((_b = (_a = this.search.value) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0) > 2;
    }
    get itemsWithoutSections() {
      return this.items[this.items.length - 1];
    }
    $pages(pages) {
      return pages;
    }
    isActive(route) {
      return route === this.active;
    }
    onGroupClick(index) {
      this.openPagesGroupsArr[index] = !this.openPagesGroupsArr[index];
    }
    closeMenu() {
      this.menuOpen = false;
    }
    onClick(input) {
      input.open = false;
      this.menuOpen = false;
      this.search.setValue('');
      this.openActivePageGroup();
    }
    filterItems(items, search) {
      return items.map(section => (0,taiga_ui_cdk_utils_miscellaneous/* tuiUniqBy */.FU)(section.filter(({
        title,
        keywords = ''
      }) => {
        search = search.toLowerCase().trim();
        keywords = keywords.toLowerCase();
        title = title.toLowerCase();
        return title.includes(search) || keywords.includes(search) || title.includes((0,taiga_ui_addon_doc_utils/* tuiTransliterateKeyboardLayout */.IB)(search)) || keywords.includes((0,taiga_ui_addon_doc_utils/* tuiTransliterateKeyboardLayout */.IB)(search)) || search.replace(/-/gi, '').includes(title) || title.includes(search.replace(/\s|tui/g, '')) || keywords.includes(search.replace(/\s|tui/g, '')) || search.split(/\s/).find(word => title.includes(word));
      }), 'title'));
    }
    flattenSubPages(items) {
      return items.reduce((array, item) => [...array, item.reduce((pages, page) => 'subPages' in page ? [...pages, ...page.subPages] : [...pages, page], [])], []);
    }
    isActiveRoute(route) {
      return this.router.isActive(route, {
        paths: 'subset',
        queryParams: 'subset',
        fragment: 'ignored',
        matrixParams: 'ignored'
      });
    }
    openActivePageGroup() {
      this.items.forEach((pages, pagesIndex) => {
        pages.forEach((page, pageIndex) => {
          if ('route' in page && this.isActiveRoute(page.route)) {
            this.openPagesArr[pagesIndex] = true;
            this.active = page.route;
          }
          if ('subPages' in page) {
            page.subPages.forEach(subPage => {
              if (this.isActiveRoute(subPage.route)) {
                this.openPagesArr[pagesIndex] = true;
                this.openPagesGroupsArr[pagesIndex * 100 + pageIndex] = true;
                this.active = subPage.route;
              }
            });
          }
        });
      });
    }
    navigateToAnchorLink(fragment) {
      const nodes = fragment ? this.doc.querySelectorAll(`#${fragment}`) : [];
      const element = nodes.length && nodes[nodes.length - 1];
      if (!element) {
        return;
      }
      // emulate :target event
      const target = this.doc.createElement('a');
      target.href = `${this.doc.location.pathname}#${fragment}`;
      target.style.display = 'none';
      target.style.position = 'absolute';
      this.doc.body.appendChild(target);
      target.click();
      target.remove();
    }
  }
  TuiDocNavigationComponent.ɵfac = function TuiDocNavigationComponent_Factory(t) {
    return new (t || TuiDocNavigationComponent)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵdirectiveInject"](platform_browser/* Title */.hE), core_mjs_["ɵɵdirectiveInject"](NAVIGATION_TITLE), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_directives_mode/* TuiModeDirective */.h), core_mjs_["ɵɵdirectiveInject"](TuiSidebarDirective, 8), core_mjs_["ɵɵdirectiveInject"](NAVIGATION_LABELS), core_mjs_["ɵɵdirectiveInject"](NAVIGATION_ITEMS), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_SEARCH_TEXT */.NC), core_mjs_["ɵɵdirectiveInject"](router_mjs_.Router), core_mjs_["ɵɵdirectiveInject"](router_mjs_.ActivatedRoute), core_mjs_["ɵɵdirectiveInject"](taiga_ui_cdk_services/* TuiDestroyService */.ew, 2), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_PAGE_LOADED */.Aq), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_ICONS */.T$), core_mjs_["ɵɵdirectiveInject"](taiga_ui_core_tokens/* TUI_COMMON_ICONS */._Z), core_mjs_["ɵɵdirectiveInject"](common_mjs_.DOCUMENT));
  };
  TuiDocNavigationComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDocNavigationComponent,
    selectors: [["tui-doc-navigation"]],
    hostVars: 2,
    hostBindings: function TuiDocNavigationComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("_open", ctx.menuOpen);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"](NAVIGATION_PROVIDERS)],
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 14,
    vars: 14,
    consts: [["input", ""], ["pages", ""], ["subPagesTemplate", ""], ["tuiTextfieldSize", "m", 1, "t-input", 3, "formControl", "tuiAutoFocus", "tuiTextfieldCleaner", "tuiTextfieldIconLeft", "tuiTextfieldLabelOutside"], [4, "ngIf"], [1, "t-navigation"], [1, "t-scrollbar", 3, "tuiMode"], [3, "closeOthers", "rounded"], ["size", "s", 3, "borders", "open", "openChange", 4, "ngFor", "ngForOf"], [1, "t-items-container"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngFor", "ngForOf"], [4, "tuiDataList"], [3, "label", 4, "ngFor", "ngForOf"], [3, "label"], ["tuiOption", "", 3, "fragment", "routerLink", "target", "click", 4, "ngFor", "ngForOf"], ["tuiOption", "", 3, "click", "fragment", "routerLink", "target"], ["class", "t-icon", 3, "src", 4, "polymorpheusOutlet"], [1, "t-icon", 3, "src"], ["size", "s", 3, "openChange", "borders", "open"], [1, "t-label"], ["tuiAccordionItemContent", ""], [1, "t-section"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["routerLinkActive", "t-sublink_active", "tuiLink", "", "class", "t-sublink", 3, "routerLink", "target", "tuiScrollIntoViewLink", "click", 4, "ngIf", "ngIfElse"], ["routerLinkActive", "t-sublink_active", "tuiLink", "", 1, "t-sublink", 3, "click", "routerLink", "target", "tuiScrollIntoViewLink"], ["routerLinkActive", "", 1, "t-subsection", 3, "routerLinkActiveOptions"], ["tuiLink", "", "type", "button", "class", "t-sublink t-sublink_subsection", 3, "click", 4, "ngIf"], [1, "t-expand", 3, "expanded"], [1, "t-section", "t-section_bordered"], ["routerLinkActive", "t-sublink_active", "tuiLink", "", "class", "t-sublink t-sublink_small", 3, "fragment", "routerLink", "target", "tuiScrollIntoViewLink", "click", 4, "ngFor", "ngForOf"], ["tuiLink", "", "type", "button", 1, "t-sublink", "t-sublink_subsection", 3, "click"], [1, "t-chevron", 3, "src"], ["routerLinkActive", "t-sublink_active", "tuiLink", "", 1, "t-sublink", "t-sublink_small", 3, "click", "fragment", "routerLink", "target", "tuiScrollIntoViewLink"]],
    template: function TuiDocNavigationComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵelementStart"](0, "tui-input", 3, 0);
        core_mjs_["ɵɵtext"](2);
        core_mjs_["ɵɵtemplate"](3, TuiDocNavigationComponent_ng_container_3_Template, 2, 0, "ng-container", 4);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](4, "nav", 5)(5, "tui-scrollbar", 6);
        core_mjs_["ɵɵpipe"](6, "async");
        core_mjs_["ɵɵelementStart"](7, "tui-accordion", 7);
        core_mjs_["ɵɵtemplate"](8, TuiDocNavigationComponent_tui_accordion_item_8_Template, 5, 3, "tui-accordion-item", 8);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](9, "div", 9);
        core_mjs_["ɵɵtemplate"](10, TuiDocNavigationComponent_ng_container_10_Template, 1, 5, "ng-container", 10);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](11, TuiDocNavigationComponent_ng_template_11_Template, 3, 2, "ng-template", null, 1, core_mjs_["ɵɵtemplateRefExtractor"]);
        core_mjs_["ɵɵelementEnd"]()();
        core_mjs_["ɵɵprojection"](13);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("formControl", ctx.search)("tuiAutoFocus", !!ctx.sidebar)("tuiTextfieldCleaner", true)("tuiTextfieldIconLeft", ctx.docIcons.search)("tuiTextfieldLabelOutside", true);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵtextInterpolate1"](" ", ctx.searchText, " ");
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.canOpen);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("tuiMode", core_mjs_["ɵɵpipeBind1"](6, 12, ctx.mode$));
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("closeOthers", false)("rounded", false);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngForOf", ctx.labels);
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵproperty"]("ngForOf", ctx.itemsWithoutSections);
      }
    },
    dependencies: [TuiInputComponent, TuiDataListComponent, TuiOptionComponent, taiga_ui_core_components_svg/* TuiSvgComponent */._Y, TuiScrollbarComponent, TuiAccordionComponent, TuiAccordionItemComponent, taiga_ui_core_components_link/* TuiLinkComponent */.E, TuiExpandComponent, TuiInputDirective, taiga_ui_core_directives_textfield_controller_TuiTextfieldSizeDirective, fesm2022_forms/* NgControlStatus */.BC, fesm2022_forms/* FormControlDirective */.l_, TuiAutoFocusDirective, TuiTextfieldCleanerDirective, TuiTextfieldIconLeftDirective, TuiTextfieldLabelOutsideDirective, common_mjs_.NgIf, TuiDataListDirective, common_mjs_.NgForOf, TuiOptGroupDirective, router_mjs_.RouterLinkWithHref, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, taiga_ui_core_directives_mode/* TuiModeDirective */.h, TuiAccordionItemContentDirective, common_mjs_.NgTemplateOutlet, router_mjs_.RouterLinkActive, TuiScrollIntoViewLinkDirective, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{z-index:1;display:flex;flex-direction:column;text-align:center;background:var(--tui-base-01)}.t-input[_ngcontent-%COMP%]{margin:1.25rem}.t-navigation[_ngcontent-%COMP%]{display:flex;max-height:100%;min-height:0;flex:1 1 0;text-align:left}.t-scrollbar[_ngcontent-%COMP%]{scroll-behavior:smooth;width:100%}tui-root._reduced-motion[_nghost-%COMP%]   .t-scrollbar[_ngcontent-%COMP%], tui-root._reduced-motion   [_nghost-%COMP%]   .t-scrollbar[_ngcontent-%COMP%]{scroll-behavior:auto}.t-items-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;padding:0 1rem}.t-label[_ngcontent-%COMP%]{margin-left:.5rem}.t-expand[_ngcontent-%COMP%]{margin-left:.25rem}.t-section[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:flex-start;margin:-1rem 0 -.5rem}.t-section_bordered[_ngcontent-%COMP%]{margin:.5rem 0;border-left:1px solid var(--tui-base-03)}.t-subsection[_ngcontent-%COMP%]{margin-left:.5rem}.t-sublink[_ngcontent-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:1rem 0 0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;font:var(--tui-font-text-m);margin-left:.5rem}.t-sublink_small[_ngcontent-%COMP%]{margin-left:1rem;line-height:1.5rem;padding-top:.5rem}.t-sublink_subsection[_ngcontent-%COMP%]{margin-left:0;line-height:1.6rem}.t-sublink.t-sublink.t-sublink_active[_ngcontent-%COMP%]{color:var(--tui-text-01)}.t-icon[_ngcontent-%COMP%]{margin-left:.5rem}.t-chevron[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;width:1rem;height:1rem;margin:-.25rem .25rem 0 -.1875rem}.t-chevron_active[_ngcontent-%COMP%]{transform:rotate(90deg)}"],
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiDocNavigationComponent.prototype, "filterItems", null);
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiDocNavigationComponent.prototype, "flattenSubPages", null);
  return TuiDocNavigationComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocHeaderComponent = /*#__PURE__*/(() => {
  class TuiDocHeaderComponent {
    constructor(icons, logo, menu, router) {
      this.icons = icons;
      this.logo = logo;
      this.menu = menu;
      this.router = router;
      this.stream$ = new internal_Subject/* Subject */.B();
      this.open$ = (0,merge/* merge */.h)(this.router.events.pipe((0,operators_map/* map */.T)(taiga_ui_cdk_constants/* ALWAYS_FALSE_HANDLER */.Fr)), this.stream$).pipe((0,operators_startWith/* startWith */.Z)(false), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)());
    }
    onClick() {
      this.stream$.next(true);
    }
    onActiveZone(active) {
      if (!active) {
        this.stream$.next(false);
      }
    }
  }
  TuiDocHeaderComponent.ɵfac = function TuiDocHeaderComponent_Factory(t) {
    return new (t || TuiDocHeaderComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_ICONS */.T$), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_LOGO */.sy), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_MENU_TEXT */.kV), core_mjs_["ɵɵdirectiveInject"](router_mjs_.Router));
  };
  TuiDocHeaderComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDocHeaderComponent,
    selectors: [["header", "tuiDocHeader", ""]],
    attrs: _c8,
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 6,
    vars: 6,
    consts: [["appearance", "icon", "tuiIconButton", "", "type", "button", 1, "t-menu", 3, "click", "tuiActiveZoneChange", "icon", "title"], ["class", "t-navigation", 4, "tuiSidebar"], [1, "t-logo"], ["alt", "Logo", "class", "t-img", 3, "src", 4, "polymorpheusOutlet"], [1, "t-navigation"], ["alt", "Logo", 1, "t-img", 3, "src"]],
    template: function TuiDocHeaderComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵelementStart"](0, "button", 0);
        core_mjs_["ɵɵlistener"]("click", function TuiDocHeaderComponent_Template_button_click_0_listener() {
          return ctx.onClick();
        })("tuiActiveZoneChange", function TuiDocHeaderComponent_Template_button_tuiActiveZoneChange_0_listener($event) {
          return ctx.onActiveZone($event);
        });
        core_mjs_["ɵɵtemplate"](1, TuiDocHeaderComponent_tui_doc_navigation_1_Template, 1, 0, "tui-doc-navigation", 1);
        core_mjs_["ɵɵpipe"](2, "async");
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](3, "div", 2);
        core_mjs_["ɵɵtemplate"](4, TuiDocHeaderComponent_img_4_Template, 1, 1, "img", 3);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵprojection"](5);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("icon", ctx.icons.menu)("title", ctx.menu);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("tuiSidebar", !!core_mjs_["ɵɵpipeBind1"](2, 4, ctx.open$));
        core_mjs_["ɵɵadvance"](3);
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.logo);
      }
    },
    dependencies: [taiga_ui_core_components_button/* TuiButtonComponent */.SM, TuiDocNavigationComponent, taiga_ui_cdk_directives_active_zone_TuiActiveZoneDirective, TuiSidebarDirective, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA, common_mjs_.AsyncPipe],
    styles: ["[_nghost-%COMP%]{position:fixed;top:0;left:0;right:0;z-index:1;display:flex;box-shadow:var(--tui-shadow-navigation);height:3.9375rem;align-items:center;padding:0 1.25rem;background:var(--tui-base-01);border-bottom:1px solid var(--tui-base-03)}@supports (background: color-mix(in srgb,var(--tui-base-01),transparent 50%)){[_nghost-%COMP%]{background:color-mix(in srgb,var(--tui-base-01),transparent 50%);-webkit-backdrop-filter:blur(1.25rem);backdrop-filter:blur(1.25rem)}}.t-logo[_ngcontent-%COMP%]{margin-right:auto;font:var(--tui-font-heading-5)}.t-img[_ngcontent-%COMP%]{display:block}.t-menu[_ngcontent-%COMP%]{margin-left:-1.25rem}@media screen and (min-width: 48em){.t-menu[_ngcontent-%COMP%]{display:none}}.t-navigation[_ngcontent-%COMP%]{min-height:100%}"],
    changeDetection: 0
  });
  return TuiDocHeaderComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocNavigationModule = /*#__PURE__*/(() => {
  class TuiDocNavigationModule {}
  TuiDocNavigationModule.ɵfac = function TuiDocNavigationModule_Factory(t) {
    return new (t || TuiDocNavigationModule)();
  };
  TuiDocNavigationModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocNavigationModule
  });
  TuiDocNavigationModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, fesm2022_forms/* ReactiveFormsModule */.X1, router_mjs_.RouterModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, TuiScrollIntoViewLinkModule, taiga_ui_core_components_button/* TuiButtonModule */.Pv, TuiInputModule, TuiTextfieldControllerModule, TuiActiveZoneModule, taiga_ui_cdk_directives_let/* TuiLetModule */.ks, taiga_ui_core_directives_mode/* TuiModeModule */.Q, taiga_ui_core_components_link/* TuiLinkModule */.l, TuiExpandModule, TuiHostedDropdownModule, TuiDropdownModule, TuiAccordionModule, TuiScrollbarModule, taiga_ui_core_components_svg/* TuiSvgModule */.vl, taiga_ui_core_components_data_list_TuiDataListModule, TuiAutoFocusModule]]
  });
  return TuiDocNavigationModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocHeaderModule = /*#__PURE__*/(() => {
  class TuiDocHeaderModule {}
  TuiDocHeaderModule.ɵfac = function TuiDocHeaderModule_Factory(t) {
    return new (t || TuiDocHeaderModule)();
  };
  TuiDocHeaderModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocHeaderModule
  });
  TuiDocHeaderModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, taiga_ui_core_components_button/* TuiButtonModule */.Pv, TuiSidebarModule, TuiActiveZoneModule, TuiDocNavigationModule]]
  });
  return TuiDocHeaderModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocSeeAlsoComponent = /*#__PURE__*/(() => {
  class TuiDocSeeAlsoComponent {
    constructor(text, pages) {
      this.text = text;
      this.pages = pages;
      this.seeAlso = [];
    }
    getRouterLink(pageTitle) {
      var _a, _b;
      return (_b = (_a = this.pages.get(pageTitle)) === null || _a === void 0 ? void 0 : _a.route) !== null && _b !== void 0 ? _b : '';
    }
  }
  TuiDocSeeAlsoComponent.ɵfac = function TuiDocSeeAlsoComponent_Factory(t) {
    return new (t || TuiDocSeeAlsoComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_SEE_ALSO_TEXT */.kt), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_MAP_PAGES */.u3));
  };
  TuiDocSeeAlsoComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDocSeeAlsoComponent,
    selectors: [["tui-doc-see-also"]],
    inputs: {
      seeAlso: "seeAlso"
    },
    decls: 3,
    vars: 2,
    consts: [[1, "t-header"], [4, "ngFor", "ngForOf"], ["tuiLink", "", 3, "innerText", "routerLink"], [4, "ngIf"]],
    template: function TuiDocSeeAlsoComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵelementStart"](0, "h5", 0);
        core_mjs_["ɵɵtext"](1);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](2, TuiDocSeeAlsoComponent_ng_container_2_Template, 3, 3, "ng-container", 1);
      }
      if (rf & 2) {
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵtextInterpolate"](ctx.text);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngForOf", ctx.seeAlso);
      }
    },
    dependencies: [taiga_ui_core_components_link/* TuiLinkComponent */.E, common_mjs_.NgForOf, router_mjs_.RouterLinkWithHref, common_mjs_.NgIf],
    styles: ["[_nghost-%COMP%]{display:block}.t-header[_ngcontent-%COMP%]{font-size:.6875rem;line-height:1rem;text-transform:uppercase;letter-spacing:.075em;color:var(--tui-text-02);margin:0 0 .5rem;white-space:nowrap}"],
    changeDetection: 0
  });
  return TuiDocSeeAlsoComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocSeeAlsoModule = /*#__PURE__*/(() => {
  class TuiDocSeeAlsoModule {}
  TuiDocSeeAlsoModule.ɵfac = function TuiDocSeeAlsoModule_Factory(t) {
    return new (t || TuiDocSeeAlsoModule)();
  };
  TuiDocSeeAlsoModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocSeeAlsoModule
  });
  TuiDocSeeAlsoModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, router_mjs_.RouterModule, taiga_ui_core_components_link/* TuiLinkModule */.l]]
  });
  return TuiDocSeeAlsoModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocSourceCodeComponent = /*#__PURE__*/(() => {
  class TuiDocSourceCodeComponent {
    constructor(icons, sourceCode, text) {
      this.icons = icons;
      this.sourceCode = sourceCode;
      this.text = text;
      this.header = '';
      this.package = '';
      this.type = '';
      this.path = '';
    }
    get pathOptions() {
      return this.getPathOptions(this.header, this.package, this.type, this.path);
    }
    pathIsUrl(path) {
      return path.startsWith('http');
    }
    getPathOptions(header, packageName, type, path) {
      return {
        header,
        package: packageName,
        type,
        path
      };
    }
  }
  TuiDocSourceCodeComponent.ɵfac = function TuiDocSourceCodeComponent_Factory(t) {
    return new (t || TuiDocSourceCodeComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_ICONS */.T$), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_SOURCE_CODE */.QP), core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_SOURCE_CODE_TEXT */.iF));
  };
  TuiDocSourceCodeComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDocSourceCodeComponent,
    selectors: [["tui-doc-source-code"]],
    inputs: {
      header: "header",
      package: "package",
      type: "type",
      path: "path"
    },
    decls: 1,
    vars: 2,
    consts: [["appearance", "icon", "size", "s", "target", "_blank", "tuiIconButton", "", "type", "button", 3, "href", "icon", "title", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "size", "s", "target", "_blank", "tuiIconButton", "", "type", "button", 3, "href", "icon", "title"]],
    template: function TuiDocSourceCodeComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵtemplate"](0, TuiDocSourceCodeComponent_a_0_Template, 1, 3, "a", 0);
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("polymorpheusOutlet", ctx.pathIsUrl(ctx.path) ? ctx.path : ctx.sourceCode)("polymorpheusOutletContext", ctx.pathOptions);
      }
    },
    dependencies: [taiga_ui_core_components_button/* TuiButtonComponent */.SM, tinkoff_ng_polymorpheus/* PolymorpheusOutletDirective */.OA],
    encapsulation: 2,
    changeDetection: 0
  });
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiDocSourceCodeComponent.prototype, "pathIsUrl", null);
  (0,tslib_es6/* __decorate */.Cg)([taiga_ui_cdk_decorators/* tuiPure */.PE], TuiDocSourceCodeComponent.prototype, "getPathOptions", null);
  return TuiDocSourceCodeComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocSourceCodeModule = /*#__PURE__*/(() => {
  class TuiDocSourceCodeModule {}
  TuiDocSourceCodeModule.ɵfac = function TuiDocSourceCodeModule_Factory(t) {
    return new (t || TuiDocSourceCodeModule)();
  };
  TuiDocSourceCodeModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocSourceCodeModule
  });
  TuiDocSourceCodeModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, tinkoff_ng_polymorpheus/* PolymorpheusModule */.yJ, taiga_ui_core_components_button/* TuiButtonModule */.Pv]]
  });
  return TuiDocSourceCodeModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiLanguageSwitcherComponent = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiLanguageSwitcherComponent {
    constructor(switcher, flagPipe) {
      this.switcher = switcher;
      this.flagPipe = flagPipe;
      this.language = new FormControl(tuiCapitalizeFirstLetter(this.switcher.language));
      this.flags = new Map([['chinese', TuiCountryIsoCode.CN], ['dutch', TuiCountryIsoCode.NL], ['english', TuiCountryIsoCode.GB], ['french', TuiCountryIsoCode.FR], ['german', TuiCountryIsoCode.DE], ['italian', TuiCountryIsoCode.IT], ['polish', TuiCountryIsoCode.PL], ['portuguese', TuiCountryIsoCode.PT], ['russian', TuiCountryIsoCode.RU], ['spanish', TuiCountryIsoCode.ES], ['turkish', TuiCountryIsoCode.TR], ['ukrainian', TuiCountryIsoCode.UA], ['kazakh', TuiCountryIsoCode.KZ], ['malay', TuiCountryIsoCode.MY], ['vietnamese', TuiCountryIsoCode.VN]]);
      this.names = Array.from(this.flags.keys());
    }
    /**
     * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
     * TODO drop in v4.0
     */
    getFlagPath(code) {
      return this.flagPipe.transform(code);
    }
  }
  TuiLanguageSwitcherComponent.ɵfac = function TuiLanguageSwitcherComponent_Factory(t) {
    return new (t || TuiLanguageSwitcherComponent)(i0.ɵɵdirectiveInject(TuiLanguageSwitcher), i0.ɵɵdirectiveInject(TuiFlagPipe));
  };
  TuiLanguageSwitcherComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({
    type: TuiLanguageSwitcherComponent,
    selectors: [["tui-language-switcher"]],
    features: [i0.ɵɵProvidersFeature([
    // TODO: for backward compatibility only. Drop in v4.0
    TuiFlagPipe])],
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 3,
    vars: 1,
    consts: [[3, "formControl"], [4, "tuiDataList"], ["tuiOption", "", 3, "value", "click", 4, "ngFor", "ngForOf"], ["tuiOption", "", 3, "click", "value"], ["alt", "", 1, "t-flag", 3, "src"]],
    template: function TuiLanguageSwitcherComponent_Template(rf, ctx) {
      if (rf & 1) {
        i0.ɵɵprojectionDef();
        i0.ɵɵelementStart(0, "tui-select", 0);
        i0.ɵɵprojection(1);
        i0.ɵɵtemplate(2, TuiLanguageSwitcherComponent_tui_data_list_2_Template, 2, 1, "tui-data-list", 1);
        i0.ɵɵelementEnd();
      }
      if (rf & 2) {
        i0.ɵɵproperty("formControl", ctx.language);
      }
    },
    dependencies: [i1.TuiSelectComponent, i2.TuiDataListComponent, i2.TuiOptionComponent, i1.TuiSelectDirective, i5.NgControlStatus, i5.FormControlDirective, i2.TuiDataListDirective, i4.NgForOf, i4.TitleCasePipe, i2.TuiFlagPipe],
    styles: [".t-flag[_ngcontent-%COMP%]{width:1.75rem;height:1.25rem;margin-right:.5rem}"],
    changeDetection: 0
  });
  return TuiLanguageSwitcherComponent;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiLanguageSwitcherModule = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiLanguageSwitcherModule {}
  TuiLanguageSwitcherModule.ɵfac = function TuiLanguageSwitcherModule_Factory(t) {
    return new (t || TuiLanguageSwitcherModule)();
  };
  TuiLanguageSwitcherModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({
    type: TuiLanguageSwitcherModule
  });
  TuiLanguageSwitcherModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({
    imports: [[CommonModule, TuiFlagPipeModule, TuiSelectModule, TuiDataListModule, ReactiveFormsModule]]
  });
  return TuiLanguageSwitcherModule;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocMainComponent = /*#__PURE__*/(() => {
  class TuiDocMainComponent {
    constructor(icons, theme, night) {
      this.icons = icons;
      this.theme = theme;
      this.night = night;
      this.change$ = this.night;
      this.night$ = this.change$.pipe((0,operators_startWith/* startWith */.Z)(null), (0,operators_map/* map */.T)(() => this.night.value), (0,operators_distinctUntilChanged/* distinctUntilChanged */.F)(), (0,share/* share */.u)());
    }
    get mode() {
      return this.night.value ? 'onDark' : null;
    }
    get icon() {
      return this.night.value ? this.icons.day : this.icons.night;
    }
  }
  TuiDocMainComponent.ɵfac = function TuiDocMainComponent_Factory(t) {
    return new (t || TuiDocMainComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_ICONS */.T$), core_mjs_["ɵɵdirectiveInject"](TuiThemeService), core_mjs_["ɵɵdirectiveInject"](TuiThemeNightService));
  };
  TuiDocMainComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDocMainComponent,
    selectors: [["tui-doc-main"]],
    hostVars: 1,
    hostBindings: function TuiDocMainComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵattribute"]("data-mode", ctx.mode);
      }
    },
    features: [core_mjs_["ɵɵProvidersFeature"]([{
      provide: taiga_ui_core_directives_mode/* TuiModeDirective */.h,
      useExisting: (0,core_mjs_.forwardRef)(() => TuiDocMainComponent)
    }, taiga_ui_cdk_services/* TuiSwipeService */.aM])],
    ngContentSelectors: _c10,
    decls: 21,
    vars: 4,
    consts: [[4, "ngIf"], [1, "tui-doc-page"], [1, "tui-doc-navigation"], [1, "tui-doc-content"], [1, "tui-doc-outlet"], ["tuiDocHeader", ""], ["appearance", "secondary", "shape", "rounded", "size", "s", "tuiIconButton", "", "tuiMode", "onLight", "type", "button", 1, "tui-doc-night-mode-switch", 3, "click", "icon"], ["ngProjectAs", "tuiOverContent", 5, ["tuiOverContent"]], ["ngProjectAs", "tuiOverDialogs", 5, ["tuiOverDialogs"]], ["ngProjectAs", "tuiOverAlerts", 5, ["tuiOverAlerts"]], ["ngProjectAs", "tuiOverPortals", 5, ["tuiOverPortals"]], ["ngProjectAs", "tuiOverHints", 5, ["tuiOverHints"]]],
    template: function TuiDocMainComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"](_c9);
        core_mjs_["ɵɵtemplate"](0, TuiDocMainComponent_tui_theme_night_0_Template, 1, 0, "tui-theme-night", 0);
        core_mjs_["ɵɵpipe"](1, "async");
        core_mjs_["ɵɵelementStart"](2, "tui-root")(3, "div", 1)(4, "tui-doc-navigation", 2);
        core_mjs_["ɵɵprojection"](5);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](6, "div", 3);
        core_mjs_["ɵɵelement"](7, "router-outlet", 4);
        core_mjs_["ɵɵelementEnd"]()();
        core_mjs_["ɵɵelementStart"](8, "header", 5);
        core_mjs_["ɵɵprojection"](9, 1);
        core_mjs_["ɵɵelementStart"](10, "button", 6);
        core_mjs_["ɵɵlistener"]("click", function TuiDocMainComponent_Template_button_click_10_listener() {
          return ctx.night.toggle();
        });
        core_mjs_["ɵɵelementEnd"]()();
        core_mjs_["ɵɵelementContainerStart"](11, 7);
        core_mjs_["ɵɵprojection"](12, 2);
        core_mjs_["ɵɵelementContainerEnd"]();
        core_mjs_["ɵɵelementContainerStart"](13, 8);
        core_mjs_["ɵɵprojection"](14, 3);
        core_mjs_["ɵɵelementContainerEnd"]();
        core_mjs_["ɵɵelementContainerStart"](15, 9);
        core_mjs_["ɵɵprojection"](16, 4);
        core_mjs_["ɵɵelementContainerEnd"]();
        core_mjs_["ɵɵelementContainerStart"](17, 10);
        core_mjs_["ɵɵprojection"](18, 5);
        core_mjs_["ɵɵelementContainerEnd"]();
        core_mjs_["ɵɵelementContainerStart"](19, 11);
        core_mjs_["ɵɵprojection"](20, 6);
        core_mjs_["ɵɵelementContainerEnd"]();
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        core_mjs_["ɵɵproperty"]("ngIf", ctx.theme.isDefaultTheme && ctx.night.useDefaultNightTheme && core_mjs_["ɵɵpipeBind1"](1, 2, ctx.night$));
        core_mjs_["ɵɵadvance"](10);
        core_mjs_["ɵɵproperty"]("icon", ctx.icon);
      }
    },
    dependencies: [TuiThemeNightComponent, TuiRootComponent, TuiDocNavigationComponent, TuiDocHeaderComponent, taiga_ui_core_components_button/* TuiButtonComponent */.SM, common_mjs_.NgIf, router_mjs_.RouterOutlet, taiga_ui_core_directives_mode/* TuiModeDirective */.h, common_mjs_.AsyncPipe],
    styles: ["@keyframes tuiShaking{0%,to{transform:translate(0)}10%,30%,50%,70%,90%{transform:translate(-.3125rem)}20%,40%,60%,80%{transform:translate(.3125rem)}}html,body{scroll-padding-top:4rem;background:var(--tui-base-01);height:auto}tui-root>tui-scroll-controls>.t-bar_vertical{top:4rem!important}tui-doc-main{display:block}code:not(pre code):not(.hljs):not([class*=\"language-\"]){transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:inline-flex;background:var(--tui-base-02);color:var(--tui-text-02);vertical-align:middle;align-items:center;border-radius:.25rem;font-weight:500;outline:1px solid var(--tui-base-04);font-size:.75rem;padding:0 .3125rem;margin:.125rem .1875rem;text-wrap:wrap}tui-notification code:not(pre code):not(.hljs):not([class*=\"language-\"]){mix-blend-mode:luminosity}a code:not(pre code):not(.hljs):not([class*=\"language-\"]){color:var(--tui-link)}button:focus code,a:focus code{background:var(--tui-base-01)}.tui-doc-page{isolation:isolate;padding-top:4rem}tui-doc-navigation.tui-doc-navigation{position:fixed;top:4rem;bottom:0;width:16.25rem;border-right:1px solid var(--tui-base-03)}@media screen and (max-width: 47.9625em){tui-doc-navigation.tui-doc-navigation{display:none}}.tui-doc-content{margin-left:16.25rem}@media screen and (max-width: 47.9625em){.tui-doc-content{margin-left:0}}.tui-doc-outlet+*{display:block}.tui-doc-night-mode-switch{margin-left:1rem}.tui-doc-night-mode-switch tui-svg{color:var(--tui-text-02)}tui-doc-code .hljs-tag{background:none}tui-doc-code .hljs{display:block;overflow-x:auto;padding:.5em;color:var(--tui-text-01);background-color:var(--tui-clear)}tui-doc-code .hljs.hljs-line-numbers{background:transparent}tui-doc-code .hljs-subst,tui-doc-code .hljs-title{font-weight:normal;color:var(--tui-text-01)}tui-doc-code .hljs-property{color:var(--tui-support-14)}tui-doc-code .hljs-comment,tui-doc-code .hljs-quote{color:var(--tui-text-02);font-style:italic}tui-doc-code .hljs-meta{color:#e38162}tui-doc-code .hljs-section,tui-doc-code .hljs-name,tui-doc-code .hljs-literal,tui-doc-code .hljs-keyword,tui-doc-code .hljs-selector-tag,tui-doc-code .hljs-type,tui-doc-code .hljs-selector-id,tui-doc-code .hljs-selector-class{font-weight:bold;color:var(--tui-link)}tui-doc-code .hljs-attr{color:var(--tui-link)}tui-doc-code .hljs-attribute,tui-doc-code .hljs-number,tui-doc-code .hljs-regexp,tui-doc-code .hljs-link,tui-doc-code .hljs-built_in{font-weight:bold;color:var(--tui-support-06)}tui-doc-code .hljs-number,tui-doc-code .hljs-regexp,tui-doc-code .hljs-link{font-weight:normal}tui-doc-code .hljs-string{color:var(--tui-positive);font-weight:bold}tui-doc-code .hljs-symbol,tui-doc-code .hljs-bullet,tui-doc-code .hljs-formula{color:var(--tui-text-01);background:var(--tui-base-02);font-style:italic}tui-doc-code .hljs-doctag{text-decoration:underline}tui-doc-code .hljs-variable,tui-doc-code .hljs-template-variable{color:var(--tui-link-hover)}tui-doc-code [data-mode=onDark] .hljs-variable,tui-doc-code [data-mode=onDark] .hljs-template-variable{color:var(--tui-warning-fill)}tui-doc-code .hljs-addition{background:var(--tui-success-bg)}tui-doc-code .hljs-deletion{background:var(--tui-error-bg)}tui-doc-code .hljs-emphasis{font-style:italic}tui-doc-code .hljs-strong{font-weight:bold}tui-doc-code .hljs .hljs-line-numbers{padding:0}tui-doc-code .hljs-ln-numbers{vertical-align:top;opacity:.3;text-align:right;padding-right:1em!important}\n"],
    encapsulation: 2
  });
  return TuiDocMainComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocMainModule = /*#__PURE__*/(() => {
  class TuiDocMainModule {}
  TuiDocMainModule.ɵfac = function TuiDocMainModule_Factory(t) {
    return new (t || TuiDocMainModule)();
  };
  TuiDocMainModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocMainModule
  });
  TuiDocMainModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, router_mjs_.RouterModule, TuiThemeNightModule, TuiDocHeaderModule, TuiRootModule, TuiDialogModule, TuiAlertModule, taiga_ui_core_components_button/* TuiButtonModule */.Pv, taiga_ui_core_directives_mode/* TuiModeModule */.Q, TuiDocNavigationModule]]
  });
  return TuiDocMainModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Array if related page titles
 */
const PAGE_SEE_ALSO = new core_mjs_.InjectionToken('[PAGE_SEE_ALSO]');
const PAGE_PROVIDERS = [{
  provide: PAGE_SEE_ALSO,
  deps: [core_mjs_.ElementRef, taiga_ui_addon_doc_tokens/* TUI_DOC_SEE_ALSO */.wo],
  useFactory: ({
    nativeElement
  }, seeAlsoGroups) => {
    const currentHeader = nativeElement.getAttribute('header');
    const groups = seeAlsoGroups.filter(group => group.includes(currentHeader)) || [];
    const seeAlsoSet = new Set(groups.join().split(',').filter(component => component && component !== currentHeader));
    return Array.from(seeAlsoSet);
  }
}];
let TuiDocPageTabConnectorDirective = /*#__PURE__*/(() => {
  class TuiDocPageTabConnectorDirective {
    constructor(template) {
      this.template = template;
    }
  }
  TuiDocPageTabConnectorDirective.ɵfac = function TuiDocPageTabConnectorDirective_Factory(t) {
    return new (t || TuiDocPageTabConnectorDirective)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.TemplateRef));
  };
  TuiDocPageTabConnectorDirective.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: TuiDocPageTabConnectorDirective,
    selectors: [["", "pageTab", ""]],
    inputs: {
      pageTab: "pageTab"
    }
  });
  return TuiDocPageTabConnectorDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocPageComponent = /*#__PURE__*/(() => {
  class TuiDocPageComponent {
    constructor(defaultTabs, seeAlso) {
      this.defaultTabs = defaultTabs;
      this.seeAlso = seeAlso;
      this.header = '';
      this.package = '';
      this.type = '';
      this.path = '';
      this.deprecated = false;
      this.tabConnectors = taiga_ui_cdk_constants/* EMPTY_QUERY */.xQ;
      this.activeItemIndex = 0;
      this.from = / /g;
      this.to = '_';
    }
    get showSeeAlso() {
      return !!this.seeAlso.length && this.activeItemIndex === 0;
    }
  }
  TuiDocPageComponent.ɵfac = function TuiDocPageComponent_Factory(t) {
    return new (t || TuiDocPageComponent)(core_mjs_["ɵɵdirectiveInject"](taiga_ui_addon_doc_tokens/* TUI_DOC_DEFAULT_TABS */.Xw), core_mjs_["ɵɵdirectiveInject"](PAGE_SEE_ALSO));
  };
  TuiDocPageComponent.ɵcmp = /* @__PURE__ */core_mjs_["ɵɵdefineComponent"]({
    type: TuiDocPageComponent,
    selectors: [["tui-doc-page"]],
    contentQueries: function TuiDocPageComponent_ContentQueries(rf, ctx, dirIndex) {
      if (rf & 1) {
        core_mjs_["ɵɵcontentQuery"](dirIndex, TuiDocPageTabConnectorDirective, 4);
      }
      if (rf & 2) {
        let _t;
        core_mjs_["ɵɵqueryRefresh"](_t = core_mjs_["ɵɵloadQuery"]()) && (ctx.tabConnectors = _t);
      }
    },
    inputs: {
      header: "header",
      package: "package",
      type: "type",
      path: "path",
      deprecated: "deprecated"
    },
    features: [core_mjs_["ɵɵProvidersFeature"](PAGE_PROVIDERS)],
    ngContentSelectors: taiga_ui_addon_doc_components_c0,
    decls: 11,
    vars: 10,
    consts: [[1, "t-header"], [1, "t-title"], ["status", "custom", "value", "deprecated", "class", "t-tag t-tag_deprecated", 4, "ngIf"], ["status", "custom", "class", "t-tag t-tag_package", 3, "autoColor", "value", 4, "ngIf"], ["class", "t-tabs", 3, "activeItemIndex", "activeItemIndexChange", 4, "ngIf"], [1, "t-source-code", 3, "header", "package", "path", "type"], [1, "t-content"], ["class", "t-see-also", 3, "seeAlso", 4, "ngIf"], [4, "ngFor", "ngForOf"], ["status", "custom", "value", "deprecated", 1, "t-tag", "t-tag_deprecated"], ["status", "custom", 1, "t-tag", "t-tag_package", 3, "autoColor", "value"], [1, "t-tabs", 3, "activeItemIndexChange", "activeItemIndex"], [4, "ngIf"], ["routerLinkActive", "", "tuiTab", "", 3, "routerLink", "routerLinkActiveOptions", 4, "tuiItem"], ["routerLinkActive", "", "tuiTab", "", 3, "routerLink", "routerLinkActiveOptions"], [1, "t-see-also", 3, "seeAlso"], [3, "ngTemplateOutlet", 4, "ngIf"], [3, "ngTemplateOutlet"]],
    template: function TuiDocPageComponent_Template(rf, ctx) {
      if (rf & 1) {
        core_mjs_["ɵɵprojectionDef"]();
        core_mjs_["ɵɵelementStart"](0, "header", 0)(1, "h1", 1);
        core_mjs_["ɵɵtext"](2);
        core_mjs_["ɵɵtemplate"](3, TuiDocPageComponent_tui_tag_3_Template, 1, 0, "tui-tag", 2)(4, TuiDocPageComponent_tui_tag_4_Template, 1, 2, "tui-tag", 3);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵtemplate"](5, TuiDocPageComponent_tui_tabs_with_more_5_Template, 2, 2, "tui-tabs-with-more", 4);
        core_mjs_["ɵɵelement"](6, "tui-doc-source-code", 5);
        core_mjs_["ɵɵelementEnd"]();
        core_mjs_["ɵɵelementStart"](7, "div", 6);
        core_mjs_["ɵɵprojection"](8);
        core_mjs_["ɵɵtemplate"](9, TuiDocPageComponent_tui_doc_see_also_9_Template, 1, 1, "tui-doc-see-also", 7)(10, TuiDocPageComponent_ng_container_10_Template, 2, 1, "ng-container", 8);
        core_mjs_["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        core_mjs_["ɵɵadvance"](2);
        core_mjs_["ɵɵtextInterpolate1"](" ", ctx.header, " ");
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", !!ctx.deprecated || ctx.deprecated === "");
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.package);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngIf", ctx.tabConnectors.length);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("header", ctx.header)("package", ctx.package)("path", ctx.path)("type", ctx.type);
        core_mjs_["ɵɵadvance"](3);
        core_mjs_["ɵɵproperty"]("ngIf", ctx.showSeeAlso);
        core_mjs_["ɵɵadvance"]();
        core_mjs_["ɵɵproperty"]("ngForOf", ctx.tabConnectors);
      }
    },
    dependencies: [TuiTagComponent, TuiTabsWithMoreComponent, TuiTabComponent, TuiDocSourceCodeComponent, TuiDocSeeAlsoComponent, common_mjs_.NgIf, common_mjs_.NgForOf, TuiItemDirective, router_mjs_.RouterLinkWithHref, router_mjs_.RouterLinkActive, common_mjs_.NgTemplateOutlet, TuiReplacePipe],
    styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;min-height:0;flex-basis:0;flex-grow:1}.t-header[_ngcontent-%COMP%]{display:flex;font:var(--tui-font-heading-3);flex-wrap:wrap;min-height:7.25rem;color:var(--tui-text-01);box-shadow:inset 0 -1px 0 0 var(--tui-base-03);padding:3.75rem 0 0;box-sizing:border-box;flex-shrink:0;margin:0 min(10vw,8.75rem)}tui-root._mobile[_nghost-%COMP%]   .t-header[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{font:var(--tui-font-heading-4);min-height:4.5rem;padding:1.25rem 1.25rem 0;margin:0}.t-title[_ngcontent-%COMP%]{min-width:100%;font-size:inherit;margin:0}.t-tag[_ngcontent-%COMP%]{vertical-align:middle;text-transform:uppercase;margin-right:.5rem}.t-tag_deprecated[_ngcontent-%COMP%]{background-color:var(--tui-error-fill);color:#fff}.t-tag.t-tag_package[_ngcontent-%COMP%]{color:#000}.t-tabs[_ngcontent-%COMP%]{flex:1;margin:1.125rem .3125rem 0 0}tui-root._mobile[_nghost-%COMP%]   .t-tabs[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-tabs[_ngcontent-%COMP%]{margin-top:.25rem}.t-content[_ngcontent-%COMP%]{padding:2rem 0;margin:0 min(10vw,8.75rem)}tui-root._mobile[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:2rem 1.25rem;margin:0}.t-see-also[_ngcontent-%COMP%]{min-width:18.75rem;width:30%;float:right;margin-left:1.5rem}tui-root._mobile[_nghost-%COMP%]   .t-see-also[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-see-also[_ngcontent-%COMP%]{float:none;width:100%;margin:0 0 1.5rem}.t-source-code[_ngcontent-%COMP%]{align-self:flex-end;line-height:2.75rem;margin-left:auto}"],
    changeDetection: 0
  });
  return TuiDocPageComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiDocPageModule = /*#__PURE__*/(() => {
  class TuiDocPageModule {}
  TuiDocPageModule.ɵfac = function TuiDocPageModule_Factory(t) {
    return new (t || TuiDocPageModule)();
  };
  TuiDocPageModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: TuiDocPageModule
  });
  TuiDocPageModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
    imports: [[common_mjs_.CommonModule, router_mjs_.RouterModule, TuiDocSeeAlsoModule, TuiTabsModule, TuiTagModule, TuiDocSourceCodeModule, TuiReplacePipeModule]]
  });
  return TuiDocPageModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-addon-doc-components.js.map

/***/ }),

/***/ 8687:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Aq: () => (/* binding */ TUI_DOC_PAGE_LOADED),
/* harmony export */   NC: () => (/* binding */ TUI_DOC_SEARCH_TEXT),
/* harmony export */   QP: () => (/* binding */ TUI_DOC_SOURCE_CODE),
/* harmony export */   T$: () => (/* binding */ TUI_DOC_ICONS),
/* harmony export */   TA: () => (/* binding */ TUI_DOC_URL_STATE_HANDLER),
/* harmony export */   Wl: () => (/* binding */ TUI_DOC_EXAMPLE_MARKDOWN_CODE_PROCESSOR),
/* harmony export */   Xw: () => (/* binding */ TUI_DOC_DEFAULT_TABS),
/* harmony export */   Y$: () => (/* binding */ TUI_DOC_TYPE_REFERENCE_HANDLER),
/* harmony export */   iF: () => (/* binding */ TUI_DOC_SOURCE_CODE_TEXT),
/* harmony export */   kV: () => (/* binding */ TUI_DOC_MENU_TEXT),
/* harmony export */   kt: () => (/* binding */ TUI_DOC_SEE_ALSO_TEXT),
/* harmony export */   q9: () => (/* binding */ TUI_DOC_DOCUMENTATION_TEXTS),
/* harmony export */   rm: () => (/* binding */ TUI_DOC_PAGES),
/* harmony export */   sy: () => (/* binding */ TUI_DOC_LOGO),
/* harmony export */   u3: () => (/* binding */ TUI_DOC_MAP_PAGES),
/* harmony export */   vr: () => (/* binding */ TUI_DOC_EXCLUDED_PROPERTIES),
/* harmony export */   wo: () => (/* binding */ TUI_DOC_SEE_ALSO),
/* harmony export */   xH: () => (/* binding */ TUI_DOC_TYPE_REFERENCE_PARSER),
/* harmony export */   xq: () => (/* binding */ TUI_DOC_TITLE)
/* harmony export */ });
/* unused harmony exports TUI_DOC_CODE_ACTIONS, TUI_DOC_CODE_EDITOR, TUI_DOC_DEFAULT_ICONS, TUI_DOC_DEMO_TEXTS, TUI_DOC_EXAMPLE_CONTENT_PROCESSOR, TUI_DOC_EXAMPLE_TEXTS, TUI_DOC_SCROLL_BEHAVIOR, tuiDocExcludeProperties, tuiDocIconsProvider */
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9925);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_addon_doc_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1583);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3669);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(9030);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1584);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7673);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5558);
/* harmony import */ var _taiga_ui_core__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8502);







/**
 * Code actions for the opened tab with code example
 */
const TUI_DOC_CODE_ACTIONS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)('');

/**
 * Service for opening online IDE e.g. Stackblitz
 */
const TUI_DOC_CODE_EDITOR = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('[TUI_DOC_CODE_EDITOR]');

/**
 * Array of default tab names
 */
const TUI_DOC_DEFAULT_TABS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)([]);
const TUI_DOC_DEFAULT_ICONS = {
  search: 'tuiIconSearch',
  day: 'tuiIconSun',
  night: 'tuiIconMoon',
  code: 'tuiIconCode',
  menu: 'tuiIconMenuLarge'
};
const TUI_DOC_ICONS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(TUI_DOC_DEFAULT_ICONS);
function tuiDocIconsProvider(icons) {
  return tuiProvideOptions(TUI_DOC_ICONS, icons, TUI_DOC_DEFAULT_ICONS);
}

/**
 * Processes content in example
 */
const TUI_DOC_EXAMPLE_CONTENT_PROCESSOR = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(rxjs__WEBPACK_IMPORTED_MODULE_2__/* .identity */ .D);
/**
 * Processes markdown in code block
 */
const TUI_DOC_EXAMPLE_MARKDOWN_CODE_PROCESSOR = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(_taiga_ui_addon_doc_utils__WEBPACK_IMPORTED_MODULE_3__/* .tuiTryParseMarkdownCodeBlock */ .SH);

/**
 * Token to exclude inherited documentation properties
 */
const TUI_DOC_EXCLUDED_PROPERTIES = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(new Set([]));
function tuiDocExcludeProperties(properties) {
  return {
    provide: TUI_DOC_EXCLUDED_PROPERTIES,
    useValue: new Set(properties)
  };
}

/**
 * TODO: think about reorganization in @taiga-ui/i18n way
 */
/**
 * tui-doc-demo i18n texts
 * Works with a tuple
 * [@string tuiMode tooltip content, @string word 'background', @string 'form value']
 */
const TUI_DOC_DEMO_TEXTS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(['Read more more about modes: ', 'Background', 'Form value']);
/**
 * tui-doc-documentation i18n texts
 * Works with a tuple
 * [
 * @string word 'argument',
 * @string word 'type',
 * @string 'name and description',
 * @string word 'value'
 * @string message for tooltip about ng-polymorpheus
 * ]
 */
const TUI_DOC_DOCUMENTATION_TEXTS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(['Argument', 'Type', 'Name and description', 'Value', 'Learn about our dynamic templates from ']);
/**
 * tui-doc-example i18n texts
 * Works with a tuple
 * [
 * @string default tab name,
 * @string link to a sample copied message text,
 * @string link to a sample copied message label
 * ]
 */
const TUI_DOC_EXAMPLE_TEXTS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(['Preview', 'Link to a sample was successfully copied', 'Done']);
const TUI_DOC_MENU_TEXT = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)('Menu');
const TUI_DOC_SEARCH_TEXT = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)('Search');
const TUI_DOC_SEE_ALSO_TEXT = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)('See also');
const TUI_DOC_SOURCE_CODE_TEXT = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)('Source code');

/**
 * Main logo
 */
const TUI_DOC_LOGO = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)('');

/**
 * Stream that emits if loading of page is over (for example, to begin scrollIntoView)
 */
const TUI_DOC_PAGE_LOADED = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)((0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .defer */ .v)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_5__/* .timer */ .O)(200).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__/* .switchMap */ .n)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_7__.of)(true)))));

/**
 * Documentation pages
 */
const TUI_DOC_PAGES = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)([]);
const TUI_DOC_MAP_PAGES = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateTokenFromFactory */ .ET)(() => (0,_taiga_ui_addon_doc_utils__WEBPACK_IMPORTED_MODULE_3__/* .tuiToFlatMapPages */ .Fq)((0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(TUI_DOC_PAGES)));

/**
 * Defines the transition animation for scroll
 * @deprecated will be remove in v4.0
 */
const TUI_DOC_SCROLL_BEHAVIOR = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateTokenFromFactory */ .ET)(() => (0,_angular_core__WEBPACK_IMPORTED_MODULE_0__.inject)(_taiga_ui_core__WEBPACK_IMPORTED_MODULE_8__/* .TUI_REDUCED_MOTION */ .vo) ? 'auto' : 'smooth');

/**
 * Array of arrays of related pages
 */
const TUI_DOC_SEE_ALSO = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)([]);

/**
 * Source code link
 */
const TUI_DOC_SOURCE_CODE = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(null);

/**
 * Page title prefix
 */
const TUI_DOC_TITLE = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)('');
const TUI_DOC_TYPE_REFERENCE_HANDLER = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(null);
const TUI_DOC_TYPE_REFERENCE_PARSER = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(_taiga_ui_addon_doc_utils__WEBPACK_IMPORTED_MODULE_3__/* .tuiTypeReferenceParser */ .Dj);
const TUI_DOC_URL_STATE_HANDLER = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiCreateToken */ .gc)(String);

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-addon-doc-tokens.js.map

/***/ }),

/***/ 1583:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  TZ: () => (/* binding */ tuiCoerceValue),
  CC: () => (/* binding */ tuiGenerateRoutes),
  NZ: () => (/* binding */ tuiInspectAny),
  XZ: () => (/* binding */ tuiRawLoad),
  Fq: () => (/* binding */ tuiToFlatMapPages),
  IB: () => (/* binding */ tuiTransliterateKeyboardLayout),
  SH: () => (/* binding */ tuiTryParseMarkdownCodeBlock),
  Dj: () => (/* binding */ tuiTypeReferenceParser)
});

// UNUSED EXPORTS: tuiCoerceValueIsTrue, tuiIsPageGroup, tuiRawLoadRecord, tuiSortPages

// NAMESPACE OBJECT: ./node_modules/mdurl/index.mjs
var mdurl_namespaceObject = {};
__webpack_require__.r(mdurl_namespaceObject);
__webpack_require__.d(mdurl_namespaceObject, {
  decode: () => (lib_decode),
  encode: () => (lib_encode),
  format: () => (format),
  parse: () => (parse)
});

// NAMESPACE OBJECT: ./node_modules/uc.micro/index.mjs
var uc_micro_namespaceObject = {};
__webpack_require__.r(uc_micro_namespaceObject);
__webpack_require__.d(uc_micro_namespaceObject, {
  Any: () => (Any_regex),
  Cc: () => (Cc_regex),
  Cf: () => (Cf_regex),
  P: () => (regex),
  S: () => (S_regex),
  Z: () => (Z_regex)
});

// NAMESPACE OBJECT: ./node_modules/markdown-it/lib/common/utils.mjs
var utils_namespaceObject = {};
__webpack_require__.r(utils_namespaceObject);
__webpack_require__.d(utils_namespaceObject, {
  arrayReplaceAt: () => (arrayReplaceAt),
  assign: () => (utils_assign),
  escapeHtml: () => (escapeHtml),
  escapeRE: () => (escapeRE),
  fromCodePoint: () => (utils_fromCodePoint),
  has: () => (has),
  isMdAsciiPunct: () => (isMdAsciiPunct),
  isPunctChar: () => (isPunctChar),
  isSpace: () => (isSpace),
  isString: () => (isString),
  isValidEntityCode: () => (isValidEntityCode),
  isWhiteSpace: () => (isWhiteSpace),
  lib: () => (lib),
  normalizeReference: () => (normalizeReference),
  unescapeAll: () => (unescapeAll),
  unescapeMd: () => (unescapeMd)
});

// NAMESPACE OBJECT: ./node_modules/markdown-it/lib/helpers/index.mjs
var helpers_namespaceObject = {};
__webpack_require__.r(helpers_namespaceObject);
__webpack_require__.d(helpers_namespaceObject, {
  parseLinkDestination: () => (parseLinkDestination),
  parseLinkLabel: () => (parseLinkLabel),
  parseLinkTitle: () => (parseLinkTitle)
});

;// CONCATENATED MODULE: ./node_modules/mdurl/lib/decode.mjs
/* eslint-disable no-bitwise */

const decodeCache = {};
function getDecodeCache(exclude) {
  let cache = decodeCache[exclude];
  if (cache) {
    return cache;
  }
  cache = decodeCache[exclude] = [];
  for (let i = 0; i < 128; i++) {
    const ch = String.fromCharCode(i);
    cache.push(ch);
  }
  for (let i = 0; i < exclude.length; i++) {
    const ch = exclude.charCodeAt(i);
    cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);
  }
  return cache;
}

// Decode percent-encoded string.
//
function decode(string, exclude) {
  if (typeof exclude !== 'string') {
    exclude = decode.defaultChars;
  }
  const cache = getDecodeCache(exclude);
  return string.replace(/(%[a-f0-9]{2})+/gi, function (seq) {
    let result = '';
    for (let i = 0, l = seq.length; i < l; i += 3) {
      const b1 = parseInt(seq.slice(i + 1, i + 3), 16);
      if (b1 < 0x80) {
        result += cache[b1];
        continue;
      }
      if ((b1 & 0xE0) === 0xC0 && i + 3 < l) {
        // 110xxxxx 10xxxxxx
        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        if ((b2 & 0xC0) === 0x80) {
          const chr = b1 << 6 & 0x7C0 | b2 & 0x3F;
          if (chr < 0x80) {
            result += '\ufffd\ufffd';
          } else {
            result += String.fromCharCode(chr);
          }
          i += 3;
          continue;
        }
      }
      if ((b1 & 0xF0) === 0xE0 && i + 6 < l) {
        // 1110xxxx 10xxxxxx 10xxxxxx
        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        const b3 = parseInt(seq.slice(i + 7, i + 9), 16);
        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
          const chr = b1 << 12 & 0xF000 | b2 << 6 & 0xFC0 | b3 & 0x3F;
          if (chr < 0x800 || chr >= 0xD800 && chr <= 0xDFFF) {
            result += '\ufffd\ufffd\ufffd';
          } else {
            result += String.fromCharCode(chr);
          }
          i += 6;
          continue;
        }
      }
      if ((b1 & 0xF8) === 0xF0 && i + 9 < l) {
        // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
        const b2 = parseInt(seq.slice(i + 4, i + 6), 16);
        const b3 = parseInt(seq.slice(i + 7, i + 9), 16);
        const b4 = parseInt(seq.slice(i + 10, i + 12), 16);
        if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
          let chr = b1 << 18 & 0x1C0000 | b2 << 12 & 0x3F000 | b3 << 6 & 0xFC0 | b4 & 0x3F;
          if (chr < 0x10000 || chr > 0x10FFFF) {
            result += '\ufffd\ufffd\ufffd\ufffd';
          } else {
            chr -= 0x10000;
            result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
          }
          i += 9;
          continue;
        }
      }
      result += '\ufffd';
    }
    return result;
  });
}
decode.defaultChars = ';/?:@&=+$,#';
decode.componentChars = '';
/* harmony default export */ const lib_decode = (decode);
;// CONCATENATED MODULE: ./node_modules/mdurl/lib/encode.mjs
const encodeCache = {};

// Create a lookup array where anything but characters in `chars` string
// and alphanumeric chars is percent-encoded.
//
function getEncodeCache(exclude) {
  let cache = encodeCache[exclude];
  if (cache) {
    return cache;
  }
  cache = encodeCache[exclude] = [];
  for (let i = 0; i < 128; i++) {
    const ch = String.fromCharCode(i);
    if (/^[0-9a-z]$/i.test(ch)) {
      // always allow unencoded alphanumeric characters
      cache.push(ch);
    } else {
      cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
    }
  }
  for (let i = 0; i < exclude.length; i++) {
    cache[exclude.charCodeAt(i)] = exclude[i];
  }
  return cache;
}

// Encode unsafe characters with percent-encoding, skipping already
// encoded sequences.
//
//  - string       - string to encode
//  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
//  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
//
function encode(string, exclude, keepEscaped) {
  if (typeof exclude !== 'string') {
    // encode(string, keepEscaped)
    keepEscaped = exclude;
    exclude = encode.defaultChars;
  }
  if (typeof keepEscaped === 'undefined') {
    keepEscaped = true;
  }
  const cache = getEncodeCache(exclude);
  let result = '';
  for (let i = 0, l = string.length; i < l; i++) {
    const code = string.charCodeAt(i);
    if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
      if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
        result += string.slice(i, i + 3);
        i += 2;
        continue;
      }
    }
    if (code < 128) {
      result += cache[code];
      continue;
    }
    if (code >= 0xD800 && code <= 0xDFFF) {
      if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
        const nextCode = string.charCodeAt(i + 1);
        if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
          result += encodeURIComponent(string[i] + string[i + 1]);
          i++;
          continue;
        }
      }
      result += '%EF%BF%BD';
      continue;
    }
    result += encodeURIComponent(string[i]);
  }
  return result;
}
encode.defaultChars = ";/?:@&=+$,-_.!~*'()#";
encode.componentChars = "-_.!~*'()";
/* harmony default export */ const lib_encode = (encode);
;// CONCATENATED MODULE: ./node_modules/mdurl/lib/format.mjs
function format(url) {
  let result = '';
  result += url.protocol || '';
  result += url.slashes ? '//' : '';
  result += url.auth ? url.auth + '@' : '';
  if (url.hostname && url.hostname.indexOf(':') !== -1) {
    // ipv6 address
    result += '[' + url.hostname + ']';
  } else {
    result += url.hostname || '';
  }
  result += url.port ? ':' + url.port : '';
  result += url.pathname || '';
  result += url.search || '';
  result += url.hash || '';
  return result;
}
;
;// CONCATENATED MODULE: ./node_modules/mdurl/lib/parse.mjs
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

//
// Changes from joyent/node:
//
// 1. No leading slash in paths,
//    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
//
// 2. Backslashes are not replaced with slashes,
//    so `http:\\example.org\` is treated like a relative path
//
// 3. Trailing colon is treated like a part of the path,
//    i.e. in `http://example.org:foo` pathname is `:foo`
//
// 4. Nothing is URL-encoded in the resulting object,
//    (in joyent/node some chars in auth and paths are encoded)
//
// 5. `url.parse()` does not have `parseQueryString` argument
//
// 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
//    which can be constructed using other parts of the url.
//

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.pathname = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
const protocolPattern = /^([a-z0-9.+-]+:)/i;
const portPattern = /:[0-9]*$/;

// Special case for a simple path URL
/* eslint-disable-next-line no-useless-escape */
const simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/;

// RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
const delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'];

// RFC 2396: characters not allowed for various reasons.
const unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims);

// Allowed by RFCs, but cause of XSS attacks.  Always escape these.
const autoEscape = ['\''].concat(unwise);
// Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
const nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape);
const hostEndingChars = ['/', '?', '#'];
const hostnameMaxLen = 255;
const hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/;
const hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/;
// protocols that can allow "unsafe" and "unwise" chars.
// protocols that never have a hostname.
const hostlessProtocol = {
  javascript: true,
  'javascript:': true
};
// protocols that always contain a // bit.
const slashedProtocol = {
  http: true,
  https: true,
  ftp: true,
  gopher: true,
  file: true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
};
function urlParse(url, slashesDenoteHost) {
  if (url && url instanceof Url) return url;
  const u = new Url();
  u.parse(url, slashesDenoteHost);
  return u;
}
Url.prototype.parse = function (url, slashesDenoteHost) {
  let lowerProto, hec, slashes;
  let rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();
  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    const simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
      }
      return this;
    }
  }
  let proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    lowerProto = proto.toLowerCase();
    this.protocol = proto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  /* eslint-disable-next-line no-useless-escape */
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }
  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    let hostEnd = -1;
    for (let i = 0; i < hostEndingChars.length; i++) {
      hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    let auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = auth;
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (let i = 0; i < nonHostChars.length; i++) {
      hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
        hostEnd = hec;
      }
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1) {
      hostEnd = rest.length;
    }
    if (rest[hostEnd - 1] === ':') {
      hostEnd--;
    }
    const host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost(host);

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    const ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      const hostparts = this.hostname.split(/\./);
      for (let i = 0, l = hostparts.length; i < l; i++) {
        const part = hostparts[i];
        if (!part) {
          continue;
        }
        if (!part.match(hostnamePartPattern)) {
          let newpart = '';
          for (let j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            const validParts = hostparts.slice(0, i);
            const notHost = hostparts.slice(i + 1);
            const bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }
    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    }

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
    }
  }

  // chop off from the tail first.
  const hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  const qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    rest = rest.slice(0, qm);
  }
  if (rest) {
    this.pathname = rest;
  }
  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '';
  }
  return this;
};
Url.prototype.parseHost = function (host) {
  let port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) {
    this.hostname = host;
  }
};
/* harmony default export */ const parse = (urlParse);
;// CONCATENATED MODULE: ./node_modules/mdurl/index.mjs





;// CONCATENATED MODULE: ./node_modules/uc.micro/categories/P/regex.mjs
/* harmony default export */ const regex = (/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDEAD\uDF55-\uDF59\uDF86-\uDF89]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5A\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDEB9\uDF3C-\uDF3E]|\uD806[\uDC3B\uDD44-\uDD46\uDDE2\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2\uDF00-\uDF09]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8\uDF43-\uDF4F\uDFFF]|\uD809[\uDC70-\uDC74]|\uD80B[\uDFF1\uDFF2]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A\uDFE2]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/);
;// CONCATENATED MODULE: ./node_modules/uc.micro/properties/Any/regex.mjs
/* harmony default export */ const Any_regex = (/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/);
;// CONCATENATED MODULE: ./node_modules/uc.micro/categories/Cc/regex.mjs
/* harmony default export */ const Cc_regex = (/[\0-\x1F\x7F-\x9F]/);
;// CONCATENATED MODULE: ./node_modules/uc.micro/categories/Cf/regex.mjs
/* harmony default export */ const Cf_regex = (/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u0890\u0891\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD80D[\uDC30-\uDC3F]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/);
;// CONCATENATED MODULE: ./node_modules/uc.micro/categories/S/regex.mjs
/* harmony default export */ const S_regex = (/[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u0888\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20C0\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFF\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u31EF\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC2\uFD40-\uFD4F\uFDCF\uFDFC-\uFDFF\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD833[\uDF50-\uDFC3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDEA\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEDC-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF76\uDF7B-\uDFD9\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDE53\uDE60-\uDE6D\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC5\uDECE-\uDEDB\uDEE0-\uDEE8\uDEF0-\uDEF8\uDF00-\uDF92\uDF94-\uDFCA]/);
;// CONCATENATED MODULE: ./node_modules/uc.micro/categories/Z/regex.mjs
/* harmony default export */ const Z_regex = (/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/);
;// CONCATENATED MODULE: ./node_modules/uc.micro/index.mjs







;// CONCATENATED MODULE: ./node_modules/entities/lib/esm/generated/decode-data-html.js
// Generated using scripts/write-decode-map.ts
/* harmony default export */ const decode_data_html = (new Uint16Array(
// prettier-ignore
"\u1d41<\xd5\u0131\u028a\u049d\u057b\u05d0\u0675\u06de\u07a2\u07d6\u080f\u0a4a\u0a91\u0da1\u0e6d\u0f09\u0f26\u10ca\u1228\u12e1\u1415\u149d\u14c3\u14df\u1525\0\0\0\0\0\0\u156b\u16cd\u198d\u1c12\u1ddd\u1f7e\u2060\u21b0\u228d\u23c0\u23fb\u2442\u2824\u2912\u2d08\u2e48\u2fce\u3016\u32ba\u3639\u37ac\u38fe\u3a28\u3a71\u3ae0\u3b2e\u0800EMabcfglmnoprstu\\bfms\x7f\x84\x8b\x90\x95\x98\xa6\xb3\xb9\xc8\xcflig\u803b\xc6\u40c6P\u803b&\u4026cute\u803b\xc1\u40c1reve;\u4102\u0100iyx}rc\u803b\xc2\u40c2;\u4410r;\uc000\ud835\udd04rave\u803b\xc0\u40c0pha;\u4391acr;\u4100d;\u6a53\u0100gp\x9d\xa1on;\u4104f;\uc000\ud835\udd38plyFunction;\u6061ing\u803b\xc5\u40c5\u0100cs\xbe\xc3r;\uc000\ud835\udc9cign;\u6254ilde\u803b\xc3\u40c3ml\u803b\xc4\u40c4\u0400aceforsu\xe5\xfb\xfe\u0117\u011c\u0122\u0127\u012a\u0100cr\xea\xf2kslash;\u6216\u0176\xf6\xf8;\u6ae7ed;\u6306y;\u4411\u0180crt\u0105\u010b\u0114ause;\u6235noullis;\u612ca;\u4392r;\uc000\ud835\udd05pf;\uc000\ud835\udd39eve;\u42d8c\xf2\u0113mpeq;\u624e\u0700HOacdefhilorsu\u014d\u0151\u0156\u0180\u019e\u01a2\u01b5\u01b7\u01ba\u01dc\u0215\u0273\u0278\u027ecy;\u4427PY\u803b\xa9\u40a9\u0180cpy\u015d\u0162\u017aute;\u4106\u0100;i\u0167\u0168\u62d2talDifferentialD;\u6145leys;\u612d\u0200aeio\u0189\u018e\u0194\u0198ron;\u410cdil\u803b\xc7\u40c7rc;\u4108nint;\u6230ot;\u410a\u0100dn\u01a7\u01adilla;\u40b8terDot;\u40b7\xf2\u017fi;\u43a7rcle\u0200DMPT\u01c7\u01cb\u01d1\u01d6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01e2\u01f8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020foubleQuote;\u601duote;\u6019\u0200lnpu\u021e\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6a74\u0180git\u022f\u0236\u023aruent;\u6261nt;\u622fourIntegral;\u622e\u0100fr\u024c\u024e;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6a2fcr;\uc000\ud835\udc9ep\u0100;C\u0284\u0285\u62d3ap;\u624d\u0580DJSZacefios\u02a0\u02ac\u02b0\u02b4\u02b8\u02cb\u02d7\u02e1\u02e6\u0333\u048d\u0100;o\u0179\u02a5trahd;\u6911cy;\u4402cy;\u4405cy;\u440f\u0180grs\u02bf\u02c4\u02c7ger;\u6021r;\u61a1hv;\u6ae4\u0100ay\u02d0\u02d5ron;\u410e;\u4414l\u0100;t\u02dd\u02de\u6207a;\u4394r;\uc000\ud835\udd07\u0100af\u02eb\u0327\u0100cm\u02f0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031ccute;\u40b4o\u0174\u030b\u030d;\u42d9bleAcute;\u42ddrave;\u4060ilde;\u42dcond;\u62c4ferentialD;\u6146\u0470\u033d\0\0\0\u0342\u0354\0\u0405f;\uc000\ud835\udd3b\u0180;DE\u0348\u0349\u034d\u40a8ot;\u60dcqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03cf\u03e2\u03f8ontourIntegra\xec\u0239o\u0274\u0379\0\0\u037b\xbb\u0349nArrow;\u61d3\u0100eo\u0387\u03a4ft\u0180ART\u0390\u0396\u03a1rrow;\u61d0ightArrow;\u61d4e\xe5\u02cang\u0100LR\u03ab\u03c4eft\u0100AR\u03b3\u03b9rrow;\u67f8ightArrow;\u67faightArrow;\u67f9ight\u0100AT\u03d8\u03derrow;\u61d2ee;\u62a8p\u0241\u03e9\0\0\u03efrrow;\u61d1ownArrow;\u61d5erticalBar;\u6225n\u0300ABLRTa\u0412\u042a\u0430\u045e\u047f\u037crrow\u0180;BU\u041d\u041e\u0422\u6193ar;\u6913pArrow;\u61f5reve;\u4311eft\u02d2\u043a\0\u0446\0\u0450ightVector;\u6950eeVector;\u695eector\u0100;B\u0459\u045a\u61bdar;\u6956ight\u01d4\u0467\0\u0471eeVector;\u695fector\u0100;B\u047a\u047b\u61c1ar;\u6957ee\u0100;A\u0486\u0487\u62a4rrow;\u61a7\u0100ct\u0492\u0497r;\uc000\ud835\udc9frok;\u4110\u0800NTacdfglmopqstux\u04bd\u04c0\u04c4\u04cb\u04de\u04e2\u04e7\u04ee\u04f5\u0521\u052f\u0536\u0552\u055d\u0560\u0565G;\u414aH\u803b\xd0\u40d0cute\u803b\xc9\u40c9\u0180aiy\u04d2\u04d7\u04dcron;\u411arc\u803b\xca\u40ca;\u442dot;\u4116r;\uc000\ud835\udd08rave\u803b\xc8\u40c8ement;\u6208\u0100ap\u04fa\u04fecr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65fberySmallSquare;\u65ab\u0100gp\u0526\u052aon;\u4118f;\uc000\ud835\udd3csilon;\u4395u\u0100ai\u053c\u0549l\u0100;T\u0542\u0543\u6a75ilde;\u6242librium;\u61cc\u0100ci\u0557\u055ar;\u6130m;\u6a73a;\u4397ml\u803b\xcb\u40cb\u0100ip\u056a\u056fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058d\u05b2\u05ccy;\u4424r;\uc000\ud835\udd09lled\u0253\u0597\0\0\u05a3mallSquare;\u65fcerySmallSquare;\u65aa\u0370\u05ba\0\u05bf\0\0\u05c4f;\uc000\ud835\udd3dAll;\u6200riertrf;\u6131c\xf2\u05cb\u0600JTabcdfgorst\u05e8\u05ec\u05ef\u05fa\u0600\u0612\u0616\u061b\u061d\u0623\u066c\u0672cy;\u4403\u803b>\u403emma\u0100;d\u05f7\u05f8\u4393;\u43dcreve;\u411e\u0180eiy\u0607\u060c\u0610dil;\u4122rc;\u411c;\u4413ot;\u4120r;\uc000\ud835\udd0a;\u62d9pf;\uc000\ud835\udd3eeater\u0300EFGLST\u0635\u0644\u064e\u0656\u065b\u0666qual\u0100;L\u063e\u063f\u6265ess;\u62dbullEqual;\u6267reater;\u6aa2ess;\u6277lantEqual;\u6a7eilde;\u6273cr;\uc000\ud835\udca2;\u626b\u0400Aacfiosu\u0685\u068b\u0696\u069b\u069e\u06aa\u06be\u06caRDcy;\u442a\u0100ct\u0690\u0694ek;\u42c7;\u405eirc;\u4124r;\u610clbertSpace;\u610b\u01f0\u06af\0\u06b2f;\u610dizontalLine;\u6500\u0100ct\u06c3\u06c5\xf2\u06a9rok;\u4126mp\u0144\u06d0\u06d8ownHum\xf0\u012fqual;\u624f\u0700EJOacdfgmnostu\u06fa\u06fe\u0703\u0707\u070e\u071a\u071e\u0721\u0728\u0744\u0778\u078b\u078f\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803b\xcd\u40cd\u0100iy\u0713\u0718rc\u803b\xce\u40ce;\u4418ot;\u4130r;\u6111rave\u803b\xcc\u40cc\u0180;ap\u0720\u072f\u073f\u0100cg\u0734\u0737r;\u412ainaryI;\u6148lie\xf3\u03dd\u01f4\u0749\0\u0762\u0100;e\u074d\u074e\u622c\u0100gr\u0753\u0758ral;\u622bsection;\u62c2isible\u0100CT\u076c\u0772omma;\u6063imes;\u6062\u0180gpt\u077f\u0783\u0788on;\u412ef;\uc000\ud835\udd40a;\u4399cr;\u6110ilde;\u4128\u01eb\u079a\0\u079ecy;\u4406l\u803b\xcf\u40cf\u0280cfosu\u07ac\u07b7\u07bc\u07c2\u07d0\u0100iy\u07b1\u07b5rc;\u4134;\u4419r;\uc000\ud835\udd0dpf;\uc000\ud835\udd41\u01e3\u07c7\0\u07ccr;\uc000\ud835\udca5rcy;\u4408kcy;\u4404\u0380HJacfos\u07e4\u07e8\u07ec\u07f1\u07fd\u0802\u0808cy;\u4425cy;\u440cppa;\u439a\u0100ey\u07f6\u07fbdil;\u4136;\u441ar;\uc000\ud835\udd0epf;\uc000\ud835\udd42cr;\uc000\ud835\udca6\u0580JTaceflmost\u0825\u0829\u082c\u0850\u0863\u09b3\u09b8\u09c7\u09cd\u0a37\u0a47cy;\u4409\u803b<\u403c\u0280cmnpr\u0837\u083c\u0841\u0844\u084dute;\u4139bda;\u439bg;\u67ealacetrf;\u6112r;\u619e\u0180aey\u0857\u085c\u0861ron;\u413ddil;\u413b;\u441b\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087e\u08a9\u08b1\u08e0\u08e6\u08fc\u092f\u095b\u0390\u096a\u0100nr\u0883\u088fgleBracket;\u67e8row\u0180;BR\u0899\u089a\u089e\u6190ar;\u61e4ightArrow;\u61c6eiling;\u6308o\u01f5\u08b7\0\u08c3bleBracket;\u67e6n\u01d4\u08c8\0\u08d2eeVector;\u6961ector\u0100;B\u08db\u08dc\u61c3ar;\u6959loor;\u630aight\u0100AV\u08ef\u08f5rrow;\u6194ector;\u694e\u0100er\u0901\u0917e\u0180;AV\u0909\u090a\u0910\u62a3rrow;\u61a4ector;\u695aiangle\u0180;BE\u0924\u0925\u0929\u62b2ar;\u69cfqual;\u62b4p\u0180DTV\u0937\u0942\u094cownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61bfar;\u6958ector\u0100;B\u0965\u0966\u61bcar;\u6952ight\xe1\u039cs\u0300EFGLST\u097e\u098b\u0995\u099d\u09a2\u09adqualGreater;\u62daullEqual;\u6266reater;\u6276ess;\u6aa1lantEqual;\u6a7dilde;\u6272r;\uc000\ud835\udd0f\u0100;e\u09bd\u09be\u62d8ftarrow;\u61daidot;\u413f\u0180npw\u09d4\u0a16\u0a1bg\u0200LRlr\u09de\u09f7\u0a02\u0a10eft\u0100AR\u09e6\u09ecrrow;\u67f5ightArrow;\u67f7ightArrow;\u67f6eft\u0100ar\u03b3\u0a0aight\xe1\u03bfight\xe1\u03caf;\uc000\ud835\udd43er\u0100LR\u0a22\u0a2ceftArrow;\u6199ightArrow;\u6198\u0180cht\u0a3e\u0a40\u0a42\xf2\u084c;\u61b0rok;\u4141;\u626a\u0400acefiosu\u0a5a\u0a5d\u0a60\u0a77\u0a7c\u0a85\u0a8b\u0a8ep;\u6905y;\u441c\u0100dl\u0a65\u0a6fiumSpace;\u605flintrf;\u6133r;\uc000\ud835\udd10nusPlus;\u6213pf;\uc000\ud835\udd44c\xf2\u0a76;\u439c\u0480Jacefostu\u0aa3\u0aa7\u0aad\u0ac0\u0b14\u0b19\u0d91\u0d97\u0d9ecy;\u440acute;\u4143\u0180aey\u0ab4\u0ab9\u0aberon;\u4147dil;\u4145;\u441d\u0180gsw\u0ac7\u0af0\u0b0eative\u0180MTV\u0ad3\u0adf\u0ae8ediumSpace;\u600bhi\u0100cn\u0ae6\u0ad8\xeb\u0ad9eryThi\xee\u0ad9ted\u0100GL\u0af8\u0b06reaterGreate\xf2\u0673essLes\xf3\u0a48Line;\u400ar;\uc000\ud835\udd11\u0200Bnpt\u0b22\u0b28\u0b37\u0b3areak;\u6060BreakingSpace;\u40a0f;\u6115\u0680;CDEGHLNPRSTV\u0b55\u0b56\u0b6a\u0b7c\u0ba1\u0beb\u0c04\u0c5e\u0c84\u0ca6\u0cd8\u0d61\u0d85\u6aec\u0100ou\u0b5b\u0b64ngruent;\u6262pCap;\u626doubleVerticalBar;\u6226\u0180lqx\u0b83\u0b8a\u0b9bement;\u6209ual\u0100;T\u0b92\u0b93\u6260ilde;\uc000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0bb6\u0bb7\u0bbd\u0bc9\u0bd3\u0bd8\u0be5\u626fqual;\u6271ullEqual;\uc000\u2267\u0338reater;\uc000\u226b\u0338ess;\u6279lantEqual;\uc000\u2a7e\u0338ilde;\u6275ump\u0144\u0bf2\u0bfdownHump;\uc000\u224e\u0338qual;\uc000\u224f\u0338e\u0100fs\u0c0a\u0c27tTriangle\u0180;BE\u0c1a\u0c1b\u0c21\u62eaar;\uc000\u29cf\u0338qual;\u62ecs\u0300;EGLST\u0c35\u0c36\u0c3c\u0c44\u0c4b\u0c58\u626equal;\u6270reater;\u6278ess;\uc000\u226a\u0338lantEqual;\uc000\u2a7d\u0338ilde;\u6274ested\u0100GL\u0c68\u0c79reaterGreater;\uc000\u2aa2\u0338essLess;\uc000\u2aa1\u0338recedes\u0180;ES\u0c92\u0c93\u0c9b\u6280qual;\uc000\u2aaf\u0338lantEqual;\u62e0\u0100ei\u0cab\u0cb9verseElement;\u620cghtTriangle\u0180;BE\u0ccb\u0ccc\u0cd2\u62ebar;\uc000\u29d0\u0338qual;\u62ed\u0100qu\u0cdd\u0d0cuareSu\u0100bp\u0ce8\u0cf9set\u0100;E\u0cf0\u0cf3\uc000\u228f\u0338qual;\u62e2erset\u0100;E\u0d03\u0d06\uc000\u2290\u0338qual;\u62e3\u0180bcp\u0d13\u0d24\u0d4eset\u0100;E\u0d1b\u0d1e\uc000\u2282\u20d2qual;\u6288ceeds\u0200;EST\u0d32\u0d33\u0d3b\u0d46\u6281qual;\uc000\u2ab0\u0338lantEqual;\u62e1ilde;\uc000\u227f\u0338erset\u0100;E\u0d58\u0d5b\uc000\u2283\u20d2qual;\u6289ilde\u0200;EFT\u0d6e\u0d6f\u0d75\u0d7f\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uc000\ud835\udca9ilde\u803b\xd1\u40d1;\u439d\u0700Eacdfgmoprstuv\u0dbd\u0dc2\u0dc9\u0dd5\u0ddb\u0de0\u0de7\u0dfc\u0e02\u0e20\u0e22\u0e32\u0e3f\u0e44lig;\u4152cute\u803b\xd3\u40d3\u0100iy\u0dce\u0dd3rc\u803b\xd4\u40d4;\u441eblac;\u4150r;\uc000\ud835\udd12rave\u803b\xd2\u40d2\u0180aei\u0dee\u0df2\u0df6cr;\u414cga;\u43a9cron;\u439fpf;\uc000\ud835\udd46enCurly\u0100DQ\u0e0e\u0e1aoubleQuote;\u601cuote;\u6018;\u6a54\u0100cl\u0e27\u0e2cr;\uc000\ud835\udcaaash\u803b\xd8\u40d8i\u016c\u0e37\u0e3cde\u803b\xd5\u40d5es;\u6a37ml\u803b\xd6\u40d6er\u0100BP\u0e4b\u0e60\u0100ar\u0e50\u0e53r;\u603eac\u0100ek\u0e5a\u0e5c;\u63deet;\u63b4arenthesis;\u63dc\u0480acfhilors\u0e7f\u0e87\u0e8a\u0e8f\u0e92\u0e94\u0e9d\u0eb0\u0efcrtialD;\u6202y;\u441fr;\uc000\ud835\udd13i;\u43a6;\u43a0usMinus;\u40b1\u0100ip\u0ea2\u0eadncareplan\xe5\u069df;\u6119\u0200;eio\u0eb9\u0eba\u0ee0\u0ee4\u6abbcedes\u0200;EST\u0ec8\u0ec9\u0ecf\u0eda\u627aqual;\u6aaflantEqual;\u627cilde;\u627eme;\u6033\u0100dp\u0ee9\u0eeeuct;\u620fortion\u0100;a\u0225\u0ef9l;\u621d\u0100ci\u0f01\u0f06r;\uc000\ud835\udcab;\u43a8\u0200Ufos\u0f11\u0f16\u0f1b\u0f1fOT\u803b\"\u4022r;\uc000\ud835\udd14pf;\u611acr;\uc000\ud835\udcac\u0600BEacefhiorsu\u0f3e\u0f43\u0f47\u0f60\u0f73\u0fa7\u0faa\u0fad\u1096\u10a9\u10b4\u10bearr;\u6910G\u803b\xae\u40ae\u0180cnr\u0f4e\u0f53\u0f56ute;\u4154g;\u67ebr\u0100;t\u0f5c\u0f5d\u61a0l;\u6916\u0180aey\u0f67\u0f6c\u0f71ron;\u4158dil;\u4156;\u4420\u0100;v\u0f78\u0f79\u611cerse\u0100EU\u0f82\u0f99\u0100lq\u0f87\u0f8eement;\u620builibrium;\u61cbpEquilibrium;\u696fr\xbb\u0f79o;\u43a1ght\u0400ACDFTUVa\u0fc1\u0feb\u0ff3\u1022\u1028\u105b\u1087\u03d8\u0100nr\u0fc6\u0fd2gleBracket;\u67e9row\u0180;BL\u0fdc\u0fdd\u0fe1\u6192ar;\u61e5eftArrow;\u61c4eiling;\u6309o\u01f5\u0ff9\0\u1005bleBracket;\u67e7n\u01d4\u100a\0\u1014eeVector;\u695dector\u0100;B\u101d\u101e\u61c2ar;\u6955loor;\u630b\u0100er\u102d\u1043e\u0180;AV\u1035\u1036\u103c\u62a2rrow;\u61a6ector;\u695biangle\u0180;BE\u1050\u1051\u1055\u62b3ar;\u69d0qual;\u62b5p\u0180DTV\u1063\u106e\u1078ownVector;\u694feeVector;\u695cector\u0100;B\u1082\u1083\u61bear;\u6954ector\u0100;B\u1091\u1092\u61c0ar;\u6953\u0100pu\u109b\u109ef;\u611dndImplies;\u6970ightarrow;\u61db\u0100ch\u10b9\u10bcr;\u611b;\u61b1leDelayed;\u69f4\u0680HOacfhimoqstu\u10e4\u10f1\u10f7\u10fd\u1119\u111e\u1151\u1156\u1161\u1167\u11b5\u11bb\u11bf\u0100Cc\u10e9\u10eeHcy;\u4429y;\u4428FTcy;\u442ccute;\u415a\u0280;aeiy\u1108\u1109\u110e\u1113\u1117\u6abcron;\u4160dil;\u415erc;\u415c;\u4421r;\uc000\ud835\udd16ort\u0200DLRU\u112a\u1134\u113e\u1149ownArrow\xbb\u041eeftArrow\xbb\u089aightArrow\xbb\u0fddpArrow;\u6191gma;\u43a3allCircle;\u6218pf;\uc000\ud835\udd4a\u0272\u116d\0\0\u1170t;\u621aare\u0200;ISU\u117b\u117c\u1189\u11af\u65a1ntersection;\u6293u\u0100bp\u118f\u119eset\u0100;E\u1197\u1198\u628fqual;\u6291erset\u0100;E\u11a8\u11a9\u6290qual;\u6292nion;\u6294cr;\uc000\ud835\udcaear;\u62c6\u0200bcmp\u11c8\u11db\u1209\u120b\u0100;s\u11cd\u11ce\u62d0et\u0100;E\u11cd\u11d5qual;\u6286\u0100ch\u11e0\u1205eeds\u0200;EST\u11ed\u11ee\u11f4\u11ff\u627bqual;\u6ab0lantEqual;\u627dilde;\u627fTh\xe1\u0f8c;\u6211\u0180;es\u1212\u1213\u1223\u62d1rset\u0100;E\u121c\u121d\u6283qual;\u6287et\xbb\u1213\u0580HRSacfhiors\u123e\u1244\u1249\u1255\u125e\u1271\u1276\u129f\u12c2\u12c8\u12d1ORN\u803b\xde\u40deADE;\u6122\u0100Hc\u124e\u1252cy;\u440by;\u4426\u0100bu\u125a\u125c;\u4009;\u43a4\u0180aey\u1265\u126a\u126fron;\u4164dil;\u4162;\u4422r;\uc000\ud835\udd17\u0100ei\u127b\u1289\u01f2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128e\u1298kSpace;\uc000\u205f\u200aSpace;\u6009lde\u0200;EFT\u12ab\u12ac\u12b2\u12bc\u623cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uc000\ud835\udd4bipleDot;\u60db\u0100ct\u12d6\u12dbr;\uc000\ud835\udcafrok;\u4166\u0ae1\u12f7\u130e\u131a\u1326\0\u132c\u1331\0\0\0\0\0\u1338\u133d\u1377\u1385\0\u13ff\u1404\u140a\u1410\u0100cr\u12fb\u1301ute\u803b\xda\u40dar\u0100;o\u1307\u1308\u619fcir;\u6949r\u01e3\u1313\0\u1316y;\u440eve;\u416c\u0100iy\u131e\u1323rc\u803b\xdb\u40db;\u4423blac;\u4170r;\uc000\ud835\udd18rave\u803b\xd9\u40d9acr;\u416a\u0100di\u1341\u1369er\u0100BP\u1348\u135d\u0100ar\u134d\u1350r;\u405fac\u0100ek\u1357\u1359;\u63dfet;\u63b5arenthesis;\u63ddon\u0100;P\u1370\u1371\u62c3lus;\u628e\u0100gp\u137b\u137fon;\u4172f;\uc000\ud835\udd4c\u0400ADETadps\u1395\u13ae\u13b8\u13c4\u03e8\u13d2\u13d7\u13f3rrow\u0180;BD\u1150\u13a0\u13a4ar;\u6912ownArrow;\u61c5ownArrow;\u6195quilibrium;\u696eee\u0100;A\u13cb\u13cc\u62a5rrow;\u61a5own\xe1\u03f3er\u0100LR\u13de\u13e8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13f9\u13fa\u43d2on;\u43a5ing;\u416ecr;\uc000\ud835\udcb0ilde;\u4168ml\u803b\xdc\u40dc\u0480Dbcdefosv\u1427\u142c\u1430\u1433\u143e\u1485\u148a\u1490\u1496ash;\u62abar;\u6aeby;\u4412ash\u0100;l\u143b\u143c\u62a9;\u6ae6\u0100er\u1443\u1445;\u62c1\u0180bty\u144c\u1450\u147aar;\u6016\u0100;i\u144f\u1455cal\u0200BLST\u1461\u1465\u146a\u1474ar;\u6223ine;\u407ceparator;\u6758ilde;\u6240ThinSpace;\u600ar;\uc000\ud835\udd19pf;\uc000\ud835\udd4dcr;\uc000\ud835\udcb1dash;\u62aa\u0280cefos\u14a7\u14ac\u14b1\u14b6\u14bcirc;\u4174dge;\u62c0r;\uc000\ud835\udd1apf;\uc000\ud835\udd4ecr;\uc000\ud835\udcb2\u0200fios\u14cb\u14d0\u14d2\u14d8r;\uc000\ud835\udd1b;\u439epf;\uc000\ud835\udd4fcr;\uc000\ud835\udcb3\u0480AIUacfosu\u14f1\u14f5\u14f9\u14fd\u1504\u150f\u1514\u151a\u1520cy;\u442fcy;\u4407cy;\u442ecute\u803b\xdd\u40dd\u0100iy\u1509\u150drc;\u4176;\u442br;\uc000\ud835\udd1cpf;\uc000\ud835\udd50cr;\uc000\ud835\udcb4ml;\u4178\u0400Hacdefos\u1535\u1539\u153f\u154b\u154f\u155d\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417d;\u4417ot;\u417b\u01f2\u1554\0\u155boWidt\xe8\u0ad9a;\u4396r;\u6128pf;\u6124cr;\uc000\ud835\udcb5\u0be1\u1583\u158a\u1590\0\u15b0\u15b6\u15bf\0\0\0\0\u15c6\u15db\u15eb\u165f\u166d\0\u1695\u169b\u16b2\u16b9\0\u16becute\u803b\xe1\u40e1reve;\u4103\u0300;Ediuy\u159c\u159d\u15a1\u15a3\u15a8\u15ad\u623e;\uc000\u223e\u0333;\u623frc\u803b\xe2\u40e2te\u80bb\xb4\u0306;\u4430lig\u803b\xe6\u40e6\u0100;r\xb2\u15ba;\uc000\ud835\udd1erave\u803b\xe0\u40e0\u0100ep\u15ca\u15d6\u0100fp\u15cf\u15d4sym;\u6135\xe8\u15d3ha;\u43b1\u0100ap\u15dfc\u0100cl\u15e4\u15e7r;\u4101g;\u6a3f\u0264\u15f0\0\0\u160a\u0280;adsv\u15fa\u15fb\u15ff\u1601\u1607\u6227nd;\u6a55;\u6a5clope;\u6a58;\u6a5a\u0380;elmrsz\u1618\u1619\u161b\u161e\u163f\u164f\u1659\u6220;\u69a4e\xbb\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163a\u163c\u163e;\u69a8;\u69a9;\u69aa;\u69ab;\u69ac;\u69ad;\u69ae;\u69aft\u0100;v\u1645\u1646\u621fb\u0100;d\u164c\u164d\u62be;\u699d\u0100pt\u1654\u1657h;\u6222\xbb\xb9arr;\u637c\u0100gp\u1663\u1667on;\u4105f;\uc000\ud835\udd52\u0380;Eaeiop\u12c1\u167b\u167d\u1682\u1684\u1687\u168a;\u6a70cir;\u6a6f;\u624ad;\u624bs;\u4027rox\u0100;e\u12c1\u1692\xf1\u1683ing\u803b\xe5\u40e5\u0180cty\u16a1\u16a6\u16a8r;\uc000\ud835\udcb6;\u402amp\u0100;e\u12c1\u16af\xf1\u0288ilde\u803b\xe3\u40e3ml\u803b\xe4\u40e4\u0100ci\u16c2\u16c8onin\xf4\u0272nt;\u6a11\u0800Nabcdefiklnoprsu\u16ed\u16f1\u1730\u173c\u1743\u1748\u1778\u177d\u17e0\u17e6\u1839\u1850\u170d\u193d\u1948\u1970ot;\u6aed\u0100cr\u16f6\u171ek\u0200ceps\u1700\u1705\u170d\u1713ong;\u624cpsilon;\u43f6rime;\u6035im\u0100;e\u171a\u171b\u623dq;\u62cd\u0176\u1722\u1726ee;\u62bded\u0100;g\u172c\u172d\u6305e\xbb\u172drk\u0100;t\u135c\u1737brk;\u63b6\u0100oy\u1701\u1741;\u4431quo;\u601e\u0280cmprt\u1753\u175b\u1761\u1764\u1768aus\u0100;e\u010a\u0109ptyv;\u69b0s\xe9\u170cno\xf5\u0113\u0180ahw\u176f\u1771\u1773;\u43b2;\u6136een;\u626cr;\uc000\ud835\udd1fg\u0380costuvw\u178d\u179d\u17b3\u17c1\u17d5\u17db\u17de\u0180aiu\u1794\u1796\u179a\xf0\u0760rc;\u65efp\xbb\u1371\u0180dpt\u17a4\u17a8\u17adot;\u6a00lus;\u6a01imes;\u6a02\u0271\u17b9\0\0\u17becup;\u6a06ar;\u6605riangle\u0100du\u17cd\u17d2own;\u65bdp;\u65b3plus;\u6a04e\xe5\u1444\xe5\u14adarow;\u690d\u0180ako\u17ed\u1826\u1835\u0100cn\u17f2\u1823k\u0180lst\u17fa\u05ab\u1802ozenge;\u69ebriangle\u0200;dlr\u1812\u1813\u1818\u181d\u65b4own;\u65beeft;\u65c2ight;\u65b8k;\u6423\u01b1\u182b\0\u1833\u01b2\u182f\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183e\u184d\u0100;q\u1843\u1846\uc000=\u20e5uiv;\uc000\u2261\u20e5t;\u6310\u0200ptwx\u1859\u185e\u1867\u186cf;\uc000\ud835\udd53\u0100;t\u13cb\u1863om\xbb\u13cctie;\u62c8\u0600DHUVbdhmptuv\u1885\u1896\u18aa\u18bb\u18d7\u18db\u18ec\u18ff\u1905\u190a\u1910\u1921\u0200LRlr\u188e\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18a1\u18a2\u18a4\u18a6\u18a8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18b3\u18b5\u18b7\u18b9;\u655d;\u655a;\u655c;\u6559\u0380;HLRhlr\u18ca\u18cb\u18cd\u18cf\u18d1\u18d3\u18d5\u6551;\u656c;\u6563;\u6560;\u656b;\u6562;\u655fox;\u69c9\u0200LRlr\u18e4\u18e6\u18e8\u18ea;\u6555;\u6552;\u6510;\u650c\u0280;DUdu\u06bd\u18f7\u18f9\u18fb\u18fd;\u6565;\u6568;\u652c;\u6534inus;\u629flus;\u629eimes;\u62a0\u0200LRlr\u1919\u191b\u191d\u191f;\u655b;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193b\u6502;\u656a;\u6561;\u655e;\u653c;\u6524;\u651c\u0100ev\u0123\u1942bar\u803b\xa6\u40a6\u0200ceio\u1951\u1956\u195a\u1960r;\uc000\ud835\udcb7mi;\u604fm\u0100;e\u171a\u171cl\u0180;bh\u1968\u1969\u196b\u405c;\u69c5sub;\u67c8\u016c\u1974\u197el\u0100;e\u1979\u197a\u6022t\xbb\u197ap\u0180;Ee\u012f\u1985\u1987;\u6aae\u0100;q\u06dc\u06db\u0ce1\u19a7\0\u19e8\u1a11\u1a15\u1a32\0\u1a37\u1a50\0\0\u1ab4\0\0\u1ac1\0\0\u1b21\u1b2e\u1b4d\u1b52\0\u1bfd\0\u1c0c\u0180cpr\u19ad\u19b2\u19ddute;\u4107\u0300;abcds\u19bf\u19c0\u19c4\u19ca\u19d5\u19d9\u6229nd;\u6a44rcup;\u6a49\u0100au\u19cf\u19d2p;\u6a4bp;\u6a47ot;\u6a40;\uc000\u2229\ufe00\u0100eo\u19e2\u19e5t;\u6041\xee\u0693\u0200aeiu\u19f0\u19fb\u1a01\u1a05\u01f0\u19f5\0\u19f8s;\u6a4don;\u410ddil\u803b\xe7\u40e7rc;\u4109ps\u0100;s\u1a0c\u1a0d\u6a4cm;\u6a50ot;\u410b\u0180dmn\u1a1b\u1a20\u1a26il\u80bb\xb8\u01adptyv;\u69b2t\u8100\xa2;e\u1a2d\u1a2e\u40a2r\xe4\u01b2r;\uc000\ud835\udd20\u0180cei\u1a3d\u1a40\u1a4dy;\u4447ck\u0100;m\u1a47\u1a48\u6713ark\xbb\u1a48;\u43c7r\u0380;Ecefms\u1a5f\u1a60\u1a62\u1a6b\u1aa4\u1aaa\u1aae\u65cb;\u69c3\u0180;el\u1a69\u1a6a\u1a6d\u42c6q;\u6257e\u0261\u1a74\0\0\u1a88rrow\u0100lr\u1a7c\u1a81eft;\u61baight;\u61bb\u0280RSacd\u1a92\u1a94\u1a96\u1a9a\u1a9f\xbb\u0f47;\u64c8st;\u629birc;\u629aash;\u629dnint;\u6a10id;\u6aefcir;\u69c2ubs\u0100;u\u1abb\u1abc\u6663it\xbb\u1abc\u02ec\u1ac7\u1ad4\u1afa\0\u1b0aon\u0100;e\u1acd\u1ace\u403a\u0100;q\xc7\xc6\u026d\u1ad9\0\0\u1ae2a\u0100;t\u1ade\u1adf\u402c;\u4040\u0180;fl\u1ae8\u1ae9\u1aeb\u6201\xee\u1160e\u0100mx\u1af1\u1af6ent\xbb\u1ae9e\xf3\u024d\u01e7\u1afe\0\u1b07\u0100;d\u12bb\u1b02ot;\u6a6dn\xf4\u0246\u0180fry\u1b10\u1b14\u1b17;\uc000\ud835\udd54o\xe4\u0254\u8100\xa9;s\u0155\u1b1dr;\u6117\u0100ao\u1b25\u1b29rr;\u61b5ss;\u6717\u0100cu\u1b32\u1b37r;\uc000\ud835\udcb8\u0100bp\u1b3c\u1b44\u0100;e\u1b41\u1b42\u6acf;\u6ad1\u0100;e\u1b49\u1b4a\u6ad0;\u6ad2dot;\u62ef\u0380delprvw\u1b60\u1b6c\u1b77\u1b82\u1bac\u1bd4\u1bf9arr\u0100lr\u1b68\u1b6a;\u6938;\u6935\u0270\u1b72\0\0\u1b75r;\u62dec;\u62dfarr\u0100;p\u1b7f\u1b80\u61b6;\u693d\u0300;bcdos\u1b8f\u1b90\u1b96\u1ba1\u1ba5\u1ba8\u622arcap;\u6a48\u0100au\u1b9b\u1b9ep;\u6a46p;\u6a4aot;\u628dr;\u6a45;\uc000\u222a\ufe00\u0200alrv\u1bb5\u1bbf\u1bde\u1be3rr\u0100;m\u1bbc\u1bbd\u61b7;\u693cy\u0180evw\u1bc7\u1bd4\u1bd8q\u0270\u1bce\0\0\u1bd2re\xe3\u1b73u\xe3\u1b75ee;\u62ceedge;\u62cfen\u803b\xa4\u40a4earrow\u0100lr\u1bee\u1bf3eft\xbb\u1b80ight\xbb\u1bbde\xe4\u1bdd\u0100ci\u1c01\u1c07onin\xf4\u01f7nt;\u6231lcty;\u632d\u0980AHabcdefhijlorstuwz\u1c38\u1c3b\u1c3f\u1c5d\u1c69\u1c75\u1c8a\u1c9e\u1cac\u1cb7\u1cfb\u1cff\u1d0d\u1d7b\u1d91\u1dab\u1dbb\u1dc6\u1dcdr\xf2\u0381ar;\u6965\u0200glrs\u1c48\u1c4d\u1c52\u1c54ger;\u6020eth;\u6138\xf2\u1133h\u0100;v\u1c5a\u1c5b\u6010\xbb\u090a\u016b\u1c61\u1c67arow;\u690fa\xe3\u0315\u0100ay\u1c6e\u1c73ron;\u410f;\u4434\u0180;ao\u0332\u1c7c\u1c84\u0100gr\u02bf\u1c81r;\u61catseq;\u6a77\u0180glm\u1c91\u1c94\u1c98\u803b\xb0\u40b0ta;\u43b4ptyv;\u69b1\u0100ir\u1ca3\u1ca8sht;\u697f;\uc000\ud835\udd21ar\u0100lr\u1cb3\u1cb5\xbb\u08dc\xbb\u101e\u0280aegsv\u1cc2\u0378\u1cd6\u1cdc\u1ce0m\u0180;os\u0326\u1cca\u1cd4nd\u0100;s\u0326\u1cd1uit;\u6666amma;\u43ddin;\u62f2\u0180;io\u1ce7\u1ce8\u1cf8\u40f7de\u8100\xf7;o\u1ce7\u1cf0ntimes;\u62c7n\xf8\u1cf7cy;\u4452c\u026f\u1d06\0\0\u1d0arn;\u631eop;\u630d\u0280lptuw\u1d18\u1d1d\u1d22\u1d49\u1d55lar;\u4024f;\uc000\ud835\udd55\u0280;emps\u030b\u1d2d\u1d37\u1d3d\u1d42q\u0100;d\u0352\u1d33ot;\u6251inus;\u6238lus;\u6214quare;\u62a1blebarwedg\xe5\xfan\u0180adh\u112e\u1d5d\u1d67ownarrow\xf3\u1c83arpoon\u0100lr\u1d72\u1d76ef\xf4\u1cb4igh\xf4\u1cb6\u0162\u1d7f\u1d85karo\xf7\u0f42\u026f\u1d8a\0\0\u1d8ern;\u631fop;\u630c\u0180cot\u1d98\u1da3\u1da6\u0100ry\u1d9d\u1da1;\uc000\ud835\udcb9;\u4455l;\u69f6rok;\u4111\u0100dr\u1db0\u1db4ot;\u62f1i\u0100;f\u1dba\u1816\u65bf\u0100ah\u1dc0\u1dc3r\xf2\u0429a\xf2\u0fa6angle;\u69a6\u0100ci\u1dd2\u1dd5y;\u445fgrarr;\u67ff\u0900Dacdefglmnopqrstux\u1e01\u1e09\u1e19\u1e38\u0578\u1e3c\u1e49\u1e61\u1e7e\u1ea5\u1eaf\u1ebd\u1ee1\u1f2a\u1f37\u1f44\u1f4e\u1f5a\u0100Do\u1e06\u1d34o\xf4\u1c89\u0100cs\u1e0e\u1e14ute\u803b\xe9\u40e9ter;\u6a6e\u0200aioy\u1e22\u1e27\u1e31\u1e36ron;\u411br\u0100;c\u1e2d\u1e2e\u6256\u803b\xea\u40ealon;\u6255;\u444dot;\u4117\u0100Dr\u1e41\u1e45ot;\u6252;\uc000\ud835\udd22\u0180;rs\u1e50\u1e51\u1e57\u6a9aave\u803b\xe8\u40e8\u0100;d\u1e5c\u1e5d\u6a96ot;\u6a98\u0200;ils\u1e6a\u1e6b\u1e72\u1e74\u6a99nters;\u63e7;\u6113\u0100;d\u1e79\u1e7a\u6a95ot;\u6a97\u0180aps\u1e85\u1e89\u1e97cr;\u4113ty\u0180;sv\u1e92\u1e93\u1e95\u6205et\xbb\u1e93p\u01001;\u1e9d\u1ea4\u0133\u1ea1\u1ea3;\u6004;\u6005\u6003\u0100gs\u1eaa\u1eac;\u414bp;\u6002\u0100gp\u1eb4\u1eb8on;\u4119f;\uc000\ud835\udd56\u0180als\u1ec4\u1ece\u1ed2r\u0100;s\u1eca\u1ecb\u62d5l;\u69e3us;\u6a71i\u0180;lv\u1eda\u1edb\u1edf\u43b5on\xbb\u1edb;\u43f5\u0200csuv\u1eea\u1ef3\u1f0b\u1f23\u0100io\u1eef\u1e31rc\xbb\u1e2e\u0269\u1ef9\0\0\u1efb\xed\u0548ant\u0100gl\u1f02\u1f06tr\xbb\u1e5dess\xbb\u1e7a\u0180aei\u1f12\u1f16\u1f1als;\u403dst;\u625fv\u0100;D\u0235\u1f20D;\u6a78parsl;\u69e5\u0100Da\u1f2f\u1f33ot;\u6253rr;\u6971\u0180cdi\u1f3e\u1f41\u1ef8r;\u612fo\xf4\u0352\u0100ah\u1f49\u1f4b;\u43b7\u803b\xf0\u40f0\u0100mr\u1f53\u1f57l\u803b\xeb\u40ebo;\u60ac\u0180cip\u1f61\u1f64\u1f67l;\u4021s\xf4\u056e\u0100eo\u1f6c\u1f74ctatio\xee\u0559nential\xe5\u0579\u09e1\u1f92\0\u1f9e\0\u1fa1\u1fa7\0\0\u1fc6\u1fcc\0\u1fd3\0\u1fe6\u1fea\u2000\0\u2008\u205allingdotse\xf1\u1e44y;\u4444male;\u6640\u0180ilr\u1fad\u1fb3\u1fc1lig;\u8000\ufb03\u0269\u1fb9\0\0\u1fbdg;\u8000\ufb00ig;\u8000\ufb04;\uc000\ud835\udd23lig;\u8000\ufb01lig;\uc000fj\u0180alt\u1fd9\u1fdc\u1fe1t;\u666dig;\u8000\ufb02ns;\u65b1of;\u4192\u01f0\u1fee\0\u1ff3f;\uc000\ud835\udd57\u0100ak\u05bf\u1ff7\u0100;v\u1ffc\u1ffd\u62d4;\u6ad9artint;\u6a0d\u0100ao\u200c\u2055\u0100cs\u2011\u2052\u03b1\u201a\u2030\u2038\u2045\u2048\0\u2050\u03b2\u2022\u2025\u2027\u202a\u202c\0\u202e\u803b\xbd\u40bd;\u6153\u803b\xbc\u40bc;\u6155;\u6159;\u615b\u01b3\u2034\0\u2036;\u6154;\u6156\u02b4\u203e\u2041\0\0\u2043\u803b\xbe\u40be;\u6157;\u615c5;\u6158\u01b6\u204c\0\u204e;\u615a;\u615d8;\u615el;\u6044wn;\u6322cr;\uc000\ud835\udcbb\u0880Eabcdefgijlnorstv\u2082\u2089\u209f\u20a5\u20b0\u20b4\u20f0\u20f5\u20fa\u20ff\u2103\u2112\u2138\u0317\u213e\u2152\u219e\u0100;l\u064d\u2087;\u6a8c\u0180cmp\u2090\u2095\u209dute;\u41f5ma\u0100;d\u209c\u1cda\u43b3;\u6a86reve;\u411f\u0100iy\u20aa\u20aerc;\u411d;\u4433ot;\u4121\u0200;lqs\u063e\u0642\u20bd\u20c9\u0180;qs\u063e\u064c\u20c4lan\xf4\u0665\u0200;cdl\u0665\u20d2\u20d5\u20e5c;\u6aa9ot\u0100;o\u20dc\u20dd\u6a80\u0100;l\u20e2\u20e3\u6a82;\u6a84\u0100;e\u20ea\u20ed\uc000\u22db\ufe00s;\u6a94r;\uc000\ud835\udd24\u0100;g\u0673\u061bmel;\u6137cy;\u4453\u0200;Eaj\u065a\u210c\u210e\u2110;\u6a92;\u6aa5;\u6aa4\u0200Eaes\u211b\u211d\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6a8arox\xbb\u2124\u0100;q\u212e\u212f\u6a88\u0100;q\u212e\u211bim;\u62e7pf;\uc000\ud835\udd58\u0100ci\u2143\u2146r;\u610am\u0180;el\u066b\u214e\u2150;\u6a8e;\u6a90\u8300>;cdlqr\u05ee\u2160\u216a\u216e\u2173\u2179\u0100ci\u2165\u2167;\u6aa7r;\u6a7aot;\u62d7Par;\u6995uest;\u6a7c\u0280adels\u2184\u216a\u2190\u0656\u219b\u01f0\u2189\0\u218epro\xf8\u209er;\u6978q\u0100lq\u063f\u2196les\xf3\u2088i\xed\u066b\u0100en\u21a3\u21adrtneqq;\uc000\u2269\ufe00\xc5\u21aa\u0500Aabcefkosy\u21c4\u21c7\u21f1\u21f5\u21fa\u2218\u221d\u222f\u2268\u227dr\xf2\u03a0\u0200ilmr\u21d0\u21d4\u21d7\u21dbrs\xf0\u1484f\xbb\u2024il\xf4\u06a9\u0100dr\u21e0\u21e4cy;\u444a\u0180;cw\u08f4\u21eb\u21efir;\u6948;\u61adar;\u610firc;\u4125\u0180alr\u2201\u220e\u2213rts\u0100;u\u2209\u220a\u6665it\xbb\u220alip;\u6026con;\u62b9r;\uc000\ud835\udd25s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223a\u223e\u2243\u225e\u2263rr;\u61fftht;\u623bk\u0100lr\u2249\u2253eftarrow;\u61a9ightarrow;\u61aaf;\uc000\ud835\udd59bar;\u6015\u0180clt\u226f\u2274\u2278r;\uc000\ud835\udcbdas\xe8\u21f4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xbb\u1c5b\u0ae1\u22a3\0\u22aa\0\u22b8\u22c5\u22ce\0\u22d5\u22f3\0\0\u22f8\u2322\u2367\u2362\u237f\0\u2386\u23aa\u23b4cute\u803b\xed\u40ed\u0180;iy\u0771\u22b0\u22b5rc\u803b\xee\u40ee;\u4438\u0100cx\u22bc\u22bfy;\u4435cl\u803b\xa1\u40a1\u0100fr\u039f\u22c9;\uc000\ud835\udd26rave\u803b\xec\u40ec\u0200;ino\u073e\u22dd\u22e9\u22ee\u0100in\u22e2\u22e6nt;\u6a0ct;\u622dfin;\u69dcta;\u6129lig;\u4133\u0180aop\u22fe\u231a\u231d\u0180cgt\u2305\u2308\u2317r;\u412b\u0180elp\u071f\u230f\u2313in\xe5\u078ear\xf4\u0720h;\u4131f;\u62b7ed;\u41b5\u0280;cfot\u04f4\u232c\u2331\u233d\u2341are;\u6105in\u0100;t\u2338\u2339\u621eie;\u69dddo\xf4\u2319\u0280;celp\u0757\u234c\u2350\u235b\u2361al;\u62ba\u0100gr\u2355\u2359er\xf3\u1563\xe3\u234darhk;\u6a17rod;\u6a3c\u0200cgpt\u236f\u2372\u2376\u237by;\u4451on;\u412ff;\uc000\ud835\udd5aa;\u43b9uest\u803b\xbf\u40bf\u0100ci\u238a\u238fr;\uc000\ud835\udcben\u0280;Edsv\u04f4\u239b\u239d\u23a1\u04f3;\u62f9ot;\u62f5\u0100;v\u23a6\u23a7\u62f4;\u62f3\u0100;i\u0777\u23aelde;\u4129\u01eb\u23b8\0\u23bccy;\u4456l\u803b\xef\u40ef\u0300cfmosu\u23cc\u23d7\u23dc\u23e1\u23e7\u23f5\u0100iy\u23d1\u23d5rc;\u4135;\u4439r;\uc000\ud835\udd27ath;\u4237pf;\uc000\ud835\udd5b\u01e3\u23ec\0\u23f1r;\uc000\ud835\udcbfrcy;\u4458kcy;\u4454\u0400acfghjos\u240b\u2416\u2422\u2427\u242d\u2431\u2435\u243bppa\u0100;v\u2413\u2414\u43ba;\u43f0\u0100ey\u241b\u2420dil;\u4137;\u443ar;\uc000\ud835\udd28reen;\u4138cy;\u4445cy;\u445cpf;\uc000\ud835\udd5ccr;\uc000\ud835\udcc0\u0b80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248d\u2491\u250e\u253d\u255a\u2580\u264e\u265e\u2665\u2679\u267d\u269a\u26b2\u26d8\u275d\u2768\u278b\u27c0\u2801\u2812\u0180art\u2477\u247a\u247cr\xf2\u09c6\xf2\u0395ail;\u691barr;\u690e\u0100;g\u0994\u248b;\u6a8bar;\u6962\u0963\u24a5\0\u24aa\0\u24b1\0\0\0\0\0\u24b5\u24ba\0\u24c6\u24c8\u24cd\0\u24f9ute;\u413amptyv;\u69b4ra\xee\u084cbda;\u43bbg\u0180;dl\u088e\u24c1\u24c3;\u6991\xe5\u088e;\u6a85uo\u803b\xab\u40abr\u0400;bfhlpst\u0899\u24de\u24e6\u24e9\u24eb\u24ee\u24f1\u24f5\u0100;f\u089d\u24e3s;\u691fs;\u691d\xeb\u2252p;\u61abl;\u6939im;\u6973l;\u61a2\u0180;ae\u24ff\u2500\u2504\u6aabil;\u6919\u0100;s\u2509\u250a\u6aad;\uc000\u2aad\ufe00\u0180abr\u2515\u2519\u251drr;\u690crk;\u6772\u0100ak\u2522\u252cc\u0100ek\u2528\u252a;\u407b;\u405b\u0100es\u2531\u2533;\u698bl\u0100du\u2539\u253b;\u698f;\u698d\u0200aeuy\u2546\u254b\u2556\u2558ron;\u413e\u0100di\u2550\u2554il;\u413c\xec\u08b0\xe2\u2529;\u443b\u0200cqrs\u2563\u2566\u256d\u257da;\u6936uo\u0100;r\u0e19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694bh;\u61b2\u0280;fgqs\u258b\u258c\u0989\u25f3\u25ff\u6264t\u0280ahlrt\u2598\u25a4\u25b7\u25c2\u25e8rrow\u0100;t\u0899\u25a1a\xe9\u24f6arpoon\u0100du\u25af\u25b4own\xbb\u045ap\xbb\u0966eftarrows;\u61c7ight\u0180ahs\u25cd\u25d6\u25derrow\u0100;s\u08f4\u08a7arpoon\xf3\u0f98quigarro\xf7\u21f0hreetimes;\u62cb\u0180;qs\u258b\u0993\u25falan\xf4\u09ac\u0280;cdgs\u09ac\u260a\u260d\u261d\u2628c;\u6aa8ot\u0100;o\u2614\u2615\u6a7f\u0100;r\u261a\u261b\u6a81;\u6a83\u0100;e\u2622\u2625\uc000\u22da\ufe00s;\u6a93\u0280adegs\u2633\u2639\u263d\u2649\u264bppro\xf8\u24c6ot;\u62d6q\u0100gq\u2643\u2645\xf4\u0989gt\xf2\u248c\xf4\u099bi\xed\u09b2\u0180ilr\u2655\u08e1\u265asht;\u697c;\uc000\ud835\udd29\u0100;E\u099c\u2663;\u6a91\u0161\u2669\u2676r\u0100du\u25b2\u266e\u0100;l\u0965\u2673;\u696alk;\u6584cy;\u4459\u0280;acht\u0a48\u2688\u268b\u2691\u2696r\xf2\u25c1orne\xf2\u1d08ard;\u696bri;\u65fa\u0100io\u269f\u26a4dot;\u4140ust\u0100;a\u26ac\u26ad\u63b0che\xbb\u26ad\u0200Eaes\u26bb\u26bd\u26c9\u26d4;\u6268p\u0100;p\u26c3\u26c4\u6a89rox\xbb\u26c4\u0100;q\u26ce\u26cf\u6a87\u0100;q\u26ce\u26bbim;\u62e6\u0400abnoptwz\u26e9\u26f4\u26f7\u271a\u272f\u2741\u2747\u2750\u0100nr\u26ee\u26f1g;\u67ecr;\u61fdr\xeb\u08c1g\u0180lmr\u26ff\u270d\u2714eft\u0100ar\u09e6\u2707ight\xe1\u09f2apsto;\u67fcight\xe1\u09fdparrow\u0100lr\u2725\u2729ef\xf4\u24edight;\u61ac\u0180afl\u2736\u2739\u273dr;\u6985;\uc000\ud835\udd5dus;\u6a2dimes;\u6a34\u0161\u274b\u274fst;\u6217\xe1\u134e\u0180;ef\u2757\u2758\u1800\u65cange\xbb\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277c\u2785\u2787r\xf2\u08a8orne\xf2\u1d8car\u0100;d\u0f98\u2783;\u696d;\u600eri;\u62bf\u0300achiqt\u2798\u279d\u0a40\u27a2\u27ae\u27bbquo;\u6039r;\uc000\ud835\udcc1m\u0180;eg\u09b2\u27aa\u27ac;\u6a8d;\u6a8f\u0100bu\u252a\u27b3o\u0100;r\u0e1f\u27b9;\u601arok;\u4142\u8400<;cdhilqr\u082b\u27d2\u2639\u27dc\u27e0\u27e5\u27ea\u27f0\u0100ci\u27d7\u27d9;\u6aa6r;\u6a79re\xe5\u25f2mes;\u62c9arr;\u6976uest;\u6a7b\u0100Pi\u27f5\u27f9ar;\u6996\u0180;ef\u2800\u092d\u181b\u65c3r\u0100du\u2807\u280dshar;\u694ahar;\u6966\u0100en\u2817\u2821rtneqq;\uc000\u2268\ufe00\xc5\u281e\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288e\u2893\u28a0\u28a5\u28a8\u28da\u28e2\u28e4\u0a83\u28f3\u2902Dot;\u623a\u0200clpr\u284e\u2852\u2863\u287dr\u803b\xaf\u40af\u0100et\u2857\u2859;\u6642\u0100;e\u285e\u285f\u6720se\xbb\u285f\u0100;s\u103b\u2868to\u0200;dlu\u103b\u2873\u2877\u287bow\xee\u048cef\xf4\u090f\xf0\u13d1ker;\u65ae\u0100oy\u2887\u288cmma;\u6a29;\u443cash;\u6014asuredangle\xbb\u1626r;\uc000\ud835\udd2ao;\u6127\u0180cdn\u28af\u28b4\u28c9ro\u803b\xb5\u40b5\u0200;acd\u1464\u28bd\u28c0\u28c4s\xf4\u16a7ir;\u6af0ot\u80bb\xb7\u01b5us\u0180;bd\u28d2\u1903\u28d3\u6212\u0100;u\u1d3c\u28d8;\u6a2a\u0163\u28de\u28e1p;\u6adb\xf2\u2212\xf0\u0a81\u0100dp\u28e9\u28eeels;\u62a7f;\uc000\ud835\udd5e\u0100ct\u28f8\u28fdr;\uc000\ud835\udcc2pos\xbb\u159d\u0180;lm\u2909\u290a\u290d\u43bctimap;\u62b8\u0c00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297e\u2989\u2998\u29da\u29e9\u2a15\u2a1a\u2a58\u2a5d\u2a83\u2a95\u2aa4\u2aa8\u2b04\u2b07\u2b44\u2b7f\u2bae\u2c34\u2c67\u2c7c\u2ce9\u0100gt\u2947\u294b;\uc000\u22d9\u0338\u0100;v\u2950\u0bcf\uc000\u226b\u20d2\u0180elt\u295a\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61cdightarrow;\u61ce;\uc000\u22d8\u0338\u0100;v\u297b\u0c47\uc000\u226a\u20d2ightarrow;\u61cf\u0100Dd\u298e\u2993ash;\u62afash;\u62ae\u0280bcnpt\u29a3\u29a7\u29ac\u29b1\u29ccla\xbb\u02deute;\u4144g;\uc000\u2220\u20d2\u0280;Eiop\u0d84\u29bc\u29c0\u29c5\u29c8;\uc000\u2a70\u0338d;\uc000\u224b\u0338s;\u4149ro\xf8\u0d84ur\u0100;a\u29d3\u29d4\u666el\u0100;s\u29d3\u0b38\u01f3\u29df\0\u29e3p\u80bb\xa0\u0b37mp\u0100;e\u0bf9\u0c00\u0280aeouy\u29f4\u29fe\u2a03\u2a10\u2a13\u01f0\u29f9\0\u29fb;\u6a43on;\u4148dil;\u4146ng\u0100;d\u0d7e\u2a0aot;\uc000\u2a6d\u0338p;\u6a42;\u443dash;\u6013\u0380;Aadqsx\u0b92\u2a29\u2a2d\u2a3b\u2a41\u2a45\u2a50rr;\u61d7r\u0100hr\u2a33\u2a36k;\u6924\u0100;o\u13f2\u13f0ot;\uc000\u2250\u0338ui\xf6\u0b63\u0100ei\u2a4a\u2a4ear;\u6928\xed\u0b98ist\u0100;s\u0ba0\u0b9fr;\uc000\ud835\udd2b\u0200Eest\u0bc5\u2a66\u2a79\u2a7c\u0180;qs\u0bbc\u2a6d\u0be1\u0180;qs\u0bbc\u0bc5\u2a74lan\xf4\u0be2i\xed\u0bea\u0100;r\u0bb6\u2a81\xbb\u0bb7\u0180Aap\u2a8a\u2a8d\u2a91r\xf2\u2971rr;\u61aear;\u6af2\u0180;sv\u0f8d\u2a9c\u0f8c\u0100;d\u2aa1\u2aa2\u62fc;\u62facy;\u445a\u0380AEadest\u2ab7\u2aba\u2abe\u2ac2\u2ac5\u2af6\u2af9r\xf2\u2966;\uc000\u2266\u0338rr;\u619ar;\u6025\u0200;fqs\u0c3b\u2ace\u2ae3\u2aeft\u0100ar\u2ad4\u2ad9rro\xf7\u2ac1ightarro\xf7\u2a90\u0180;qs\u0c3b\u2aba\u2aealan\xf4\u0c55\u0100;s\u0c55\u2af4\xbb\u0c36i\xed\u0c5d\u0100;r\u0c35\u2afei\u0100;e\u0c1a\u0c25i\xe4\u0d90\u0100pt\u2b0c\u2b11f;\uc000\ud835\udd5f\u8180\xac;in\u2b19\u2b1a\u2b36\u40acn\u0200;Edv\u0b89\u2b24\u2b28\u2b2e;\uc000\u22f9\u0338ot;\uc000\u22f5\u0338\u01e1\u0b89\u2b33\u2b35;\u62f7;\u62f6i\u0100;v\u0cb8\u2b3c\u01e1\u0cb8\u2b41\u2b43;\u62fe;\u62fd\u0180aor\u2b4b\u2b63\u2b69r\u0200;ast\u0b7b\u2b55\u2b5a\u2b5flle\xec\u0b7bl;\uc000\u2afd\u20e5;\uc000\u2202\u0338lint;\u6a14\u0180;ce\u0c92\u2b70\u2b73u\xe5\u0ca5\u0100;c\u0c98\u2b78\u0100;e\u0c92\u2b7d\xf1\u0c98\u0200Aait\u2b88\u2b8b\u2b9d\u2ba7r\xf2\u2988rr\u0180;cw\u2b94\u2b95\u2b99\u619b;\uc000\u2933\u0338;\uc000\u219d\u0338ghtarrow\xbb\u2b95ri\u0100;e\u0ccb\u0cd6\u0380chimpqu\u2bbd\u2bcd\u2bd9\u2b04\u0b78\u2be4\u2bef\u0200;cer\u0d32\u2bc6\u0d37\u2bc9u\xe5\u0d45;\uc000\ud835\udcc3ort\u026d\u2b05\0\0\u2bd6ar\xe1\u2b56m\u0100;e\u0d6e\u2bdf\u0100;q\u0d74\u0d73su\u0100bp\u2beb\u2bed\xe5\u0cf8\xe5\u0d0b\u0180bcp\u2bf6\u2c11\u2c19\u0200;Ees\u2bff\u2c00\u0d22\u2c04\u6284;\uc000\u2ac5\u0338et\u0100;e\u0d1b\u2c0bq\u0100;q\u0d23\u2c00c\u0100;e\u0d32\u2c17\xf1\u0d38\u0200;Ees\u2c22\u2c23\u0d5f\u2c27\u6285;\uc000\u2ac6\u0338et\u0100;e\u0d58\u2c2eq\u0100;q\u0d60\u2c23\u0200gilr\u2c3d\u2c3f\u2c45\u2c47\xec\u0bd7lde\u803b\xf1\u40f1\xe7\u0c43iangle\u0100lr\u2c52\u2c5ceft\u0100;e\u0c1a\u2c5a\xf1\u0c26ight\u0100;e\u0ccb\u2c65\xf1\u0cd7\u0100;m\u2c6c\u2c6d\u43bd\u0180;es\u2c74\u2c75\u2c79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2c8f\u2c94\u2c99\u2c9e\u2ca3\u2cb0\u2cb6\u2cd3\u2ce3ash;\u62adarr;\u6904p;\uc000\u224d\u20d2ash;\u62ac\u0100et\u2ca8\u2cac;\uc000\u2265\u20d2;\uc000>\u20d2nfin;\u69de\u0180Aet\u2cbd\u2cc1\u2cc5rr;\u6902;\uc000\u2264\u20d2\u0100;r\u2cca\u2ccd\uc000<\u20d2ie;\uc000\u22b4\u20d2\u0100At\u2cd8\u2cdcrr;\u6903rie;\uc000\u22b5\u20d2im;\uc000\u223c\u20d2\u0180Aan\u2cf0\u2cf4\u2d02rr;\u61d6r\u0100hr\u2cfa\u2cfdk;\u6923\u0100;o\u13e7\u13e5ear;\u6927\u1253\u1a95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2d2d\0\u2d38\u2d48\u2d60\u2d65\u2d72\u2d84\u1b07\0\0\u2d8d\u2dab\0\u2dc8\u2dce\0\u2ddc\u2e19\u2e2b\u2e3e\u2e43\u0100cs\u2d31\u1a97ute\u803b\xf3\u40f3\u0100iy\u2d3c\u2d45r\u0100;c\u1a9e\u2d42\u803b\xf4\u40f4;\u443e\u0280abios\u1aa0\u2d52\u2d57\u01c8\u2d5alac;\u4151v;\u6a38old;\u69bclig;\u4153\u0100cr\u2d69\u2d6dir;\u69bf;\uc000\ud835\udd2c\u036f\u2d79\0\0\u2d7c\0\u2d82n;\u42dbave\u803b\xf2\u40f2;\u69c1\u0100bm\u2d88\u0df4ar;\u69b5\u0200acit\u2d95\u2d98\u2da5\u2da8r\xf2\u1a80\u0100ir\u2d9d\u2da0r;\u69beoss;\u69bbn\xe5\u0e52;\u69c0\u0180aei\u2db1\u2db5\u2db9cr;\u414dga;\u43c9\u0180cdn\u2dc0\u2dc5\u01cdron;\u43bf;\u69b6pf;\uc000\ud835\udd60\u0180ael\u2dd4\u2dd7\u01d2r;\u69b7rp;\u69b9\u0380;adiosv\u2dea\u2deb\u2dee\u2e08\u2e0d\u2e10\u2e16\u6228r\xf2\u1a86\u0200;efm\u2df7\u2df8\u2e02\u2e05\u6a5dr\u0100;o\u2dfe\u2dff\u6134f\xbb\u2dff\u803b\xaa\u40aa\u803b\xba\u40bagof;\u62b6r;\u6a56lope;\u6a57;\u6a5b\u0180clo\u2e1f\u2e21\u2e27\xf2\u2e01ash\u803b\xf8\u40f8l;\u6298i\u016c\u2e2f\u2e34de\u803b\xf5\u40f5es\u0100;a\u01db\u2e3as;\u6a36ml\u803b\xf6\u40f6bar;\u633d\u0ae1\u2e5e\0\u2e7d\0\u2e80\u2e9d\0\u2ea2\u2eb9\0\0\u2ecb\u0e9c\0\u2f13\0\0\u2f2b\u2fbc\0\u2fc8r\u0200;ast\u0403\u2e67\u2e72\u0e85\u8100\xb6;l\u2e6d\u2e6e\u40b6le\xec\u0403\u0269\u2e78\0\0\u2e7bm;\u6af3;\u6afdy;\u443fr\u0280cimpt\u2e8b\u2e8f\u2e93\u1865\u2e97nt;\u4025od;\u402eil;\u6030enk;\u6031r;\uc000\ud835\udd2d\u0180imo\u2ea8\u2eb0\u2eb4\u0100;v\u2ead\u2eae\u43c6;\u43d5ma\xf4\u0a76ne;\u660e\u0180;tv\u2ebf\u2ec0\u2ec8\u43c0chfork\xbb\u1ffd;\u43d6\u0100au\u2ecf\u2edfn\u0100ck\u2ed5\u2eddk\u0100;h\u21f4\u2edb;\u610e\xf6\u21f4s\u0480;abcdemst\u2ef3\u2ef4\u1908\u2ef9\u2efd\u2f04\u2f06\u2f0a\u2f0e\u402bcir;\u6a23ir;\u6a22\u0100ou\u1d40\u2f02;\u6a25;\u6a72n\u80bb\xb1\u0e9dim;\u6a26wo;\u6a27\u0180ipu\u2f19\u2f20\u2f25ntint;\u6a15f;\uc000\ud835\udd61nd\u803b\xa3\u40a3\u0500;Eaceinosu\u0ec8\u2f3f\u2f41\u2f44\u2f47\u2f81\u2f89\u2f92\u2f7e\u2fb6;\u6ab3p;\u6ab7u\xe5\u0ed9\u0100;c\u0ece\u2f4c\u0300;acens\u0ec8\u2f59\u2f5f\u2f66\u2f68\u2f7eppro\xf8\u2f43urlye\xf1\u0ed9\xf1\u0ece\u0180aes\u2f6f\u2f76\u2f7approx;\u6ab9qq;\u6ab5im;\u62e8i\xed\u0edfme\u0100;s\u2f88\u0eae\u6032\u0180Eas\u2f78\u2f90\u2f7a\xf0\u2f75\u0180dfp\u0eec\u2f99\u2faf\u0180als\u2fa0\u2fa5\u2faalar;\u632eine;\u6312urf;\u6313\u0100;t\u0efb\u2fb4\xef\u0efbrel;\u62b0\u0100ci\u2fc0\u2fc5r;\uc000\ud835\udcc5;\u43c8ncsp;\u6008\u0300fiopsu\u2fda\u22e2\u2fdf\u2fe5\u2feb\u2ff1r;\uc000\ud835\udd2epf;\uc000\ud835\udd62rime;\u6057cr;\uc000\ud835\udcc6\u0180aeo\u2ff8\u3009\u3013t\u0100ei\u2ffe\u3005rnion\xf3\u06b0nt;\u6a16st\u0100;e\u3010\u3011\u403f\xf1\u1f19\xf4\u0f14\u0a80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30e0\u310e\u312b\u3147\u3162\u3172\u318e\u3206\u3215\u3224\u3229\u3258\u326e\u3272\u3290\u32b0\u32b7\u0180art\u3047\u304a\u304cr\xf2\u10b3\xf2\u03ddail;\u691car\xf2\u1c65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307f\u308f\u3094\u30cc\u0100eu\u306d\u3071;\uc000\u223d\u0331te;\u4155i\xe3\u116emptyv;\u69b3g\u0200;del\u0fd1\u3089\u308b\u308d;\u6992;\u69a5\xe5\u0fd1uo\u803b\xbb\u40bbr\u0580;abcfhlpstw\u0fdc\u30ac\u30af\u30b7\u30b9\u30bc\u30be\u30c0\u30c3\u30c7\u30cap;\u6975\u0100;f\u0fe0\u30b4s;\u6920;\u6933s;\u691e\xeb\u225d\xf0\u272el;\u6945im;\u6974l;\u61a3;\u619d\u0100ai\u30d1\u30d5il;\u691ao\u0100;n\u30db\u30dc\u6236al\xf3\u0f1e\u0180abr\u30e7\u30ea\u30eer\xf2\u17e5rk;\u6773\u0100ak\u30f3\u30fdc\u0100ek\u30f9\u30fb;\u407d;\u405d\u0100es\u3102\u3104;\u698cl\u0100du\u310a\u310c;\u698e;\u6990\u0200aeuy\u3117\u311c\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xec\u0ff2\xe2\u30fa;\u4440\u0200clqs\u3134\u3137\u313d\u3144a;\u6937dhar;\u6969uo\u0100;r\u020e\u020dh;\u61b3\u0180acg\u314e\u315f\u0f44l\u0200;ips\u0f78\u3158\u315b\u109cn\xe5\u10bbar\xf4\u0fa9t;\u65ad\u0180ilr\u3169\u1023\u316esht;\u697d;\uc000\ud835\udd2f\u0100ao\u3177\u3186r\u0100du\u317d\u317f\xbb\u047b\u0100;l\u1091\u3184;\u696c\u0100;v\u318b\u318c\u43c1;\u43f1\u0180gns\u3195\u31f9\u31fcht\u0300ahlrst\u31a4\u31b0\u31c2\u31d8\u31e4\u31eerrow\u0100;t\u0fdc\u31ada\xe9\u30c8arpoon\u0100du\u31bb\u31bfow\xee\u317ep\xbb\u1092eft\u0100ah\u31ca\u31d0rrow\xf3\u0feaarpoon\xf3\u0551ightarrows;\u61c9quigarro\xf7\u30cbhreetimes;\u62ccg;\u42daingdotse\xf1\u1f32\u0180ahm\u320d\u3210\u3213r\xf2\u0feaa\xf2\u0551;\u600foust\u0100;a\u321e\u321f\u63b1che\xbb\u321fmid;\u6aee\u0200abpt\u3232\u323d\u3240\u3252\u0100nr\u3237\u323ag;\u67edr;\u61fer\xeb\u1003\u0180afl\u3247\u324a\u324er;\u6986;\uc000\ud835\udd63us;\u6a2eimes;\u6a35\u0100ap\u325d\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6a12ar\xf2\u31e3\u0200achq\u327b\u3280\u10bc\u3285quo;\u603ar;\uc000\ud835\udcc7\u0100bu\u30fb\u328ao\u0100;r\u0214\u0213\u0180hir\u3297\u329b\u32a0re\xe5\u31f8mes;\u62cai\u0200;efl\u32aa\u1059\u1821\u32ab\u65b9tri;\u69celuhar;\u6968;\u611e\u0d61\u32d5\u32db\u32df\u332c\u3338\u3371\0\u337a\u33a4\0\0\u33ec\u33f0\0\u3428\u3448\u345a\u34ad\u34b1\u34ca\u34f1\0\u3616\0\0\u3633cute;\u415bqu\xef\u27ba\u0500;Eaceinpsy\u11ed\u32f3\u32f5\u32ff\u3302\u330b\u330f\u331f\u3326\u3329;\u6ab4\u01f0\u32fa\0\u32fc;\u6ab8on;\u4161u\xe5\u11fe\u0100;d\u11f3\u3307il;\u415frc;\u415d\u0180Eas\u3316\u3318\u331b;\u6ab6p;\u6abaim;\u62e9olint;\u6a13i\xed\u1204;\u4441ot\u0180;be\u3334\u1d47\u3335\u62c5;\u6a66\u0380Aacmstx\u3346\u334a\u3357\u335b\u335e\u3363\u336drr;\u61d8r\u0100hr\u3350\u3352\xeb\u2228\u0100;o\u0a36\u0a34t\u803b\xa7\u40a7i;\u403bwar;\u6929m\u0100in\u3369\xf0nu\xf3\xf1t;\u6736r\u0100;o\u3376\u2055\uc000\ud835\udd30\u0200acoy\u3382\u3386\u3391\u33a0rp;\u666f\u0100hy\u338b\u338fcy;\u4449;\u4448rt\u026d\u3399\0\0\u339ci\xe4\u1464ara\xec\u2e6f\u803b\xad\u40ad\u0100gm\u33a8\u33b4ma\u0180;fv\u33b1\u33b2\u33b2\u43c3;\u43c2\u0400;deglnpr\u12ab\u33c5\u33c9\u33ce\u33d6\u33de\u33e1\u33e6ot;\u6a6a\u0100;q\u12b1\u12b0\u0100;E\u33d3\u33d4\u6a9e;\u6aa0\u0100;E\u33db\u33dc\u6a9d;\u6a9fe;\u6246lus;\u6a24arr;\u6972ar\xf2\u113d\u0200aeit\u33f8\u3408\u340f\u3417\u0100ls\u33fd\u3404lsetm\xe9\u336ahp;\u6a33parsl;\u69e4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341c\u341d\u6aaa\u0100;s\u3422\u3423\u6aac;\uc000\u2aac\ufe00\u0180flp\u342e\u3433\u3442tcy;\u444c\u0100;b\u3438\u3439\u402f\u0100;a\u343e\u343f\u69c4r;\u633ff;\uc000\ud835\udd64a\u0100dr\u344d\u0402es\u0100;u\u3454\u3455\u6660it\xbb\u3455\u0180csu\u3460\u3479\u349f\u0100au\u3465\u346fp\u0100;s\u1188\u346b;\uc000\u2293\ufe00p\u0100;s\u11b4\u3475;\uc000\u2294\ufe00u\u0100bp\u347f\u348f\u0180;es\u1197\u119c\u3486et\u0100;e\u1197\u348d\xf1\u119d\u0180;es\u11a8\u11ad\u3496et\u0100;e\u11a8\u349d\xf1\u11ae\u0180;af\u117b\u34a6\u05b0r\u0165\u34ab\u05b1\xbb\u117car\xf2\u1148\u0200cemt\u34b9\u34be\u34c2\u34c5r;\uc000\ud835\udcc8tm\xee\xf1i\xec\u3415ar\xe6\u11be\u0100ar\u34ce\u34d5r\u0100;f\u34d4\u17bf\u6606\u0100an\u34da\u34edight\u0100ep\u34e3\u34eapsilo\xee\u1ee0h\xe9\u2eafs\xbb\u2852\u0280bcmnp\u34fb\u355e\u1209\u358b\u358e\u0480;Edemnprs\u350e\u350f\u3511\u3515\u351e\u3523\u352c\u3531\u3536\u6282;\u6ac5ot;\u6abd\u0100;d\u11da\u351aot;\u6ac3ult;\u6ac1\u0100Ee\u3528\u352a;\u6acb;\u628alus;\u6abfarr;\u6979\u0180eiu\u353d\u3552\u3555t\u0180;en\u350e\u3545\u354bq\u0100;q\u11da\u350feq\u0100;q\u352b\u3528m;\u6ac7\u0100bp\u355a\u355c;\u6ad5;\u6ad3c\u0300;acens\u11ed\u356c\u3572\u3579\u357b\u3326ppro\xf8\u32faurlye\xf1\u11fe\xf1\u11f3\u0180aes\u3582\u3588\u331bppro\xf8\u331aq\xf1\u3317g;\u666a\u0680123;Edehlmnps\u35a9\u35ac\u35af\u121c\u35b2\u35b4\u35c0\u35c9\u35d5\u35da\u35df\u35e8\u35ed\u803b\xb9\u40b9\u803b\xb2\u40b2\u803b\xb3\u40b3;\u6ac6\u0100os\u35b9\u35bct;\u6abeub;\u6ad8\u0100;d\u1222\u35c5ot;\u6ac4s\u0100ou\u35cf\u35d2l;\u67c9b;\u6ad7arr;\u697bult;\u6ac2\u0100Ee\u35e4\u35e6;\u6acc;\u628blus;\u6ac0\u0180eiu\u35f4\u3609\u360ct\u0180;en\u121c\u35fc\u3602q\u0100;q\u1222\u35b2eq\u0100;q\u35e7\u35e4m;\u6ac8\u0100bp\u3611\u3613;\u6ad4;\u6ad6\u0180Aan\u361c\u3620\u362drr;\u61d9r\u0100hr\u3626\u3628\xeb\u222e\u0100;o\u0a2b\u0a29war;\u692alig\u803b\xdf\u40df\u0be1\u3651\u365d\u3660\u12ce\u3673\u3679\0\u367e\u36c2\0\0\0\0\0\u36db\u3703\0\u3709\u376c\0\0\0\u3787\u0272\u3656\0\0\u365bget;\u6316;\u43c4r\xeb\u0e5f\u0180aey\u3666\u366b\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uc000\ud835\udd31\u0200eiko\u3686\u369d\u36b5\u36bc\u01f2\u368b\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369b\u43b8ym;\u43d1\u0100cn\u36a2\u36b2k\u0100as\u36a8\u36aeppro\xf8\u12c1im\xbb\u12acs\xf0\u129e\u0100as\u36ba\u36ae\xf0\u12c1rn\u803b\xfe\u40fe\u01ec\u031f\u36c6\u22e7es\u8180\xd7;bd\u36cf\u36d0\u36d8\u40d7\u0100;a\u190f\u36d5r;\u6a31;\u6a30\u0180eps\u36e1\u36e3\u3700\xe1\u2a4d\u0200;bcf\u0486\u36ec\u36f0\u36f4ot;\u6336ir;\u6af1\u0100;o\u36f9\u36fc\uc000\ud835\udd65rk;\u6ada\xe1\u3362rime;\u6034\u0180aip\u370f\u3712\u3764d\xe5\u1248\u0380adempst\u3721\u374d\u3740\u3751\u3757\u375c\u375fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65b5own\xbb\u1dbbeft\u0100;e\u2800\u373e\xf1\u092e;\u625cight\u0100;e\u32aa\u374b\xf1\u105aot;\u65ecinus;\u6a3alus;\u6a39b;\u69cdime;\u6a3bezium;\u63e2\u0180cht\u3772\u377d\u3781\u0100ry\u3777\u377b;\uc000\ud835\udcc9;\u4446cy;\u445brok;\u4167\u0100io\u378b\u378ex\xf4\u1777head\u0100lr\u3797\u37a0eftarro\xf7\u084fightarrow\xbb\u0f5d\u0900AHabcdfghlmoprstuw\u37d0\u37d3\u37d7\u37e4\u37f0\u37fc\u380e\u381c\u3823\u3834\u3851\u385d\u386b\u38a9\u38cc\u38d2\u38ea\u38f6r\xf2\u03edar;\u6963\u0100cr\u37dc\u37e2ute\u803b\xfa\u40fa\xf2\u1150r\u01e3\u37ea\0\u37edy;\u445eve;\u416d\u0100iy\u37f5\u37farc\u803b\xfb\u40fb;\u4443\u0180abh\u3803\u3806\u380br\xf2\u13adlac;\u4171a\xf2\u13c3\u0100ir\u3813\u3818sht;\u697e;\uc000\ud835\udd32rave\u803b\xf9\u40f9\u0161\u3827\u3831r\u0100lr\u382c\u382e\xbb\u0957\xbb\u1083lk;\u6580\u0100ct\u3839\u384d\u026f\u383f\0\0\u384arn\u0100;e\u3845\u3846\u631cr\xbb\u3846op;\u630fri;\u65f8\u0100al\u3856\u385acr;\u416b\u80bb\xa8\u0349\u0100gp\u3862\u3866on;\u4173f;\uc000\ud835\udd66\u0300adhlsu\u114b\u3878\u387d\u1372\u3891\u38a0own\xe1\u13b3arpoon\u0100lr\u3888\u388cef\xf4\u382digh\xf4\u382fi\u0180;hl\u3899\u389a\u389c\u43c5\xbb\u13faon\xbb\u389aparrows;\u61c8\u0180cit\u38b0\u38c4\u38c8\u026f\u38b6\0\0\u38c1rn\u0100;e\u38bc\u38bd\u631dr\xbb\u38bdop;\u630eng;\u416fri;\u65f9cr;\uc000\ud835\udcca\u0180dir\u38d9\u38dd\u38e2ot;\u62f0lde;\u4169i\u0100;f\u3730\u38e8\xbb\u1813\u0100am\u38ef\u38f2r\xf2\u38a8l\u803b\xfc\u40fcangle;\u69a7\u0780ABDacdeflnoprsz\u391c\u391f\u3929\u392d\u39b5\u39b8\u39bd\u39df\u39e4\u39e8\u39f3\u39f9\u39fd\u3a01\u3a20r\xf2\u03f7ar\u0100;v\u3926\u3927\u6ae8;\u6ae9as\xe8\u03e1\u0100nr\u3932\u3937grt;\u699c\u0380eknprst\u34e3\u3946\u394b\u3952\u395d\u3964\u3996app\xe1\u2415othin\xe7\u1e96\u0180hir\u34eb\u2ec8\u3959op\xf4\u2fb5\u0100;h\u13b7\u3962\xef\u318d\u0100iu\u3969\u396dgm\xe1\u33b3\u0100bp\u3972\u3984setneq\u0100;q\u397d\u3980\uc000\u228a\ufe00;\uc000\u2acb\ufe00setneq\u0100;q\u398f\u3992\uc000\u228b\ufe00;\uc000\u2acc\ufe00\u0100hr\u399b\u399fet\xe1\u369ciangle\u0100lr\u39aa\u39afeft\xbb\u0925ight\xbb\u1051y;\u4432ash\xbb\u1036\u0180elr\u39c4\u39d2\u39d7\u0180;be\u2dea\u39cb\u39cfar;\u62bbq;\u625alip;\u62ee\u0100bt\u39dc\u1468a\xf2\u1469r;\uc000\ud835\udd33tr\xe9\u39aesu\u0100bp\u39ef\u39f1\xbb\u0d1c\xbb\u0d59pf;\uc000\ud835\udd67ro\xf0\u0efbtr\xe9\u39b4\u0100cu\u3a06\u3a0br;\uc000\ud835\udccb\u0100bp\u3a10\u3a18n\u0100Ee\u3980\u3a16\xbb\u397en\u0100Ee\u3992\u3a1e\xbb\u3990igzag;\u699a\u0380cefoprs\u3a36\u3a3b\u3a56\u3a5b\u3a54\u3a61\u3a6airc;\u4175\u0100di\u3a40\u3a51\u0100bg\u3a45\u3a49ar;\u6a5fe\u0100;q\u15fa\u3a4f;\u6259erp;\u6118r;\uc000\ud835\udd34pf;\uc000\ud835\udd68\u0100;e\u1479\u3a66at\xe8\u1479cr;\uc000\ud835\udccc\u0ae3\u178e\u3a87\0\u3a8b\0\u3a90\u3a9b\0\0\u3a9d\u3aa8\u3aab\u3aaf\0\0\u3ac3\u3ace\0\u3ad8\u17dc\u17dftr\xe9\u17d1r;\uc000\ud835\udd35\u0100Aa\u3a94\u3a97r\xf2\u03c3r\xf2\u09f6;\u43be\u0100Aa\u3aa1\u3aa4r\xf2\u03b8r\xf2\u09eba\xf0\u2713is;\u62fb\u0180dpt\u17a4\u3ab5\u3abe\u0100fl\u3aba\u17a9;\uc000\ud835\udd69im\xe5\u17b2\u0100Aa\u3ac7\u3acar\xf2\u03cer\xf2\u0a01\u0100cq\u3ad2\u17b8r;\uc000\ud835\udccd\u0100pt\u17d6\u3adcr\xe9\u17d4\u0400acefiosu\u3af0\u3afd\u3b08\u3b0c\u3b11\u3b15\u3b1b\u3b21c\u0100uy\u3af6\u3afbte\u803b\xfd\u40fd;\u444f\u0100iy\u3b02\u3b06rc;\u4177;\u444bn\u803b\xa5\u40a5r;\uc000\ud835\udd36cy;\u4457pf;\uc000\ud835\udd6acr;\uc000\ud835\udcce\u0100cm\u3b26\u3b29y;\u444el\u803b\xff\u40ff\u0500acdefhiosw\u3b42\u3b48\u3b54\u3b58\u3b64\u3b69\u3b6d\u3b74\u3b7a\u3b80cute;\u417a\u0100ay\u3b4d\u3b52ron;\u417e;\u4437ot;\u417c\u0100et\u3b5d\u3b61tr\xe6\u155fa;\u43b6r;\uc000\ud835\udd37cy;\u4436grarr;\u61ddpf;\uc000\ud835\udd6bcr;\uc000\ud835\udccf\u0100jn\u3b85\u3b87;\u600dj;\u600c".split("").map(c => c.charCodeAt(0))));
//# sourceMappingURL=decode-data-html.js.map
;// CONCATENATED MODULE: ./node_modules/entities/lib/esm/generated/decode-data-xml.js
// Generated using scripts/write-decode-map.ts
/* harmony default export */ const decode_data_xml = (new Uint16Array(
// prettier-ignore
"\u0200aglq\t\x15\x18\x1b\u026d\x0f\0\0\x12p;\u4026os;\u4027t;\u403et;\u403cuot;\u4022".split("").map(c => c.charCodeAt(0))));
//# sourceMappingURL=decode-data-xml.js.map
;// CONCATENATED MODULE: ./node_modules/entities/lib/esm/decode_codepoint.js
// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
var _a;
const decodeMap = new Map([[0, 65533],
// C1 Unicode control character reference replacements
[128, 8364], [130, 8218], [131, 402], [132, 8222], [133, 8230], [134, 8224], [135, 8225], [136, 710], [137, 8240], [138, 352], [139, 8249], [140, 338], [142, 381], [145, 8216], [146, 8217], [147, 8220], [148, 8221], [149, 8226], [150, 8211], [151, 8212], [152, 732], [153, 8482], [154, 353], [155, 8250], [156, 339], [158, 382], [159, 376]]);
/**
 * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.
 */
const fromCodePoint =
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {
  let output = "";
  if (codePoint > 0xffff) {
    codePoint -= 0x10000;
    output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
    codePoint = 0xdc00 | codePoint & 0x3ff;
  }
  output += String.fromCharCode(codePoint);
  return output;
};
/**
 * Replace the given code point with a replacement character if it is a
 * surrogate or is outside the valid range. Otherwise return the code
 * point unchanged.
 */
function replaceCodePoint(codePoint) {
  var _a;
  if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {
    return 0xfffd;
  }
  return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
}
/**
 * Replace the code point if relevant, then convert it to a string.
 *
 * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.
 * @param codePoint The code point to decode.
 * @returns The decoded code point.
 */
function decodeCodePoint(codePoint) {
  return fromCodePoint(replaceCodePoint(codePoint));
}
//# sourceMappingURL=decode_codepoint.js.map
;// CONCATENATED MODULE: ./node_modules/entities/lib/esm/decode.js



// Re-export for use by eg. htmlparser2


var CharCodes = /*#__PURE__*/function (CharCodes) {
  CharCodes[CharCodes["NUM"] = 35] = "NUM";
  CharCodes[CharCodes["SEMI"] = 59] = "SEMI";
  CharCodes[CharCodes["EQUALS"] = 61] = "EQUALS";
  CharCodes[CharCodes["ZERO"] = 48] = "ZERO";
  CharCodes[CharCodes["NINE"] = 57] = "NINE";
  CharCodes[CharCodes["LOWER_A"] = 97] = "LOWER_A";
  CharCodes[CharCodes["LOWER_F"] = 102] = "LOWER_F";
  CharCodes[CharCodes["LOWER_X"] = 120] = "LOWER_X";
  CharCodes[CharCodes["LOWER_Z"] = 122] = "LOWER_Z";
  CharCodes[CharCodes["UPPER_A"] = 65] = "UPPER_A";
  CharCodes[CharCodes["UPPER_F"] = 70] = "UPPER_F";
  CharCodes[CharCodes["UPPER_Z"] = 90] = "UPPER_Z";
  return CharCodes;
}(CharCodes || {});
/** Bit that needs to be set to convert an upper case ASCII character to lower case */
const TO_LOWER_BIT = 0b100000;
var BinTrieFlags = /*#__PURE__*/function (BinTrieFlags) {
  BinTrieFlags[BinTrieFlags["VALUE_LENGTH"] = 49152] = "VALUE_LENGTH";
  BinTrieFlags[BinTrieFlags["BRANCH_LENGTH"] = 16256] = "BRANCH_LENGTH";
  BinTrieFlags[BinTrieFlags["JUMP_TABLE"] = 127] = "JUMP_TABLE";
  return BinTrieFlags;
}(BinTrieFlags || {});
function isNumber(code) {
  return code >= CharCodes.ZERO && code <= CharCodes.NINE;
}
function isHexadecimalCharacter(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;
}
function isAsciiAlphaNumeric(code) {
  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);
}
/**
 * Checks if the given character is a valid end character for an entity in an attribute.
 *
 * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.
 * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state
 */
function isEntityInAttributeInvalidEnd(code) {
  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
}
var EntityDecoderState = /*#__PURE__*/function (EntityDecoderState) {
  EntityDecoderState[EntityDecoderState["EntityStart"] = 0] = "EntityStart";
  EntityDecoderState[EntityDecoderState["NumericStart"] = 1] = "NumericStart";
  EntityDecoderState[EntityDecoderState["NumericDecimal"] = 2] = "NumericDecimal";
  EntityDecoderState[EntityDecoderState["NumericHex"] = 3] = "NumericHex";
  EntityDecoderState[EntityDecoderState["NamedEntity"] = 4] = "NamedEntity";
  return EntityDecoderState;
}(EntityDecoderState || {});
var decode_DecodingMode = /*#__PURE__*/function (DecodingMode) {
  /** Entities in text nodes that can end with any character. */
  DecodingMode[DecodingMode["Legacy"] = 0] = "Legacy";
  /** Only allow entities terminated with a semicolon. */
  DecodingMode[DecodingMode["Strict"] = 1] = "Strict";
  /** Entities in attributes have limitations on ending characters. */
  DecodingMode[DecodingMode["Attribute"] = 2] = "Attribute";
  return DecodingMode;
}(decode_DecodingMode || {});
/**
 * Token decoder with support of writing partial entities.
 */
class EntityDecoder {
  constructor( /** The tree used to decode entities. */
  decodeTree,
  /**
   * The function that is called when a codepoint is decoded.
   *
   * For multi-byte named entities, this will be called multiple times,
   * with the second codepoint, and the same `consumed` value.
   *
   * @param codepoint The decoded codepoint.
   * @param consumed The number of bytes consumed by the decoder.
   */
  emitCodePoint, /** An object that is used to produce errors. */
  errors) {
    this.decodeTree = decodeTree;
    this.emitCodePoint = emitCodePoint;
    this.errors = errors;
    /** The current state of the decoder. */
    this.state = EntityDecoderState.EntityStart;
    /** Characters that were consumed while parsing an entity. */
    this.consumed = 1;
    /**
     * The result of the entity.
     *
     * Either the result index of a numeric entity, or the codepoint of a
     * numeric entity.
     */
    this.result = 0;
    /** The current index in the decode tree. */
    this.treeIndex = 0;
    /** The number of characters that were consumed in excess. */
    this.excess = 1;
    /** The mode in which the decoder is operating. */
    this.decodeMode = decode_DecodingMode.Strict;
  }
  /** Resets the instance to make it reusable. */
  startEntity(decodeMode) {
    this.decodeMode = decodeMode;
    this.state = EntityDecoderState.EntityStart;
    this.result = 0;
    this.treeIndex = 0;
    this.excess = 1;
    this.consumed = 1;
  }
  /**
   * Write an entity to the decoder. This can be called multiple times with partial entities.
   * If the entity is incomplete, the decoder will return -1.
   *
   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
   * entity is incomplete, and resume when the next string is written.
   *
   * @param string The string containing the entity (or a continuation of the entity).
   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  write(str, offset) {
    switch (this.state) {
      case EntityDecoderState.EntityStart:
        {
          if (str.charCodeAt(offset) === CharCodes.NUM) {
            this.state = EntityDecoderState.NumericStart;
            this.consumed += 1;
            return this.stateNumericStart(str, offset + 1);
          }
          this.state = EntityDecoderState.NamedEntity;
          return this.stateNamedEntity(str, offset);
        }
      case EntityDecoderState.NumericStart:
        {
          return this.stateNumericStart(str, offset);
        }
      case EntityDecoderState.NumericDecimal:
        {
          return this.stateNumericDecimal(str, offset);
        }
      case EntityDecoderState.NumericHex:
        {
          return this.stateNumericHex(str, offset);
        }
      case EntityDecoderState.NamedEntity:
        {
          return this.stateNamedEntity(str, offset);
        }
    }
  }
  /**
   * Switches between the numeric decimal and hexadecimal states.
   *
   * Equivalent to the `Numeric character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericStart(str, offset) {
    if (offset >= str.length) {
      return -1;
    }
    if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
      this.state = EntityDecoderState.NumericHex;
      this.consumed += 1;
      return this.stateNumericHex(str, offset + 1);
    }
    this.state = EntityDecoderState.NumericDecimal;
    return this.stateNumericDecimal(str, offset);
  }
  addToNumericResult(str, start, end, base) {
    if (start !== end) {
      const digitCount = end - start;
      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);
      this.consumed += digitCount;
    }
  }
  /**
   * Parses a hexadecimal numeric entity.
   *
   * Equivalent to the `Hexademical character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericHex(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber(char) || isHexadecimalCharacter(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 16);
        return this.emitNumericEntity(char, 3);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 16);
    return -1;
  }
  /**
   * Parses a decimal numeric entity.
   *
   * Equivalent to the `Decimal character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNumericDecimal(str, offset) {
    const startIdx = offset;
    while (offset < str.length) {
      const char = str.charCodeAt(offset);
      if (isNumber(char)) {
        offset += 1;
      } else {
        this.addToNumericResult(str, startIdx, offset, 10);
        return this.emitNumericEntity(char, 2);
      }
    }
    this.addToNumericResult(str, startIdx, offset, 10);
    return -1;
  }
  /**
   * Validate and emit a numeric entity.
   *
   * Implements the logic from the `Hexademical character reference start
   * state` and `Numeric character reference end state` in the HTML spec.
   *
   * @param lastCp The last code point of the entity. Used to see if the
   *               entity was terminated with a semicolon.
   * @param expectedLength The minimum number of characters that should be
   *                       consumed. Used to validate that at least one digit
   *                       was consumed.
   * @returns The number of characters that were consumed.
   */
  emitNumericEntity(lastCp, expectedLength) {
    var _a;
    // Ensure we consumed at least one digit.
    if (this.consumed <= expectedLength) {
      (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
      return 0;
    }
    // Figure out if this is a legit end of the entity
    if (lastCp === CharCodes.SEMI) {
      this.consumed += 1;
    } else if (this.decodeMode === decode_DecodingMode.Strict) {
      return 0;
    }
    this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
    if (this.errors) {
      if (lastCp !== CharCodes.SEMI) {
        this.errors.missingSemicolonAfterCharacterReference();
      }
      this.errors.validateNumericCharacterReference(this.result);
    }
    return this.consumed;
  }
  /**
   * Parses a named entity.
   *
   * Equivalent to the `Named character reference state` in the HTML spec.
   *
   * @param str The string containing the entity (or a continuation of the entity).
   * @param offset The current offset.
   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
   */
  stateNamedEntity(str, offset) {
    const {
      decodeTree
    } = this;
    let current = decodeTree[this.treeIndex];
    // The mask is the number of bytes of the value, including the current byte.
    let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
    for (; offset < str.length; offset++, this.excess++) {
      const char = str.charCodeAt(offset);
      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);
      if (this.treeIndex < 0) {
        return this.result === 0 ||
        // If we are parsing an attribute
        this.decodeMode === decode_DecodingMode.Attribute && (
        // We shouldn't have consumed any characters after the entity,
        valueLength === 0 ||
        // And there should be no invalid characters.
        isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();
      }
      current = decodeTree[this.treeIndex];
      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
      // If the branch is a value, store it and continue
      if (valueLength !== 0) {
        // If the entity is terminated by a semicolon, we are done.
        if (char === CharCodes.SEMI) {
          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);
        }
        // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.
        if (this.decodeMode !== decode_DecodingMode.Strict) {
          this.result = this.treeIndex;
          this.consumed += this.excess;
          this.excess = 0;
        }
      }
    }
    return -1;
  }
  /**
   * Emit a named entity that was not terminated with a semicolon.
   *
   * @returns The number of characters consumed.
   */
  emitNotTerminatedNamedEntity() {
    var _a;
    const {
      result,
      decodeTree
    } = this;
    const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
    this.emitNamedEntityData(result, valueLength, this.consumed);
    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();
    return this.consumed;
  }
  /**
   * Emit a named entity.
   *
   * @param result The index of the entity in the decode tree.
   * @param valueLength The number of bytes in the entity.
   * @param consumed The number of characters consumed.
   *
   * @returns The number of characters consumed.
   */
  emitNamedEntityData(result, valueLength, consumed) {
    const {
      decodeTree
    } = this;
    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);
    if (valueLength === 3) {
      // For multi-byte values, we need to emit the second byte.
      this.emitCodePoint(decodeTree[result + 2], consumed);
    }
    return consumed;
  }
  /**
   * Signal to the parser that the end of the input was reached.
   *
   * Remaining data will be emitted and relevant errors will be produced.
   *
   * @returns The number of characters consumed.
   */
  end() {
    var _a;
    switch (this.state) {
      case EntityDecoderState.NamedEntity:
        {
          // Emit a named entity if we have one.
          return this.result !== 0 && (this.decodeMode !== decode_DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;
        }
      // Otherwise, emit a numeric entity if we have one.
      case EntityDecoderState.NumericDecimal:
        {
          return this.emitNumericEntity(0, 2);
        }
      case EntityDecoderState.NumericHex:
        {
          return this.emitNumericEntity(0, 3);
        }
      case EntityDecoderState.NumericStart:
        {
          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);
          return 0;
        }
      case EntityDecoderState.EntityStart:
        {
          // Return 0 if we have no entity.
          return 0;
        }
    }
  }
}
/**
 * Creates a function that decodes entities in a string.
 *
 * @param decodeTree The decode tree.
 * @returns A function that decodes entities in a string.
 */
function getDecoder(decodeTree) {
  let ret = "";
  const decoder = new EntityDecoder(decodeTree, str => ret += fromCodePoint(str));
  return function decodeWithTrie(str, decodeMode) {
    let lastIndex = 0;
    let offset = 0;
    while ((offset = str.indexOf("&", offset)) >= 0) {
      ret += str.slice(lastIndex, offset);
      decoder.startEntity(decodeMode);
      const len = decoder.write(str,
      // Skip the "&"
      offset + 1);
      if (len < 0) {
        lastIndex = offset + decoder.end();
        break;
      }
      lastIndex = offset + len;
      // If `len` is 0, skip the current `&` and continue.
      offset = len === 0 ? lastIndex + 1 : lastIndex;
    }
    const result = ret + str.slice(lastIndex);
    // Make sure we don't keep a reference to the final string.
    ret = "";
    return result;
  };
}
/**
 * Determines the branch of the current node that is taken given the current
 * character. This function is used to traverse the trie.
 *
 * @param decodeTree The trie.
 * @param current The current node.
 * @param nodeIdx The index right after the current node and its value.
 * @param char The current character.
 * @returns The index of the next node, or -1 if no branch is taken.
 */
function determineBranch(decodeTree, current, nodeIdx, char) {
  const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
  const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
  // Case 1: Single branch encoded in jump offset
  if (branchCount === 0) {
    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
  }
  // Case 2: Multiple branches encoded in jump table
  if (jumpOffset) {
    const value = char - jumpOffset;
    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
  }
  // Case 3: Multiple branches encoded in dictionary
  // Binary search for the character.
  let lo = nodeIdx;
  let hi = lo + branchCount - 1;
  while (lo <= hi) {
    const mid = lo + hi >>> 1;
    const midVal = decodeTree[mid];
    if (midVal < char) {
      lo = mid + 1;
    } else if (midVal > char) {
      hi = mid - 1;
    } else {
      return decodeTree[mid + branchCount];
    }
  }
  return -1;
}
const htmlDecoder = getDecoder(decode_data_html);
const xmlDecoder = getDecoder(decode_data_xml);
/**
 * Decodes an HTML string.
 *
 * @param str The string to decode.
 * @param mode The decoding mode.
 * @returns The decoded string.
 */
function decode_decodeHTML(str, mode = decode_DecodingMode.Legacy) {
  return htmlDecoder(str, mode);
}
/**
 * Decodes an HTML string in an attribute.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeHTMLAttribute(str) {
  return htmlDecoder(str, decode_DecodingMode.Attribute);
}
/**
 * Decodes an HTML string, requiring all entities to be terminated by a semicolon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decodeHTMLStrict(str) {
  return htmlDecoder(str, decode_DecodingMode.Strict);
}
/**
 * Decodes an XML string, requiring all entities to be terminated by a semicolon.
 *
 * @param str The string to decode.
 * @returns The decoded string.
 */
function decode_decodeXML(str) {
  return xmlDecoder(str, decode_DecodingMode.Strict);
}
//# sourceMappingURL=decode.js.map
;// CONCATENATED MODULE: ./node_modules/entities/lib/esm/generated/encode-html.js
// Generated using scripts/write-encode-map.ts
function restoreDiff(arr) {
  for (let i = 1; i < arr.length; i++) {
    arr[i][0] += arr[i - 1][0] + 1;
  }
  return arr;
}
// prettier-ignore
/* harmony default export */ const encode_html = (new Map( /* #__PURE__ */restoreDiff([[9, "&Tab;"], [0, "&NewLine;"], [22, "&excl;"], [0, "&quot;"], [0, "&num;"], [0, "&dollar;"], [0, "&percnt;"], [0, "&amp;"], [0, "&apos;"], [0, "&lpar;"], [0, "&rpar;"], [0, "&ast;"], [0, "&plus;"], [0, "&comma;"], [1, "&period;"], [0, "&sol;"], [10, "&colon;"], [0, "&semi;"], [0, {
  v: "&lt;",
  n: 8402,
  o: "&nvlt;"
}], [0, {
  v: "&equals;",
  n: 8421,
  o: "&bne;"
}], [0, {
  v: "&gt;",
  n: 8402,
  o: "&nvgt;"
}], [0, "&quest;"], [0, "&commat;"], [26, "&lbrack;"], [0, "&bsol;"], [0, "&rbrack;"], [0, "&Hat;"], [0, "&lowbar;"], [0, "&DiacriticalGrave;"], [5, {
  n: 106,
  o: "&fjlig;"
}], [20, "&lbrace;"], [0, "&verbar;"], [0, "&rbrace;"], [34, "&nbsp;"], [0, "&iexcl;"], [0, "&cent;"], [0, "&pound;"], [0, "&curren;"], [0, "&yen;"], [0, "&brvbar;"], [0, "&sect;"], [0, "&die;"], [0, "&copy;"], [0, "&ordf;"], [0, "&laquo;"], [0, "&not;"], [0, "&shy;"], [0, "&circledR;"], [0, "&macr;"], [0, "&deg;"], [0, "&PlusMinus;"], [0, "&sup2;"], [0, "&sup3;"], [0, "&acute;"], [0, "&micro;"], [0, "&para;"], [0, "&centerdot;"], [0, "&cedil;"], [0, "&sup1;"], [0, "&ordm;"], [0, "&raquo;"], [0, "&frac14;"], [0, "&frac12;"], [0, "&frac34;"], [0, "&iquest;"], [0, "&Agrave;"], [0, "&Aacute;"], [0, "&Acirc;"], [0, "&Atilde;"], [0, "&Auml;"], [0, "&angst;"], [0, "&AElig;"], [0, "&Ccedil;"], [0, "&Egrave;"], [0, "&Eacute;"], [0, "&Ecirc;"], [0, "&Euml;"], [0, "&Igrave;"], [0, "&Iacute;"], [0, "&Icirc;"], [0, "&Iuml;"], [0, "&ETH;"], [0, "&Ntilde;"], [0, "&Ograve;"], [0, "&Oacute;"], [0, "&Ocirc;"], [0, "&Otilde;"], [0, "&Ouml;"], [0, "&times;"], [0, "&Oslash;"], [0, "&Ugrave;"], [0, "&Uacute;"], [0, "&Ucirc;"], [0, "&Uuml;"], [0, "&Yacute;"], [0, "&THORN;"], [0, "&szlig;"], [0, "&agrave;"], [0, "&aacute;"], [0, "&acirc;"], [0, "&atilde;"], [0, "&auml;"], [0, "&aring;"], [0, "&aelig;"], [0, "&ccedil;"], [0, "&egrave;"], [0, "&eacute;"], [0, "&ecirc;"], [0, "&euml;"], [0, "&igrave;"], [0, "&iacute;"], [0, "&icirc;"], [0, "&iuml;"], [0, "&eth;"], [0, "&ntilde;"], [0, "&ograve;"], [0, "&oacute;"], [0, "&ocirc;"], [0, "&otilde;"], [0, "&ouml;"], [0, "&div;"], [0, "&oslash;"], [0, "&ugrave;"], [0, "&uacute;"], [0, "&ucirc;"], [0, "&uuml;"], [0, "&yacute;"], [0, "&thorn;"], [0, "&yuml;"], [0, "&Amacr;"], [0, "&amacr;"], [0, "&Abreve;"], [0, "&abreve;"], [0, "&Aogon;"], [0, "&aogon;"], [0, "&Cacute;"], [0, "&cacute;"], [0, "&Ccirc;"], [0, "&ccirc;"], [0, "&Cdot;"], [0, "&cdot;"], [0, "&Ccaron;"], [0, "&ccaron;"], [0, "&Dcaron;"], [0, "&dcaron;"], [0, "&Dstrok;"], [0, "&dstrok;"], [0, "&Emacr;"], [0, "&emacr;"], [2, "&Edot;"], [0, "&edot;"], [0, "&Eogon;"], [0, "&eogon;"], [0, "&Ecaron;"], [0, "&ecaron;"], [0, "&Gcirc;"], [0, "&gcirc;"], [0, "&Gbreve;"], [0, "&gbreve;"], [0, "&Gdot;"], [0, "&gdot;"], [0, "&Gcedil;"], [1, "&Hcirc;"], [0, "&hcirc;"], [0, "&Hstrok;"], [0, "&hstrok;"], [0, "&Itilde;"], [0, "&itilde;"], [0, "&Imacr;"], [0, "&imacr;"], [2, "&Iogon;"], [0, "&iogon;"], [0, "&Idot;"], [0, "&imath;"], [0, "&IJlig;"], [0, "&ijlig;"], [0, "&Jcirc;"], [0, "&jcirc;"], [0, "&Kcedil;"], [0, "&kcedil;"], [0, "&kgreen;"], [0, "&Lacute;"], [0, "&lacute;"], [0, "&Lcedil;"], [0, "&lcedil;"], [0, "&Lcaron;"], [0, "&lcaron;"], [0, "&Lmidot;"], [0, "&lmidot;"], [0, "&Lstrok;"], [0, "&lstrok;"], [0, "&Nacute;"], [0, "&nacute;"], [0, "&Ncedil;"], [0, "&ncedil;"], [0, "&Ncaron;"], [0, "&ncaron;"], [0, "&napos;"], [0, "&ENG;"], [0, "&eng;"], [0, "&Omacr;"], [0, "&omacr;"], [2, "&Odblac;"], [0, "&odblac;"], [0, "&OElig;"], [0, "&oelig;"], [0, "&Racute;"], [0, "&racute;"], [0, "&Rcedil;"], [0, "&rcedil;"], [0, "&Rcaron;"], [0, "&rcaron;"], [0, "&Sacute;"], [0, "&sacute;"], [0, "&Scirc;"], [0, "&scirc;"], [0, "&Scedil;"], [0, "&scedil;"], [0, "&Scaron;"], [0, "&scaron;"], [0, "&Tcedil;"], [0, "&tcedil;"], [0, "&Tcaron;"], [0, "&tcaron;"], [0, "&Tstrok;"], [0, "&tstrok;"], [0, "&Utilde;"], [0, "&utilde;"], [0, "&Umacr;"], [0, "&umacr;"], [0, "&Ubreve;"], [0, "&ubreve;"], [0, "&Uring;"], [0, "&uring;"], [0, "&Udblac;"], [0, "&udblac;"], [0, "&Uogon;"], [0, "&uogon;"], [0, "&Wcirc;"], [0, "&wcirc;"], [0, "&Ycirc;"], [0, "&ycirc;"], [0, "&Yuml;"], [0, "&Zacute;"], [0, "&zacute;"], [0, "&Zdot;"], [0, "&zdot;"], [0, "&Zcaron;"], [0, "&zcaron;"], [19, "&fnof;"], [34, "&imped;"], [63, "&gacute;"], [65, "&jmath;"], [142, "&circ;"], [0, "&caron;"], [16, "&breve;"], [0, "&DiacriticalDot;"], [0, "&ring;"], [0, "&ogon;"], [0, "&DiacriticalTilde;"], [0, "&dblac;"], [51, "&DownBreve;"], [127, "&Alpha;"], [0, "&Beta;"], [0, "&Gamma;"], [0, "&Delta;"], [0, "&Epsilon;"], [0, "&Zeta;"], [0, "&Eta;"], [0, "&Theta;"], [0, "&Iota;"], [0, "&Kappa;"], [0, "&Lambda;"], [0, "&Mu;"], [0, "&Nu;"], [0, "&Xi;"], [0, "&Omicron;"], [0, "&Pi;"], [0, "&Rho;"], [1, "&Sigma;"], [0, "&Tau;"], [0, "&Upsilon;"], [0, "&Phi;"], [0, "&Chi;"], [0, "&Psi;"], [0, "&ohm;"], [7, "&alpha;"], [0, "&beta;"], [0, "&gamma;"], [0, "&delta;"], [0, "&epsi;"], [0, "&zeta;"], [0, "&eta;"], [0, "&theta;"], [0, "&iota;"], [0, "&kappa;"], [0, "&lambda;"], [0, "&mu;"], [0, "&nu;"], [0, "&xi;"], [0, "&omicron;"], [0, "&pi;"], [0, "&rho;"], [0, "&sigmaf;"], [0, "&sigma;"], [0, "&tau;"], [0, "&upsi;"], [0, "&phi;"], [0, "&chi;"], [0, "&psi;"], [0, "&omega;"], [7, "&thetasym;"], [0, "&Upsi;"], [2, "&phiv;"], [0, "&piv;"], [5, "&Gammad;"], [0, "&digamma;"], [18, "&kappav;"], [0, "&rhov;"], [3, "&epsiv;"], [0, "&backepsilon;"], [10, "&IOcy;"], [0, "&DJcy;"], [0, "&GJcy;"], [0, "&Jukcy;"], [0, "&DScy;"], [0, "&Iukcy;"], [0, "&YIcy;"], [0, "&Jsercy;"], [0, "&LJcy;"], [0, "&NJcy;"], [0, "&TSHcy;"], [0, "&KJcy;"], [1, "&Ubrcy;"], [0, "&DZcy;"], [0, "&Acy;"], [0, "&Bcy;"], [0, "&Vcy;"], [0, "&Gcy;"], [0, "&Dcy;"], [0, "&IEcy;"], [0, "&ZHcy;"], [0, "&Zcy;"], [0, "&Icy;"], [0, "&Jcy;"], [0, "&Kcy;"], [0, "&Lcy;"], [0, "&Mcy;"], [0, "&Ncy;"], [0, "&Ocy;"], [0, "&Pcy;"], [0, "&Rcy;"], [0, "&Scy;"], [0, "&Tcy;"], [0, "&Ucy;"], [0, "&Fcy;"], [0, "&KHcy;"], [0, "&TScy;"], [0, "&CHcy;"], [0, "&SHcy;"], [0, "&SHCHcy;"], [0, "&HARDcy;"], [0, "&Ycy;"], [0, "&SOFTcy;"], [0, "&Ecy;"], [0, "&YUcy;"], [0, "&YAcy;"], [0, "&acy;"], [0, "&bcy;"], [0, "&vcy;"], [0, "&gcy;"], [0, "&dcy;"], [0, "&iecy;"], [0, "&zhcy;"], [0, "&zcy;"], [0, "&icy;"], [0, "&jcy;"], [0, "&kcy;"], [0, "&lcy;"], [0, "&mcy;"], [0, "&ncy;"], [0, "&ocy;"], [0, "&pcy;"], [0, "&rcy;"], [0, "&scy;"], [0, "&tcy;"], [0, "&ucy;"], [0, "&fcy;"], [0, "&khcy;"], [0, "&tscy;"], [0, "&chcy;"], [0, "&shcy;"], [0, "&shchcy;"], [0, "&hardcy;"], [0, "&ycy;"], [0, "&softcy;"], [0, "&ecy;"], [0, "&yucy;"], [0, "&yacy;"], [1, "&iocy;"], [0, "&djcy;"], [0, "&gjcy;"], [0, "&jukcy;"], [0, "&dscy;"], [0, "&iukcy;"], [0, "&yicy;"], [0, "&jsercy;"], [0, "&ljcy;"], [0, "&njcy;"], [0, "&tshcy;"], [0, "&kjcy;"], [1, "&ubrcy;"], [0, "&dzcy;"], [7074, "&ensp;"], [0, "&emsp;"], [0, "&emsp13;"], [0, "&emsp14;"], [1, "&numsp;"], [0, "&puncsp;"], [0, "&ThinSpace;"], [0, "&hairsp;"], [0, "&NegativeMediumSpace;"], [0, "&zwnj;"], [0, "&zwj;"], [0, "&lrm;"], [0, "&rlm;"], [0, "&dash;"], [2, "&ndash;"], [0, "&mdash;"], [0, "&horbar;"], [0, "&Verbar;"], [1, "&lsquo;"], [0, "&CloseCurlyQuote;"], [0, "&lsquor;"], [1, "&ldquo;"], [0, "&CloseCurlyDoubleQuote;"], [0, "&bdquo;"], [1, "&dagger;"], [0, "&Dagger;"], [0, "&bull;"], [2, "&nldr;"], [0, "&hellip;"], [9, "&permil;"], [0, "&pertenk;"], [0, "&prime;"], [0, "&Prime;"], [0, "&tprime;"], [0, "&backprime;"], [3, "&lsaquo;"], [0, "&rsaquo;"], [3, "&oline;"], [2, "&caret;"], [1, "&hybull;"], [0, "&frasl;"], [10, "&bsemi;"], [7, "&qprime;"], [7, {
  v: "&MediumSpace;",
  n: 8202,
  o: "&ThickSpace;"
}], [0, "&NoBreak;"], [0, "&af;"], [0, "&InvisibleTimes;"], [0, "&ic;"], [72, "&euro;"], [46, "&tdot;"], [0, "&DotDot;"], [37, "&complexes;"], [2, "&incare;"], [4, "&gscr;"], [0, "&hamilt;"], [0, "&Hfr;"], [0, "&Hopf;"], [0, "&planckh;"], [0, "&hbar;"], [0, "&imagline;"], [0, "&Ifr;"], [0, "&lagran;"], [0, "&ell;"], [1, "&naturals;"], [0, "&numero;"], [0, "&copysr;"], [0, "&weierp;"], [0, "&Popf;"], [0, "&Qopf;"], [0, "&realine;"], [0, "&real;"], [0, "&reals;"], [0, "&rx;"], [3, "&trade;"], [1, "&integers;"], [2, "&mho;"], [0, "&zeetrf;"], [0, "&iiota;"], [2, "&bernou;"], [0, "&Cayleys;"], [1, "&escr;"], [0, "&Escr;"], [0, "&Fouriertrf;"], [1, "&Mellintrf;"], [0, "&order;"], [0, "&alefsym;"], [0, "&beth;"], [0, "&gimel;"], [0, "&daleth;"], [12, "&CapitalDifferentialD;"], [0, "&dd;"], [0, "&ee;"], [0, "&ii;"], [10, "&frac13;"], [0, "&frac23;"], [0, "&frac15;"], [0, "&frac25;"], [0, "&frac35;"], [0, "&frac45;"], [0, "&frac16;"], [0, "&frac56;"], [0, "&frac18;"], [0, "&frac38;"], [0, "&frac58;"], [0, "&frac78;"], [49, "&larr;"], [0, "&ShortUpArrow;"], [0, "&rarr;"], [0, "&darr;"], [0, "&harr;"], [0, "&updownarrow;"], [0, "&nwarr;"], [0, "&nearr;"], [0, "&LowerRightArrow;"], [0, "&LowerLeftArrow;"], [0, "&nlarr;"], [0, "&nrarr;"], [1, {
  v: "&rarrw;",
  n: 824,
  o: "&nrarrw;"
}], [0, "&Larr;"], [0, "&Uarr;"], [0, "&Rarr;"], [0, "&Darr;"], [0, "&larrtl;"], [0, "&rarrtl;"], [0, "&LeftTeeArrow;"], [0, "&mapstoup;"], [0, "&map;"], [0, "&DownTeeArrow;"], [1, "&hookleftarrow;"], [0, "&hookrightarrow;"], [0, "&larrlp;"], [0, "&looparrowright;"], [0, "&harrw;"], [0, "&nharr;"], [1, "&lsh;"], [0, "&rsh;"], [0, "&ldsh;"], [0, "&rdsh;"], [1, "&crarr;"], [0, "&cularr;"], [0, "&curarr;"], [2, "&circlearrowleft;"], [0, "&circlearrowright;"], [0, "&leftharpoonup;"], [0, "&DownLeftVector;"], [0, "&RightUpVector;"], [0, "&LeftUpVector;"], [0, "&rharu;"], [0, "&DownRightVector;"], [0, "&dharr;"], [0, "&dharl;"], [0, "&RightArrowLeftArrow;"], [0, "&udarr;"], [0, "&LeftArrowRightArrow;"], [0, "&leftleftarrows;"], [0, "&upuparrows;"], [0, "&rightrightarrows;"], [0, "&ddarr;"], [0, "&leftrightharpoons;"], [0, "&Equilibrium;"], [0, "&nlArr;"], [0, "&nhArr;"], [0, "&nrArr;"], [0, "&DoubleLeftArrow;"], [0, "&DoubleUpArrow;"], [0, "&DoubleRightArrow;"], [0, "&dArr;"], [0, "&DoubleLeftRightArrow;"], [0, "&DoubleUpDownArrow;"], [0, "&nwArr;"], [0, "&neArr;"], [0, "&seArr;"], [0, "&swArr;"], [0, "&lAarr;"], [0, "&rAarr;"], [1, "&zigrarr;"], [6, "&larrb;"], [0, "&rarrb;"], [15, "&DownArrowUpArrow;"], [7, "&loarr;"], [0, "&roarr;"], [0, "&hoarr;"], [0, "&forall;"], [0, "&comp;"], [0, {
  v: "&part;",
  n: 824,
  o: "&npart;"
}], [0, "&exist;"], [0, "&nexist;"], [0, "&empty;"], [1, "&Del;"], [0, "&Element;"], [0, "&NotElement;"], [1, "&ni;"], [0, "&notni;"], [2, "&prod;"], [0, "&coprod;"], [0, "&sum;"], [0, "&minus;"], [0, "&MinusPlus;"], [0, "&dotplus;"], [1, "&Backslash;"], [0, "&lowast;"], [0, "&compfn;"], [1, "&radic;"], [2, "&prop;"], [0, "&infin;"], [0, "&angrt;"], [0, {
  v: "&ang;",
  n: 8402,
  o: "&nang;"
}], [0, "&angmsd;"], [0, "&angsph;"], [0, "&mid;"], [0, "&nmid;"], [0, "&DoubleVerticalBar;"], [0, "&NotDoubleVerticalBar;"], [0, "&and;"], [0, "&or;"], [0, {
  v: "&cap;",
  n: 65024,
  o: "&caps;"
}], [0, {
  v: "&cup;",
  n: 65024,
  o: "&cups;"
}], [0, "&int;"], [0, "&Int;"], [0, "&iiint;"], [0, "&conint;"], [0, "&Conint;"], [0, "&Cconint;"], [0, "&cwint;"], [0, "&ClockwiseContourIntegral;"], [0, "&awconint;"], [0, "&there4;"], [0, "&becaus;"], [0, "&ratio;"], [0, "&Colon;"], [0, "&dotminus;"], [1, "&mDDot;"], [0, "&homtht;"], [0, {
  v: "&sim;",
  n: 8402,
  o: "&nvsim;"
}], [0, {
  v: "&backsim;",
  n: 817,
  o: "&race;"
}], [0, {
  v: "&ac;",
  n: 819,
  o: "&acE;"
}], [0, "&acd;"], [0, "&VerticalTilde;"], [0, "&NotTilde;"], [0, {
  v: "&eqsim;",
  n: 824,
  o: "&nesim;"
}], [0, "&sime;"], [0, "&NotTildeEqual;"], [0, "&cong;"], [0, "&simne;"], [0, "&ncong;"], [0, "&ap;"], [0, "&nap;"], [0, "&ape;"], [0, {
  v: "&apid;",
  n: 824,
  o: "&napid;"
}], [0, "&backcong;"], [0, {
  v: "&asympeq;",
  n: 8402,
  o: "&nvap;"
}], [0, {
  v: "&bump;",
  n: 824,
  o: "&nbump;"
}], [0, {
  v: "&bumpe;",
  n: 824,
  o: "&nbumpe;"
}], [0, {
  v: "&doteq;",
  n: 824,
  o: "&nedot;"
}], [0, "&doteqdot;"], [0, "&efDot;"], [0, "&erDot;"], [0, "&Assign;"], [0, "&ecolon;"], [0, "&ecir;"], [0, "&circeq;"], [1, "&wedgeq;"], [0, "&veeeq;"], [1, "&triangleq;"], [2, "&equest;"], [0, "&ne;"], [0, {
  v: "&Congruent;",
  n: 8421,
  o: "&bnequiv;"
}], [0, "&nequiv;"], [1, {
  v: "&le;",
  n: 8402,
  o: "&nvle;"
}], [0, {
  v: "&ge;",
  n: 8402,
  o: "&nvge;"
}], [0, {
  v: "&lE;",
  n: 824,
  o: "&nlE;"
}], [0, {
  v: "&gE;",
  n: 824,
  o: "&ngE;"
}], [0, {
  v: "&lnE;",
  n: 65024,
  o: "&lvertneqq;"
}], [0, {
  v: "&gnE;",
  n: 65024,
  o: "&gvertneqq;"
}], [0, {
  v: "&ll;",
  n: new Map( /* #__PURE__ */restoreDiff([[824, "&nLtv;"], [7577, "&nLt;"]]))
}], [0, {
  v: "&gg;",
  n: new Map( /* #__PURE__ */restoreDiff([[824, "&nGtv;"], [7577, "&nGt;"]]))
}], [0, "&between;"], [0, "&NotCupCap;"], [0, "&nless;"], [0, "&ngt;"], [0, "&nle;"], [0, "&nge;"], [0, "&lesssim;"], [0, "&GreaterTilde;"], [0, "&nlsim;"], [0, "&ngsim;"], [0, "&LessGreater;"], [0, "&gl;"], [0, "&NotLessGreater;"], [0, "&NotGreaterLess;"], [0, "&pr;"], [0, "&sc;"], [0, "&prcue;"], [0, "&sccue;"], [0, "&PrecedesTilde;"], [0, {
  v: "&scsim;",
  n: 824,
  o: "&NotSucceedsTilde;"
}], [0, "&NotPrecedes;"], [0, "&NotSucceeds;"], [0, {
  v: "&sub;",
  n: 8402,
  o: "&NotSubset;"
}], [0, {
  v: "&sup;",
  n: 8402,
  o: "&NotSuperset;"
}], [0, "&nsub;"], [0, "&nsup;"], [0, "&sube;"], [0, "&supe;"], [0, "&NotSubsetEqual;"], [0, "&NotSupersetEqual;"], [0, {
  v: "&subne;",
  n: 65024,
  o: "&varsubsetneq;"
}], [0, {
  v: "&supne;",
  n: 65024,
  o: "&varsupsetneq;"
}], [1, "&cupdot;"], [0, "&UnionPlus;"], [0, {
  v: "&sqsub;",
  n: 824,
  o: "&NotSquareSubset;"
}], [0, {
  v: "&sqsup;",
  n: 824,
  o: "&NotSquareSuperset;"
}], [0, "&sqsube;"], [0, "&sqsupe;"], [0, {
  v: "&sqcap;",
  n: 65024,
  o: "&sqcaps;"
}], [0, {
  v: "&sqcup;",
  n: 65024,
  o: "&sqcups;"
}], [0, "&CirclePlus;"], [0, "&CircleMinus;"], [0, "&CircleTimes;"], [0, "&osol;"], [0, "&CircleDot;"], [0, "&circledcirc;"], [0, "&circledast;"], [1, "&circleddash;"], [0, "&boxplus;"], [0, "&boxminus;"], [0, "&boxtimes;"], [0, "&dotsquare;"], [0, "&RightTee;"], [0, "&dashv;"], [0, "&DownTee;"], [0, "&bot;"], [1, "&models;"], [0, "&DoubleRightTee;"], [0, "&Vdash;"], [0, "&Vvdash;"], [0, "&VDash;"], [0, "&nvdash;"], [0, "&nvDash;"], [0, "&nVdash;"], [0, "&nVDash;"], [0, "&prurel;"], [1, "&LeftTriangle;"], [0, "&RightTriangle;"], [0, {
  v: "&LeftTriangleEqual;",
  n: 8402,
  o: "&nvltrie;"
}], [0, {
  v: "&RightTriangleEqual;",
  n: 8402,
  o: "&nvrtrie;"
}], [0, "&origof;"], [0, "&imof;"], [0, "&multimap;"], [0, "&hercon;"], [0, "&intcal;"], [0, "&veebar;"], [1, "&barvee;"], [0, "&angrtvb;"], [0, "&lrtri;"], [0, "&bigwedge;"], [0, "&bigvee;"], [0, "&bigcap;"], [0, "&bigcup;"], [0, "&diam;"], [0, "&sdot;"], [0, "&sstarf;"], [0, "&divideontimes;"], [0, "&bowtie;"], [0, "&ltimes;"], [0, "&rtimes;"], [0, "&leftthreetimes;"], [0, "&rightthreetimes;"], [0, "&backsimeq;"], [0, "&curlyvee;"], [0, "&curlywedge;"], [0, "&Sub;"], [0, "&Sup;"], [0, "&Cap;"], [0, "&Cup;"], [0, "&fork;"], [0, "&epar;"], [0, "&lessdot;"], [0, "&gtdot;"], [0, {
  v: "&Ll;",
  n: 824,
  o: "&nLl;"
}], [0, {
  v: "&Gg;",
  n: 824,
  o: "&nGg;"
}], [0, {
  v: "&leg;",
  n: 65024,
  o: "&lesg;"
}], [0, {
  v: "&gel;",
  n: 65024,
  o: "&gesl;"
}], [2, "&cuepr;"], [0, "&cuesc;"], [0, "&NotPrecedesSlantEqual;"], [0, "&NotSucceedsSlantEqual;"], [0, "&NotSquareSubsetEqual;"], [0, "&NotSquareSupersetEqual;"], [2, "&lnsim;"], [0, "&gnsim;"], [0, "&precnsim;"], [0, "&scnsim;"], [0, "&nltri;"], [0, "&NotRightTriangle;"], [0, "&nltrie;"], [0, "&NotRightTriangleEqual;"], [0, "&vellip;"], [0, "&ctdot;"], [0, "&utdot;"], [0, "&dtdot;"], [0, "&disin;"], [0, "&isinsv;"], [0, "&isins;"], [0, {
  v: "&isindot;",
  n: 824,
  o: "&notindot;"
}], [0, "&notinvc;"], [0, "&notinvb;"], [1, {
  v: "&isinE;",
  n: 824,
  o: "&notinE;"
}], [0, "&nisd;"], [0, "&xnis;"], [0, "&nis;"], [0, "&notnivc;"], [0, "&notnivb;"], [6, "&barwed;"], [0, "&Barwed;"], [1, "&lceil;"], [0, "&rceil;"], [0, "&LeftFloor;"], [0, "&rfloor;"], [0, "&drcrop;"], [0, "&dlcrop;"], [0, "&urcrop;"], [0, "&ulcrop;"], [0, "&bnot;"], [1, "&profline;"], [0, "&profsurf;"], [1, "&telrec;"], [0, "&target;"], [5, "&ulcorn;"], [0, "&urcorn;"], [0, "&dlcorn;"], [0, "&drcorn;"], [2, "&frown;"], [0, "&smile;"], [9, "&cylcty;"], [0, "&profalar;"], [7, "&topbot;"], [6, "&ovbar;"], [1, "&solbar;"], [60, "&angzarr;"], [51, "&lmoustache;"], [0, "&rmoustache;"], [2, "&OverBracket;"], [0, "&bbrk;"], [0, "&bbrktbrk;"], [37, "&OverParenthesis;"], [0, "&UnderParenthesis;"], [0, "&OverBrace;"], [0, "&UnderBrace;"], [2, "&trpezium;"], [4, "&elinters;"], [59, "&blank;"], [164, "&circledS;"], [55, "&boxh;"], [1, "&boxv;"], [9, "&boxdr;"], [3, "&boxdl;"], [3, "&boxur;"], [3, "&boxul;"], [3, "&boxvr;"], [7, "&boxvl;"], [7, "&boxhd;"], [7, "&boxhu;"], [7, "&boxvh;"], [19, "&boxH;"], [0, "&boxV;"], [0, "&boxdR;"], [0, "&boxDr;"], [0, "&boxDR;"], [0, "&boxdL;"], [0, "&boxDl;"], [0, "&boxDL;"], [0, "&boxuR;"], [0, "&boxUr;"], [0, "&boxUR;"], [0, "&boxuL;"], [0, "&boxUl;"], [0, "&boxUL;"], [0, "&boxvR;"], [0, "&boxVr;"], [0, "&boxVR;"], [0, "&boxvL;"], [0, "&boxVl;"], [0, "&boxVL;"], [0, "&boxHd;"], [0, "&boxhD;"], [0, "&boxHD;"], [0, "&boxHu;"], [0, "&boxhU;"], [0, "&boxHU;"], [0, "&boxvH;"], [0, "&boxVh;"], [0, "&boxVH;"], [19, "&uhblk;"], [3, "&lhblk;"], [3, "&block;"], [8, "&blk14;"], [0, "&blk12;"], [0, "&blk34;"], [13, "&square;"], [8, "&blacksquare;"], [0, "&EmptyVerySmallSquare;"], [1, "&rect;"], [0, "&marker;"], [2, "&fltns;"], [1, "&bigtriangleup;"], [0, "&blacktriangle;"], [0, "&triangle;"], [2, "&blacktriangleright;"], [0, "&rtri;"], [3, "&bigtriangledown;"], [0, "&blacktriangledown;"], [0, "&dtri;"], [2, "&blacktriangleleft;"], [0, "&ltri;"], [6, "&loz;"], [0, "&cir;"], [32, "&tridot;"], [2, "&bigcirc;"], [8, "&ultri;"], [0, "&urtri;"], [0, "&lltri;"], [0, "&EmptySmallSquare;"], [0, "&FilledSmallSquare;"], [8, "&bigstar;"], [0, "&star;"], [7, "&phone;"], [49, "&female;"], [1, "&male;"], [29, "&spades;"], [2, "&clubs;"], [1, "&hearts;"], [0, "&diamondsuit;"], [3, "&sung;"], [2, "&flat;"], [0, "&natural;"], [0, "&sharp;"], [163, "&check;"], [3, "&cross;"], [8, "&malt;"], [21, "&sext;"], [33, "&VerticalSeparator;"], [25, "&lbbrk;"], [0, "&rbbrk;"], [84, "&bsolhsub;"], [0, "&suphsol;"], [28, "&LeftDoubleBracket;"], [0, "&RightDoubleBracket;"], [0, "&lang;"], [0, "&rang;"], [0, "&Lang;"], [0, "&Rang;"], [0, "&loang;"], [0, "&roang;"], [7, "&longleftarrow;"], [0, "&longrightarrow;"], [0, "&longleftrightarrow;"], [0, "&DoubleLongLeftArrow;"], [0, "&DoubleLongRightArrow;"], [0, "&DoubleLongLeftRightArrow;"], [1, "&longmapsto;"], [2, "&dzigrarr;"], [258, "&nvlArr;"], [0, "&nvrArr;"], [0, "&nvHarr;"], [0, "&Map;"], [6, "&lbarr;"], [0, "&bkarow;"], [0, "&lBarr;"], [0, "&dbkarow;"], [0, "&drbkarow;"], [0, "&DDotrahd;"], [0, "&UpArrowBar;"], [0, "&DownArrowBar;"], [2, "&Rarrtl;"], [2, "&latail;"], [0, "&ratail;"], [0, "&lAtail;"], [0, "&rAtail;"], [0, "&larrfs;"], [0, "&rarrfs;"], [0, "&larrbfs;"], [0, "&rarrbfs;"], [2, "&nwarhk;"], [0, "&nearhk;"], [0, "&hksearow;"], [0, "&hkswarow;"], [0, "&nwnear;"], [0, "&nesear;"], [0, "&seswar;"], [0, "&swnwar;"], [8, {
  v: "&rarrc;",
  n: 824,
  o: "&nrarrc;"
}], [1, "&cudarrr;"], [0, "&ldca;"], [0, "&rdca;"], [0, "&cudarrl;"], [0, "&larrpl;"], [2, "&curarrm;"], [0, "&cularrp;"], [7, "&rarrpl;"], [2, "&harrcir;"], [0, "&Uarrocir;"], [0, "&lurdshar;"], [0, "&ldrushar;"], [2, "&LeftRightVector;"], [0, "&RightUpDownVector;"], [0, "&DownLeftRightVector;"], [0, "&LeftUpDownVector;"], [0, "&LeftVectorBar;"], [0, "&RightVectorBar;"], [0, "&RightUpVectorBar;"], [0, "&RightDownVectorBar;"], [0, "&DownLeftVectorBar;"], [0, "&DownRightVectorBar;"], [0, "&LeftUpVectorBar;"], [0, "&LeftDownVectorBar;"], [0, "&LeftTeeVector;"], [0, "&RightTeeVector;"], [0, "&RightUpTeeVector;"], [0, "&RightDownTeeVector;"], [0, "&DownLeftTeeVector;"], [0, "&DownRightTeeVector;"], [0, "&LeftUpTeeVector;"], [0, "&LeftDownTeeVector;"], [0, "&lHar;"], [0, "&uHar;"], [0, "&rHar;"], [0, "&dHar;"], [0, "&luruhar;"], [0, "&ldrdhar;"], [0, "&ruluhar;"], [0, "&rdldhar;"], [0, "&lharul;"], [0, "&llhard;"], [0, "&rharul;"], [0, "&lrhard;"], [0, "&udhar;"], [0, "&duhar;"], [0, "&RoundImplies;"], [0, "&erarr;"], [0, "&simrarr;"], [0, "&larrsim;"], [0, "&rarrsim;"], [0, "&rarrap;"], [0, "&ltlarr;"], [1, "&gtrarr;"], [0, "&subrarr;"], [1, "&suplarr;"], [0, "&lfisht;"], [0, "&rfisht;"], [0, "&ufisht;"], [0, "&dfisht;"], [5, "&lopar;"], [0, "&ropar;"], [4, "&lbrke;"], [0, "&rbrke;"], [0, "&lbrkslu;"], [0, "&rbrksld;"], [0, "&lbrksld;"], [0, "&rbrkslu;"], [0, "&langd;"], [0, "&rangd;"], [0, "&lparlt;"], [0, "&rpargt;"], [0, "&gtlPar;"], [0, "&ltrPar;"], [3, "&vzigzag;"], [1, "&vangrt;"], [0, "&angrtvbd;"], [6, "&ange;"], [0, "&range;"], [0, "&dwangle;"], [0, "&uwangle;"], [0, "&angmsdaa;"], [0, "&angmsdab;"], [0, "&angmsdac;"], [0, "&angmsdad;"], [0, "&angmsdae;"], [0, "&angmsdaf;"], [0, "&angmsdag;"], [0, "&angmsdah;"], [0, "&bemptyv;"], [0, "&demptyv;"], [0, "&cemptyv;"], [0, "&raemptyv;"], [0, "&laemptyv;"], [0, "&ohbar;"], [0, "&omid;"], [0, "&opar;"], [1, "&operp;"], [1, "&olcross;"], [0, "&odsold;"], [1, "&olcir;"], [0, "&ofcir;"], [0, "&olt;"], [0, "&ogt;"], [0, "&cirscir;"], [0, "&cirE;"], [0, "&solb;"], [0, "&bsolb;"], [3, "&boxbox;"], [3, "&trisb;"], [0, "&rtriltri;"], [0, {
  v: "&LeftTriangleBar;",
  n: 824,
  o: "&NotLeftTriangleBar;"
}], [0, {
  v: "&RightTriangleBar;",
  n: 824,
  o: "&NotRightTriangleBar;"
}], [11, "&iinfin;"], [0, "&infintie;"], [0, "&nvinfin;"], [4, "&eparsl;"], [0, "&smeparsl;"], [0, "&eqvparsl;"], [5, "&blacklozenge;"], [8, "&RuleDelayed;"], [1, "&dsol;"], [9, "&bigodot;"], [0, "&bigoplus;"], [0, "&bigotimes;"], [1, "&biguplus;"], [1, "&bigsqcup;"], [5, "&iiiint;"], [0, "&fpartint;"], [2, "&cirfnint;"], [0, "&awint;"], [0, "&rppolint;"], [0, "&scpolint;"], [0, "&npolint;"], [0, "&pointint;"], [0, "&quatint;"], [0, "&intlarhk;"], [10, "&pluscir;"], [0, "&plusacir;"], [0, "&simplus;"], [0, "&plusdu;"], [0, "&plussim;"], [0, "&plustwo;"], [1, "&mcomma;"], [0, "&minusdu;"], [2, "&loplus;"], [0, "&roplus;"], [0, "&Cross;"], [0, "&timesd;"], [0, "&timesbar;"], [1, "&smashp;"], [0, "&lotimes;"], [0, "&rotimes;"], [0, "&otimesas;"], [0, "&Otimes;"], [0, "&odiv;"], [0, "&triplus;"], [0, "&triminus;"], [0, "&tritime;"], [0, "&intprod;"], [2, "&amalg;"], [0, "&capdot;"], [1, "&ncup;"], [0, "&ncap;"], [0, "&capand;"], [0, "&cupor;"], [0, "&cupcap;"], [0, "&capcup;"], [0, "&cupbrcap;"], [0, "&capbrcup;"], [0, "&cupcup;"], [0, "&capcap;"], [0, "&ccups;"], [0, "&ccaps;"], [2, "&ccupssm;"], [2, "&And;"], [0, "&Or;"], [0, "&andand;"], [0, "&oror;"], [0, "&orslope;"], [0, "&andslope;"], [1, "&andv;"], [0, "&orv;"], [0, "&andd;"], [0, "&ord;"], [1, "&wedbar;"], [6, "&sdote;"], [3, "&simdot;"], [2, {
  v: "&congdot;",
  n: 824,
  o: "&ncongdot;"
}], [0, "&easter;"], [0, "&apacir;"], [0, {
  v: "&apE;",
  n: 824,
  o: "&napE;"
}], [0, "&eplus;"], [0, "&pluse;"], [0, "&Esim;"], [0, "&Colone;"], [0, "&Equal;"], [1, "&ddotseq;"], [0, "&equivDD;"], [0, "&ltcir;"], [0, "&gtcir;"], [0, "&ltquest;"], [0, "&gtquest;"], [0, {
  v: "&leqslant;",
  n: 824,
  o: "&nleqslant;"
}], [0, {
  v: "&geqslant;",
  n: 824,
  o: "&ngeqslant;"
}], [0, "&lesdot;"], [0, "&gesdot;"], [0, "&lesdoto;"], [0, "&gesdoto;"], [0, "&lesdotor;"], [0, "&gesdotol;"], [0, "&lap;"], [0, "&gap;"], [0, "&lne;"], [0, "&gne;"], [0, "&lnap;"], [0, "&gnap;"], [0, "&lEg;"], [0, "&gEl;"], [0, "&lsime;"], [0, "&gsime;"], [0, "&lsimg;"], [0, "&gsiml;"], [0, "&lgE;"], [0, "&glE;"], [0, "&lesges;"], [0, "&gesles;"], [0, "&els;"], [0, "&egs;"], [0, "&elsdot;"], [0, "&egsdot;"], [0, "&el;"], [0, "&eg;"], [2, "&siml;"], [0, "&simg;"], [0, "&simlE;"], [0, "&simgE;"], [0, {
  v: "&LessLess;",
  n: 824,
  o: "&NotNestedLessLess;"
}], [0, {
  v: "&GreaterGreater;",
  n: 824,
  o: "&NotNestedGreaterGreater;"
}], [1, "&glj;"], [0, "&gla;"], [0, "&ltcc;"], [0, "&gtcc;"], [0, "&lescc;"], [0, "&gescc;"], [0, "&smt;"], [0, "&lat;"], [0, {
  v: "&smte;",
  n: 65024,
  o: "&smtes;"
}], [0, {
  v: "&late;",
  n: 65024,
  o: "&lates;"
}], [0, "&bumpE;"], [0, {
  v: "&PrecedesEqual;",
  n: 824,
  o: "&NotPrecedesEqual;"
}], [0, {
  v: "&sce;",
  n: 824,
  o: "&NotSucceedsEqual;"
}], [2, "&prE;"], [0, "&scE;"], [0, "&precneqq;"], [0, "&scnE;"], [0, "&prap;"], [0, "&scap;"], [0, "&precnapprox;"], [0, "&scnap;"], [0, "&Pr;"], [0, "&Sc;"], [0, "&subdot;"], [0, "&supdot;"], [0, "&subplus;"], [0, "&supplus;"], [0, "&submult;"], [0, "&supmult;"], [0, "&subedot;"], [0, "&supedot;"], [0, {
  v: "&subE;",
  n: 824,
  o: "&nsubE;"
}], [0, {
  v: "&supE;",
  n: 824,
  o: "&nsupE;"
}], [0, "&subsim;"], [0, "&supsim;"], [2, {
  v: "&subnE;",
  n: 65024,
  o: "&varsubsetneqq;"
}], [0, {
  v: "&supnE;",
  n: 65024,
  o: "&varsupsetneqq;"
}], [2, "&csub;"], [0, "&csup;"], [0, "&csube;"], [0, "&csupe;"], [0, "&subsup;"], [0, "&supsub;"], [0, "&subsub;"], [0, "&supsup;"], [0, "&suphsub;"], [0, "&supdsub;"], [0, "&forkv;"], [0, "&topfork;"], [0, "&mlcp;"], [8, "&Dashv;"], [1, "&Vdashl;"], [0, "&Barv;"], [0, "&vBar;"], [0, "&vBarv;"], [1, "&Vbar;"], [0, "&Not;"], [0, "&bNot;"], [0, "&rnmid;"], [0, "&cirmid;"], [0, "&midcir;"], [0, "&topcir;"], [0, "&nhpar;"], [0, "&parsim;"], [9, {
  v: "&parsl;",
  n: 8421,
  o: "&nparsl;"
}], [44343, {
  n: new Map( /* #__PURE__ */restoreDiff([[56476, "&Ascr;"], [1, "&Cscr;"], [0, "&Dscr;"], [2, "&Gscr;"], [2, "&Jscr;"], [0, "&Kscr;"], [2, "&Nscr;"], [0, "&Oscr;"], [0, "&Pscr;"], [0, "&Qscr;"], [1, "&Sscr;"], [0, "&Tscr;"], [0, "&Uscr;"], [0, "&Vscr;"], [0, "&Wscr;"], [0, "&Xscr;"], [0, "&Yscr;"], [0, "&Zscr;"], [0, "&ascr;"], [0, "&bscr;"], [0, "&cscr;"], [0, "&dscr;"], [1, "&fscr;"], [1, "&hscr;"], [0, "&iscr;"], [0, "&jscr;"], [0, "&kscr;"], [0, "&lscr;"], [0, "&mscr;"], [0, "&nscr;"], [1, "&pscr;"], [0, "&qscr;"], [0, "&rscr;"], [0, "&sscr;"], [0, "&tscr;"], [0, "&uscr;"], [0, "&vscr;"], [0, "&wscr;"], [0, "&xscr;"], [0, "&yscr;"], [0, "&zscr;"], [52, "&Afr;"], [0, "&Bfr;"], [1, "&Dfr;"], [0, "&Efr;"], [0, "&Ffr;"], [0, "&Gfr;"], [2, "&Jfr;"], [0, "&Kfr;"], [0, "&Lfr;"], [0, "&Mfr;"], [0, "&Nfr;"], [0, "&Ofr;"], [0, "&Pfr;"], [0, "&Qfr;"], [1, "&Sfr;"], [0, "&Tfr;"], [0, "&Ufr;"], [0, "&Vfr;"], [0, "&Wfr;"], [0, "&Xfr;"], [0, "&Yfr;"], [1, "&afr;"], [0, "&bfr;"], [0, "&cfr;"], [0, "&dfr;"], [0, "&efr;"], [0, "&ffr;"], [0, "&gfr;"], [0, "&hfr;"], [0, "&ifr;"], [0, "&jfr;"], [0, "&kfr;"], [0, "&lfr;"], [0, "&mfr;"], [0, "&nfr;"], [0, "&ofr;"], [0, "&pfr;"], [0, "&qfr;"], [0, "&rfr;"], [0, "&sfr;"], [0, "&tfr;"], [0, "&ufr;"], [0, "&vfr;"], [0, "&wfr;"], [0, "&xfr;"], [0, "&yfr;"], [0, "&zfr;"], [0, "&Aopf;"], [0, "&Bopf;"], [1, "&Dopf;"], [0, "&Eopf;"], [0, "&Fopf;"], [0, "&Gopf;"], [1, "&Iopf;"], [0, "&Jopf;"], [0, "&Kopf;"], [0, "&Lopf;"], [0, "&Mopf;"], [1, "&Oopf;"], [3, "&Sopf;"], [0, "&Topf;"], [0, "&Uopf;"], [0, "&Vopf;"], [0, "&Wopf;"], [0, "&Xopf;"], [0, "&Yopf;"], [1, "&aopf;"], [0, "&bopf;"], [0, "&copf;"], [0, "&dopf;"], [0, "&eopf;"], [0, "&fopf;"], [0, "&gopf;"], [0, "&hopf;"], [0, "&iopf;"], [0, "&jopf;"], [0, "&kopf;"], [0, "&lopf;"], [0, "&mopf;"], [0, "&nopf;"], [0, "&oopf;"], [0, "&popf;"], [0, "&qopf;"], [0, "&ropf;"], [0, "&sopf;"], [0, "&topf;"], [0, "&uopf;"], [0, "&vopf;"], [0, "&wopf;"], [0, "&xopf;"], [0, "&yopf;"], [0, "&zopf;"]]))
}], [8906, "&fflig;"], [0, "&filig;"], [0, "&fllig;"], [0, "&ffilig;"], [0, "&ffllig;"]])));
//# sourceMappingURL=encode-html.js.map
;// CONCATENATED MODULE: ./node_modules/entities/lib/esm/escape.js
const escape_xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
const xmlCodeMap = new Map([[34, "&quot;"], [38, "&amp;"], [39, "&apos;"], [60, "&lt;"], [62, "&gt;"]]);
// For compatibility with node < 4, we wrap `codePointAt`
const escape_getCodePoint =
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
String.prototype.codePointAt != null ? (str, index) => str.codePointAt(index) :
// http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
(c, index) => (c.charCodeAt(index) & 0xfc00) === 0xd800 ? (c.charCodeAt(index) - 0xd800) * 0x400 + c.charCodeAt(index + 1) - 0xdc00 + 0x10000 : c.charCodeAt(index);
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using XML entities.
 *
 * If a character has no equivalent entity, a
 * numeric hexadecimal reference (eg. `&#xfc;`) will be used.
 */
function escape_encodeXML(str) {
  let ret = "";
  let lastIdx = 0;
  let match;
  while ((match = escape_xmlReplacer.exec(str)) !== null) {
    const i = match.index;
    const char = str.charCodeAt(i);
    const next = xmlCodeMap.get(char);
    if (next !== undefined) {
      ret += str.substring(lastIdx, i) + next;
      lastIdx = i + 1;
    } else {
      ret += `${str.substring(lastIdx, i)}&#x${escape_getCodePoint(str, i).toString(16)};`;
      // Increase by 1 if we have a surrogate pair
      lastIdx = escape_xmlReplacer.lastIndex += Number((char & 0xfc00) === 0xd800);
    }
  }
  return ret + str.substr(lastIdx);
}
/**
 * Encodes all non-ASCII characters, as well as characters not valid in XML
 * documents using numeric hexadecimal reference (eg. `&#xfc;`).
 *
 * Have a look at `escapeUTF8` if you want a more concise output at the expense
 * of reduced transportability.
 *
 * @param data String to escape.
 */
const escape_escape = (/* unused pure expression or super */ null && (escape_encodeXML));
/**
 * Creates a function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 *
 * @param regex Regular expression to match characters to escape.
 * @param map Map of characters to escape to their entities.
 *
 * @returns Function that escapes all characters matched by the given regular
 * expression using the given map of characters to escape to their entities.
 */
function getEscaper(regex, map) {
  return function escape(data) {
    let match;
    let lastIdx = 0;
    let result = "";
    while (match = regex.exec(data)) {
      if (lastIdx !== match.index) {
        result += data.substring(lastIdx, match.index);
      }
      // We know that this character will be in the map.
      result += map.get(match[0].charCodeAt(0));
      // Every match will be of length 1
      lastIdx = match.index + 1;
    }
    return result + data.substring(lastIdx);
  };
}
/**
 * Encodes all characters not valid in XML documents using XML entities.
 *
 * Note that the output will be character-set dependent.
 *
 * @param data String to escape.
 */
const escape_escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
/**
 * Encodes all characters that have to be escaped in HTML attributes,
 * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
 *
 * @param data String to escape.
 */
const escape_escapeAttribute = getEscaper(/["&\u00A0]/g, new Map([[34, "&quot;"], [38, "&amp;"], [160, "&nbsp;"]]));
/**
 * Encodes all characters that have to be escaped in HTML text,
 * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
 *
 * @param data String to escape.
 */
const escape_escapeText = getEscaper(/[&<>\u00A0]/g, new Map([[38, "&amp;"], [60, "&lt;"], [62, "&gt;"], [160, "&nbsp;"]]));
//# sourceMappingURL=escape.js.map
;// CONCATENATED MODULE: ./node_modules/entities/lib/esm/encode.js


const htmlReplacer = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
/**
 * Encodes all characters in the input using HTML entities. This includes
 * characters that are valid ASCII characters in HTML documents, such as `#`.
 *
 * To get a more compact output, consider using the `encodeNonAsciiHTML`
 * function, which will only encode characters that are not valid in HTML
 * documents, as well as non-ASCII characters.
 *
 * If a character has no equivalent entity, a numeric hexadecimal reference
 * (eg. `&#xfc;`) will be used.
 */
function encode_encodeHTML(data) {
  return encodeHTMLTrieRe(htmlReplacer, data);
}
/**
 * Encodes all non-ASCII characters, as well as characters not valid in HTML
 * documents using HTML entities. This function will not encode characters that
 * are valid in HTML documents, such as `#`.
 *
 * If a character has no equivalent entity, a numeric hexadecimal reference
 * (eg. `&#xfc;`) will be used.
 */
function encode_encodeNonAsciiHTML(data) {
  return encodeHTMLTrieRe(xmlReplacer, data);
}
function encodeHTMLTrieRe(regExp, str) {
  let ret = "";
  let lastIdx = 0;
  let match;
  while ((match = regExp.exec(str)) !== null) {
    const i = match.index;
    ret += str.substring(lastIdx, i);
    const char = str.charCodeAt(i);
    let next = htmlTrie.get(char);
    if (typeof next === "object") {
      // We are in a branch. Try to match the next char.
      if (i + 1 < str.length) {
        const nextChar = str.charCodeAt(i + 1);
        const value = typeof next.n === "number" ? next.n === nextChar ? next.o : undefined : next.n.get(nextChar);
        if (value !== undefined) {
          ret += value;
          lastIdx = regExp.lastIndex += 1;
          continue;
        }
      }
      next = next.v;
    }
    // We might have a tree node without a value; skip and use a numeric entity.
    if (next !== undefined) {
      ret += next;
      lastIdx = i + 1;
    } else {
      const cp = getCodePoint(str, i);
      ret += `&#x${cp.toString(16)};`;
      // Increase by 1 if we have a surrogate pair
      lastIdx = regExp.lastIndex += Number(cp !== char);
    }
  }
  return ret + str.substr(lastIdx);
}
//# sourceMappingURL=encode.js.map
;// CONCATENATED MODULE: ./node_modules/entities/lib/esm/index.js



/** The level of entities to support. */
var EntityLevel = /*#__PURE__*/function (EntityLevel) {
  /** Support only XML entities. */
  EntityLevel[EntityLevel["XML"] = 0] = "XML";
  /** Support HTML entities, which are a superset of XML entities. */
  EntityLevel[EntityLevel["HTML"] = 1] = "HTML";
  return EntityLevel;
}(EntityLevel || {});
var EncodingMode = /*#__PURE__*/function (EncodingMode) {
  /**
   * The output is UTF-8 encoded. Only characters that need escaping within
   * XML will be escaped.
   */
  EncodingMode[EncodingMode["UTF8"] = 0] = "UTF8";
  /**
   * The output consists only of ASCII characters. Characters that need
   * escaping within HTML, and characters that aren't ASCII characters will
   * be escaped.
   */
  EncodingMode[EncodingMode["ASCII"] = 1] = "ASCII";
  /**
   * Encode all characters that have an equivalent entity, as well as all
   * characters that are not ASCII characters.
   */
  EncodingMode[EncodingMode["Extensive"] = 2] = "Extensive";
  /**
   * Encode all characters that have to be escaped in HTML attributes,
   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
   */
  EncodingMode[EncodingMode["Attribute"] = 3] = "Attribute";
  /**
   * Encode all characters that have to be escaped in HTML text,
   * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.
   */
  EncodingMode[EncodingMode["Text"] = 4] = "Text";
  return EncodingMode;
}(EncodingMode || {});
/**
 * Decodes a string with entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 */
function esm_decode(data, options = EntityLevel.XML) {
  const level = typeof options === "number" ? options : options.level;
  if (level === EntityLevel.HTML) {
    const mode = typeof options === "object" ? options.mode : undefined;
    return decodeHTML(data, mode);
  }
  return decodeXML(data);
}
/**
 * Decodes a string with entities. Does not allow missing trailing semicolons for entities.
 *
 * @param data String to decode.
 * @param options Decoding options.
 * @deprecated Use `decode` with the `mode` set to `Strict`.
 */
function decodeStrict(data, options = EntityLevel.XML) {
  var _a;
  const opts = typeof options === "number" ? {
    level: options
  } : options;
  (_a = opts.mode) !== null && _a !== void 0 ? _a : opts.mode = DecodingMode.Strict;
  return esm_decode(data, opts);
}
/**
 * Encodes a string with entities.
 *
 * @param data String to encode.
 * @param options Encoding options.
 */
function esm_encode(data, options = EntityLevel.XML) {
  const opts = typeof options === "number" ? {
    level: options
  } : options;
  // Mode `UTF8` just escapes XML entities
  if (opts.mode === EncodingMode.UTF8) return escapeUTF8(data);
  if (opts.mode === EncodingMode.Attribute) return escapeAttribute(data);
  if (opts.mode === EncodingMode.Text) return escapeText(data);
  if (opts.level === EntityLevel.HTML) {
    if (opts.mode === EncodingMode.ASCII) {
      return encodeNonAsciiHTML(data);
    }
    return encodeHTML(data);
  }
  // ASCII and Extensive are equivalent
  return encodeXML(data);
}



//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/common/utils.mjs
// Utilities
//




function _class(obj) {
  return Object.prototype.toString.call(obj);
}
function isString(obj) {
  return _class(obj) === '[object String]';
}
const _hasOwnProperty = Object.prototype.hasOwnProperty;
function has(object, key) {
  return _hasOwnProperty.call(object, key);
}

// Merge objects
//
function utils_assign(obj /* from1, from2, from3, ... */) {
  const sources = Array.prototype.slice.call(arguments, 1);
  sources.forEach(function (source) {
    if (!source) {
      return;
    }
    if (typeof source !== 'object') {
      throw new TypeError(source + 'must be object');
    }
    Object.keys(source).forEach(function (key) {
      obj[key] = source[key];
    });
  });
  return obj;
}

// Remove element from array and put another array at those position.
// Useful for some operations with tokens
function arrayReplaceAt(src, pos, newElements) {
  return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
}
function isValidEntityCode(c) {
  /* eslint no-bitwise:0 */
  // broken sequence
  if (c >= 0xD800 && c <= 0xDFFF) {
    return false;
  }
  // never used
  if (c >= 0xFDD0 && c <= 0xFDEF) {
    return false;
  }
  if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) {
    return false;
  }
  // control codes
  if (c >= 0x00 && c <= 0x08) {
    return false;
  }
  if (c === 0x0B) {
    return false;
  }
  if (c >= 0x0E && c <= 0x1F) {
    return false;
  }
  if (c >= 0x7F && c <= 0x9F) {
    return false;
  }
  // out of range
  if (c > 0x10FFFF) {
    return false;
  }
  return true;
}
function utils_fromCodePoint(c) {
  /* eslint no-bitwise:0 */
  if (c > 0xffff) {
    c -= 0x10000;
    const surrogate1 = 0xd800 + (c >> 10);
    const surrogate2 = 0xdc00 + (c & 0x3ff);
    return String.fromCharCode(surrogate1, surrogate2);
  }
  return String.fromCharCode(c);
}
const UNESCAPE_MD_RE = /\\([!"#$%&'()*+,\-./:;<=>?@[\\\]^_`{|}~])/g;
const ENTITY_RE = /&([a-z#][a-z0-9]{1,31});/gi;
const UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');
const DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))$/i;
function replaceEntityPattern(match, name) {
  if (name.charCodeAt(0) === 0x23 /* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
    const code = name[1].toLowerCase() === 'x' ? parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
    if (isValidEntityCode(code)) {
      return utils_fromCodePoint(code);
    }
    return match;
  }
  const decoded = decode_decodeHTML(match);
  if (decoded !== match) {
    return decoded;
  }
  return match;
}

/* function replaceEntities(str) {
  if (str.indexOf('&') < 0) { return str; }

  return str.replace(ENTITY_RE, replaceEntityPattern);
} */

function unescapeMd(str) {
  if (str.indexOf('\\') < 0) {
    return str;
  }
  return str.replace(UNESCAPE_MD_RE, '$1');
}
function unescapeAll(str) {
  if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) {
    return str;
  }
  return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
    if (escaped) {
      return escaped;
    }
    return replaceEntityPattern(match, entity);
  });
}
const HTML_ESCAPE_TEST_RE = /[&<>"]/;
const HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
const HTML_REPLACEMENTS = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&quot;'
};
function replaceUnsafeChar(ch) {
  return HTML_REPLACEMENTS[ch];
}
function escapeHtml(str) {
  if (HTML_ESCAPE_TEST_RE.test(str)) {
    return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
  }
  return str;
}
const REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
function escapeRE(str) {
  return str.replace(REGEXP_ESCAPE_RE, '\\$&');
}
function isSpace(code) {
  switch (code) {
    case 0x09:
    case 0x20:
      return true;
  }
  return false;
}

// Zs (unicode class) || [\t\f\v\r\n]
function isWhiteSpace(code) {
  if (code >= 0x2000 && code <= 0x200A) {
    return true;
  }
  switch (code) {
    case 0x09: // \t
    case 0x0A: // \n
    case 0x0B: // \v
    case 0x0C: // \f
    case 0x0D: // \r
    case 0x20:
    case 0xA0:
    case 0x1680:
    case 0x202F:
    case 0x205F:
    case 0x3000:
      return true;
  }
  return false;
}

/* eslint-disable max-len */

// Currently without astral characters support.
function isPunctChar(ch) {
  return regex.test(ch);
}

// Markdown ASCII punctuation characters.
//
// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
//
// Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
//
function isMdAsciiPunct(ch) {
  switch (ch) {
    case 0x21 /* ! */:
    case 0x22 /* " */:
    case 0x23 /* # */:
    case 0x24 /* $ */:
    case 0x25 /* % */:
    case 0x26 /* & */:
    case 0x27 /* ' */:
    case 0x28 /* ( */:
    case 0x29 /* ) */:
    case 0x2A /* * */:
    case 0x2B /* + */:
    case 0x2C /* , */:
    case 0x2D /* - */:
    case 0x2E /* . */:
    case 0x2F /* / */:
    case 0x3A /* : */:
    case 0x3B /* ; */:
    case 0x3C /* < */:
    case 0x3D /* = */:
    case 0x3E /* > */:
    case 0x3F /* ? */:
    case 0x40 /* @ */:
    case 0x5B /* [ */:
    case 0x5C /* \ */:
    case 0x5D /* ] */:
    case 0x5E /* ^ */:
    case 0x5F /* _ */:
    case 0x60 /* ` */:
    case 0x7B /* { */:
    case 0x7C /* | */:
    case 0x7D /* } */:
    case 0x7E /* ~ */:
      return true;
    default:
      return false;
  }
}

// Hepler to unify [reference labels].
//
function normalizeReference(str) {
  // Trim and collapse whitespace
  //
  str = str.trim().replace(/\s+/g, ' ');

  // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
  // fixed in v12 (couldn't find any details).
  //
  // So treat this one as a special case
  // (remove this when node v10 is no longer supported).
  //
  if ('ẞ'.toLowerCase() === 'Ṿ') {
    str = str.replace(/ẞ/g, 'ß');
  }

  // .toLowerCase().toUpperCase() should get rid of all differences
  // between letter variants.
  //
  // Simple .toLowerCase() doesn't normalize 125 code points correctly,
  // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
  // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
  // uppercased versions).
  //
  // Here's an example showing how it happens. Lets take greek letter omega:
  // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
  //
  // Unicode entries:
  // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
  // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
  // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
  // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
  //
  // Case-insensitive comparison should treat all of them as equivalent.
  //
  // But .toLowerCase() doesn't change ϑ (it's already lowercase),
  // and .toUpperCase() doesn't change ϴ (already uppercase).
  //
  // Applying first lower then upper case normalizes any character:
  // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
  //
  // Note: this is equivalent to unicode case folding; unicode normalization
  // is a different step that is not required here.
  //
  // Final result should be uppercased, because it's later stored in an object
  // (this avoid a conflict with Object.prototype members,
  // most notably, `__proto__`)
  //
  return str.toLowerCase().toUpperCase();
}

// Re-export libraries commonly used in both markdown-it and its plugins,
// so plugins won't have to depend on them explicitly, which reduces their
// bundled size (e.g. a browser build).
//
const lib = {
  mdurl: mdurl_namespaceObject,
  ucmicro: uc_micro_namespaceObject
};

;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/helpers/parse_link_label.mjs
// Parse link label
//
// this function assumes that first character ("[") already matches;
// returns the end of the label
//

function parseLinkLabel(state, start, disableNested) {
  let level, found, marker, prevPos;
  const max = state.posMax;
  const oldPos = state.pos;
  state.pos = start + 1;
  level = 1;
  while (state.pos < max) {
    marker = state.src.charCodeAt(state.pos);
    if (marker === 0x5D /* ] */) {
      level--;
      if (level === 0) {
        found = true;
        break;
      }
    }
    prevPos = state.pos;
    state.md.inline.skipToken(state);
    if (marker === 0x5B /* [ */) {
      if (prevPos === state.pos - 1) {
        // increase level if we find text `[`, which is not a part of any token
        level++;
      } else if (disableNested) {
        state.pos = oldPos;
        return -1;
      }
    }
  }
  let labelEnd = -1;
  if (found) {
    labelEnd = state.pos;
  }

  // restore old state
  state.pos = oldPos;
  return labelEnd;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/helpers/parse_link_destination.mjs
// Parse link destination
//


function parseLinkDestination(str, start, max) {
  let code;
  let pos = start;
  const result = {
    ok: false,
    pos: 0,
    lines: 0,
    str: ''
  };
  if (str.charCodeAt(pos) === 0x3C /* < */) {
    pos++;
    while (pos < max) {
      code = str.charCodeAt(pos);
      if (code === 0x0A /* \n */) {
        return result;
      }
      if (code === 0x3C /* < */) {
        return result;
      }
      if (code === 0x3E /* > */) {
        result.pos = pos + 1;
        result.str = unescapeAll(str.slice(start + 1, pos));
        result.ok = true;
        return result;
      }
      if (code === 0x5C /* \ */ && pos + 1 < max) {
        pos += 2;
        continue;
      }
      pos++;
    }

    // no closing '>'
    return result;
  }

  // this should be ... } else { ... branch

  let level = 0;
  while (pos < max) {
    code = str.charCodeAt(pos);
    if (code === 0x20) {
      break;
    }

    // ascii control characters
    if (code < 0x20 || code === 0x7F) {
      break;
    }
    if (code === 0x5C /* \ */ && pos + 1 < max) {
      if (str.charCodeAt(pos + 1) === 0x20) {
        break;
      }
      pos += 2;
      continue;
    }
    if (code === 0x28 /* ( */) {
      level++;
      if (level > 32) {
        return result;
      }
    }
    if (code === 0x29 /* ) */) {
      if (level === 0) {
        break;
      }
      level--;
    }
    pos++;
  }
  if (start === pos) {
    return result;
  }
  if (level !== 0) {
    return result;
  }
  result.str = unescapeAll(str.slice(start, pos));
  result.pos = pos;
  result.ok = true;
  return result;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/helpers/parse_link_title.mjs
// Parse link title
//


function parseLinkTitle(str, start, max) {
  let code, marker;
  let lines = 0;
  let pos = start;
  const result = {
    ok: false,
    pos: 0,
    lines: 0,
    str: ''
  };
  if (pos >= max) {
    return result;
  }
  marker = str.charCodeAt(pos);
  if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) {
    return result;
  }
  pos++;

  // if opening marker is "(", switch it to closing marker ")"
  if (marker === 0x28) {
    marker = 0x29;
  }
  while (pos < max) {
    code = str.charCodeAt(pos);
    if (code === marker) {
      result.pos = pos + 1;
      result.lines = lines;
      result.str = unescapeAll(str.slice(start + 1, pos));
      result.ok = true;
      return result;
    } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {
      return result;
    } else if (code === 0x0A) {
      lines++;
    } else if (code === 0x5C /* \ */ && pos + 1 < max) {
      pos++;
      if (str.charCodeAt(pos) === 0x0A) {
        lines++;
      }
    }
    pos++;
  }
  return result;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/helpers/index.mjs
// Just a shortcut for bulk export





;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/renderer.mjs
/**
 * class Renderer
 *
 * Generates HTML from parsed token stream. Each instance has independent
 * copy of rules. Those can be rewritten with ease. Also, you can add new
 * rules if you create plugin and adds new token types.
 **/


const default_rules = {};
default_rules.code_inline = function (tokens, idx, options, env, slf) {
  const token = tokens[idx];
  return '<code' + slf.renderAttrs(token) + '>' + escapeHtml(token.content) + '</code>';
};
default_rules.code_block = function (tokens, idx, options, env, slf) {
  const token = tokens[idx];
  return '<pre' + slf.renderAttrs(token) + '><code>' + escapeHtml(tokens[idx].content) + '</code></pre>\n';
};
default_rules.fence = function (tokens, idx, options, env, slf) {
  const token = tokens[idx];
  const info = token.info ? unescapeAll(token.info).trim() : '';
  let langName = '';
  let langAttrs = '';
  if (info) {
    const arr = info.split(/(\s+)/g);
    langName = arr[0];
    langAttrs = arr.slice(2).join('');
  }
  let highlighted;
  if (options.highlight) {
    highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);
  } else {
    highlighted = escapeHtml(token.content);
  }
  if (highlighted.indexOf('<pre') === 0) {
    return highlighted + '\n';
  }

  // If language exists, inject class gently, without modifying original token.
  // May be, one day we will add .deepClone() for token and simplify this part, but
  // now we prefer to keep things local.
  if (info) {
    const i = token.attrIndex('class');
    const tmpAttrs = token.attrs ? token.attrs.slice() : [];
    if (i < 0) {
      tmpAttrs.push(['class', options.langPrefix + langName]);
    } else {
      tmpAttrs[i] = tmpAttrs[i].slice();
      tmpAttrs[i][1] += ' ' + options.langPrefix + langName;
    }

    // Fake token just to render attributes
    const tmpToken = {
      attrs: tmpAttrs
    };
    return `<pre><code${slf.renderAttrs(tmpToken)}>${highlighted}</code></pre>\n`;
  }
  return `<pre><code${slf.renderAttrs(token)}>${highlighted}</code></pre>\n`;
};
default_rules.image = function (tokens, idx, options, env, slf) {
  const token = tokens[idx];

  // "alt" attr MUST be set, even if empty. Because it's mandatory and
  // should be placed on proper position for tests.
  //
  // Replace content with actual value

  token.attrs[token.attrIndex('alt')][1] = slf.renderInlineAsText(token.children, options, env);
  return slf.renderToken(tokens, idx, options);
};
default_rules.hardbreak = function (tokens, idx, options /*, env */) {
  return options.xhtmlOut ? '<br />\n' : '<br>\n';
};
default_rules.softbreak = function (tokens, idx, options /*, env */) {
  return options.breaks ? options.xhtmlOut ? '<br />\n' : '<br>\n' : '\n';
};
default_rules.text = function (tokens, idx /*, options, env */) {
  return escapeHtml(tokens[idx].content);
};
default_rules.html_block = function (tokens, idx /*, options, env */) {
  return tokens[idx].content;
};
default_rules.html_inline = function (tokens, idx /*, options, env */) {
  return tokens[idx].content;
};

/**
 * new Renderer()
 *
 * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
 **/
function Renderer() {
  /**
   * Renderer#rules -> Object
   *
   * Contains render rules for tokens. Can be updated and extended.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * md.renderer.rules.strong_open  = function () { return '<b>'; };
   * md.renderer.rules.strong_close = function () { return '</b>'; };
   *
   * var result = md.renderInline(...);
   * ```
   *
   * Each rule is called as independent static function with fixed signature:
   *
   * ```javascript
   * function my_token_render(tokens, idx, options, env, renderer) {
   *   // ...
   *   return renderedHTML;
   * }
   * ```
   *
   * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
   * for more details and examples.
   **/
  this.rules = utils_assign({}, default_rules);
}

/**
 * Renderer.renderAttrs(token) -> String
 *
 * Render token attributes to string.
 **/
Renderer.prototype.renderAttrs = function renderAttrs(token) {
  let i, l, result;
  if (!token.attrs) {
    return '';
  }
  result = '';
  for (i = 0, l = token.attrs.length; i < l; i++) {
    result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
  }
  return result;
};

/**
 * Renderer.renderToken(tokens, idx, options) -> String
 * - tokens (Array): list of tokens
 * - idx (Numbed): token index to render
 * - options (Object): params of parser instance
 *
 * Default token renderer. Can be overriden by custom function
 * in [[Renderer#rules]].
 **/
Renderer.prototype.renderToken = function renderToken(tokens, idx, options) {
  const token = tokens[idx];
  let result = '';

  // Tight list paragraphs
  if (token.hidden) {
    return '';
  }

  // Insert a newline between hidden paragraph and subsequent opening
  // block-level tag.
  //
  // For example, here we should insert a newline before blockquote:
  //  - a
  //    >
  //
  if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
    result += '\n';
  }

  // Add token name, e.g. `<img`
  result += (token.nesting === -1 ? '</' : '<') + token.tag;

  // Encode attributes, e.g. `<img src="foo"`
  result += this.renderAttrs(token);

  // Add a slash for self-closing tags, e.g. `<img src="foo" /`
  if (token.nesting === 0 && options.xhtmlOut) {
    result += ' /';
  }

  // Check if we need to add a newline after this tag
  let needLf = false;
  if (token.block) {
    needLf = true;
    if (token.nesting === 1) {
      if (idx + 1 < tokens.length) {
        const nextToken = tokens[idx + 1];
        if (nextToken.type === 'inline' || nextToken.hidden) {
          // Block-level tag containing an inline tag.
          //
          needLf = false;
        } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
          // Opening tag + closing tag of the same type. E.g. `<li></li>`.
          //
          needLf = false;
        }
      }
    }
  }
  result += needLf ? '>\n' : '>';
  return result;
};

/**
 * Renderer.renderInline(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * The same as [[Renderer.render]], but for single token of `inline` type.
 **/
Renderer.prototype.renderInline = function (tokens, options, env) {
  let result = '';
  const rules = this.rules;
  for (let i = 0, len = tokens.length; i < len; i++) {
    const type = tokens[i].type;
    if (typeof rules[type] !== 'undefined') {
      result += rules[type](tokens, i, options, env, this);
    } else {
      result += this.renderToken(tokens, i, options);
    }
  }
  return result;
};

/** internal
 * Renderer.renderInlineAsText(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Special kludge for image `alt` attributes to conform CommonMark spec.
 * Don't try to use it! Spec requires to show `alt` content with stripped markup,
 * instead of simple escaping.
 **/
Renderer.prototype.renderInlineAsText = function (tokens, options, env) {
  let result = '';
  for (let i = 0, len = tokens.length; i < len; i++) {
    switch (tokens[i].type) {
      case 'text':
        result += tokens[i].content;
        break;
      case 'image':
        result += this.renderInlineAsText(tokens[i].children, options, env);
        break;
      case 'html_inline':
      case 'html_block':
        result += tokens[i].content;
        break;
      case 'softbreak':
      case 'hardbreak':
        result += '\n';
        break;
      default:
      // all other tokens are skipped
    }
  }
  return result;
};

/**
 * Renderer.render(tokens, options, env) -> String
 * - tokens (Array): list on block tokens to render
 * - options (Object): params of parser instance
 * - env (Object): additional data from parsed input (references, for example)
 *
 * Takes token stream and generates HTML. Probably, you will never need to call
 * this method directly.
 **/
Renderer.prototype.render = function (tokens, options, env) {
  let result = '';
  const rules = this.rules;
  for (let i = 0, len = tokens.length; i < len; i++) {
    const type = tokens[i].type;
    if (type === 'inline') {
      result += this.renderInline(tokens[i].children, options, env);
    } else if (typeof rules[type] !== 'undefined') {
      result += rules[type](tokens, i, options, env, this);
    } else {
      result += this.renderToken(tokens, i, options, env);
    }
  }
  return result;
};
/* harmony default export */ const renderer = (Renderer);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/ruler.mjs
/**
 * class Ruler
 *
 * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
 * [[MarkdownIt#inline]] to manage sequences of functions (rules):
 *
 * - keep rules in defined order
 * - assign the name to each rule
 * - enable/disable rules
 * - add/replace rules
 * - allow assign rules to additional named chains (in the same)
 * - cacheing lists of active rules
 *
 * You will not need use this class directly until write plugins. For simple
 * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
 * [[MarkdownIt.use]].
 **/

/**
 * new Ruler()
 **/
function Ruler() {
  // List of added rules. Each element is:
  //
  // {
  //   name: XXX,
  //   enabled: Boolean,
  //   fn: Function(),
  //   alt: [ name2, name3 ]
  // }
  //
  this.__rules__ = [];

  // Cached rule chains.
  //
  // First level - chain name, '' for default.
  // Second level - diginal anchor for fast filtering by charcodes.
  //
  this.__cache__ = null;
}

// Helper methods, should not be used directly

// Find rule index by name
//
Ruler.prototype.__find__ = function (name) {
  for (let i = 0; i < this.__rules__.length; i++) {
    if (this.__rules__[i].name === name) {
      return i;
    }
  }
  return -1;
};

// Build rules lookup cache
//
Ruler.prototype.__compile__ = function () {
  const self = this;
  const chains = [''];

  // collect unique names
  self.__rules__.forEach(function (rule) {
    if (!rule.enabled) {
      return;
    }
    rule.alt.forEach(function (altName) {
      if (chains.indexOf(altName) < 0) {
        chains.push(altName);
      }
    });
  });
  self.__cache__ = {};
  chains.forEach(function (chain) {
    self.__cache__[chain] = [];
    self.__rules__.forEach(function (rule) {
      if (!rule.enabled) {
        return;
      }
      if (chain && rule.alt.indexOf(chain) < 0) {
        return;
      }
      self.__cache__[chain].push(rule.fn);
    });
  });
};

/**
 * Ruler.at(name, fn [, options])
 * - name (String): rule name to replace.
 * - fn (Function): new rule function.
 * - options (Object): new rule options (not mandatory).
 *
 * Replace rule by name with new function & options. Throws error if name not
 * found.
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * Replace existing typographer replacement rule with new one:
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.at('replacements', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.at = function (name, fn, options) {
  const index = this.__find__(name);
  const opt = options || {};
  if (index === -1) {
    throw new Error('Parser rule not found: ' + name);
  }
  this.__rules__[index].fn = fn;
  this.__rules__[index].alt = opt.alt || [];
  this.__cache__ = null;
};

/**
 * Ruler.before(beforeName, ruleName, fn [, options])
 * - beforeName (String): new rule will be added before this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain before one with given name. See also
 * [[Ruler.after]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.before = function (beforeName, ruleName, fn, options) {
  const index = this.__find__(beforeName);
  const opt = options || {};
  if (index === -1) {
    throw new Error('Parser rule not found: ' + beforeName);
  }
  this.__rules__.splice(index, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};

/**
 * Ruler.after(afterName, ruleName, fn [, options])
 * - afterName (String): new rule will be added after this one.
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Add new rule to chain after one with given name. See also
 * [[Ruler.before]], [[Ruler.push]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.inline.ruler.after('text', 'my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.after = function (afterName, ruleName, fn, options) {
  const index = this.__find__(afterName);
  const opt = options || {};
  if (index === -1) {
    throw new Error('Parser rule not found: ' + afterName);
  }
  this.__rules__.splice(index + 1, 0, {
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};

/**
 * Ruler.push(ruleName, fn [, options])
 * - ruleName (String): name of added rule.
 * - fn (Function): rule function.
 * - options (Object): rule options (not mandatory).
 *
 * Push new rule to the end of chain. See also
 * [[Ruler.before]], [[Ruler.after]].
 *
 * ##### Options:
 *
 * - __alt__ - array with names of "alternate" chains.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')();
 *
 * md.core.ruler.push('my_rule', function replace(state) {
 *   //...
 * });
 * ```
 **/
Ruler.prototype.push = function (ruleName, fn, options) {
  const opt = options || {};
  this.__rules__.push({
    name: ruleName,
    enabled: true,
    fn,
    alt: opt.alt || []
  });
  this.__cache__ = null;
};

/**
 * Ruler.enable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to enable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.disable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.enable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) {
    list = [list];
  }
  const result = [];

  // Search by name and enable
  list.forEach(function (name) {
    const idx = this.__find__(name);
    if (idx < 0) {
      if (ignoreInvalid) {
        return;
      }
      throw new Error('Rules manager: invalid rule name ' + name);
    }
    this.__rules__[idx].enabled = true;
    result.push(name);
  }, this);
  this.__cache__ = null;
  return result;
};

/**
 * Ruler.enableOnly(list [, ignoreInvalid])
 * - list (String|Array): list of rule names to enable (whitelist).
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable rules with given names, and disable everything else. If any rule name
 * not found - throw Error. Errors can be disabled by second param.
 *
 * See also [[Ruler.disable]], [[Ruler.enable]].
 **/
Ruler.prototype.enableOnly = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) {
    list = [list];
  }
  this.__rules__.forEach(function (rule) {
    rule.enabled = false;
  });
  this.enable(list, ignoreInvalid);
};

/**
 * Ruler.disable(list [, ignoreInvalid]) -> Array
 * - list (String|Array): list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Disable rules with given names. If any rule name not found - throw Error.
 * Errors can be disabled by second param.
 *
 * Returns list of found rule names (if no exception happened).
 *
 * See also [[Ruler.enable]], [[Ruler.enableOnly]].
 **/
Ruler.prototype.disable = function (list, ignoreInvalid) {
  if (!Array.isArray(list)) {
    list = [list];
  }
  const result = [];

  // Search by name and disable
  list.forEach(function (name) {
    const idx = this.__find__(name);
    if (idx < 0) {
      if (ignoreInvalid) {
        return;
      }
      throw new Error('Rules manager: invalid rule name ' + name);
    }
    this.__rules__[idx].enabled = false;
    result.push(name);
  }, this);
  this.__cache__ = null;
  return result;
};

/**
 * Ruler.getRules(chainName) -> Array
 *
 * Return array of active functions (rules) for given chain name. It analyzes
 * rules configuration, compiles caches if not exists and returns result.
 *
 * Default chain name is `''` (empty string). It can't be skipped. That's
 * done intentionally, to keep signature monomorphic for high speed.
 **/
Ruler.prototype.getRules = function (chainName) {
  if (this.__cache__ === null) {
    this.__compile__();
  }

  // Chain can be empty, if rules disabled. But we still have to return Array.
  return this.__cache__[chainName] || [];
};
/* harmony default export */ const ruler = (Ruler);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/token.mjs
// Token class

/**
 * class Token
 **/

/**
 * new Token(type, tag, nesting)
 *
 * Create new token and fill passed properties.
 **/
function Token(type, tag, nesting) {
  /**
   * Token#type -> String
   *
   * Type of the token (string, e.g. "paragraph_open")
   **/
  this.type = type;

  /**
   * Token#tag -> String
   *
   * html tag name, e.g. "p"
   **/
  this.tag = tag;

  /**
   * Token#attrs -> Array
   *
   * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
   **/
  this.attrs = null;

  /**
   * Token#map -> Array
   *
   * Source map info. Format: `[ line_begin, line_end ]`
   **/
  this.map = null;

  /**
   * Token#nesting -> Number
   *
   * Level change (number in {-1, 0, 1} set), where:
   *
   * -  `1` means the tag is opening
   * -  `0` means the tag is self-closing
   * - `-1` means the tag is closing
   **/
  this.nesting = nesting;

  /**
   * Token#level -> Number
   *
   * nesting level, the same as `state.level`
   **/
  this.level = 0;

  /**
   * Token#children -> Array
   *
   * An array of child nodes (inline and img tokens)
   **/
  this.children = null;

  /**
   * Token#content -> String
   *
   * In a case of self-closing tag (code, html, fence, etc.),
   * it has contents of this tag.
   **/
  this.content = '';

  /**
   * Token#markup -> String
   *
   * '*' or '_' for emphasis, fence string for fence, etc.
   **/
  this.markup = '';

  /**
   * Token#info -> String
   *
   * Additional information:
   *
   * - Info string for "fence" tokens
   * - The value "auto" for autolink "link_open" and "link_close" tokens
   * - The string value of the item marker for ordered-list "list_item_open" tokens
   **/
  this.info = '';

  /**
   * Token#meta -> Object
   *
   * A place for plugins to store an arbitrary data
   **/
  this.meta = null;

  /**
   * Token#block -> Boolean
   *
   * True for block-level tokens, false for inline tokens.
   * Used in renderer to calculate line breaks
   **/
  this.block = false;

  /**
   * Token#hidden -> Boolean
   *
   * If it's true, ignore this element when rendering. Used for tight lists
   * to hide paragraphs.
   **/
  this.hidden = false;
}

/**
 * Token.attrIndex(name) -> Number
 *
 * Search attribute index by name.
 **/
Token.prototype.attrIndex = function attrIndex(name) {
  if (!this.attrs) {
    return -1;
  }
  const attrs = this.attrs;
  for (let i = 0, len = attrs.length; i < len; i++) {
    if (attrs[i][0] === name) {
      return i;
    }
  }
  return -1;
};

/**
 * Token.attrPush(attrData)
 *
 * Add `[ name, value ]` attribute to list. Init attrs if necessary
 **/
Token.prototype.attrPush = function attrPush(attrData) {
  if (this.attrs) {
    this.attrs.push(attrData);
  } else {
    this.attrs = [attrData];
  }
};

/**
 * Token.attrSet(name, value)
 *
 * Set `name` attribute to `value`. Override old value if exists.
 **/
Token.prototype.attrSet = function attrSet(name, value) {
  const idx = this.attrIndex(name);
  const attrData = [name, value];
  if (idx < 0) {
    this.attrPush(attrData);
  } else {
    this.attrs[idx] = attrData;
  }
};

/**
 * Token.attrGet(name)
 *
 * Get the value of attribute `name`, or null if it does not exist.
 **/
Token.prototype.attrGet = function attrGet(name) {
  const idx = this.attrIndex(name);
  let value = null;
  if (idx >= 0) {
    value = this.attrs[idx][1];
  }
  return value;
};

/**
 * Token.attrJoin(name, value)
 *
 * Join value to existing attribute via space. Or create new attribute if not
 * exists. Useful to operate with token classes.
 **/
Token.prototype.attrJoin = function attrJoin(name, value) {
  const idx = this.attrIndex(name);
  if (idx < 0) {
    this.attrPush([name, value]);
  } else {
    this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;
  }
};
/* harmony default export */ const lib_token = (Token);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_core/state_core.mjs
// Core state object
//


function StateCore(src, md, env) {
  this.src = src;
  this.env = env;
  this.tokens = [];
  this.inlineMode = false;
  this.md = md; // link to parser instance
}

// re-export Token class to use in core rules
StateCore.prototype.Token = lib_token;
/* harmony default export */ const state_core = (StateCore);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_core/normalize.mjs
// Normalize input string

// https://spec.commonmark.org/0.29/#line-ending
const NEWLINES_RE = /\r\n?|\n/g;
const NULL_RE = /\0/g;
function normalize(state) {
  let str;

  // Normalize newlines
  str = state.src.replace(NEWLINES_RE, '\n');

  // Replace NULL characters
  str = str.replace(NULL_RE, '\uFFFD');
  state.src = str;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_core/block.mjs
function block(state) {
  let token;
  if (state.inlineMode) {
    token = new state.Token('inline', '', 0);
    token.content = state.src;
    token.map = [0, 1];
    token.children = [];
    state.tokens.push(token);
  } else {
    state.md.block.parse(state.src, state.md, state.env, state.tokens);
  }
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_core/inline.mjs
function inline(state) {
  const tokens = state.tokens;

  // Parse inlines
  for (let i = 0, l = tokens.length; i < l; i++) {
    const tok = tokens[i];
    if (tok.type === 'inline') {
      state.md.inline.parse(tok.content, state.md, state.env, tok.children);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_core/linkify.mjs
// Replace link-like texts with link nodes.
//
// Currently restricted by `md.validateLink()` to http/https/ftp
//


function isLinkOpen(str) {
  return /^<a[>\s]/i.test(str);
}
function isLinkClose(str) {
  return /^<\/a\s*>/i.test(str);
}
function linkify(state) {
  const blockTokens = state.tokens;
  if (!state.md.options.linkify) {
    return;
  }
  for (let j = 0, l = blockTokens.length; j < l; j++) {
    if (blockTokens[j].type !== 'inline' || !state.md.linkify.pretest(blockTokens[j].content)) {
      continue;
    }
    let tokens = blockTokens[j].children;
    let htmlLinkLevel = 0;

    // We scan from the end, to keep position when new tags added.
    // Use reversed logic in links start/end match
    for (let i = tokens.length - 1; i >= 0; i--) {
      const currentToken = tokens[i];

      // Skip content of markdown links
      if (currentToken.type === 'link_close') {
        i--;
        while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
          i--;
        }
        continue;
      }

      // Skip content of html tag links
      if (currentToken.type === 'html_inline') {
        if (isLinkOpen(currentToken.content) && htmlLinkLevel > 0) {
          htmlLinkLevel--;
        }
        if (isLinkClose(currentToken.content)) {
          htmlLinkLevel++;
        }
      }
      if (htmlLinkLevel > 0) {
        continue;
      }
      if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {
        const text = currentToken.content;
        let links = state.md.linkify.match(text);

        // Now split string to nodes
        const nodes = [];
        let level = currentToken.level;
        let lastPos = 0;

        // forbid escape sequence at the start of the string,
        // this avoids http\://example.com/ from being linkified as
        // http:<a href="//example.com/">//example.com/</a>
        if (links.length > 0 && links[0].index === 0 && i > 0 && tokens[i - 1].type === 'text_special') {
          links = links.slice(1);
        }
        for (let ln = 0; ln < links.length; ln++) {
          const url = links[ln].url;
          const fullUrl = state.md.normalizeLink(url);
          if (!state.md.validateLink(fullUrl)) {
            continue;
          }
          let urlText = links[ln].text;

          // Linkifier might send raw hostnames like "example.com", where url
          // starts with domain name. So we prepend http:// in those cases,
          // and remove it afterwards.
          //
          if (!links[ln].schema) {
            urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '');
          } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
            urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');
          } else {
            urlText = state.md.normalizeLinkText(urlText);
          }
          const pos = links[ln].index;
          if (pos > lastPos) {
            const token = new state.Token('text', '', 0);
            token.content = text.slice(lastPos, pos);
            token.level = level;
            nodes.push(token);
          }
          const token_o = new state.Token('link_open', 'a', 1);
          token_o.attrs = [['href', fullUrl]];
          token_o.level = level++;
          token_o.markup = 'linkify';
          token_o.info = 'auto';
          nodes.push(token_o);
          const token_t = new state.Token('text', '', 0);
          token_t.content = urlText;
          token_t.level = level;
          nodes.push(token_t);
          const token_c = new state.Token('link_close', 'a', -1);
          token_c.level = --level;
          token_c.markup = 'linkify';
          token_c.info = 'auto';
          nodes.push(token_c);
          lastPos = links[ln].lastIndex;
        }
        if (lastPos < text.length) {
          const token = new state.Token('text', '', 0);
          token.content = text.slice(lastPos);
          token.level = level;
          nodes.push(token);
        }

        // replace current node
        blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
      }
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_core/replacements.mjs
// Simple typographic replacements
//
// (c) (C) → ©
// (tm) (TM) → ™
// (r) (R) → ®
// +- → ±
// ... → … (also ?.... → ?.., !.... → !..)
// ???????? → ???, !!!!! → !!!, `,,` → `,`
// -- → &ndash;, --- → &mdash;
//

// TODO:
// - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
// - multiplications 2 x 4 -> 2 × 4

const RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;

// Workaround for phantomjs - need regex without /g flag,
// or root check will fail every second time
const SCOPED_ABBR_TEST_RE = /\((c|tm|r)\)/i;
const SCOPED_ABBR_RE = /\((c|tm|r)\)/ig;
const SCOPED_ABBR = {
  c: '©',
  r: '®',
  tm: '™'
};
function replaceFn(match, name) {
  return SCOPED_ABBR[name.toLowerCase()];
}
function replace_scoped(inlineTokens) {
  let inside_autolink = 0;
  for (let i = inlineTokens.length - 1; i >= 0; i--) {
    const token = inlineTokens[i];
    if (token.type === 'text' && !inside_autolink) {
      token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
    }
    if (token.type === 'link_open' && token.info === 'auto') {
      inside_autolink--;
    }
    if (token.type === 'link_close' && token.info === 'auto') {
      inside_autolink++;
    }
  }
}
function replace_rare(inlineTokens) {
  let inside_autolink = 0;
  for (let i = inlineTokens.length - 1; i >= 0; i--) {
    const token = inlineTokens[i];
    if (token.type === 'text' && !inside_autolink) {
      if (RARE_RE.test(token.content)) {
        token.content = token.content.replace(/\+-/g, '±')
        // .., ..., ....... -> …
        // but ?..... & !..... -> ?.. & !..
        .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..').replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
        // em-dash
        .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\u2014')
        // en-dash
        .replace(/(^|\s)--(?=\s|$)/mg, '$1\u2013').replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, '$1\u2013');
      }
    }
    if (token.type === 'link_open' && token.info === 'auto') {
      inside_autolink--;
    }
    if (token.type === 'link_close' && token.info === 'auto') {
      inside_autolink++;
    }
  }
}
function replace(state) {
  let blkIdx;
  if (!state.md.options.typographer) {
    return;
  }
  for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
    if (state.tokens[blkIdx].type !== 'inline') {
      continue;
    }
    if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
      replace_scoped(state.tokens[blkIdx].children);
    }
    if (RARE_RE.test(state.tokens[blkIdx].content)) {
      replace_rare(state.tokens[blkIdx].children);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_core/smartquotes.mjs
// Convert straight quotation marks to typographic ones
//


const QUOTE_TEST_RE = /['"]/;
const QUOTE_RE = /['"]/g;
const APOSTROPHE = '\u2019'; /* ’ */

function replaceAt(str, index, ch) {
  return str.slice(0, index) + ch + str.slice(index + 1);
}
function process_inlines(tokens, state) {
  let j;
  const stack = [];
  for (let i = 0; i < tokens.length; i++) {
    const token = tokens[i];
    const thisLevel = tokens[i].level;
    for (j = stack.length - 1; j >= 0; j--) {
      if (stack[j].level <= thisLevel) {
        break;
      }
    }
    stack.length = j + 1;
    if (token.type !== 'text') {
      continue;
    }
    let text = token.content;
    let pos = 0;
    let max = text.length;

    /* eslint no-labels:0,block-scoped-var:0 */
    OUTER: while (pos < max) {
      QUOTE_RE.lastIndex = pos;
      const t = QUOTE_RE.exec(text);
      if (!t) {
        break;
      }
      let canOpen = true;
      let canClose = true;
      pos = t.index + 1;
      const isSingle = t[0] === "'";

      // Find previous character,
      // default to space if it's the beginning of the line
      //
      let lastChar = 0x20;
      if (t.index - 1 >= 0) {
        lastChar = text.charCodeAt(t.index - 1);
      } else {
        for (j = i - 1; j >= 0; j--) {
          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20
          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'

          lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
          break;
        }
      }

      // Find next character,
      // default to space if it's the end of the line
      //
      let nextChar = 0x20;
      if (pos < max) {
        nextChar = text.charCodeAt(pos);
      } else {
        for (j = i + 1; j < tokens.length; j++) {
          if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20
          if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'

          nextChar = tokens[j].content.charCodeAt(0);
          break;
        }
      }
      const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
      const isLastWhiteSpace = isWhiteSpace(lastChar);
      const isNextWhiteSpace = isWhiteSpace(nextChar);
      if (isNextWhiteSpace) {
        canOpen = false;
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          canOpen = false;
        }
      }
      if (isLastWhiteSpace) {
        canClose = false;
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          canClose = false;
        }
      }
      if (nextChar === 0x22 /* " */ && t[0] === '"') {
        if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {
          // special case: 1"" - count first quote as an inch
          canClose = canOpen = false;
        }
      }
      if (canOpen && canClose) {
        // Replace quotes in the middle of punctuation sequence, but not
        // in the middle of the words, i.e.:
        //
        // 1. foo " bar " baz - not replaced
        // 2. foo-"-bar-"-baz - replaced
        // 3. foo"bar"baz     - not replaced
        //
        canOpen = isLastPunctChar;
        canClose = isNextPunctChar;
      }
      if (!canOpen && !canClose) {
        // middle of word
        if (isSingle) {
          token.content = replaceAt(token.content, t.index, APOSTROPHE);
        }
        continue;
      }
      if (canClose) {
        // this could be a closing quote, rewind the stack to get a match
        for (j = stack.length - 1; j >= 0; j--) {
          let item = stack[j];
          if (stack[j].level < thisLevel) {
            break;
          }
          if (item.single === isSingle && stack[j].level === thisLevel) {
            item = stack[j];
            let openQuote;
            let closeQuote;
            if (isSingle) {
              openQuote = state.md.options.quotes[2];
              closeQuote = state.md.options.quotes[3];
            } else {
              openQuote = state.md.options.quotes[0];
              closeQuote = state.md.options.quotes[1];
            }

            // replace token.content *before* tokens[item.token].content,
            // because, if they are pointing at the same token, replaceAt
            // could mess up indices when quote length != 1
            token.content = replaceAt(token.content, t.index, closeQuote);
            tokens[item.token].content = replaceAt(tokens[item.token].content, item.pos, openQuote);
            pos += closeQuote.length - 1;
            if (item.token === i) {
              pos += openQuote.length - 1;
            }
            text = token.content;
            max = text.length;
            stack.length = j;
            continue OUTER;
          }
        }
      }
      if (canOpen) {
        stack.push({
          token: i,
          pos: t.index,
          single: isSingle,
          level: thisLevel
        });
      } else if (canClose && isSingle) {
        token.content = replaceAt(token.content, t.index, APOSTROPHE);
      }
    }
  }
}
function smartquotes(state) {
  /* eslint max-depth:0 */
  if (!state.md.options.typographer) {
    return;
  }
  for (let blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
    if (state.tokens[blkIdx].type !== 'inline' || !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
      continue;
    }
    process_inlines(state.tokens[blkIdx].children, state);
  }
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_core/text_join.mjs
// Join raw text tokens with the rest of the text
//
// This is set as a separate rule to provide an opportunity for plugins
// to run text replacements after text join, but before escape join.
//
// For example, `\:)` shouldn't be replaced with an emoji.
//

function text_join(state) {
  let curr, last;
  const blockTokens = state.tokens;
  const l = blockTokens.length;
  for (let j = 0; j < l; j++) {
    if (blockTokens[j].type !== 'inline') continue;
    const tokens = blockTokens[j].children;
    const max = tokens.length;
    for (curr = 0; curr < max; curr++) {
      if (tokens[curr].type === 'text_special') {
        tokens[curr].type = 'text';
      }
    }
    for (curr = last = 0; curr < max; curr++) {
      if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {
        // collapse two adjacent text nodes
        tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
      } else {
        if (curr !== last) {
          tokens[last] = tokens[curr];
        }
        last++;
      }
    }
    if (curr !== last) {
      tokens.length = last;
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/parser_core.mjs
/** internal
 * class Core
 *
 * Top-level rules executor. Glues block/inline parsers and does intermediate
 * transformations.
 **/










const _rules = [['normalize', normalize], ['block', block], ['inline', inline], ['linkify', linkify], ['replacements', replace], ['smartquotes', smartquotes],
// `text_join` finds `text_special` tokens (for escape sequences)
// and joins them with the rest of the text
['text_join', text_join]];

/**
 * new Core()
 **/
function Core() {
  /**
   * Core#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of core rules.
   **/
  this.ruler = new ruler();
  for (let i = 0; i < _rules.length; i++) {
    this.ruler.push(_rules[i][0], _rules[i][1]);
  }
}

/**
 * Core.process(state)
 *
 * Executes core chain rules.
 **/
Core.prototype.process = function (state) {
  const rules = this.ruler.getRules('');
  for (let i = 0, l = rules.length; i < l; i++) {
    rules[i](state);
  }
};
Core.prototype.State = state_core;
/* harmony default export */ const parser_core = (Core);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/state_block.mjs
// Parser state class



function StateBlock(src, md, env, tokens) {
  this.src = src;

  // link to parser instance
  this.md = md;
  this.env = env;

  //
  // Internal state vartiables
  //

  this.tokens = tokens;
  this.bMarks = []; // line begin offsets for fast jumps
  this.eMarks = []; // line end offsets for fast jumps
  this.tShift = []; // offsets of the first non-space characters (tabs not expanded)
  this.sCount = []; // indents for each line (tabs expanded)

  // An amount of virtual spaces (tabs expanded) between beginning
  // of each line (bMarks) and real beginning of that line.
  //
  // It exists only as a hack because blockquotes override bMarks
  // losing information in the process.
  //
  // It's used only when expanding tabs, you can think about it as
  // an initial tab length, e.g. bsCount=21 applied to string `\t123`
  // means first tab should be expanded to 4-21%4 === 3 spaces.
  //
  this.bsCount = [];

  // block parser variables

  // required block content indent (for example, if we are
  // inside a list, it would be positioned after list marker)
  this.blkIndent = 0;
  this.line = 0; // line index in src
  this.lineMax = 0; // lines count
  this.tight = false; // loose/tight mode for lists
  this.ddIndent = -1; // indent of the current dd block (-1 if there isn't any)
  this.listIndent = -1; // indent of the current list block (-1 if there isn't any)

  // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
  // used in lists to determine if they interrupt a paragraph
  this.parentType = 'root';
  this.level = 0;

  // Create caches
  // Generate markers.
  const s = this.src;
  for (let start = 0, pos = 0, indent = 0, offset = 0, len = s.length, indent_found = false; pos < len; pos++) {
    const ch = s.charCodeAt(pos);
    if (!indent_found) {
      if (isSpace(ch)) {
        indent++;
        if (ch === 0x09) {
          offset += 4 - offset % 4;
        } else {
          offset++;
        }
        continue;
      } else {
        indent_found = true;
      }
    }
    if (ch === 0x0A || pos === len - 1) {
      if (ch !== 0x0A) {
        pos++;
      }
      this.bMarks.push(start);
      this.eMarks.push(pos);
      this.tShift.push(indent);
      this.sCount.push(offset);
      this.bsCount.push(0);
      indent_found = false;
      indent = 0;
      offset = 0;
      start = pos + 1;
    }
  }

  // Push fake entry to simplify cache bounds checks
  this.bMarks.push(s.length);
  this.eMarks.push(s.length);
  this.tShift.push(0);
  this.sCount.push(0);
  this.bsCount.push(0);
  this.lineMax = this.bMarks.length - 1; // don't count last fake line
}

// Push new token to "stream".
//
StateBlock.prototype.push = function (type, tag, nesting) {
  const token = new lib_token(type, tag, nesting);
  token.block = true;
  if (nesting < 0) this.level--; // closing tag
  token.level = this.level;
  if (nesting > 0) this.level++; // opening tag

  this.tokens.push(token);
  return token;
};
StateBlock.prototype.isEmpty = function isEmpty(line) {
  return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
};
StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
  for (let max = this.lineMax; from < max; from++) {
    if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
      break;
    }
  }
  return from;
};

// Skip spaces from given position.
StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
  for (let max = this.src.length; pos < max; pos++) {
    const ch = this.src.charCodeAt(pos);
    if (!isSpace(ch)) {
      break;
    }
  }
  return pos;
};

// Skip spaces from given position in reverse.
StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
  if (pos <= min) {
    return pos;
  }
  while (pos > min) {
    if (!isSpace(this.src.charCodeAt(--pos))) {
      return pos + 1;
    }
  }
  return pos;
};

// Skip char codes from given position
StateBlock.prototype.skipChars = function skipChars(pos, code) {
  for (let max = this.src.length; pos < max; pos++) {
    if (this.src.charCodeAt(pos) !== code) {
      break;
    }
  }
  return pos;
};

// Skip char codes reverse from given position - 1
StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
  if (pos <= min) {
    return pos;
  }
  while (pos > min) {
    if (code !== this.src.charCodeAt(--pos)) {
      return pos + 1;
    }
  }
  return pos;
};

// cut lines range from source.
StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
  if (begin >= end) {
    return '';
  }
  const queue = new Array(end - begin);
  for (let i = 0, line = begin; line < end; line++, i++) {
    let lineIndent = 0;
    const lineStart = this.bMarks[line];
    let first = lineStart;
    let last;
    if (line + 1 < end || keepLastLF) {
      // No need for bounds check because we have fake entry on tail.
      last = this.eMarks[line] + 1;
    } else {
      last = this.eMarks[line];
    }
    while (first < last && lineIndent < indent) {
      const ch = this.src.charCodeAt(first);
      if (isSpace(ch)) {
        if (ch === 0x09) {
          lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
        } else {
          lineIndent++;
        }
      } else if (first - lineStart < this.tShift[line]) {
        // patched tShift masked characters to look like spaces (blockquotes, list markers)
        lineIndent++;
      } else {
        break;
      }
      first++;
    }
    if (lineIndent > indent) {
      // partially expanding tabs in code blocks, e.g '\t\tfoobar'
      // with indent=2 becomes '  \tfoobar'
      queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);
    } else {
      queue[i] = this.src.slice(first, last);
    }
  }
  return queue.join('');
};

// re-export Token class to use in block rules
StateBlock.prototype.Token = lib_token;
/* harmony default export */ const state_block = (StateBlock);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/table.mjs
// GFM table, https://github.github.com/gfm/#tables-extension-


function getLine(state, line) {
  const pos = state.bMarks[line] + state.tShift[line];
  const max = state.eMarks[line];
  return state.src.slice(pos, max);
}
function escapedSplit(str) {
  const result = [];
  const max = str.length;
  let pos = 0;
  let ch = str.charCodeAt(pos);
  let isEscaped = false;
  let lastPos = 0;
  let current = '';
  while (pos < max) {
    if (ch === 0x7c /* | */) {
      if (!isEscaped) {
        // pipe separating cells, '|'
        result.push(current + str.substring(lastPos, pos));
        current = '';
        lastPos = pos + 1;
      } else {
        // escaped pipe, '\|'
        current += str.substring(lastPos, pos - 1);
        lastPos = pos;
      }
    }
    isEscaped = ch === 0x5c /* \ */;
    pos++;
    ch = str.charCodeAt(pos);
  }
  result.push(current + str.substring(lastPos));
  return result;
}
function table(state, startLine, endLine, silent) {
  // should have at least two lines
  if (startLine + 2 > endLine) {
    return false;
  }
  let nextLine = startLine + 1;
  if (state.sCount[nextLine] < state.blkIndent) {
    return false;
  }

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[nextLine] - state.blkIndent >= 4) {
    return false;
  }

  // first character of the second line should be '|', '-', ':',
  // and no other characters are allowed but spaces;
  // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp

  let pos = state.bMarks[nextLine] + state.tShift[nextLine];
  if (pos >= state.eMarks[nextLine]) {
    return false;
  }
  const firstCh = state.src.charCodeAt(pos++);
  if (firstCh !== 0x7C /* | */ && firstCh !== 0x2D /* - */ && firstCh !== 0x3A /* : */) {
    return false;
  }
  if (pos >= state.eMarks[nextLine]) {
    return false;
  }
  const secondCh = state.src.charCodeAt(pos++);
  if (secondCh !== 0x7C /* | */ && secondCh !== 0x2D /* - */ && secondCh !== 0x3A /* : */ && !isSpace(secondCh)) {
    return false;
  }

  // if first character is '-', then second character must not be a space
  // (due to parsing ambiguity with list)
  if (firstCh === 0x2D /* - */ && isSpace(secondCh)) {
    return false;
  }
  while (pos < state.eMarks[nextLine]) {
    const ch = state.src.charCodeAt(pos);
    if (ch !== 0x7C /* | */ && ch !== 0x2D /* - */ && ch !== 0x3A /* : */ && !isSpace(ch)) {
      return false;
    }
    pos++;
  }
  let lineText = getLine(state, startLine + 1);
  let columns = lineText.split('|');
  const aligns = [];
  for (let i = 0; i < columns.length; i++) {
    const t = columns[i].trim();
    if (!t) {
      // allow empty columns before and after table, but not in between columns;
      // e.g. allow ` |---| `, disallow ` ---||--- `
      if (i === 0 || i === columns.length - 1) {
        continue;
      } else {
        return false;
      }
    }
    if (!/^:?-+:?$/.test(t)) {
      return false;
    }
    if (t.charCodeAt(t.length - 1) === 0x3A /* : */) {
      aligns.push(t.charCodeAt(0) === 0x3A /* : */ ? 'center' : 'right');
    } else if (t.charCodeAt(0) === 0x3A /* : */) {
      aligns.push('left');
    } else {
      aligns.push('');
    }
  }
  lineText = getLine(state, startLine).trim();
  if (lineText.indexOf('|') === -1) {
    return false;
  }
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  columns = escapedSplit(lineText);
  if (columns.length && columns[0] === '') columns.shift();
  if (columns.length && columns[columns.length - 1] === '') columns.pop();

  // header row will define an amount of columns in the entire table,
  // and align row should be exactly the same (the rest of the rows can differ)
  const columnCount = columns.length;
  if (columnCount === 0 || columnCount !== aligns.length) {
    return false;
  }
  if (silent) {
    return true;
  }
  const oldParentType = state.parentType;
  state.parentType = 'table';

  // use 'blockquote' lists for termination because it's
  // the most similar to tables
  const terminatorRules = state.md.block.ruler.getRules('blockquote');
  const token_to = state.push('table_open', 'table', 1);
  const tableLines = [startLine, 0];
  token_to.map = tableLines;
  const token_tho = state.push('thead_open', 'thead', 1);
  token_tho.map = [startLine, startLine + 1];
  const token_htro = state.push('tr_open', 'tr', 1);
  token_htro.map = [startLine, startLine + 1];
  for (let i = 0; i < columns.length; i++) {
    const token_ho = state.push('th_open', 'th', 1);
    if (aligns[i]) {
      token_ho.attrs = [['style', 'text-align:' + aligns[i]]];
    }
    const token_il = state.push('inline', '', 0);
    token_il.content = columns[i].trim();
    token_il.children = [];
    state.push('th_close', 'th', -1);
  }
  state.push('tr_close', 'tr', -1);
  state.push('thead_close', 'thead', -1);
  let tbodyLines;
  for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
    if (state.sCount[nextLine] < state.blkIndent) {
      break;
    }
    let terminate = false;
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
    lineText = getLine(state, nextLine).trim();
    if (!lineText) {
      break;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      break;
    }
    columns = escapedSplit(lineText);
    if (columns.length && columns[0] === '') columns.shift();
    if (columns.length && columns[columns.length - 1] === '') columns.pop();
    if (nextLine === startLine + 2) {
      const token_tbo = state.push('tbody_open', 'tbody', 1);
      token_tbo.map = tbodyLines = [startLine + 2, 0];
    }
    const token_tro = state.push('tr_open', 'tr', 1);
    token_tro.map = [nextLine, nextLine + 1];
    for (let i = 0; i < columnCount; i++) {
      const token_tdo = state.push('td_open', 'td', 1);
      if (aligns[i]) {
        token_tdo.attrs = [['style', 'text-align:' + aligns[i]]];
      }
      const token_il = state.push('inline', '', 0);
      token_il.content = columns[i] ? columns[i].trim() : '';
      token_il.children = [];
      state.push('td_close', 'td', -1);
    }
    state.push('tr_close', 'tr', -1);
  }
  if (tbodyLines) {
    state.push('tbody_close', 'tbody', -1);
    tbodyLines[1] = nextLine;
  }
  state.push('table_close', 'table', -1);
  tableLines[1] = nextLine;
  state.parentType = oldParentType;
  state.line = nextLine;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/code.mjs
// Code block (4 spaces padded)

function code(state, startLine, endLine /*, silent */) {
  if (state.sCount[startLine] - state.blkIndent < 4) {
    return false;
  }
  let nextLine = startLine + 1;
  let last = nextLine;
  while (nextLine < endLine) {
    if (state.isEmpty(nextLine)) {
      nextLine++;
      continue;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      nextLine++;
      last = nextLine;
      continue;
    }
    break;
  }
  state.line = last;
  const token = state.push('code_block', 'code', 0);
  token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\n';
  token.map = [startLine, state.line];
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/fence.mjs
// fences (``` lang, ~~~ lang)

function fence(state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (pos + 3 > max) {
    return false;
  }
  const marker = state.src.charCodeAt(pos);
  if (marker !== 0x7E /* ~ */ && marker !== 0x60 /* ` */) {
    return false;
  }

  // scan marker length
  let mem = pos;
  pos = state.skipChars(pos, marker);
  let len = pos - mem;
  if (len < 3) {
    return false;
  }
  const markup = state.src.slice(mem, pos);
  const params = state.src.slice(pos, max);
  if (marker === 0x60 /* ` */) {
    if (params.indexOf(String.fromCharCode(marker)) >= 0) {
      return false;
    }
  }

  // Since start is found, we can report success here in validation mode
  if (silent) {
    return true;
  }

  // search end of block
  let nextLine = startLine;
  let haveEndMarker = false;
  for (;;) {
    nextLine++;
    if (nextLine >= endLine) {
      // unclosed block should be autoclosed by end of document.
      // also block seems to be autoclosed by end of parent
      break;
    }
    pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];
    if (pos < max && state.sCount[nextLine] < state.blkIndent) {
      // non-empty line with negative indent should stop the list:
      // - ```
      //  test
      break;
    }
    if (state.src.charCodeAt(pos) !== marker) {
      continue;
    }
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      // closing fence should be indented less than 4 spaces
      continue;
    }
    pos = state.skipChars(pos, marker);

    // closing code fence must be at least as long as the opening one
    if (pos - mem < len) {
      continue;
    }

    // make sure tail has spaces only
    pos = state.skipSpaces(pos);
    if (pos < max) {
      continue;
    }
    haveEndMarker = true;
    // found!
    break;
  }

  // If a fence has heading spaces, they should be removed from its inner block
  len = state.sCount[startLine];
  state.line = nextLine + (haveEndMarker ? 1 : 0);
  const token = state.push('fence', 'code', 0);
  token.info = params;
  token.content = state.getLines(startLine + 1, nextLine, len, true);
  token.markup = markup;
  token.map = [startLine, state.line];
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/blockquote.mjs
// Block quotes


function blockquote(state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];
  const oldLineMax = state.lineMax;

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }

  // check the block quote marker
  if (state.src.charCodeAt(pos) !== 0x3E /* > */) {
    return false;
  }

  // we know that it's going to be a valid blockquote,
  // so no point trying to find the end of it in silent mode
  if (silent) {
    return true;
  }
  const oldBMarks = [];
  const oldBSCount = [];
  const oldSCount = [];
  const oldTShift = [];
  const terminatorRules = state.md.block.ruler.getRules('blockquote');
  const oldParentType = state.parentType;
  state.parentType = 'blockquote';
  let lastLineEmpty = false;
  let nextLine;

  // Search the end of the block
  //
  // Block ends with either:
  //  1. an empty line outside:
  //     ```
  //     > test
  //
  //     ```
  //  2. an empty line inside:
  //     ```
  //     >
  //     test
  //     ```
  //  3. another tag:
  //     ```
  //     > test
  //      - - -
  //     ```
  for (nextLine = startLine; nextLine < endLine; nextLine++) {
    // check if it's outdented, i.e. it's inside list item and indented
    // less than said list item:
    //
    // ```
    // 1. anything
    //    > current blockquote
    // 2. checking this line
    // ```
    const isOutdented = state.sCount[nextLine] < state.blkIndent;
    pos = state.bMarks[nextLine] + state.tShift[nextLine];
    max = state.eMarks[nextLine];
    if (pos >= max) {
      // Case 1: line is not inside the blockquote, and this line is empty.
      break;
    }
    if (state.src.charCodeAt(pos++) === 0x3E /* > */ && !isOutdented) {
      // This line is inside the blockquote.

      // set offset past spaces and ">"
      let initial = state.sCount[nextLine] + 1;
      let spaceAfterMarker;
      let adjustTab;

      // skip one optional space after '>'
      if (state.src.charCodeAt(pos) === 0x20 /* space */) {
        // ' >   test '
        //     ^ -- position start of line here:
        pos++;
        initial++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
        spaceAfterMarker = true;
        if ((state.bsCount[nextLine] + initial) % 4 === 3) {
          // '  >\t  test '
          //       ^ -- position start of line here (tab has width===1)
          pos++;
          initial++;
          adjustTab = false;
        } else {
          // ' >\t  test '
          //    ^ -- position start of line here + shift bsCount slightly
          //         to make extra space appear
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }
      let offset = initial;
      oldBMarks.push(state.bMarks[nextLine]);
      state.bMarks[nextLine] = pos;
      while (pos < max) {
        const ch = state.src.charCodeAt(pos);
        if (isSpace(ch)) {
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }
        pos++;
      }
      lastLineEmpty = pos >= max;
      oldBSCount.push(state.bsCount[nextLine]);
      state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
      oldSCount.push(state.sCount[nextLine]);
      state.sCount[nextLine] = offset - initial;
      oldTShift.push(state.tShift[nextLine]);
      state.tShift[nextLine] = pos - state.bMarks[nextLine];
      continue;
    }

    // Case 2: line is not inside the blockquote, and the last line was empty.
    if (lastLineEmpty) {
      break;
    }

    // Case 3: another tag found.
    let terminate = false;
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      // Quirk to enforce "hard termination mode" for paragraphs;
      // normally if you call `tokenize(state, startLine, nextLine)`,
      // paragraphs will look below nextLine for paragraph continuation,
      // but if blockquote is terminated by another tag, they shouldn't
      state.lineMax = nextLine;
      if (state.blkIndent !== 0) {
        // state.blkIndent was non-zero, we now set it to zero,
        // so we need to re-calculate all offsets to appear as
        // if indent wasn't changed
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
        state.sCount[nextLine] -= state.blkIndent;
      }
      break;
    }
    oldBMarks.push(state.bMarks[nextLine]);
    oldBSCount.push(state.bsCount[nextLine]);
    oldTShift.push(state.tShift[nextLine]);
    oldSCount.push(state.sCount[nextLine]);

    // A negative indentation means that this is a paragraph continuation
    //
    state.sCount[nextLine] = -1;
  }
  const oldIndent = state.blkIndent;
  state.blkIndent = 0;
  const token_o = state.push('blockquote_open', 'blockquote', 1);
  token_o.markup = '>';
  const lines = [startLine, 0];
  token_o.map = lines;
  state.md.block.tokenize(state, startLine, nextLine);
  const token_c = state.push('blockquote_close', 'blockquote', -1);
  token_c.markup = '>';
  state.lineMax = oldLineMax;
  state.parentType = oldParentType;
  lines[1] = state.line;

  // Restore original tShift; this might not be necessary since the parser
  // has already been here, but just to make sure we can do that.
  for (let i = 0; i < oldTShift.length; i++) {
    state.bMarks[i + startLine] = oldBMarks[i];
    state.tShift[i + startLine] = oldTShift[i];
    state.sCount[i + startLine] = oldSCount[i];
    state.bsCount[i + startLine] = oldBSCount[i];
  }
  state.blkIndent = oldIndent;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/hr.mjs
// Horizontal rule


function hr(state, startLine, endLine, silent) {
  const max = state.eMarks[startLine];
  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  const marker = state.src.charCodeAt(pos++);

  // Check hr marker
  if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x5F /* _ */) {
    return false;
  }

  // markers can be mixed with spaces, but there should be at least 3 of them

  let cnt = 1;
  while (pos < max) {
    const ch = state.src.charCodeAt(pos++);
    if (ch !== marker && !isSpace(ch)) {
      return false;
    }
    if (ch === marker) {
      cnt++;
    }
  }
  if (cnt < 3) {
    return false;
  }
  if (silent) {
    return true;
  }
  state.line = startLine + 1;
  const token = state.push('hr', 'hr', 0);
  token.map = [startLine, state.line];
  token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/list.mjs
// Lists



// Search `[-+*][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipBulletListMarker(state, startLine) {
  const max = state.eMarks[startLine];
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  const marker = state.src.charCodeAt(pos++);
  // Check bullet
  if (marker !== 0x2A /* * */ && marker !== 0x2D /* - */ && marker !== 0x2B /* + */) {
    return -1;
  }
  if (pos < max) {
    const ch = state.src.charCodeAt(pos);
    if (!isSpace(ch)) {
      // " -test " - is not a list item
      return -1;
    }
  }
  return pos;
}

// Search `\d+[.)][\n ]`, returns next pos after marker on success
// or -1 on fail.
function skipOrderedListMarker(state, startLine) {
  const start = state.bMarks[startLine] + state.tShift[startLine];
  const max = state.eMarks[startLine];
  let pos = start;

  // List marker should have at least 2 chars (digit + dot)
  if (pos + 1 >= max) {
    return -1;
  }
  let ch = state.src.charCodeAt(pos++);
  if (ch < 0x30 /* 0 */ || ch > 0x39 /* 9 */) {
    return -1;
  }
  for (;;) {
    // EOL -> fail
    if (pos >= max) {
      return -1;
    }
    ch = state.src.charCodeAt(pos++);
    if (ch >= 0x30 /* 0 */ && ch <= 0x39 /* 9 */) {
      // List marker should have no more than 9 digits
      // (prevents integer overflow in browsers)
      if (pos - start >= 10) {
        return -1;
      }
      continue;
    }

    // found valid marker
    if (ch === 0x29 /* ) */ || ch === 0x2e /* . */) {
      break;
    }
    return -1;
  }
  if (pos < max) {
    ch = state.src.charCodeAt(pos);
    if (!isSpace(ch)) {
      // " 1.test " - is not a list item
      return -1;
    }
  }
  return pos;
}
function markTightParagraphs(state, idx) {
  const level = state.level + 2;
  for (let i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
    if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
      state.tokens[i + 2].hidden = true;
      state.tokens[i].hidden = true;
      i += 2;
    }
  }
}
function list(state, startLine, endLine, silent) {
  let max, pos, start, token;
  let nextLine = startLine;
  let tight = true;

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[nextLine] - state.blkIndent >= 4) {
    return false;
  }

  // Special case:
  //  - item 1
  //   - item 2
  //    - item 3
  //     - item 4
  //      - this one is a paragraph continuation
  if (state.listIndent >= 0 && state.sCount[nextLine] - state.listIndent >= 4 && state.sCount[nextLine] < state.blkIndent) {
    return false;
  }
  let isTerminatingParagraph = false;

  // limit conditions when list can interrupt
  // a paragraph (validation mode only)
  if (silent && state.parentType === 'paragraph') {
    // Next list item should still terminate previous list item;
    //
    // This code can fail if plugins use blkIndent as well as lists,
    // but I hope the spec gets fixed long before that happens.
    //
    if (state.sCount[nextLine] >= state.blkIndent) {
      isTerminatingParagraph = true;
    }
  }

  // Detect list type and position after marker
  let isOrdered;
  let markerValue;
  let posAfterMarker;
  if ((posAfterMarker = skipOrderedListMarker(state, nextLine)) >= 0) {
    isOrdered = true;
    start = state.bMarks[nextLine] + state.tShift[nextLine];
    markerValue = Number(state.src.slice(start, posAfterMarker - 1));

    // If we're starting a new ordered list right after
    // a paragraph, it should start with 1.
    if (isTerminatingParagraph && markerValue !== 1) return false;
  } else if ((posAfterMarker = skipBulletListMarker(state, nextLine)) >= 0) {
    isOrdered = false;
  } else {
    return false;
  }

  // If we're starting a new unordered list right after
  // a paragraph, first line should not be empty.
  if (isTerminatingParagraph) {
    if (state.skipSpaces(posAfterMarker) >= state.eMarks[nextLine]) return false;
  }

  // For validation mode we can terminate immediately
  if (silent) {
    return true;
  }

  // We should terminate list on style change. Remember first one to compare.
  const markerCharCode = state.src.charCodeAt(posAfterMarker - 1);

  // Start list
  const listTokIdx = state.tokens.length;
  if (isOrdered) {
    token = state.push('ordered_list_open', 'ol', 1);
    if (markerValue !== 1) {
      token.attrs = [['start', markerValue]];
    }
  } else {
    token = state.push('bullet_list_open', 'ul', 1);
  }
  const listLines = [nextLine, 0];
  token.map = listLines;
  token.markup = String.fromCharCode(markerCharCode);

  //
  // Iterate list items
  //

  let prevEmptyEnd = false;
  const terminatorRules = state.md.block.ruler.getRules('list');
  const oldParentType = state.parentType;
  state.parentType = 'list';
  while (nextLine < endLine) {
    pos = posAfterMarker;
    max = state.eMarks[nextLine];
    const initial = state.sCount[nextLine] + posAfterMarker - (state.bMarks[nextLine] + state.tShift[nextLine]);
    let offset = initial;
    while (pos < max) {
      const ch = state.src.charCodeAt(pos);
      if (ch === 0x09) {
        offset += 4 - (offset + state.bsCount[nextLine]) % 4;
      } else if (ch === 0x20) {
        offset++;
      } else {
        break;
      }
      pos++;
    }
    const contentStart = pos;
    let indentAfterMarker;
    if (contentStart >= max) {
      // trimming space in "-    \n  3" case, indent is 1 here
      indentAfterMarker = 1;
    } else {
      indentAfterMarker = offset - initial;
    }

    // If we have more than 4 spaces, the indent is 1
    // (the rest is just indented code block)
    if (indentAfterMarker > 4) {
      indentAfterMarker = 1;
    }

    // "  -  test"
    //  ^^^^^ - calculating total length of this thing
    const indent = initial + indentAfterMarker;

    // Run subparser & write tokens
    token = state.push('list_item_open', 'li', 1);
    token.markup = String.fromCharCode(markerCharCode);
    const itemLines = [nextLine, 0];
    token.map = itemLines;
    if (isOrdered) {
      token.info = state.src.slice(start, posAfterMarker - 1);
    }

    // change current state, then restore it after parser subcall
    const oldTight = state.tight;
    const oldTShift = state.tShift[nextLine];
    const oldSCount = state.sCount[nextLine];

    //  - example list
    // ^ listIndent position will be here
    //   ^ blkIndent position will be here
    //
    const oldListIndent = state.listIndent;
    state.listIndent = state.blkIndent;
    state.blkIndent = indent;
    state.tight = true;
    state.tShift[nextLine] = contentStart - state.bMarks[nextLine];
    state.sCount[nextLine] = offset;
    if (contentStart >= max && state.isEmpty(nextLine + 1)) {
      // workaround for this case
      // (list item is empty, list terminates before "foo"):
      // ~~~~~~~~
      //   -
      //
      //     foo
      // ~~~~~~~~
      state.line = Math.min(state.line + 2, endLine);
    } else {
      state.md.block.tokenize(state, nextLine, endLine, true);
    }

    // If any of list item is tight, mark list as tight
    if (!state.tight || prevEmptyEnd) {
      tight = false;
    }
    // Item become loose if finish with empty line,
    // but we should filter last element, because it means list finish
    prevEmptyEnd = state.line - nextLine > 1 && state.isEmpty(state.line - 1);
    state.blkIndent = state.listIndent;
    state.listIndent = oldListIndent;
    state.tShift[nextLine] = oldTShift;
    state.sCount[nextLine] = oldSCount;
    state.tight = oldTight;
    token = state.push('list_item_close', 'li', -1);
    token.markup = String.fromCharCode(markerCharCode);
    nextLine = state.line;
    itemLines[1] = nextLine;
    if (nextLine >= endLine) {
      break;
    }

    //
    // Try to check if list is terminated or continued.
    //
    if (state.sCount[nextLine] < state.blkIndent) {
      break;
    }

    // if it's indented more than 3 spaces, it should be a code block
    if (state.sCount[nextLine] - state.blkIndent >= 4) {
      break;
    }

    // fail if terminating block found
    let terminate = false;
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }

    // fail if list has another type
    if (isOrdered) {
      posAfterMarker = skipOrderedListMarker(state, nextLine);
      if (posAfterMarker < 0) {
        break;
      }
      start = state.bMarks[nextLine] + state.tShift[nextLine];
    } else {
      posAfterMarker = skipBulletListMarker(state, nextLine);
      if (posAfterMarker < 0) {
        break;
      }
    }
    if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) {
      break;
    }
  }

  // Finalize list
  if (isOrdered) {
    token = state.push('ordered_list_close', 'ol', -1);
  } else {
    token = state.push('bullet_list_close', 'ul', -1);
  }
  token.markup = String.fromCharCode(markerCharCode);
  listLines[1] = nextLine;
  state.line = nextLine;
  state.parentType = oldParentType;

  // mark paragraphs tight if needed
  if (tight) {
    markTightParagraphs(state, listTokIdx);
  }
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/reference.mjs

function reference(state, startLine, _endLine, silent) {
  let lines = 0;
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];
  let nextLine = startLine + 1;

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (state.src.charCodeAt(pos) !== 0x5B /* [ */) {
    return false;
  }

  // Simple check to quickly interrupt scan on [link](url) at the start of line.
  // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54
  while (++pos < max) {
    if (state.src.charCodeAt(pos) === 0x5D /* ] */ && state.src.charCodeAt(pos - 1) !== 0x5C /* \ */) {
      if (pos + 1 === max) {
        return false;
      }
      if (state.src.charCodeAt(pos + 1) !== 0x3A /* : */) {
        return false;
      }
      break;
    }
  }
  const endLine = state.lineMax;

  // jump line-by-line until empty one or EOF
  const terminatorRules = state.md.block.ruler.getRules('reference');
  const oldParentType = state.parentType;
  state.parentType = 'reference';
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) {
      continue;
    }

    // Some tags can terminate paragraph without empty line.
    let terminate = false;
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  const str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  max = str.length;
  let labelEnd = -1;
  for (pos = 1; pos < max; pos++) {
    const ch = str.charCodeAt(pos);
    if (ch === 0x5B /* [ */) {
      return false;
    } else if (ch === 0x5D /* ] */) {
      labelEnd = pos;
      break;
    } else if (ch === 0x0A /* \n */) {
      lines++;
    } else if (ch === 0x5C /* \ */) {
      pos++;
      if (pos < max && str.charCodeAt(pos) === 0x0A) {
        lines++;
      }
    }
  }
  if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A /* : */) {
    return false;
  }

  // [label]:   destination   'title'
  //         ^^^ skip optional whitespace here
  for (pos = labelEnd + 2; pos < max; pos++) {
    const ch = str.charCodeAt(pos);
    if (ch === 0x0A) {
      lines++;
    } else if (isSpace(ch)) {
      /* eslint no-empty:0 */
    } else {
      break;
    }
  }

  // [label]:   destination   'title'
  //            ^^^^^^^^^^^ parse this
  const destRes = state.md.helpers.parseLinkDestination(str, pos, max);
  if (!destRes.ok) {
    return false;
  }
  const href = state.md.normalizeLink(destRes.str);
  if (!state.md.validateLink(href)) {
    return false;
  }
  pos = destRes.pos;
  lines += destRes.lines;

  // save cursor state, we could require to rollback later
  const destEndPos = pos;
  const destEndLineNo = lines;

  // [label]:   destination   'title'
  //                       ^^^ skipping those spaces
  const start = pos;
  for (; pos < max; pos++) {
    const ch = str.charCodeAt(pos);
    if (ch === 0x0A) {
      lines++;
    } else if (isSpace(ch)) {
      /* eslint no-empty:0 */
    } else {
      break;
    }
  }

  // [label]:   destination   'title'
  //                          ^^^^^^^ parse this
  const titleRes = state.md.helpers.parseLinkTitle(str, pos, max);
  let title;
  if (pos < max && start !== pos && titleRes.ok) {
    title = titleRes.str;
    pos = titleRes.pos;
    lines += titleRes.lines;
  } else {
    title = '';
    pos = destEndPos;
    lines = destEndLineNo;
  }

  // skip trailing spaces until the rest of the line
  while (pos < max) {
    const ch = str.charCodeAt(pos);
    if (!isSpace(ch)) {
      break;
    }
    pos++;
  }
  if (pos < max && str.charCodeAt(pos) !== 0x0A) {
    if (title) {
      // garbage at the end of the line after title,
      // but it could still be a valid reference if we roll back
      title = '';
      pos = destEndPos;
      lines = destEndLineNo;
      while (pos < max) {
        const ch = str.charCodeAt(pos);
        if (!isSpace(ch)) {
          break;
        }
        pos++;
      }
    }
  }
  if (pos < max && str.charCodeAt(pos) !== 0x0A) {
    // garbage at the end of the line
    return false;
  }
  const label = normalizeReference(str.slice(1, labelEnd));
  if (!label) {
    // CommonMark 0.20 disallows empty labels
    return false;
  }

  // Reference can not terminate anything. This check is for safety only.
  /* istanbul ignore if */
  if (silent) {
    return true;
  }
  if (typeof state.env.references === 'undefined') {
    state.env.references = {};
  }
  if (typeof state.env.references[label] === 'undefined') {
    state.env.references[label] = {
      title,
      href
    };
  }
  state.parentType = oldParentType;
  state.line = startLine + lines + 1;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/common/html_blocks.mjs
// List of valid html blocks names, according to commonmark spec
// https://spec.commonmark.org/0.30/#html-blocks

/* harmony default export */ const html_blocks = (['address', 'article', 'aside', 'base', 'basefont', 'blockquote', 'body', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dialog', 'dir', 'div', 'dl', 'dt', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hr', 'html', 'iframe', 'legend', 'li', 'link', 'main', 'menu', 'menuitem', 'nav', 'noframes', 'ol', 'optgroup', 'option', 'p', 'param', 'section', 'source', 'summary', 'table', 'tbody', 'td', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul']);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/common/html_re.mjs
// Regexps to match html elements

const attr_name = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
const unquoted = '[^"\'=<>`\\x00-\\x20]+';
const single_quoted = "'[^']*'";
const double_quoted = '"[^"]*"';
const attr_value = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';
const attribute = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)';
const open_tag = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';
const close_tag = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
const comment = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
const processing = '<[?][\\s\\S]*?[?]>';
const declaration = '<![A-Z]+\\s+[^>]*>';
const cdata = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';
const HTML_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment + '|' + processing + '|' + declaration + '|' + cdata + ')');
const HTML_OPEN_CLOSE_TAG_RE = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');

;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/html_block.mjs
// HTML block




// An array of opening and corresponding closing sequences for html tags,
// last argument defines whether it can terminate a paragraph or not
//
const HTML_SEQUENCES = [[/^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true], [/^<!--/, /-->/, true], [/^<\?/, /\?>/, true], [/^<![A-Z]/, />/, true], [/^<!\[CDATA\[/, /\]\]>/, true], [new RegExp('^</?(' + html_blocks.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true], [new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\s*$'), /^$/, false]];
function html_block(state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  if (!state.md.options.html) {
    return false;
  }
  if (state.src.charCodeAt(pos) !== 0x3C /* < */) {
    return false;
  }
  let lineText = state.src.slice(pos, max);
  let i = 0;
  for (; i < HTML_SEQUENCES.length; i++) {
    if (HTML_SEQUENCES[i][0].test(lineText)) {
      break;
    }
  }
  if (i === HTML_SEQUENCES.length) {
    return false;
  }
  if (silent) {
    // true if this sequence can be a terminator, false otherwise
    return HTML_SEQUENCES[i][2];
  }
  let nextLine = startLine + 1;

  // If we are here - we detected HTML block.
  // Let's roll down till block end.
  if (!HTML_SEQUENCES[i][1].test(lineText)) {
    for (; nextLine < endLine; nextLine++) {
      if (state.sCount[nextLine] < state.blkIndent) {
        break;
      }
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      max = state.eMarks[nextLine];
      lineText = state.src.slice(pos, max);
      if (HTML_SEQUENCES[i][1].test(lineText)) {
        if (lineText.length !== 0) {
          nextLine++;
        }
        break;
      }
    }
  }
  state.line = nextLine;
  const token = state.push('html_block', '', 0);
  token.map = [startLine, nextLine];
  token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/heading.mjs
// heading (#, ##, ...)


function heading(state, startLine, endLine, silent) {
  let pos = state.bMarks[startLine] + state.tShift[startLine];
  let max = state.eMarks[startLine];

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  let ch = state.src.charCodeAt(pos);
  if (ch !== 0x23 /* # */ || pos >= max) {
    return false;
  }

  // count heading level
  let level = 1;
  ch = state.src.charCodeAt(++pos);
  while (ch === 0x23 /* # */ && pos < max && level <= 6) {
    level++;
    ch = state.src.charCodeAt(++pos);
  }
  if (level > 6 || pos < max && !isSpace(ch)) {
    return false;
  }
  if (silent) {
    return true;
  }

  // Let's cut tails like '    ###  ' from the end of string

  max = state.skipSpacesBack(max, pos);
  const tmp = state.skipCharsBack(max, 0x23, pos); // #
  if (tmp > pos && isSpace(state.src.charCodeAt(tmp - 1))) {
    max = tmp;
  }
  state.line = startLine + 1;
  const token_o = state.push('heading_open', 'h' + String(level), 1);
  token_o.markup = '########'.slice(0, level);
  token_o.map = [startLine, state.line];
  const token_i = state.push('inline', '', 0);
  token_i.content = state.src.slice(pos, max).trim();
  token_i.map = [startLine, state.line];
  token_i.children = [];
  const token_c = state.push('heading_close', 'h' + String(level), -1);
  token_c.markup = '########'.slice(0, level);
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/lheading.mjs
// lheading (---, ===)

function lheading(state, startLine, endLine /*, silent */) {
  const terminatorRules = state.md.block.ruler.getRules('paragraph');

  // if it's indented more than 3 spaces, it should be a code block
  if (state.sCount[startLine] - state.blkIndent >= 4) {
    return false;
  }
  const oldParentType = state.parentType;
  state.parentType = 'paragraph'; // use paragraph to match terminatorRules

  // jump line-by-line until empty one or EOF
  let level = 0;
  let marker;
  let nextLine = startLine + 1;
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }

    //
    // Check for underline in setext header
    //
    if (state.sCount[nextLine] >= state.blkIndent) {
      let pos = state.bMarks[nextLine] + state.tShift[nextLine];
      const max = state.eMarks[nextLine];
      if (pos < max) {
        marker = state.src.charCodeAt(pos);
        if (marker === 0x2D /* - */ || marker === 0x3D /* = */) {
          pos = state.skipChars(pos, marker);
          pos = state.skipSpaces(pos);
          if (pos >= max) {
            level = marker === 0x3D /* = */ ? 1 : 2;
            break;
          }
        }
      }
    }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) {
      continue;
    }

    // Some tags can terminate paragraph without empty line.
    let terminate = false;
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  if (!level) {
    // Didn't find valid underline
    return false;
  }
  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  state.line = nextLine + 1;
  const token_o = state.push('heading_open', 'h' + String(level), 1);
  token_o.markup = String.fromCharCode(marker);
  token_o.map = [startLine, state.line];
  const token_i = state.push('inline', '', 0);
  token_i.content = content;
  token_i.map = [startLine, state.line - 1];
  token_i.children = [];
  const token_c = state.push('heading_close', 'h' + String(level), -1);
  token_c.markup = String.fromCharCode(marker);
  state.parentType = oldParentType;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_block/paragraph.mjs
// Paragraph

function paragraph(state, startLine, endLine) {
  const terminatorRules = state.md.block.ruler.getRules('paragraph');
  const oldParentType = state.parentType;
  let nextLine = startLine + 1;
  state.parentType = 'paragraph';

  // jump line-by-line until empty one or EOF
  for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
    // this would be a code block normally, but after paragraph
    // it's considered a lazy continuation regardless of what's there
    if (state.sCount[nextLine] - state.blkIndent > 3) {
      continue;
    }

    // quirk for blockquotes, this line should already be checked by that rule
    if (state.sCount[nextLine] < 0) {
      continue;
    }

    // Some tags can terminate paragraph without empty line.
    let terminate = false;
    for (let i = 0, l = terminatorRules.length; i < l; i++) {
      if (terminatorRules[i](state, nextLine, endLine, true)) {
        terminate = true;
        break;
      }
    }
    if (terminate) {
      break;
    }
  }
  const content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
  state.line = nextLine;
  const token_o = state.push('paragraph_open', 'p', 1);
  token_o.map = [startLine, state.line];
  const token_i = state.push('inline', '', 0);
  token_i.content = content;
  token_i.map = [startLine, state.line];
  token_i.children = [];
  state.push('paragraph_close', 'p', -1);
  state.parentType = oldParentType;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/parser_block.mjs
/** internal
 * class ParserBlock
 *
 * Block-level tokenizer.
 **/














const parser_block_rules = [
// First 2 params - rule name & source. Secondary array - list of rules,
// which can be terminated by this one.
['table', table, ['paragraph', 'reference']], ['code', code], ['fence', fence, ['paragraph', 'reference', 'blockquote', 'list']], ['blockquote', blockquote, ['paragraph', 'reference', 'blockquote', 'list']], ['hr', hr, ['paragraph', 'reference', 'blockquote', 'list']], ['list', list, ['paragraph', 'reference', 'blockquote']], ['reference', reference], ['html_block', html_block, ['paragraph', 'reference', 'blockquote']], ['heading', heading, ['paragraph', 'reference', 'blockquote']], ['lheading', lheading], ['paragraph', paragraph]];

/**
 * new ParserBlock()
 **/
function ParserBlock() {
  /**
   * ParserBlock#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of block rules.
   **/
  this.ruler = new ruler();
  for (let i = 0; i < parser_block_rules.length; i++) {
    this.ruler.push(parser_block_rules[i][0], parser_block_rules[i][1], {
      alt: (parser_block_rules[i][2] || []).slice()
    });
  }
}

// Generate tokens for input range
//
ParserBlock.prototype.tokenize = function (state, startLine, endLine) {
  const rules = this.ruler.getRules('');
  const len = rules.length;
  const maxNesting = state.md.options.maxNesting;
  let line = startLine;
  let hasEmptyLines = false;
  while (line < endLine) {
    state.line = line = state.skipEmptyLines(line);
    if (line >= endLine) {
      break;
    }

    // Termination condition for nested calls.
    // Nested calls currently used for blockquotes & lists
    if (state.sCount[line] < state.blkIndent) {
      break;
    }

    // If nesting level exceeded - skip tail to the end. That's not ordinary
    // situation and we should not care about content.
    if (state.level >= maxNesting) {
      state.line = endLine;
      break;
    }

    // Try all possible rules.
    // On success, rule should:
    //
    // - update `state.line`
    // - update `state.tokens`
    // - return true
    const prevLine = state.line;
    let ok = false;
    for (let i = 0; i < len; i++) {
      ok = rules[i](state, line, endLine, false);
      if (ok) {
        if (prevLine >= state.line) {
          throw new Error("block rule didn't increment state.line");
        }
        break;
      }
    }

    // this can only happen if user disables paragraph rule
    if (!ok) throw new Error('none of the block rules matched');

    // set state.tight if we had an empty line before current tag
    // i.e. latest empty line should not count
    state.tight = !hasEmptyLines;

    // paragraph might "eat" one newline after it in nested lists
    if (state.isEmpty(state.line - 1)) {
      hasEmptyLines = true;
    }
    line = state.line;
    if (line < endLine && state.isEmpty(line)) {
      hasEmptyLines = true;
      line++;
      state.line = line;
    }
  }
};

/**
 * ParserBlock.parse(str, md, env, outTokens)
 *
 * Process input string and push block tokens into `outTokens`
 **/
ParserBlock.prototype.parse = function (src, md, env, outTokens) {
  if (!src) {
    return;
  }
  const state = new this.State(src, md, env, outTokens);
  this.tokenize(state, state.line, state.lineMax);
};
ParserBlock.prototype.State = state_block;
/* harmony default export */ const parser_block = (ParserBlock);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/state_inline.mjs
// Inline parser state



function StateInline(src, md, env, outTokens) {
  this.src = src;
  this.env = env;
  this.md = md;
  this.tokens = outTokens;
  this.tokens_meta = Array(outTokens.length);
  this.pos = 0;
  this.posMax = this.src.length;
  this.level = 0;
  this.pending = '';
  this.pendingLevel = 0;

  // Stores { start: end } pairs. Useful for backtrack
  // optimization of pairs parse (emphasis, strikes).
  this.cache = {};

  // List of emphasis-like delimiters for current tag
  this.delimiters = [];

  // Stack of delimiter lists for upper level tags
  this._prev_delimiters = [];

  // backtick length => last seen position
  this.backticks = {};
  this.backticksScanned = false;

  // Counter used to disable inline linkify-it execution
  // inside <a> and markdown links
  this.linkLevel = 0;
}

// Flush pending text
//
StateInline.prototype.pushPending = function () {
  const token = new lib_token('text', '', 0);
  token.content = this.pending;
  token.level = this.pendingLevel;
  this.tokens.push(token);
  this.pending = '';
  return token;
};

// Push new token to "stream".
// If pending text exists - flush it as text token
//
StateInline.prototype.push = function (type, tag, nesting) {
  if (this.pending) {
    this.pushPending();
  }
  const token = new lib_token(type, tag, nesting);
  let token_meta = null;
  if (nesting < 0) {
    // closing tag
    this.level--;
    this.delimiters = this._prev_delimiters.pop();
  }
  token.level = this.level;
  if (nesting > 0) {
    // opening tag
    this.level++;
    this._prev_delimiters.push(this.delimiters);
    this.delimiters = [];
    token_meta = {
      delimiters: this.delimiters
    };
  }
  this.pendingLevel = this.level;
  this.tokens.push(token);
  this.tokens_meta.push(token_meta);
  return token;
};

// Scan a sequence of emphasis-like markers, and determine whether
// it can start an emphasis sequence or end an emphasis sequence.
//
//  - start - position to scan from (it should point at a valid marker);
//  - canSplitWord - determine if these markers can be found inside a word
//
StateInline.prototype.scanDelims = function (start, canSplitWord) {
  let can_open, can_close;
  let left_flanking = true;
  let right_flanking = true;
  const max = this.posMax;
  const marker = this.src.charCodeAt(start);

  // treat beginning of the line as a whitespace
  const lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;
  let pos = start;
  while (pos < max && this.src.charCodeAt(pos) === marker) {
    pos++;
  }
  const count = pos - start;

  // treat end of the line as a whitespace
  const nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;
  const isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
  const isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
  const isLastWhiteSpace = isWhiteSpace(lastChar);
  const isNextWhiteSpace = isWhiteSpace(nextChar);
  if (isNextWhiteSpace) {
    left_flanking = false;
  } else if (isNextPunctChar) {
    if (!(isLastWhiteSpace || isLastPunctChar)) {
      left_flanking = false;
    }
  }
  if (isLastWhiteSpace) {
    right_flanking = false;
  } else if (isLastPunctChar) {
    if (!(isNextWhiteSpace || isNextPunctChar)) {
      right_flanking = false;
    }
  }
  if (!canSplitWord) {
    can_open = left_flanking && (!right_flanking || isLastPunctChar);
    can_close = right_flanking && (!left_flanking || isNextPunctChar);
  } else {
    can_open = left_flanking;
    can_close = right_flanking;
  }
  return {
    can_open,
    can_close,
    length: count
  };
};

// re-export Token class to use in block rules
StateInline.prototype.Token = lib_token;
/* harmony default export */ const state_inline = (StateInline);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/text.mjs
// Skip text characters for text token, place those to pending buffer
// and increment current pos

// Rule to skip pure text
// '{}$%@~+=:' reserved for extentions

// !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~

// !!!! Don't confuse with "Markdown ASCII Punctuation" chars
// http://spec.commonmark.org/0.15/#ascii-punctuation-character
function isTerminatorChar(ch) {
  switch (ch) {
    case 0x0A /* \n */:
    case 0x21 /* ! */:
    case 0x23 /* # */:
    case 0x24 /* $ */:
    case 0x25 /* % */:
    case 0x26 /* & */:
    case 0x2A /* * */:
    case 0x2B /* + */:
    case 0x2D /* - */:
    case 0x3A /* : */:
    case 0x3C /* < */:
    case 0x3D /* = */:
    case 0x3E /* > */:
    case 0x40 /* @ */:
    case 0x5B /* [ */:
    case 0x5C /* \ */:
    case 0x5D /* ] */:
    case 0x5E /* ^ */:
    case 0x5F /* _ */:
    case 0x60 /* ` */:
    case 0x7B /* { */:
    case 0x7D /* } */:
    case 0x7E /* ~ */:
      return true;
    default:
      return false;
  }
}
function text_text(state, silent) {
  let pos = state.pos;
  while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
    pos++;
  }
  if (pos === state.pos) {
    return false;
  }
  if (!silent) {
    state.pending += state.src.slice(state.pos, pos);
  }
  state.pos = pos;
  return true;
}

// Alternative implementation, for memory.
//
// It costs 10% of performance, but allows extend terminators list, if place it
// to `ParcerInline` property. Probably, will switch to it sometime, such
// flexibility required.

/*
var TERMINATOR_RE = /[\n!#$%&*+\-:<=>@[\\\]^_`{}~]/;

module.exports = function text(state, silent) {
  var pos = state.pos,
      idx = state.src.slice(pos).search(TERMINATOR_RE);

  // first char is terminator -> empty text
  if (idx === 0) { return false; }

  // no terminator -> text till end of string
  if (idx < 0) {
    if (!silent) { state.pending += state.src.slice(pos); }
    state.pos = state.src.length;
    return true;
  }

  if (!silent) { state.pending += state.src.slice(pos, pos + idx); }

  state.pos += idx;

  return true;
}; */
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/linkify.mjs
// Process links like https://example.org/

// RFC3986: scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
const SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;
function linkify_linkify(state, silent) {
  if (!state.md.options.linkify) return false;
  if (state.linkLevel > 0) return false;
  const pos = state.pos;
  const max = state.posMax;
  if (pos + 3 > max) return false;
  if (state.src.charCodeAt(pos) !== 0x3A /* : */) return false;
  if (state.src.charCodeAt(pos + 1) !== 0x2F /* / */) return false;
  if (state.src.charCodeAt(pos + 2) !== 0x2F /* / */) return false;
  const match = state.pending.match(SCHEME_RE);
  if (!match) return false;
  const proto = match[1];
  const link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));
  if (!link) return false;
  let url = link.url;

  // invalid link, but still detected by linkify somehow;
  // need to check to prevent infinite loop below
  if (url.length <= proto.length) return false;

  // disallow '*' at the end of the link (conflicts with emphasis)
  url = url.replace(/\*+$/, '');
  const fullUrl = state.md.normalizeLink(url);
  if (!state.md.validateLink(fullUrl)) return false;
  if (!silent) {
    state.pending = state.pending.slice(0, -proto.length);
    const token_o = state.push('link_open', 'a', 1);
    token_o.attrs = [['href', fullUrl]];
    token_o.markup = 'linkify';
    token_o.info = 'auto';
    const token_t = state.push('text', '', 0);
    token_t.content = state.md.normalizeLinkText(url);
    const token_c = state.push('link_close', 'a', -1);
    token_c.markup = 'linkify';
    token_c.info = 'auto';
  }
  state.pos += url.length - proto.length;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/newline.mjs
// Proceess '\n'


function newline(state, silent) {
  let pos = state.pos;
  if (state.src.charCodeAt(pos) !== 0x0A /* \n */) {
    return false;
  }
  const pmax = state.pending.length - 1;
  const max = state.posMax;

  // '  \n' -> hardbreak
  // Lookup in pending chars is bad practice! Don't copy to other rules!
  // Pending string is stored in concat mode, indexed lookups will cause
  // convertion to flat mode.
  if (!silent) {
    if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
      if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
        // Find whitespaces tail of pending chars.
        let ws = pmax - 1;
        while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;
        state.pending = state.pending.slice(0, ws);
        state.push('hardbreak', 'br', 0);
      } else {
        state.pending = state.pending.slice(0, -1);
        state.push('softbreak', 'br', 0);
      }
    } else {
      state.push('softbreak', 'br', 0);
    }
  }
  pos++;

  // skip heading spaces for next line
  while (pos < max && isSpace(state.src.charCodeAt(pos))) {
    pos++;
  }
  state.pos = pos;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/escape.mjs
// Process escaped chars and hardbreaks


const ESCAPED = [];
for (let i = 0; i < 256; i++) {
  ESCAPED.push(0);
}
'\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'.split('').forEach(function (ch) {
  ESCAPED[ch.charCodeAt(0)] = 1;
});
function rules_inline_escape_escape(state, silent) {
  let pos = state.pos;
  const max = state.posMax;
  if (state.src.charCodeAt(pos) !== 0x5C /* \ */) return false;
  pos++;

  // '\' at the end of the inline block
  if (pos >= max) return false;
  let ch1 = state.src.charCodeAt(pos);
  if (ch1 === 0x0A) {
    if (!silent) {
      state.push('hardbreak', 'br', 0);
    }
    pos++;
    // skip leading whitespaces from next line
    while (pos < max) {
      ch1 = state.src.charCodeAt(pos);
      if (!isSpace(ch1)) break;
      pos++;
    }
    state.pos = pos;
    return true;
  }
  let escapedStr = state.src[pos];
  if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {
    const ch2 = state.src.charCodeAt(pos + 1);
    if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {
      escapedStr += state.src[pos + 1];
      pos++;
    }
  }
  const origStr = '\\' + escapedStr;
  if (!silent) {
    const token = state.push('text_special', '', 0);
    if (ch1 < 256 && ESCAPED[ch1] !== 0) {
      token.content = escapedStr;
    } else {
      token.content = origStr;
    }
    token.markup = origStr;
    token.info = 'escape';
  }
  state.pos = pos + 1;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/backticks.mjs
// Parse backticks

function backtick(state, silent) {
  let pos = state.pos;
  const ch = state.src.charCodeAt(pos);
  if (ch !== 0x60 /* ` */) {
    return false;
  }
  const start = pos;
  pos++;
  const max = state.posMax;

  // scan marker length
  while (pos < max && state.src.charCodeAt(pos) === 0x60 /* ` */) {
    pos++;
  }
  const marker = state.src.slice(start, pos);
  const openerLength = marker.length;
  if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
    if (!silent) state.pending += marker;
    state.pos += openerLength;
    return true;
  }
  let matchEnd = pos;
  let matchStart;

  // Nothing found in the cache, scan until the end of the line (or until marker is found)
  while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
    matchEnd = matchStart + 1;

    // scan marker length
    while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60 /* ` */) {
      matchEnd++;
    }
    const closerLength = matchEnd - matchStart;
    if (closerLength === openerLength) {
      // Found matching closer length.
      if (!silent) {
        const token = state.push('code_inline', 'code', 0);
        token.markup = marker;
        token.content = state.src.slice(pos, matchStart).replace(/\n/g, ' ').replace(/^ (.+) $/, '$1');
      }
      state.pos = matchEnd;
      return true;
    }

    // Some different length found, put it in cache as upper limit of where closer can be found
    state.backticks[closerLength] = matchStart;
  }

  // Scanned through the end, didn't find anything
  state.backticksScanned = true;
  if (!silent) state.pending += marker;
  state.pos += openerLength;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/strikethrough.mjs
// ~~strike through~~
//

// Insert each marker as a separate text token, and add it to delimiter list
//
function strikethrough_tokenize(state, silent) {
  const start = state.pos;
  const marker = state.src.charCodeAt(start);
  if (silent) {
    return false;
  }
  if (marker !== 0x7E /* ~ */) {
    return false;
  }
  const scanned = state.scanDelims(state.pos, true);
  let len = scanned.length;
  const ch = String.fromCharCode(marker);
  if (len < 2) {
    return false;
  }
  let token;
  if (len % 2) {
    token = state.push('text', '', 0);
    token.content = ch;
    len--;
  }
  for (let i = 0; i < len; i += 2) {
    token = state.push('text', '', 0);
    token.content = ch + ch;
    state.delimiters.push({
      marker,
      length: 0,
      // disable "rule of 3" length checks meant for emphasis
      token: state.tokens.length - 1,
      end: -1,
      open: scanned.can_open,
      close: scanned.can_close
    });
  }
  state.pos += scanned.length;
  return true;
}
function postProcess(state, delimiters) {
  let token;
  const loneMarkers = [];
  const max = delimiters.length;
  for (let i = 0; i < max; i++) {
    const startDelim = delimiters[i];
    if (startDelim.marker !== 0x7E /* ~ */) {
      continue;
    }
    if (startDelim.end === -1) {
      continue;
    }
    const endDelim = delimiters[startDelim.end];
    token = state.tokens[startDelim.token];
    token.type = 's_open';
    token.tag = 's';
    token.nesting = 1;
    token.markup = '~~';
    token.content = '';
    token = state.tokens[endDelim.token];
    token.type = 's_close';
    token.tag = 's';
    token.nesting = -1;
    token.markup = '~~';
    token.content = '';
    if (state.tokens[endDelim.token - 1].type === 'text' && state.tokens[endDelim.token - 1].content === '~') {
      loneMarkers.push(endDelim.token - 1);
    }
  }

  // If a marker sequence has an odd number of characters, it's splitted
  // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
  // start of the sequence.
  //
  // So, we have to move all those markers after subsequent s_close tags.
  //
  while (loneMarkers.length) {
    const i = loneMarkers.pop();
    let j = i + 1;
    while (j < state.tokens.length && state.tokens[j].type === 's_close') {
      j++;
    }
    j--;
    if (i !== j) {
      token = state.tokens[j];
      state.tokens[j] = state.tokens[i];
      state.tokens[i] = token;
    }
  }
}

// Walk through delimiter list and replace text tokens with tags
//
function strikethrough_postProcess(state) {
  const tokens_meta = state.tokens_meta;
  const max = state.tokens_meta.length;
  postProcess(state, state.delimiters);
  for (let curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      postProcess(state, tokens_meta[curr].delimiters);
    }
  }
}
/* harmony default export */ const strikethrough = ({
  tokenize: strikethrough_tokenize,
  postProcess: strikethrough_postProcess
});
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/emphasis.mjs
// Process *this* and _that_
//

// Insert each marker as a separate text token, and add it to delimiter list
//
function emphasis_tokenize(state, silent) {
  const start = state.pos;
  const marker = state.src.charCodeAt(start);
  if (silent) {
    return false;
  }
  if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) {
    return false;
  }
  const scanned = state.scanDelims(state.pos, marker === 0x2A);
  for (let i = 0; i < scanned.length; i++) {
    const token = state.push('text', '', 0);
    token.content = String.fromCharCode(marker);
    state.delimiters.push({
      // Char code of the starting marker (number).
      //
      marker,
      // Total length of these series of delimiters.
      //
      length: scanned.length,
      // A position of the token this delimiter corresponds to.
      //
      token: state.tokens.length - 1,
      // If this delimiter is matched as a valid opener, `end` will be
      // equal to its position, otherwise it's `-1`.
      //
      end: -1,
      // Boolean flags that determine if this delimiter could open or close
      // an emphasis.
      //
      open: scanned.can_open,
      close: scanned.can_close
    });
  }
  state.pos += scanned.length;
  return true;
}
function emphasis_postProcess(state, delimiters) {
  const max = delimiters.length;
  for (let i = max - 1; i >= 0; i--) {
    const startDelim = delimiters[i];
    if (startDelim.marker !== 0x5F /* _ */ && startDelim.marker !== 0x2A /* * */) {
      continue;
    }

    // Process only opening markers
    if (startDelim.end === -1) {
      continue;
    }
    const endDelim = delimiters[startDelim.end];

    // If the previous delimiter has the same marker and is adjacent to this one,
    // merge those into one strong delimiter.
    //
    // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
    //
    const isStrong = i > 0 && delimiters[i - 1].end === startDelim.end + 1 &&
    // check that first two markers match and adjacent
    delimiters[i - 1].marker === startDelim.marker && delimiters[i - 1].token === startDelim.token - 1 &&
    // check that last two markers are adjacent (we can safely assume they match)
    delimiters[startDelim.end + 1].token === endDelim.token + 1;
    const ch = String.fromCharCode(startDelim.marker);
    const token_o = state.tokens[startDelim.token];
    token_o.type = isStrong ? 'strong_open' : 'em_open';
    token_o.tag = isStrong ? 'strong' : 'em';
    token_o.nesting = 1;
    token_o.markup = isStrong ? ch + ch : ch;
    token_o.content = '';
    const token_c = state.tokens[endDelim.token];
    token_c.type = isStrong ? 'strong_close' : 'em_close';
    token_c.tag = isStrong ? 'strong' : 'em';
    token_c.nesting = -1;
    token_c.markup = isStrong ? ch + ch : ch;
    token_c.content = '';
    if (isStrong) {
      state.tokens[delimiters[i - 1].token].content = '';
      state.tokens[delimiters[startDelim.end + 1].token].content = '';
      i--;
    }
  }
}

// Walk through delimiter list and replace text tokens with tags
//
function emphasis_post_process(state) {
  const tokens_meta = state.tokens_meta;
  const max = state.tokens_meta.length;
  emphasis_postProcess(state, state.delimiters);
  for (let curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      emphasis_postProcess(state, tokens_meta[curr].delimiters);
    }
  }
}
/* harmony default export */ const emphasis = ({
  tokenize: emphasis_tokenize,
  postProcess: emphasis_post_process
});
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/link.mjs
// Process [link](<to> "stuff")


function link_link(state, silent) {
  let code, label, res, ref;
  let href = '';
  let title = '';
  let start = state.pos;
  let parseReference = true;
  if (state.src.charCodeAt(state.pos) !== 0x5B /* [ */) {
    return false;
  }
  const oldPos = state.pos;
  const max = state.posMax;
  const labelStart = state.pos + 1;
  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) {
    return false;
  }
  let pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {
    //
    // Inline link
    //

    // might have found a valid shortcut link, disable reference parsing
    parseReference = false;

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) {
        break;
      }
    }
    if (pos >= max) {
      return false;
    }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = '';
      }

      // [link](  <href>  "title"  )
      //                ^^ skipping these spaces
      start = pos;
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) {
          break;
        }
      }

      // [link](  <href>  "title"  )
      //                  ^^^^^^^ parsing link title
      res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
      if (pos < max && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;

        // [link](  <href>  "title"  )
        //                         ^^ skipping these spaces
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace(code) && code !== 0x0A) {
            break;
          }
        }
      }
    }
    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {
      // parsing a valid shortcut link failed, fallback to reference
      parseReference = true;
    }
    pos++;
  }
  if (parseReference) {
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') {
      return false;
    }
    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) {
      label = state.src.slice(labelStart, labelEnd);
    }
    ref = state.env.references[normalizeReference(label)];
    if (!ref) {
      state.pos = oldPos;
      return false;
    }
    href = ref.href;
    title = ref.title;
  }

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) {
    state.pos = labelStart;
    state.posMax = labelEnd;
    const token_o = state.push('link_open', 'a', 1);
    const attrs = [['href', href]];
    token_o.attrs = attrs;
    if (title) {
      attrs.push(['title', title]);
    }
    state.linkLevel++;
    state.md.inline.tokenize(state);
    state.linkLevel--;
    state.push('link_close', 'a', -1);
  }
  state.pos = pos;
  state.posMax = max;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/image.mjs
// Process ![image](<src> "title")


function image_image(state, silent) {
  let code, content, label, pos, ref, res, title, start;
  let href = '';
  const oldPos = state.pos;
  const max = state.posMax;
  if (state.src.charCodeAt(state.pos) !== 0x21 /* ! */) {
    return false;
  }
  if (state.src.charCodeAt(state.pos + 1) !== 0x5B /* [ */) {
    return false;
  }
  const labelStart = state.pos + 2;
  const labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);

  // parser failed to find ']', so it's not a valid link
  if (labelEnd < 0) {
    return false;
  }
  pos = labelEnd + 1;
  if (pos < max && state.src.charCodeAt(pos) === 0x28 /* ( */) {
    //
    // Inline link
    //

    // [link](  <href>  "title"  )
    //        ^^ skipping these spaces
    pos++;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) {
        break;
      }
    }
    if (pos >= max) {
      return false;
    }

    // [link](  <href>  "title"  )
    //          ^^^^^^ parsing link destination
    start = pos;
    res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
    if (res.ok) {
      href = state.md.normalizeLink(res.str);
      if (state.md.validateLink(href)) {
        pos = res.pos;
      } else {
        href = '';
      }
    }

    // [link](  <href>  "title"  )
    //                ^^ skipping these spaces
    start = pos;
    for (; pos < max; pos++) {
      code = state.src.charCodeAt(pos);
      if (!isSpace(code) && code !== 0x0A) {
        break;
      }
    }

    // [link](  <href>  "title"  )
    //                  ^^^^^^^ parsing link title
    res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
    if (pos < max && start !== pos && res.ok) {
      title = res.str;
      pos = res.pos;

      // [link](  <href>  "title"  )
      //                         ^^ skipping these spaces
      for (; pos < max; pos++) {
        code = state.src.charCodeAt(pos);
        if (!isSpace(code) && code !== 0x0A) {
          break;
        }
      }
    } else {
      title = '';
    }
    if (pos >= max || state.src.charCodeAt(pos) !== 0x29 /* ) */) {
      state.pos = oldPos;
      return false;
    }
    pos++;
  } else {
    //
    // Link reference
    //
    if (typeof state.env.references === 'undefined') {
      return false;
    }
    if (pos < max && state.src.charCodeAt(pos) === 0x5B /* [ */) {
      start = pos + 1;
      pos = state.md.helpers.parseLinkLabel(state, pos);
      if (pos >= 0) {
        label = state.src.slice(start, pos++);
      } else {
        pos = labelEnd + 1;
      }
    } else {
      pos = labelEnd + 1;
    }

    // covers label === '' and label === undefined
    // (collapsed reference link and shortcut reference link respectively)
    if (!label) {
      label = state.src.slice(labelStart, labelEnd);
    }
    ref = state.env.references[normalizeReference(label)];
    if (!ref) {
      state.pos = oldPos;
      return false;
    }
    href = ref.href;
    title = ref.title;
  }

  //
  // We found the end of the link, and know for a fact it's a valid link;
  // so all that's left to do is to call tokenizer.
  //
  if (!silent) {
    content = state.src.slice(labelStart, labelEnd);
    const tokens = [];
    state.md.inline.parse(content, state.md, state.env, tokens);
    const token = state.push('image', 'img', 0);
    const attrs = [['src', href], ['alt', '']];
    token.attrs = attrs;
    token.children = tokens;
    token.content = content;
    if (title) {
      attrs.push(['title', title]);
    }
  }
  state.pos = pos;
  state.posMax = max;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/autolink.mjs
// Process autolinks '<protocol:...>'

/* eslint max-len:0 */
const EMAIL_RE = /^([a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
/* eslint-disable-next-line no-control-regex */
const AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.-]{1,31}):([^<>\x00-\x20]*)$/;
function autolink(state, silent) {
  let pos = state.pos;
  if (state.src.charCodeAt(pos) !== 0x3C /* < */) {
    return false;
  }
  const start = state.pos;
  const max = state.posMax;
  for (;;) {
    if (++pos >= max) return false;
    const ch = state.src.charCodeAt(pos);
    if (ch === 0x3C /* < */) return false;
    if (ch === 0x3E /* > */) break;
  }
  const url = state.src.slice(start + 1, pos);
  if (AUTOLINK_RE.test(url)) {
    const fullUrl = state.md.normalizeLink(url);
    if (!state.md.validateLink(fullUrl)) {
      return false;
    }
    if (!silent) {
      const token_o = state.push('link_open', 'a', 1);
      token_o.attrs = [['href', fullUrl]];
      token_o.markup = 'autolink';
      token_o.info = 'auto';
      const token_t = state.push('text', '', 0);
      token_t.content = state.md.normalizeLinkText(url);
      const token_c = state.push('link_close', 'a', -1);
      token_c.markup = 'autolink';
      token_c.info = 'auto';
    }
    state.pos += url.length + 2;
    return true;
  }
  if (EMAIL_RE.test(url)) {
    const fullUrl = state.md.normalizeLink('mailto:' + url);
    if (!state.md.validateLink(fullUrl)) {
      return false;
    }
    if (!silent) {
      const token_o = state.push('link_open', 'a', 1);
      token_o.attrs = [['href', fullUrl]];
      token_o.markup = 'autolink';
      token_o.info = 'auto';
      const token_t = state.push('text', '', 0);
      token_t.content = state.md.normalizeLinkText(url);
      const token_c = state.push('link_close', 'a', -1);
      token_c.markup = 'autolink';
      token_c.info = 'auto';
    }
    state.pos += url.length + 2;
    return true;
  }
  return false;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/html_inline.mjs
// Process html tags


function html_inline_isLinkOpen(str) {
  return /^<a[>\s]/i.test(str);
}
function html_inline_isLinkClose(str) {
  return /^<\/a\s*>/i.test(str);
}
function isLetter(ch) {
  /* eslint no-bitwise:0 */
  const lc = ch | 0x20; // to lower case
  return lc >= 0x61 /* a */ && lc <= 0x7a /* z */;
}
function html_inline(state, silent) {
  if (!state.md.options.html) {
    return false;
  }

  // Check start
  const max = state.posMax;
  const pos = state.pos;
  if (state.src.charCodeAt(pos) !== 0x3C /* < */ || pos + 2 >= max) {
    return false;
  }

  // Quick fail on second char
  const ch = state.src.charCodeAt(pos + 1);
  if (ch !== 0x21 /* ! */ && ch !== 0x3F /* ? */ && ch !== 0x2F /* / */ && !isLetter(ch)) {
    return false;
  }
  const match = state.src.slice(pos).match(HTML_TAG_RE);
  if (!match) {
    return false;
  }
  if (!silent) {
    const token = state.push('html_inline', '', 0);
    token.content = match[0];
    if (html_inline_isLinkOpen(token.content)) state.linkLevel++;
    if (html_inline_isLinkClose(token.content)) state.linkLevel--;
  }
  state.pos += match[0].length;
  return true;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/entity.mjs
// Process html entity - &#123;, &#xAF;, &quot;, ...



const DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
const NAMED_RE = /^&([a-z][a-z0-9]{1,31});/i;
function entity(state, silent) {
  const pos = state.pos;
  const max = state.posMax;
  if (state.src.charCodeAt(pos) !== 0x26 /* & */) return false;
  if (pos + 1 >= max) return false;
  const ch = state.src.charCodeAt(pos + 1);
  if (ch === 0x23 /* # */) {
    const match = state.src.slice(pos).match(DIGITAL_RE);
    if (match) {
      if (!silent) {
        const code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
        const token = state.push('text_special', '', 0);
        token.content = isValidEntityCode(code) ? utils_fromCodePoint(code) : utils_fromCodePoint(0xFFFD);
        token.markup = match[0];
        token.info = 'entity';
      }
      state.pos += match[0].length;
      return true;
    }
  } else {
    const match = state.src.slice(pos).match(NAMED_RE);
    if (match) {
      const decoded = decode_decodeHTML(match[0]);
      if (decoded !== match[0]) {
        if (!silent) {
          const token = state.push('text_special', '', 0);
          token.content = decoded;
          token.markup = match[0];
          token.info = 'entity';
        }
        state.pos += match[0].length;
        return true;
      }
    }
  }
  return false;
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/balance_pairs.mjs
// For each opening emphasis-like marker find a matching closing one
//

function processDelimiters(delimiters) {
  const openersBottom = {};
  const max = delimiters.length;
  if (!max) return;

  // headerIdx is the first delimiter of the current (where closer is) delimiter run
  let headerIdx = 0;
  let lastTokenIdx = -2; // needs any value lower than -1
  const jumps = [];
  for (let closerIdx = 0; closerIdx < max; closerIdx++) {
    const closer = delimiters[closerIdx];
    jumps.push(0);

    // markers belong to same delimiter run if:
    //  - they have adjacent tokens
    //  - AND markers are the same
    //
    if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
      headerIdx = closerIdx;
    }
    lastTokenIdx = closer.token;

    // Length is only used for emphasis-specific "rule of 3",
    // if it's not defined (in strikethrough or 3rd party plugins),
    // we can default it to 0 to disable those checks.
    //
    closer.length = closer.length || 0;
    if (!closer.close) continue;

    // Previously calculated lower bounds (previous fails)
    // for each marker, each delimiter length modulo 3,
    // and for whether this closer can be an opener;
    // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460
    /* eslint-disable-next-line no-prototype-builtins */
    if (!openersBottom.hasOwnProperty(closer.marker)) {
      openersBottom[closer.marker] = [-1, -1, -1, -1, -1, -1];
    }
    const minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + closer.length % 3];
    let openerIdx = headerIdx - jumps[headerIdx] - 1;
    let newMinOpenerIdx = openerIdx;
    for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
      const opener = delimiters[openerIdx];
      if (opener.marker !== closer.marker) continue;
      if (opener.open && opener.end < 0) {
        let isOddMatch = false;

        // from spec:
        //
        // If one of the delimiters can both open and close emphasis, then the
        // sum of the lengths of the delimiter runs containing the opening and
        // closing delimiters must not be a multiple of 3 unless both lengths
        // are multiples of 3.
        //
        if (opener.close || closer.open) {
          if ((opener.length + closer.length) % 3 === 0) {
            if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
              isOddMatch = true;
            }
          }
        }
        if (!isOddMatch) {
          // If previous delimiter cannot be an opener, we can safely skip
          // the entire sequence in future checks. This is required to make
          // sure algorithm has linear complexity (see *_*_*_*_*_... case).
          //
          const lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ? jumps[openerIdx - 1] + 1 : 0;
          jumps[closerIdx] = closerIdx - openerIdx + lastJump;
          jumps[openerIdx] = lastJump;
          closer.open = false;
          opener.end = closerIdx;
          opener.close = false;
          newMinOpenerIdx = -1;
          // treat next token as start of run,
          // it optimizes skips in **<...>**a**<...>** pathological case
          lastTokenIdx = -2;
          break;
        }
      }
    }
    if (newMinOpenerIdx !== -1) {
      // If match for this delimiter run failed, we want to set lower bound for
      // future lookups. This is required to make sure algorithm has linear
      // complexity.
      //
      // See details here:
      // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
      //
      openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length || 0) % 3] = newMinOpenerIdx;
    }
  }
}
function link_pairs(state) {
  const tokens_meta = state.tokens_meta;
  const max = state.tokens_meta.length;
  processDelimiters(state.delimiters);
  for (let curr = 0; curr < max; curr++) {
    if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
      processDelimiters(tokens_meta[curr].delimiters);
    }
  }
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/rules_inline/fragments_join.mjs
// Clean up tokens after emphasis and strikethrough postprocessing:
// merge adjacent text nodes into one and re-calculate all token levels
//
// This is necessary because initially emphasis delimiter markers (*, _, ~)
// are treated as their own separate text tokens. Then emphasis rule either
// leaves them as text (needed to merge with adjacent text) or turns them
// into opening/closing tags (which messes up levels inside).
//

function fragments_join(state) {
  let curr, last;
  let level = 0;
  const tokens = state.tokens;
  const max = state.tokens.length;
  for (curr = last = 0; curr < max; curr++) {
    // re-calculate levels after emphasis/strikethrough turns some text nodes
    // into opening/closing tags
    if (tokens[curr].nesting < 0) level--; // closing tag
    tokens[curr].level = level;
    if (tokens[curr].nesting > 0) level++; // opening tag

    if (tokens[curr].type === 'text' && curr + 1 < max && tokens[curr + 1].type === 'text') {
      // collapse two adjacent text nodes
      tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
    } else {
      if (curr !== last) {
        tokens[last] = tokens[curr];
      }
      last++;
    }
  }
  if (curr !== last) {
    tokens.length = last;
  }
}
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/parser_inline.mjs
/** internal
 * class ParserInline
 *
 * Tokenizes paragraph content.
 **/


















// Parser rules

const parser_inline_rules = [['text', text_text], ['linkify', linkify_linkify], ['newline', newline], ['escape', rules_inline_escape_escape], ['backticks', backtick], ['strikethrough', strikethrough.tokenize], ['emphasis', emphasis.tokenize], ['link', link_link], ['image', image_image], ['autolink', autolink], ['html_inline', html_inline], ['entity', entity]];

// `rule2` ruleset was created specifically for emphasis/strikethrough
// post-processing and may be changed in the future.
//
// Don't use this for anything except pairs (plugins working with `balance_pairs`).
//
const _rules2 = [['balance_pairs', link_pairs], ['strikethrough', strikethrough.postProcess], ['emphasis', emphasis.postProcess],
// rules for pairs separate '**' into its own text tokens, which may be left unused,
// rule below merges unused segments back with the rest of the text
['fragments_join', fragments_join]];

/**
 * new ParserInline()
 **/
function ParserInline() {
  /**
   * ParserInline#ruler -> Ruler
   *
   * [[Ruler]] instance. Keep configuration of inline rules.
   **/
  this.ruler = new ruler();
  for (let i = 0; i < parser_inline_rules.length; i++) {
    this.ruler.push(parser_inline_rules[i][0], parser_inline_rules[i][1]);
  }

  /**
   * ParserInline#ruler2 -> Ruler
   *
   * [[Ruler]] instance. Second ruler used for post-processing
   * (e.g. in emphasis-like rules).
   **/
  this.ruler2 = new ruler();
  for (let i = 0; i < _rules2.length; i++) {
    this.ruler2.push(_rules2[i][0], _rules2[i][1]);
  }
}

// Skip single token by running all rules in validation mode;
// returns `true` if any rule reported success
//
ParserInline.prototype.skipToken = function (state) {
  const pos = state.pos;
  const rules = this.ruler.getRules('');
  const len = rules.length;
  const maxNesting = state.md.options.maxNesting;
  const cache = state.cache;
  if (typeof cache[pos] !== 'undefined') {
    state.pos = cache[pos];
    return;
  }
  let ok = false;
  if (state.level < maxNesting) {
    for (let i = 0; i < len; i++) {
      // Increment state.level and decrement it later to limit recursion.
      // It's harmless to do here, because no tokens are created. But ideally,
      // we'd need a separate private state variable for this purpose.
      //
      state.level++;
      ok = rules[i](state, true);
      state.level--;
      if (ok) {
        if (pos >= state.pos) {
          throw new Error("inline rule didn't increment state.pos");
        }
        break;
      }
    }
  } else {
    // Too much nesting, just skip until the end of the paragraph.
    //
    // NOTE: this will cause links to behave incorrectly in the following case,
    //       when an amount of `[` is exactly equal to `maxNesting + 1`:
    //
    //       [[[[[[[[[[[[[[[[[[[[[foo]()
    //
    // TODO: remove this workaround when CM standard will allow nested links
    //       (we can replace it by preventing links from being parsed in
    //       validation mode)
    //
    state.pos = state.posMax;
  }
  if (!ok) {
    state.pos++;
  }
  cache[pos] = state.pos;
};

// Generate tokens for input range
//
ParserInline.prototype.tokenize = function (state) {
  const rules = this.ruler.getRules('');
  const len = rules.length;
  const end = state.posMax;
  const maxNesting = state.md.options.maxNesting;
  while (state.pos < end) {
    // Try all possible rules.
    // On success, rule should:
    //
    // - update `state.pos`
    // - update `state.tokens`
    // - return true
    const prevPos = state.pos;
    let ok = false;
    if (state.level < maxNesting) {
      for (let i = 0; i < len; i++) {
        ok = rules[i](state, false);
        if (ok) {
          if (prevPos >= state.pos) {
            throw new Error("inline rule didn't increment state.pos");
          }
          break;
        }
      }
    }
    if (ok) {
      if (state.pos >= end) {
        break;
      }
      continue;
    }
    state.pending += state.src[state.pos++];
  }
  if (state.pending) {
    state.pushPending();
  }
};

/**
 * ParserInline.parse(str, md, env, outTokens)
 *
 * Process input string and push inline tokens into `outTokens`
 **/
ParserInline.prototype.parse = function (str, md, env, outTokens) {
  const state = new this.State(str, md, env, outTokens);
  this.tokenize(state);
  const rules = this.ruler2.getRules('');
  const len = rules.length;
  for (let i = 0; i < len; i++) {
    rules[i](state);
  }
};
ParserInline.prototype.State = state_inline;
/* harmony default export */ const parser_inline = (ParserInline);
;// CONCATENATED MODULE: ./node_modules/linkify-it/lib/re.mjs

/* harmony default export */ function lib_re(opts) {
  const re = {};
  opts = opts || {};
  re.src_Any = Any_regex.source;
  re.src_Cc = Cc_regex.source;
  re.src_Z = Z_regex.source;
  re.src_P = regex.source;

  // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)
  re.src_ZPCc = [re.src_Z, re.src_P, re.src_Cc].join('|');

  // \p{\Z\Cc} (white spaces + control)
  re.src_ZCc = [re.src_Z, re.src_Cc].join('|');

  // Experimental. List of chars, completely prohibited in links
  // because can separate it from other part of text
  const text_separators = '[><\uff5c]';

  // All possible word characters (everything without punctuation, spaces & controls)
  // Defined via punctuation & spaces to save space
  // Should be something like \p{\L\N\S\M} (\w but without `_`)
  re.src_pseudo_letter = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';
  // The same as abothe but without [0-9]
  // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';

  re.src_ip4 = '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';

  // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.
  re.src_auth = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?';
  re.src_port = '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?';
  re.src_host_terminator = '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' + '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))';
  re.src_path = '(?:' + '[/?#]' + '(?:' + '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-;]).|' + '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' + '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' + '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' + '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' + "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" +
  // allow `I'm_king` if no pair found
  "\\'(?=" + re.src_pseudo_letter + '|[-])|' +
  // google has many dots in "google search" links (#66, #81).
  // github has ... in commit range links,
  // Restrict to
  // - english
  // - percent-encoded
  // - parts of file path
  // - params separator
  // until more examples found.
  '\\.{2,}[a-zA-Z0-9%/&]|' + '\\.(?!' + re.src_ZCc + '|[.]|$)|' + (opts['---'] ? '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
  : '\\-+|') +
  // allow `,,,` in paths
  ',(?!' + re.src_ZCc + '|$)|' +
  // allow `;` if not followed by space-like char
  ';(?!' + re.src_ZCc + '|$)|' +
  // allow `!!!` in paths, but not at the end
  '\\!+(?!' + re.src_ZCc + '|[!]|$)|' + '\\?(?!' + re.src_ZCc + '|[?]|$)' + ')+' + '|\\/' + ')?';

  // Allow anything in markdown spec, forbid quote (") at the first position
  // because emails enclosed in quotes are far more common
  re.src_email_name = '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
  re.src_xn = 'xn--[a-z0-9\\-]{1,59}';

  // More to read about domain names
  // http://serverfault.com/questions/638260/

  re.src_domain_root =
  // Allow letters & digits (http://test1)
  '(?:' + re.src_xn + '|' + re.src_pseudo_letter + '{1,63}' + ')';
  re.src_domain = '(?:' + re.src_xn + '|' + '(?:' + re.src_pseudo_letter + ')' + '|' + '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' + ')';
  re.src_host = '(?:' +
  // Don't need IP check, because digits are already allowed in normal domain names
  //   src_ip4 +
  // '|' +
  '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain /* _root */ + ')' + ')';
  re.tpl_host_fuzzy = '(?:' + re.src_ip4 + '|' + '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' + ')';
  re.tpl_host_no_ip_fuzzy = '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))';
  re.src_host_strict = re.src_host + re.src_host_terminator;
  re.tpl_host_fuzzy_strict = re.tpl_host_fuzzy + re.src_host_terminator;
  re.src_host_port_strict = re.src_host + re.src_port + re.src_host_terminator;
  re.tpl_host_port_fuzzy_strict = re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
  re.tpl_host_port_no_ip_fuzzy_strict = re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;

  //
  // Main rules
  //

  // Rude test fuzzy links by host, for quick deny
  re.tpl_host_fuzzy_test = 'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';
  re.tpl_email_fuzzy = '(^|' + text_separators + '|"|\\(|' + re.src_ZCc + ')' + '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';
  re.tpl_link_fuzzy =
  // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';
  re.tpl_link_no_ip_fuzzy =
  // Fuzzy link can't be prepended with .:/\- and non punctuation.
  // but can start with > (markdown blockquote)
  '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' + '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';
  return re;
}
;// CONCATENATED MODULE: ./node_modules/linkify-it/index.mjs


//
// Helpers
//

// Merge objects
//
function linkify_it_assign(obj /* from1, from2, from3, ... */) {
  const sources = Array.prototype.slice.call(arguments, 1);
  sources.forEach(function (source) {
    if (!source) {
      return;
    }
    Object.keys(source).forEach(function (key) {
      obj[key] = source[key];
    });
  });
  return obj;
}
function linkify_it_class(obj) {
  return Object.prototype.toString.call(obj);
}
function linkify_it_isString(obj) {
  return linkify_it_class(obj) === '[object String]';
}
function isObject(obj) {
  return linkify_it_class(obj) === '[object Object]';
}
function isRegExp(obj) {
  return linkify_it_class(obj) === '[object RegExp]';
}
function isFunction(obj) {
  return linkify_it_class(obj) === '[object Function]';
}
function linkify_it_escapeRE(str) {
  return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&');
}

//

const defaultOptions = {
  fuzzyLink: true,
  fuzzyEmail: true,
  fuzzyIP: false
};
function isOptionsObj(obj) {
  return Object.keys(obj || {}).reduce(function (acc, k) {
    /* eslint-disable-next-line no-prototype-builtins */
    return acc || defaultOptions.hasOwnProperty(k);
  }, false);
}
const defaultSchemas = {
  'http:': {
    validate: function (text, pos, self) {
      const tail = text.slice(pos);
      if (!self.re.http) {
        // compile lazily, because "host"-containing variables can change on tlds update.
        self.re.http = new RegExp('^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i');
      }
      if (self.re.http.test(tail)) {
        return tail.match(self.re.http)[0].length;
      }
      return 0;
    }
  },
  'https:': 'http:',
  'ftp:': 'http:',
  '//': {
    validate: function (text, pos, self) {
      const tail = text.slice(pos);
      if (!self.re.no_http) {
        // compile lazily, because "host"-containing variables can change on tlds update.
        self.re.no_http = new RegExp('^' + self.re.src_auth +
        // Don't allow single-level domains, because of false positives like '//test'
        // with code comments
        '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' + self.re.src_port + self.re.src_host_terminator + self.re.src_path, 'i');
      }
      if (self.re.no_http.test(tail)) {
        // should not be `://` & `///`, that protects from errors in protocol name
        if (pos >= 3 && text[pos - 3] === ':') {
          return 0;
        }
        if (pos >= 3 && text[pos - 3] === '/') {
          return 0;
        }
        return tail.match(self.re.no_http)[0].length;
      }
      return 0;
    }
  },
  'mailto:': {
    validate: function (text, pos, self) {
      const tail = text.slice(pos);
      if (!self.re.mailto) {
        self.re.mailto = new RegExp('^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i');
      }
      if (self.re.mailto.test(tail)) {
        return tail.match(self.re.mailto)[0].length;
      }
      return 0;
    }
  }
};

// RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)
/* eslint-disable-next-line max-len */
const tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';

// DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead
const tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');
function resetScanCache(self) {
  self.__index__ = -1;
  self.__text_cache__ = '';
}
function createValidator(re) {
  return function (text, pos) {
    const tail = text.slice(pos);
    if (re.test(tail)) {
      return tail.match(re)[0].length;
    }
    return 0;
  };
}
function createNormalizer() {
  return function (match, self) {
    self.normalize(match);
  };
}

// Schemas compiler. Build regexps.
//
function compile(self) {
  // Load & clone RE patterns.
  const re = self.re = lib_re(self.__opts__);

  // Define dynamic patterns
  const tlds = self.__tlds__.slice();
  self.onCompile();
  if (!self.__tlds_replaced__) {
    tlds.push(tlds_2ch_src_re);
  }
  tlds.push(re.src_xn);
  re.src_tlds = tlds.join('|');
  function untpl(tpl) {
    return tpl.replace('%TLDS%', re.src_tlds);
  }
  re.email_fuzzy = RegExp(untpl(re.tpl_email_fuzzy), 'i');
  re.link_fuzzy = RegExp(untpl(re.tpl_link_fuzzy), 'i');
  re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');
  re.host_fuzzy_test = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');

  //
  // Compile each schema
  //

  const aliases = [];
  self.__compiled__ = {}; // Reset compiled data

  function schemaError(name, val) {
    throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
  }
  Object.keys(self.__schemas__).forEach(function (name) {
    const val = self.__schemas__[name];

    // skip disabled methods
    if (val === null) {
      return;
    }
    const compiled = {
      validate: null,
      link: null
    };
    self.__compiled__[name] = compiled;
    if (isObject(val)) {
      if (isRegExp(val.validate)) {
        compiled.validate = createValidator(val.validate);
      } else if (isFunction(val.validate)) {
        compiled.validate = val.validate;
      } else {
        schemaError(name, val);
      }
      if (isFunction(val.normalize)) {
        compiled.normalize = val.normalize;
      } else if (!val.normalize) {
        compiled.normalize = createNormalizer();
      } else {
        schemaError(name, val);
      }
      return;
    }
    if (linkify_it_isString(val)) {
      aliases.push(name);
      return;
    }
    schemaError(name, val);
  });

  //
  // Compile postponed aliases
  //

  aliases.forEach(function (alias) {
    if (!self.__compiled__[self.__schemas__[alias]]) {
      // Silently fail on missed schemas to avoid errons on disable.
      // schemaError(alias, self.__schemas__[alias]);
      return;
    }
    self.__compiled__[alias].validate = self.__compiled__[self.__schemas__[alias]].validate;
    self.__compiled__[alias].normalize = self.__compiled__[self.__schemas__[alias]].normalize;
  });

  //
  // Fake record for guessed links
  //
  self.__compiled__[''] = {
    validate: null,
    normalize: createNormalizer()
  };

  //
  // Build schema condition
  //
  const slist = Object.keys(self.__compiled__).filter(function (name) {
    // Filter disabled & fake schemas
    return name.length > 0 && self.__compiled__[name];
  }).map(linkify_it_escapeRE).join('|');
  // (?!_) cause 1.5x slowdown
  self.re.schema_test = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');
  self.re.schema_search = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');
  self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');
  self.re.pretest = RegExp('(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@', 'i');

  //
  // Cleanup
  //

  resetScanCache(self);
}

/**
 * class Match
 *
 * Match result. Single element of array, returned by [[LinkifyIt#match]]
 **/
function Match(self, shift) {
  const start = self.__index__;
  const end = self.__last_index__;
  const text = self.__text_cache__.slice(start, end);

  /**
   * Match#schema -> String
   *
   * Prefix (protocol) for matched string.
   **/
  this.schema = self.__schema__.toLowerCase();
  /**
   * Match#index -> Number
   *
   * First position of matched string.
   **/
  this.index = start + shift;
  /**
   * Match#lastIndex -> Number
   *
   * Next position after matched string.
   **/
  this.lastIndex = end + shift;
  /**
   * Match#raw -> String
   *
   * Matched string.
   **/
  this.raw = text;
  /**
   * Match#text -> String
   *
   * Notmalized text of matched string.
   **/
  this.text = text;
  /**
   * Match#url -> String
   *
   * Normalized url of matched string.
   **/
  this.url = text;
}
function createMatch(self, shift) {
  const match = new Match(self, shift);
  self.__compiled__[match.schema].normalize(match, self);
  return match;
}

/**
 * class LinkifyIt
 **/

/**
 * new LinkifyIt(schemas, options)
 * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Creates new linkifier instance with optional additional schemas.
 * Can be called without `new` keyword for convenience.
 *
 * By default understands:
 *
 * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
 * - "fuzzy" links and emails (example.com, foo@bar.com).
 *
 * `schemas` is an object, where each key/value describes protocol/rule:
 *
 * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
 *   for example). `linkify-it` makes shure that prefix is not preceeded with
 *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
 * - __value__ - rule to check tail after link prefix
 *   - _String_ - just alias to existing rule
 *   - _Object_
 *     - _validate_ - validator function (should return matched length on success),
 *       or `RegExp`.
 *     - _normalize_ - optional function to normalize text & url of matched result
 *       (for example, for @twitter mentions).
 *
 * `options`:
 *
 * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
 * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
 *   like version numbers. Default `false`.
 * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
 *
 **/
function LinkifyIt(schemas, options) {
  if (!(this instanceof LinkifyIt)) {
    return new LinkifyIt(schemas, options);
  }
  if (!options) {
    if (isOptionsObj(schemas)) {
      options = schemas;
      schemas = {};
    }
  }
  this.__opts__ = linkify_it_assign({}, defaultOptions, options);

  // Cache last tested result. Used to skip repeating steps on next `match` call.
  this.__index__ = -1;
  this.__last_index__ = -1; // Next scan position
  this.__schema__ = '';
  this.__text_cache__ = '';
  this.__schemas__ = linkify_it_assign({}, defaultSchemas, schemas);
  this.__compiled__ = {};
  this.__tlds__ = tlds_default;
  this.__tlds_replaced__ = false;
  this.re = {};
  compile(this);
}

/** chainable
 * LinkifyIt#add(schema, definition)
 * - schema (String): rule name (fixed pattern prefix)
 * - definition (String|RegExp|Object): schema definition
 *
 * Add new rule definition. See constructor description for details.
 **/
LinkifyIt.prototype.add = function add(schema, definition) {
  this.__schemas__[schema] = definition;
  compile(this);
  return this;
};

/** chainable
 * LinkifyIt#set(options)
 * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
 *
 * Set recognition options for links without schema.
 **/
LinkifyIt.prototype.set = function set(options) {
  this.__opts__ = linkify_it_assign(this.__opts__, options);
  return this;
};

/**
 * LinkifyIt#test(text) -> Boolean
 *
 * Searches linkifiable pattern and returns `true` on success or `false` on fail.
 **/
LinkifyIt.prototype.test = function test(text) {
  // Reset scan cache
  this.__text_cache__ = text;
  this.__index__ = -1;
  if (!text.length) {
    return false;
  }
  let m, ml, me, len, shift, next, re, tld_pos, at_pos;

  // try to scan for link with schema - that's the most simple rule
  if (this.re.schema_test.test(text)) {
    re = this.re.schema_search;
    re.lastIndex = 0;
    while ((m = re.exec(text)) !== null) {
      len = this.testSchemaAt(text, m[2], re.lastIndex);
      if (len) {
        this.__schema__ = m[2];
        this.__index__ = m.index + m[1].length;
        this.__last_index__ = m.index + m[0].length + len;
        break;
      }
    }
  }
  if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
    // guess schemaless links
    tld_pos = text.search(this.re.host_fuzzy_test);
    if (tld_pos >= 0) {
      // if tld is located after found link - no need to check fuzzy pattern
      if (this.__index__ < 0 || tld_pos < this.__index__) {
        if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
          shift = ml.index + ml[1].length;
          if (this.__index__ < 0 || shift < this.__index__) {
            this.__schema__ = '';
            this.__index__ = shift;
            this.__last_index__ = ml.index + ml[0].length;
          }
        }
      }
    }
  }
  if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
    // guess schemaless emails
    at_pos = text.indexOf('@');
    if (at_pos >= 0) {
      // We can't skip this check, because this cases are possible:
      // 192.168.1.1@gmail.com, my.in@example.com
      if ((me = text.match(this.re.email_fuzzy)) !== null) {
        shift = me.index + me[1].length;
        next = me.index + me[0].length;
        if (this.__index__ < 0 || shift < this.__index__ || shift === this.__index__ && next > this.__last_index__) {
          this.__schema__ = 'mailto:';
          this.__index__ = shift;
          this.__last_index__ = next;
        }
      }
    }
  }
  return this.__index__ >= 0;
};

/**
 * LinkifyIt#pretest(text) -> Boolean
 *
 * Very quick check, that can give false positives. Returns true if link MAY BE
 * can exists. Can be used for speed optimization, when you need to check that
 * link NOT exists.
 **/
LinkifyIt.prototype.pretest = function pretest(text) {
  return this.re.pretest.test(text);
};

/**
 * LinkifyIt#testSchemaAt(text, name, position) -> Number
 * - text (String): text to scan
 * - name (String): rule (schema) name
 * - position (Number): text offset to check from
 *
 * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
 * at given position. Returns length of found pattern (0 on fail).
 **/
LinkifyIt.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {
  // If not supported schema check requested - terminate
  if (!this.__compiled__[schema.toLowerCase()]) {
    return 0;
  }
  return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);
};

/**
 * LinkifyIt#match(text) -> Array|null
 *
 * Returns array of found link descriptions or `null` on fail. We strongly
 * recommend to use [[LinkifyIt#test]] first, for best speed.
 *
 * ##### Result match description
 *
 * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
 *   protocol-neutral  links.
 * - __index__ - offset of matched text
 * - __lastIndex__ - index of next char after mathch end
 * - __raw__ - matched text
 * - __text__ - normalized text
 * - __url__ - link, generated from matched text
 **/
LinkifyIt.prototype.match = function match(text) {
  const result = [];
  let shift = 0;

  // Try to take previous element from cache, if .test() called before
  if (this.__index__ >= 0 && this.__text_cache__ === text) {
    result.push(createMatch(this, shift));
    shift = this.__last_index__;
  }

  // Cut head if cache was used
  let tail = shift ? text.slice(shift) : text;

  // Scan string until end reached
  while (this.test(tail)) {
    result.push(createMatch(this, shift));
    tail = tail.slice(this.__last_index__);
    shift += this.__last_index__;
  }
  if (result.length) {
    return result;
  }
  return null;
};

/**
 * LinkifyIt#matchAtStart(text) -> Match|null
 *
 * Returns fully-formed (not fuzzy) link if it starts at the beginning
 * of the string, and null otherwise.
 **/
LinkifyIt.prototype.matchAtStart = function matchAtStart(text) {
  // Reset scan cache
  this.__text_cache__ = text;
  this.__index__ = -1;
  if (!text.length) return null;
  const m = this.re.schema_at_start.exec(text);
  if (!m) return null;
  const len = this.testSchemaAt(text, m[2], m[0].length);
  if (!len) return null;
  this.__schema__ = m[2];
  this.__index__ = m.index + m[1].length;
  this.__last_index__ = m.index + m[0].length + len;
  return createMatch(this, 0);
};

/** chainable
 * LinkifyIt#tlds(list [, keepOld]) -> this
 * - list (Array): list of tlds
 * - keepOld (Boolean): merge with current list if `true` (`false` by default)
 *
 * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
 * to avoid false positives. By default this algorythm used:
 *
 * - hostname with any 2-letter root zones are ok.
 * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
 *   are ok.
 * - encoded (`xn--...`) root zones are ok.
 *
 * If list is replaced, then exact match for 2-chars root zones will be checked.
 **/
LinkifyIt.prototype.tlds = function tlds(list, keepOld) {
  list = Array.isArray(list) ? list : [list];
  if (!keepOld) {
    this.__tlds__ = list.slice();
    this.__tlds_replaced__ = true;
    compile(this);
    return this;
  }
  this.__tlds__ = this.__tlds__.concat(list).sort().filter(function (el, idx, arr) {
    return el !== arr[idx - 1];
  }).reverse();
  compile(this);
  return this;
};

/**
 * LinkifyIt#normalize(match)
 *
 * Default normalizer (if schema does not define it's own).
 **/
LinkifyIt.prototype.normalize = function normalize(match) {
  // Do minimal possible changes by default. Need to collect feedback prior
  // to move forward https://github.com/markdown-it/linkify-it/issues/1

  if (!match.schema) {
    match.url = 'http://' + match.url;
  }
  if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
    match.url = 'mailto:' + match.url;
  }
};

/**
 * LinkifyIt#onCompile()
 *
 * Override to modify basic RegExp-s.
 **/
LinkifyIt.prototype.onCompile = function onCompile() {};
/* harmony default export */ const linkify_it = (LinkifyIt);
;// CONCATENATED MODULE: ./node_modules/punycode.js/punycode.es6.js


/** Highest positive signed 32-bit float value */
const maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1

/** Bootstring parameters */
const base = 36;
const tMin = 1;
const tMax = 26;
const skew = 38;
const damp = 700;
const initialBias = 72;
const initialN = 128; // 0x80
const delimiter = '-'; // '\x2D'

/** Regular expressions */
const regexPunycode = /^xn--/;
const regexNonASCII = /[^\0-\x7F]/; // Note: U+007F DEL is excluded too.
const regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g; // RFC 3490 separators

/** Error messages */
const errors = {
  'overflow': 'Overflow: input needs wider integers to process',
  'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
  'invalid-input': 'Invalid input'
};

/** Convenience shortcuts */
const baseMinusTMin = base - tMin;
const floor = Math.floor;
const stringFromCharCode = String.fromCharCode;

/*--------------------------------------------------------------------------*/

/**
 * A generic error utility function.
 * @private
 * @param {String} type The error type.
 * @returns {Error} Throws a `RangeError` with the applicable error message.
 */
function error(type) {
  throw new RangeError(errors[type]);
}

/**
 * A generic `Array#map` utility function.
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} callback The function that gets called for every array
 * item.
 * @returns {Array} A new array of values returned by the callback function.
 */
function map(array, callback) {
  const result = [];
  let length = array.length;
  while (length--) {
    result[length] = callback(array[length]);
  }
  return result;
}

/**
 * A simple `Array#map`-like wrapper to work with domain name strings or email
 * addresses.
 * @private
 * @param {String} domain The domain name or email address.
 * @param {Function} callback The function that gets called for every
 * character.
 * @returns {String} A new string of characters returned by the callback
 * function.
 */
function mapDomain(domain, callback) {
  const parts = domain.split('@');
  let result = '';
  if (parts.length > 1) {
    // In email addresses, only the domain name should be punycoded. Leave
    // the local part (i.e. everything up to `@`) intact.
    result = parts[0] + '@';
    domain = parts[1];
  }
  // Avoid `split(regex)` for IE8 compatibility. See #17.
  domain = domain.replace(regexSeparators, '\x2E');
  const labels = domain.split('.');
  const encoded = map(labels, callback).join('.');
  return result + encoded;
}

/**
 * Creates an array containing the numeric code points of each Unicode
 * character in the string. While JavaScript uses UCS-2 internally,
 * this function will convert a pair of surrogate halves (each of which
 * UCS-2 exposes as separate characters) into a single code point,
 * matching UTF-16.
 * @see `punycode.ucs2.encode`
 * @see <https://mathiasbynens.be/notes/javascript-encoding>
 * @memberOf punycode.ucs2
 * @name decode
 * @param {String} string The Unicode input string (UCS-2).
 * @returns {Array} The new array of code points.
 */
function ucs2decode(string) {
  const output = [];
  let counter = 0;
  const length = string.length;
  while (counter < length) {
    const value = string.charCodeAt(counter++);
    if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
      // It's a high surrogate, and there is a next character.
      const extra = string.charCodeAt(counter++);
      if ((extra & 0xFC00) == 0xDC00) {
        // Low surrogate.
        output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
      } else {
        // It's an unmatched surrogate; only append this code unit, in case the
        // next code unit is the high surrogate of a surrogate pair.
        output.push(value);
        counter--;
      }
    } else {
      output.push(value);
    }
  }
  return output;
}

/**
 * Creates a string based on an array of numeric code points.
 * @see `punycode.ucs2.decode`
 * @memberOf punycode.ucs2
 * @name encode
 * @param {Array} codePoints The array of numeric code points.
 * @returns {String} The new Unicode string (UCS-2).
 */
const ucs2encode = codePoints => String.fromCodePoint(...codePoints);

/**
 * Converts a basic code point into a digit/integer.
 * @see `digitToBasic()`
 * @private
 * @param {Number} codePoint The basic numeric code point value.
 * @returns {Number} The numeric value of a basic code point (for use in
 * representing integers) in the range `0` to `base - 1`, or `base` if
 * the code point does not represent a value.
 */
const basicToDigit = function (codePoint) {
  if (codePoint >= 0x30 && codePoint < 0x3A) {
    return 26 + (codePoint - 0x30);
  }
  if (codePoint >= 0x41 && codePoint < 0x5B) {
    return codePoint - 0x41;
  }
  if (codePoint >= 0x61 && codePoint < 0x7B) {
    return codePoint - 0x61;
  }
  return base;
};

/**
 * Converts a digit/integer into a basic code point.
 * @see `basicToDigit()`
 * @private
 * @param {Number} digit The numeric value of a basic code point.
 * @returns {Number} The basic code point whose value (when used for
 * representing integers) is `digit`, which needs to be in the range
 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
 * used; else, the lowercase form is used. The behavior is undefined
 * if `flag` is non-zero and `digit` has no uppercase form.
 */
const digitToBasic = function (digit, flag) {
  //  0..25 map to ASCII a..z or A..Z
  // 26..35 map to ASCII 0..9
  return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
};

/**
 * Bias adaptation function as per section 3.4 of RFC 3492.
 * https://tools.ietf.org/html/rfc3492#section-3.4
 * @private
 */
const adapt = function (delta, numPoints, firstTime) {
  let k = 0;
  delta = firstTime ? floor(delta / damp) : delta >> 1;
  delta += floor(delta / numPoints);
  for /* no initialization */
  (; delta > baseMinusTMin * tMax >> 1; k += base) {
    delta = floor(delta / baseMinusTMin);
  }
  return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
};

/**
 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
 * symbols.
 * @memberOf punycode
 * @param {String} input The Punycode string of ASCII-only symbols.
 * @returns {String} The resulting string of Unicode symbols.
 */
const punycode_es6_decode = function (input) {
  // Don't use UCS-2.
  const output = [];
  const inputLength = input.length;
  let i = 0;
  let n = initialN;
  let bias = initialBias;

  // Handle the basic code points: let `basic` be the number of input code
  // points before the last delimiter, or `0` if there is none, then copy
  // the first basic code points to the output.

  let basic = input.lastIndexOf(delimiter);
  if (basic < 0) {
    basic = 0;
  }
  for (let j = 0; j < basic; ++j) {
    // if it's not a basic code point
    if (input.charCodeAt(j) >= 0x80) {
      error('not-basic');
    }
    output.push(input.charCodeAt(j));
  }

  // Main decoding loop: start just after the last delimiter if any basic code
  // points were copied; start at the beginning otherwise.

  for /* no final expression */
  (let index = basic > 0 ? basic + 1 : 0; index < inputLength;) {
    // `index` is the index of the next character to be consumed.
    // Decode a generalized variable-length integer into `delta`,
    // which gets added to `i`. The overflow checking is easier
    // if we increase `i` as we go, then subtract off its starting
    // value at the end to obtain `delta`.
    const oldi = i;
    for /* no condition */
    (let w = 1, k = base;; k += base) {
      if (index >= inputLength) {
        error('invalid-input');
      }
      const digit = basicToDigit(input.charCodeAt(index++));
      if (digit >= base) {
        error('invalid-input');
      }
      if (digit > floor((maxInt - i) / w)) {
        error('overflow');
      }
      i += digit * w;
      const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
      if (digit < t) {
        break;
      }
      const baseMinusT = base - t;
      if (w > floor(maxInt / baseMinusT)) {
        error('overflow');
      }
      w *= baseMinusT;
    }
    const out = output.length + 1;
    bias = adapt(i - oldi, out, oldi == 0);

    // `i` was supposed to wrap around from `out` to `0`,
    // incrementing `n` each time, so we'll fix that now:
    if (floor(i / out) > maxInt - n) {
      error('overflow');
    }
    n += floor(i / out);
    i %= out;

    // Insert `n` at position `i` of the output.
    output.splice(i++, 0, n);
  }
  return String.fromCodePoint(...output);
};

/**
 * Converts a string of Unicode symbols (e.g. a domain name label) to a
 * Punycode string of ASCII-only symbols.
 * @memberOf punycode
 * @param {String} input The string of Unicode symbols.
 * @returns {String} The resulting Punycode string of ASCII-only symbols.
 */
const punycode_es6_encode = function (input) {
  const output = [];

  // Convert the input in UCS-2 to an array of Unicode code points.
  input = ucs2decode(input);

  // Cache the length.
  const inputLength = input.length;

  // Initialize the state.
  let n = initialN;
  let delta = 0;
  let bias = initialBias;

  // Handle the basic code points.
  for (const currentValue of input) {
    if (currentValue < 0x80) {
      output.push(stringFromCharCode(currentValue));
    }
  }
  const basicLength = output.length;
  let handledCPCount = basicLength;

  // `handledCPCount` is the number of code points that have been handled;
  // `basicLength` is the number of basic code points.

  // Finish the basic string with a delimiter unless it's empty.
  if (basicLength) {
    output.push(delimiter);
  }

  // Main encoding loop:
  while (handledCPCount < inputLength) {
    // All non-basic code points < n have been handled already. Find the next
    // larger one:
    let m = maxInt;
    for (const currentValue of input) {
      if (currentValue >= n && currentValue < m) {
        m = currentValue;
      }
    }

    // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
    // but guard against overflow.
    const handledCPCountPlusOne = handledCPCount + 1;
    if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
      error('overflow');
    }
    delta += (m - n) * handledCPCountPlusOne;
    n = m;
    for (const currentValue of input) {
      if (currentValue < n && ++delta > maxInt) {
        error('overflow');
      }
      if (currentValue === n) {
        // Represent delta as a generalized variable-length integer.
        let q = delta;
        for /* no condition */
        (let k = base;; k += base) {
          const t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (q < t) {
            break;
          }
          const qMinusT = q - t;
          const baseMinusT = base - t;
          output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
          q = floor(qMinusT / baseMinusT);
        }
        output.push(stringFromCharCode(digitToBasic(q, 0)));
        bias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);
        delta = 0;
        ++handledCPCount;
      }
    }
    ++delta;
    ++n;
  }
  return output.join('');
};

/**
 * Converts a Punycode string representing a domain name or an email address
 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
 * it doesn't matter if you call it on a string that has already been
 * converted to Unicode.
 * @memberOf punycode
 * @param {String} input The Punycoded domain name or email address to
 * convert to Unicode.
 * @returns {String} The Unicode representation of the given Punycode
 * string.
 */
const toUnicode = function (input) {
  return mapDomain(input, function (string) {
    return regexPunycode.test(string) ? punycode_es6_decode(string.slice(4).toLowerCase()) : string;
  });
};

/**
 * Converts a Unicode string representing a domain name or an email address to
 * Punycode. Only the non-ASCII parts of the domain name will be converted,
 * i.e. it doesn't matter if you call it with a domain that's already in
 * ASCII.
 * @memberOf punycode
 * @param {String} input The domain name or email address to convert, as a
 * Unicode string.
 * @returns {String} The Punycode representation of the given domain name or
 * email address.
 */
const toASCII = function (input) {
  return mapDomain(input, function (string) {
    return regexNonASCII.test(string) ? 'xn--' + punycode_es6_encode(string) : string;
  });
};

/*--------------------------------------------------------------------------*/

/** Define the public API */
const punycode = {
  /**
   * A string representing the current Punycode.js version number.
   * @memberOf punycode
   * @type String
   */
  'version': '2.3.1',
  /**
   * An object of methods to convert from JavaScript's internal character
   * representation (UCS-2) to Unicode code points, and back.
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode
   * @type Object
   */
  'ucs2': {
    'decode': ucs2decode,
    'encode': ucs2encode
  },
  'decode': punycode_es6_decode,
  'encode': punycode_es6_encode,
  'toASCII': toASCII,
  'toUnicode': toUnicode
};

/* harmony default export */ const punycode_es6 = (punycode);
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/presets/default.mjs
// markdown-it default options

/* harmony default export */ const presets_default = ({
  options: {
    // Enable HTML tags in source
    html: false,
    // Use '/' to close single tags (<br />)
    xhtmlOut: false,
    // Convert '\n' in paragraphs into <br>
    breaks: false,
    // CSS language prefix for fenced blocks
    langPrefix: 'language-',
    // autoconvert URL-like texts to links
    linkify: false,
    // Enable some language-neutral replacements + quotes beautification
    typographer: false,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019',
    /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 100
  },
  components: {
    core: {},
    block: {},
    inline: {}
  }
});
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/presets/zero.mjs
// "Zero" preset, with nothing enabled. Useful for manual configuring of simple
// modes. For example, to parse bold/italic only.

/* harmony default export */ const zero = ({
  options: {
    // Enable HTML tags in source
    html: false,
    // Use '/' to close single tags (<br />)
    xhtmlOut: false,
    // Convert '\n' in paragraphs into <br>
    breaks: false,
    // CSS language prefix for fenced blocks
    langPrefix: 'language-',
    // autoconvert URL-like texts to links
    linkify: false,
    // Enable some language-neutral replacements + quotes beautification
    typographer: false,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019',
    /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: ['normalize', 'block', 'inline', 'text_join']
    },
    block: {
      rules: ['paragraph']
    },
    inline: {
      rules: ['text'],
      rules2: ['balance_pairs', 'fragments_join']
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/presets/commonmark.mjs
// Commonmark default options

/* harmony default export */ const commonmark = ({
  options: {
    // Enable HTML tags in source
    html: true,
    // Use '/' to close single tags (<br />)
    xhtmlOut: true,
    // Convert '\n' in paragraphs into <br>
    breaks: false,
    // CSS language prefix for fenced blocks
    langPrefix: 'language-',
    // autoconvert URL-like texts to links
    linkify: false,
    // Enable some language-neutral replacements + quotes beautification
    typographer: false,
    // Double + single quotes replacement pairs, when typographer enabled,
    // and smartquotes on. Could be either a String or an Array.
    //
    // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
    // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
    quotes: '\u201c\u201d\u2018\u2019',
    /* “”‘’ */

    // Highlighter function. Should return escaped HTML,
    // or '' if the source string is not changed and should be escaped externaly.
    // If result starts with <pre... internal wrapper is skipped.
    //
    // function (/*str, lang*/) { return ''; }
    //
    highlight: null,
    // Internal protection, recursion limit
    maxNesting: 20
  },
  components: {
    core: {
      rules: ['normalize', 'block', 'inline', 'text_join']
    },
    block: {
      rules: ['blockquote', 'code', 'fence', 'heading', 'hr', 'html_block', 'lheading', 'list', 'reference', 'paragraph']
    },
    inline: {
      rules: ['autolink', 'backticks', 'emphasis', 'entity', 'escape', 'html_inline', 'image', 'link', 'newline', 'text'],
      rules2: ['balance_pairs', 'emphasis', 'fragments_join']
    }
  }
});
;// CONCATENATED MODULE: ./node_modules/markdown-it/lib/index.mjs
// Main parser class













const config = {
  default: presets_default,
  zero: zero,
  commonmark: commonmark
};

//
// This validator can prohibit more than really needed to prevent XSS. It's a
// tradeoff to keep code simple and to be secure by default.
//
// If you need different setup - override validator method as you wish. Or
// replace it with dummy function and use external sanitizer.
//

const BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
const GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
function validateLink(url) {
  // url should be normalized at this point, and existing entities are decoded
  const str = url.trim().toLowerCase();
  return BAD_PROTO_RE.test(str) ? GOOD_DATA_RE.test(str) : true;
}
const RECODE_HOSTNAME_FOR = ['http:', 'https:', 'mailto:'];
function normalizeLink(url) {
  const parsed = parse(url, true);
  if (parsed.hostname) {
    // Encode hostnames in urls like:
    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
    //
    // We don't encode unknown schemas, because it's likely that we encode
    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
    //
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode_es6.toASCII(parsed.hostname);
      } catch (er) {/**/}
    }
  }
  return lib_encode(format(parsed));
}
function normalizeLinkText(url) {
  const parsed = parse(url, true);
  if (parsed.hostname) {
    // Encode hostnames in urls like:
    // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
    //
    // We don't encode unknown schemas, because it's likely that we encode
    // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
    //
    if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
      try {
        parsed.hostname = punycode_es6.toUnicode(parsed.hostname);
      } catch (er) {/**/}
    }
  }

  // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720
  return lib_decode(format(parsed), lib_decode.defaultChars + '%');
}

/**
 * class MarkdownIt
 *
 * Main parser/renderer class.
 *
 * ##### Usage
 *
 * ```javascript
 * // node.js, "classic" way:
 * var MarkdownIt = require('markdown-it'),
 *     md = new MarkdownIt();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // node.js, the same, but with sugar:
 * var md = require('markdown-it')();
 * var result = md.render('# markdown-it rulezz!');
 *
 * // browser without AMD, added to "window" on script load
 * // Note, there are no dash.
 * var md = window.markdownit();
 * var result = md.render('# markdown-it rulezz!');
 * ```
 *
 * Single line rendering, without paragraph wrap:
 *
 * ```javascript
 * var md = require('markdown-it')();
 * var result = md.renderInline('__markdown-it__ rulezz!');
 * ```
 **/

/**
 * new MarkdownIt([presetName, options])
 * - presetName (String): optional, `commonmark` / `zero`
 * - options (Object)
 *
 * Creates parser instanse with given config. Can be called without `new`.
 *
 * ##### presetName
 *
 * MarkdownIt provides named presets as a convenience to quickly
 * enable/disable active syntax rules and options for common use cases.
 *
 * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
 *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
 * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
 *   similar to GFM, used when no preset name given. Enables all available rules,
 *   but still without html, typographer & autolinker.
 * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
 *   all rules disabled. Useful to quickly setup your config via `.enable()`.
 *   For example, when you need only `bold` and `italic` markup and nothing else.
 *
 * ##### options:
 *
 * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
 *   That's not safe! You may need external sanitizer to protect output from XSS.
 *   It's better to extend features via plugins, instead of enabling HTML.
 * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
 *   (`<br />`). This is needed only for full CommonMark compatibility. In real
 *   world you will need HTML output.
 * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
 * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
 *   Can be useful for external highlighters.
 * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
 * - __typographer__  - `false`. Set `true` to enable [some language-neutral
 *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
 *   quotes beautification (smartquotes).
 * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
 *   pairs, when typographer enabled and smartquotes on. For example, you can
 *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
 *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
 * - __highlight__ - `null`. Highlighter function for fenced code blocks.
 *   Highlighter `function (str, lang)` should return escaped HTML. It can also
 *   return empty string if the source was not changed and should be escaped
 *   externaly. If result starts with <pre... internal wrapper is skipped.
 *
 * ##### Example
 *
 * ```javascript
 * // commonmark mode
 * var md = require('markdown-it')('commonmark');
 *
 * // default mode
 * var md = require('markdown-it')();
 *
 * // enable everything
 * var md = require('markdown-it')({
 *   html: true,
 *   linkify: true,
 *   typographer: true
 * });
 * ```
 *
 * ##### Syntax highlighting
 *
 * ```js
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
 *       } catch (__) {}
 *     }
 *
 *     return ''; // use external default escaping
 *   }
 * });
 * ```
 *
 * Or with full wrapper override (if you need assign class to `<pre>` or `<code>`):
 *
 * ```javascript
 * var hljs = require('highlight.js') // https://highlightjs.org/
 *
 * // Actual default values
 * var md = require('markdown-it')({
 *   highlight: function (str, lang) {
 *     if (lang && hljs.getLanguage(lang)) {
 *       try {
 *         return '<pre><code class="hljs">' +
 *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
 *                '</code></pre>';
 *       } catch (__) {}
 *     }
 *
 *     return '<pre><code class="hljs">' + md.utils.escapeHtml(str) + '</code></pre>';
 *   }
 * });
 * ```
 *
 **/
function MarkdownIt(presetName, options) {
  if (!(this instanceof MarkdownIt)) {
    return new MarkdownIt(presetName, options);
  }
  if (!options) {
    if (!isString(presetName)) {
      options = presetName || {};
      presetName = 'default';
    }
  }

  /**
   * MarkdownIt#inline -> ParserInline
   *
   * Instance of [[ParserInline]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.inline = new parser_inline();

  /**
   * MarkdownIt#block -> ParserBlock
   *
   * Instance of [[ParserBlock]]. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.block = new parser_block();

  /**
   * MarkdownIt#core -> Core
   *
   * Instance of [[Core]] chain executor. You may need it to add new rules when
   * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
   * [[MarkdownIt.enable]].
   **/
  this.core = new parser_core();

  /**
   * MarkdownIt#renderer -> Renderer
   *
   * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
   * rules for new token types, generated by plugins.
   *
   * ##### Example
   *
   * ```javascript
   * var md = require('markdown-it')();
   *
   * function myToken(tokens, idx, options, env, self) {
   *   //...
   *   return result;
   * };
   *
   * md.renderer.rules['my_token'] = myToken
   * ```
   *
   * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
   **/
  this.renderer = new renderer();

  /**
   * MarkdownIt#linkify -> LinkifyIt
   *
   * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
   * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
   * rule.
   **/
  this.linkify = new linkify_it();

  /**
   * MarkdownIt#validateLink(url) -> Boolean
   *
   * Link validation function. CommonMark allows too much in links. By default
   * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
   * except some embedded image types.
   *
   * You can change this behaviour:
   *
   * ```javascript
   * var md = require('markdown-it')();
   * // enable everything
   * md.validateLink = function () { return true; }
   * ```
   **/
  this.validateLink = validateLink;

  /**
   * MarkdownIt#normalizeLink(url) -> String
   *
   * Function used to encode link url to a machine-readable format,
   * which includes url-encoding, punycode, etc.
   **/
  this.normalizeLink = normalizeLink;

  /**
   * MarkdownIt#normalizeLinkText(url) -> String
   *
   * Function used to decode link url to a human-readable format`
   **/
  this.normalizeLinkText = normalizeLinkText;

  // Expose utils & helpers for easy acces from plugins

  /**
   * MarkdownIt#utils -> utils
   *
   * Assorted utility functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.mjs).
   **/
  this.utils = utils_namespaceObject;

  /**
   * MarkdownIt#helpers -> helpers
   *
   * Link components parser functions, useful to write plugins. See details
   * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
   **/
  this.helpers = utils_assign({}, helpers_namespaceObject);
  this.options = {};
  this.configure(presetName);
  if (options) {
    this.set(options);
  }
}

/** chainable
 * MarkdownIt.set(options)
 *
 * Set parser options (in the same format as in constructor). Probably, you
 * will never need it, but you can change options after constructor call.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .set({ html: true, breaks: true })
 *             .set({ typographer, true });
 * ```
 *
 * __Note:__ To achieve the best possible performance, don't modify a
 * `markdown-it` instance options on the fly. If you need multiple configurations
 * it's best to create multiple instances and initialize each with separate
 * config.
 **/
MarkdownIt.prototype.set = function (options) {
  utils_assign(this.options, options);
  return this;
};

/** chainable, internal
 * MarkdownIt.configure(presets)
 *
 * Batch load of all options and compenent settings. This is internal method,
 * and you probably will not need it. But if you will - see available presets
 * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
 *
 * We strongly recommend to use presets instead of direct config loads. That
 * will give better compatibility with next versions.
 **/
MarkdownIt.prototype.configure = function (presets) {
  const self = this;
  if (isString(presets)) {
    const presetName = presets;
    presets = config[presetName];
    if (!presets) {
      throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name');
    }
  }
  if (!presets) {
    throw new Error('Wrong `markdown-it` preset, can\'t be empty');
  }
  if (presets.options) {
    self.set(presets.options);
  }
  if (presets.components) {
    Object.keys(presets.components).forEach(function (name) {
      if (presets.components[name].rules) {
        self[name].ruler.enableOnly(presets.components[name].rules);
      }
      if (presets.components[name].rules2) {
        self[name].ruler2.enableOnly(presets.components[name].rules2);
      }
    });
  }
  return this;
};

/** chainable
 * MarkdownIt.enable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to enable
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * Enable list or rules. It will automatically find appropriate components,
 * containing rules with given names. If rule not found, and `ignoreInvalid`
 * not set - throws exception.
 *
 * ##### Example
 *
 * ```javascript
 * var md = require('markdown-it')()
 *             .enable(['sub', 'sup'])
 *             .disable('smartquotes');
 * ```
 **/
MarkdownIt.prototype.enable = function (list, ignoreInvalid) {
  let result = [];
  if (!Array.isArray(list)) {
    list = [list];
  }
  ['core', 'block', 'inline'].forEach(function (chain) {
    result = result.concat(this[chain].ruler.enable(list, true));
  }, this);
  result = result.concat(this.inline.ruler2.enable(list, true));
  const missed = list.filter(function (name) {
    return result.indexOf(name) < 0;
  });
  if (missed.length && !ignoreInvalid) {
    throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);
  }
  return this;
};

/** chainable
 * MarkdownIt.disable(list, ignoreInvalid)
 * - list (String|Array): rule name or list of rule names to disable.
 * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
 *
 * The same as [[MarkdownIt.enable]], but turn specified rules off.
 **/
MarkdownIt.prototype.disable = function (list, ignoreInvalid) {
  let result = [];
  if (!Array.isArray(list)) {
    list = [list];
  }
  ['core', 'block', 'inline'].forEach(function (chain) {
    result = result.concat(this[chain].ruler.disable(list, true));
  }, this);
  result = result.concat(this.inline.ruler2.disable(list, true));
  const missed = list.filter(function (name) {
    return result.indexOf(name) < 0;
  });
  if (missed.length && !ignoreInvalid) {
    throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);
  }
  return this;
};

/** chainable
 * MarkdownIt.use(plugin, params)
 *
 * Load specified plugin with given params into current parser instance.
 * It's just a sugar to call `plugin(md, params)` with curring.
 *
 * ##### Example
 *
 * ```javascript
 * var iterator = require('markdown-it-for-inline');
 * var md = require('markdown-it')()
 *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
 *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
 *             });
 * ```
 **/
MarkdownIt.prototype.use = function (plugin /*, params, ... */) {
  const args = [this].concat(Array.prototype.slice.call(arguments, 1));
  plugin.apply(plugin, args);
  return this;
};

/** internal
 * MarkdownIt.parse(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Parse input string and return list of block tokens (special token type
 * "inline" will contain list of inline tokens). You should not call this
 * method directly, until you write custom renderer (for example, to produce
 * AST).
 *
 * `env` is used to pass data between "distributed" rules and return additional
 * metadata like reference info, needed for the renderer. It also can be used to
 * inject data in specific cases. Usually, you will be ok to pass `{}`,
 * and then pass updated object to renderer.
 **/
MarkdownIt.prototype.parse = function (src, env) {
  if (typeof src !== 'string') {
    throw new Error('Input data should be a String');
  }
  const state = new this.core.State(src, this, env);
  this.core.process(state);
  return state.tokens;
};

/**
 * MarkdownIt.render(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Render markdown string into html. It does all magic for you :).
 *
 * `env` can be used to inject additional metadata (`{}` by default).
 * But you will not need it with high probability. See also comment
 * in [[MarkdownIt.parse]].
 **/
MarkdownIt.prototype.render = function (src, env) {
  env = env || {};
  return this.renderer.render(this.parse(src, env), this.options, env);
};

/** internal
 * MarkdownIt.parseInline(src, env) -> Array
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
 * block tokens list with the single `inline` element, containing parsed inline
 * tokens in `children` property. Also updates `env` object.
 **/
MarkdownIt.prototype.parseInline = function (src, env) {
  const state = new this.core.State(src, this, env);
  state.inlineMode = true;
  this.core.process(state);
  return state.tokens;
};

/**
 * MarkdownIt.renderInline(src [, env]) -> String
 * - src (String): source string
 * - env (Object): environment sandbox
 *
 * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
 * will NOT be wrapped into `<p>` tags.
 **/
MarkdownIt.prototype.renderInline = function (src, env) {
  env = env || {};
  return this.renderer.render(this.parseInline(src, env), this.options, env);
};
/* harmony default export */ const markdown_it_lib = (MarkdownIt);
;// CONCATENATED MODULE: ./node_modules/markdown-it/index.mjs

// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.mjs
var tslib_es6 = __webpack_require__(1635);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/addon-doc/fesm2015/taiga-ui-addon-doc-utils.js


function tuiCoerceValueIsTrue(value) {
  return (value === null || value === void 0 ? void 0 : value.toString()) === 'true';
}
function isEmptyParamValue(value) {
  return ['undefined', 'null', 'NaN'].includes(value);
}
function isBooleanParamValue(value) {
  return value === 'true' || value === 'false';
}
function isNumberParamValue(value) {
  return !!value.trim() && !Number.isNaN(Number(value)) && !value.startsWith('+');
}
function isPossibleArray(value) {
  return value.startsWith('[') && value.endsWith(']');
}
function isPossibleObject(value) {
  return value.startsWith('{') && value.endsWith('}');
}
function tuiCoerceValue(value) {
  const prepared = String(value).trim();
  if (isEmptyParamValue(prepared)) {
    return null;
  }
  if (isBooleanParamValue(prepared)) {
    return String(prepared) === 'true';
  }
  if (isNumberParamValue(prepared)) {
    return Number(prepared);
  }
  const decodedValue = decodeURIComponent(prepared);
  try {
    return isPossibleArray(decodedValue) || isPossibleObject(decodedValue) ? JSON.parse(decodedValue) : decodedValue;
  } catch (_a) {
    return decodedValue;
  }
}
function tuiGenerateRoutes(type) {
  return [{
    path: '',
    component: type,
    children: [{
      path: ':tab',
      component: type
    }]
  }];
}
function inspectArray(array, depth) {
  if (depth === 0) {
    return '[…]';
  }
  let result = '';
  let first = true;
  for (let index = 0; index < array.length; index++) {
    if (first) {
      first = false;
    } else {
      result += ', ';
    }
    result += index in array ? tuiInspectAny(array[index], depth - 1) : 'empty';
  }
  return `[${result}]`;
}
function inspectObject(object, depth) {
  if (depth === 0) {
    return '{…}';
  }
  let result = '';
  let first = true;
  for (const key in object) {
    if (!object.hasOwnProperty(key)) {
      continue;
    }
    if (first) {
      first = false;
    } else {
      result += ', ';
    }
    result += `${key}: ${tuiInspectAny(object[key], depth - 1)}`;
  }
  return `{${result}}`;
}
/**
 * Returns readable JS entity
 * @param data
 * @param depth
 * @return readable JS entity
 */
function tuiInspectAny(data, depth) {
  if (data === null) {
    return 'null';
  }
  switch (typeof data) {
    case 'string':
      return `'${data}'`;
    case 'undefined':
    case 'number':
    case 'boolean':
    case 'function':
      return String(data);
    default:
      break;
  }
  if (data instanceof RegExp) {
    return String(data);
  }
  if (Array.isArray(data)) {
    return inspectArray(data, depth);
  }
  return inspectObject(data, depth);
}
function tuiIsPageGroup(page) {
  return 'subPages' in page;
}
function tuiTryParseMarkdownCodeBlock(text = '') {
  const tokens = new markdown_it_lib().parse(text, {});
  const result = tokens.filter(({
    tag,
    type
  }) => tag === 'code' && type === 'fence').map(({
    content
  }) => content.trim());
  return result.length ? result : [text];
}
function tuiRawLoad(content) {
  return (0,tslib_es6/* __awaiter */.sH)(this, void 0, void 0, function* () {
    return content instanceof Promise ? (yield content).default : content;
  });
}
function tuiRawLoadRecord(example) {
  return __awaiter(this, void 0, void 0, function* () {
    const processedContent = {};
    for (const [key, content] of Object.entries(example)) {
      if (content) {
        processedContent[key] = yield tuiRawLoad(content);
      }
    }
    return processedContent;
  });
}
function tuiSortPages(pages, excludeSections = new Set()) {
  const sections = Array.from(new Set(pages.map(page => page.section)));
  const sortedPages = pages.slice().sort((a, b) => {
    var _a, _b;
    if (excludeSections.has((_a = a.section) !== null && _a !== void 0 ? _a : '') || excludeSections.has((_b = b.section) !== null && _b !== void 0 ? _b : '')) {
      return 0;
    }
    const aSectionIndex = sections.indexOf(a.section);
    const bSectionIndex = sections.indexOf(b.section);
    if (aSectionIndex !== bSectionIndex) {
      return aSectionIndex - bSectionIndex;
    }
    if (a.title > b.title) {
      return 1;
    }
    return a.title.localeCompare(b.title);
  });
  return sortedPages.map(page => tuiIsPageGroup(page) ? Object.assign(Object.assign({}, page), {
    subPages: tuiSortPages(page.subPages, excludeSections)
  }) : page);
}
function assertTitle(page, map) {
  var _a;
  if (map.has(page.title) && ((_a = map.get(page.title)) === null || _a === void 0 ? void 0 : _a.route) !== page.route) {
    console.error('Title for page should be unique for prevent inconsistent page names', page, '<== Collisions between ==>', map.get(page.title));
  }
}
function tuiToFlatMapPages(pages) {
  const map = new Map();
  pages.forEach(page => {
    if ('subPages' in page) {
      page.subPages.forEach(subPage => {
        ngDevMode && assertTitle(subPage, map);
        map.set(subPage.title, subPage);
      });
    } else {
      ngDevMode && assertTitle(page, map);
      map.set(page.title, page);
    }
  });
  return map;
}
const MAP = {
  а: 'f',
  б: ',',
  в: 'd',
  г: 'u',
  д: 'l',
  е: 't',
  ё: '`',
  ж: ';',
  з: 'p',
  и: 'b',
  й: 'q',
  к: 'r',
  л: 'k',
  м: 'v',
  н: 'y',
  о: 'j',
  п: 'g',
  р: 'h',
  с: 'c',
  т: 'n',
  у: 'e',
  ф: 'a',
  х: '[',
  ц: 'w',
  ч: 'x',
  ш: 'i',
  щ: 'o',
  ъ: ']',
  ы: 's',
  ь: 'm',
  ю: '.',
  я: 'z'
};
/**
 * Translates text mistakenly typed in the Russian layout into English
 * @param string string with Russian layout characters
 * @return string with English layout characters
 */
function tuiTransliterateKeyboardLayout(string) {
  let newStr = '';
  for (let i = 0; i < string.length; i++) {
    newStr += string.charAt(i) in MAP ? MAP[string.charAt(i)] : string.charAt(i);
  }
  return newStr;
}
function tuiTypeReferenceParser(types) {
  const generics = types.match(/<([^>]+)>/g);
  const escaped = generics ? generics.reduce((result, current) => result.replace(current, current.replace(/\|/g, '&')), types).split('|').map(item => item.trim()) : types.split('|').map(item => item.trim());
  return escaped.reduce((result, type) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    let extracted = type.trim().replace(/readonly /g, '').replace(/\[\]/g, '');
    extracted = (_d = (_c = (_b = (_a = extracted.match(/ReadonlyArray<([^>]+)>/)) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.split('&')) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : extracted;
    extracted = (_h = (_g = (_f = (_e = extracted.match(/\[([^\]]+)\]/)) === null || _e === void 0 ? void 0 : _e[1]) === null || _f === void 0 ? void 0 : _f.split(',')) === null || _g === void 0 ? void 0 : _g[0]) !== null && _h !== void 0 ? _h : extracted;
    extracted = (_m = (_l = (_k = (_j = extracted.split('<')) === null || _j === void 0 ? void 0 : _j[0]) !== null && _k !== void 0 ? _k : extracted) === null || _l === void 0 ? void 0 : _l.trim()) !== null && _m !== void 0 ? _m : '';
    extracted = Number.isNaN(parseFloat(extracted)) ? extracted : 'number';
    extracted = /^'(.+)'$|^"(.+)"$|^`(.+)`$/.test(extracted) ? 'string' : extracted;
    extracted = extracted.length === 1 ? 'unknown' : extracted;
    return result.concat({
      type: type.replace(/&/g, '|'),
      extracted
    });
  }, []);
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-addon-doc-utils.js.map

/***/ }),

/***/ 683:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Er: () => (/* binding */ AbstractTuiControl),
/* harmony export */   SN: () => (/* binding */ tuiAsControl),
/* harmony export */   Xb: () => (/* binding */ AbstractTuiInteractive),
/* harmony export */   _g: () => (/* binding */ AbstractTuiPortalService),
/* harmony export */   bu: () => (/* binding */ AbstractTuiValueTransformer),
/* harmony export */   iX: () => (/* binding */ AbstractTuiDialogService),
/* harmony export */   jc: () => (/* binding */ AbstractTuiNullableControl),
/* harmony export */   kG: () => (/* binding */ AbstractTuiPortalHostComponent),
/* harmony export */   lF: () => (/* binding */ AbstractTuiThemeSwitcher),
/* harmony export */   zY: () => (/* binding */ AbstractTuiController)
/* harmony export */ });
/* unused harmony exports AbstractTuiDialogDirective, AbstractTuiMultipleControl */
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4341);
/* harmony import */ var _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4489);
/* harmony import */ var _taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2287);
/* harmony import */ var _taiga_ui_cdk_utils__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9925);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1413);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(7786);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(1985);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(4412);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5335);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9172);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(6354);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(5964);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(3294);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5558);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(6977);
/* harmony import */ var _taiga_ui_cdk_services__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(4340);
/* harmony import */ var _taiga_ui_cdk_exceptions__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(6651);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6412);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_1__);















const _c0 = ["viewContainer"];
const TUI = 'tui_interactive_';
/**
 * The most basic class for interactive components
 */
let AbstractTuiInteractive = /*#__PURE__*/(() => {
  class AbstractTuiInteractive {
    constructor() {
      this.pseudoHover = null;
      this.pseudoActive = null;
      this.pseudoFocus = null;
      /**
       * Determines if component is focusable with keyboard.
       */
      this.focusable = true;
      this.nativeId = '';
      /**
       * Emits 'true' on focus and 'false' on blur.
       */
      this.focusedChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      this.focusVisibleChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
      this.focusVisible = false;
      this.autoIdString = `${TUI}${AbstractTuiInteractive.autoId++}${Date.now()}`;
    }
    get computedDisabled() {
      return this.disabled;
    }
    get computedFocusable() {
      return !this.computedDisabled && (this.focusable || this.focused);
    }
    get computedFocused() {
      var _a;
      return !this.computedDisabled && ((_a = this.pseudoFocus) !== null && _a !== void 0 ? _a : this.focused);
    }
    get computedFocusVisible() {
      var _a;
      return !this.computedDisabled && ((_a = this.pseudoFocus) !== null && _a !== void 0 ? _a : this.focusVisible);
    }
    // TODO: 3.0 Consider removing since native input is exposed
    get id() {
      return this.nativeId || this.autoIdString;
    }
    updateFocused(focused) {
      this.focusedChange.emit(focused);
    }
    updateFocusVisible(focusVisible) {
      if (this.focusVisible === focusVisible) {
        return;
      }
      this.focusVisible = focusVisible;
      this.focusVisibleChange.emit(focusVisible);
    }
  }
  AbstractTuiInteractive.autoId = 0;
  AbstractTuiInteractive.ɵfac = function AbstractTuiInteractive_Factory(t) {
    return new (t || AbstractTuiInteractive)();
  };
  AbstractTuiInteractive.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: AbstractTuiInteractive,
    hostVars: 7,
    hostBindings: function AbstractTuiInteractive_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("data-focused", ctx.pseudoFocus);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("_disabled", ctx.computedDisabled)("_focused", ctx.computedFocused)("_focus-visible", ctx.computedFocusVisible);
      }
    },
    inputs: {
      pseudoHover: "pseudoHover",
      pseudoActive: "pseudoActive",
      pseudoFocus: "pseudoFocus",
      focusable: "focusable",
      nativeId: "nativeId"
    },
    outputs: {
      focusedChange: "focusedChange",
      focusVisibleChange: "focusVisibleChange"
    }
  });
  return AbstractTuiInteractive;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
class AbstractTuiValueTransformer {}

/**
 * Basic ControlValueAccessor class to build form components upon
 */
let AbstractTuiControl = /*#__PURE__*/(() => {
  class AbstractTuiControl extends AbstractTuiInteractive {
    constructor(ngControl, cdr, valueTransformer) {
      super();
      this.ngControl = ngControl;
      this.cdr = cdr;
      this.valueTransformer = valueTransformer;
      this.refresh$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__/* .Subject */ .B();
      this.onTouched = _taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_3__/* .EMPTY_FUNCTION */ .x7;
      this.onChange = _taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_3__/* .EMPTY_FUNCTION */ .x7;
      this.fallbackValue = this.getFallbackValue();
      this.destroy$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__/* .Subject */ .B();
      this.readOnly = false;
      this.pseudoInvalid = null;
      if (ngDevMode && this.ngControl === null) {
        _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_4__/* .tuiAssert */ .B.assert(false, `NgControl not injected in ${this.constructor.name}!\n`, 'Use [(ngModel)] or [formControl] or formControlName for correct work.');
      }
      if (this.ngControl) {
        this.ngControl.valueAccessor = this;
      }
    }
    get computedInvalid() {
      return this.interactive && (this.pseudoInvalid !== null ? this.pseudoInvalid : this.touched && this.invalid);
    }
    get value() {
      var _a;
      return (_a = this.previousInternalValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
    }
    set value(value) {
      this.updateValue(value);
    }
    get safeCurrentValue() {
      var _a;
      return (_a = this.rawValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
    }
    get invalid() {
      return this.safeNgControlData(({
        invalid
      }) => invalid, false);
    }
    get valid() {
      return this.safeNgControlData(({
        valid
      }) => valid, false);
    }
    get touched() {
      return this.safeNgControlData(({
        touched
      }) => touched, false);
    }
    get disabled() {
      return this.safeNgControlData(({
        disabled
      }) => disabled, false);
    }
    get interactive() {
      return !this.readOnly && !this.computedDisabled;
    }
    get control() {
      return this.safeNgControlData(({
        control
      }) => control, null);
    }
    get computedName() {
      var _a, _b;
      return (_b = (_a = this.controlName) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null;
    }
    get controlName() {
      var _a, _b, _c;
      return (_c = (_b = (_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : null;
    }
    get rawValue() {
      const {
        ngControl
      } = this;
      if (ngControl === null) {
        return undefined;
      }
      const controlValue = ngControl instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_5__/* .NgModel */ .vS && this.previousInternalValue === undefined ? ngControl.viewModel : ngControl.value;
      return this.fromControlValue(controlValue);
    }
    ngOnInit() {
      this.refresh$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__/* .delay */ .c)(0), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__/* .startWith */ .Z)(null), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__/* .map */ .T)(() => {
        var _a;
        return (_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.control;
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__/* .filter */ .p)(_taiga_ui_cdk_utils__WEBPACK_IMPORTED_MODULE_10__/* .tuiIsPresent */ .Aj), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_11__/* .distinctUntilChanged */ .F)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_12__/* .switchMap */ .n)(control => (0,rxjs__WEBPACK_IMPORTED_MODULE_13__/* .merge */ .h)(control.valueChanges, control.statusChanges)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__/* .takeUntil */ .Q)(this.destroy$)).subscribe(() => {
        this.refreshLocalValue(this.safeCurrentValue);
      });
    }
    ngOnDestroy() {
      this.destroy$.next();
      this.destroy$.complete();
    }
    checkControlUpdate() {
      this.cdr.markForCheck();
    }
    registerOnChange(onChange) {
      this.onChange = componentValue => {
        onChange(this.toControlValue(componentValue));
      };
      this.refresh$.next();
    }
    registerOnTouched(onTouched) {
      this.onTouched = onTouched;
    }
    setDisabledState() {
      this.checkControlUpdate();
    }
    writeValue(value) {
      const controlValue = this.ngControl instanceof _angular_forms__WEBPACK_IMPORTED_MODULE_5__/* .NgModel */ .vS && this.previousInternalValue === undefined ? this.ngControl.model : value;
      this.refreshLocalValue(this.fromControlValue(controlValue));
    }
    updateFocused(focused) {
      if (!focused) {
        this.controlMarkAsTouched();
      }
      super.updateFocused(focused);
    }
    /**
     * @deprecated use `value` setter
     */
    updateValue(value) {
      if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
        return;
      }
      this.previousInternalValue = value;
      this.controlSetValue(value);
    }
    valueIdenticalComparator(oldValue, newValue) {
      return oldValue === newValue;
    }
    safeNgControlData(extractor, defaultFieldValue) {
      var _a;
      return (_a = this.ngControl && extractor(this.ngControl)) !== null && _a !== void 0 ? _a : defaultFieldValue;
    }
    controlMarkAsTouched() {
      this.onTouched();
      this.checkControlUpdate();
    }
    controlSetValue(value) {
      this.onChange(value);
      this.checkControlUpdate();
    }
    refreshLocalValue(value) {
      this.previousInternalValue = value;
      this.checkControlUpdate();
    }
    fromControlValue(controlValue) {
      return this.valueTransformer ? this.valueTransformer.fromControlValue(controlValue) : controlValue;
    }
    toControlValue(componentValue) {
      return this.valueTransformer ? this.valueTransformer.toControlValue(componentValue) : componentValue;
    }
  }
  AbstractTuiControl.ɵfac = function AbstractTuiControl_Factory(t) {
    return new (t || AbstractTuiControl)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_forms__WEBPACK_IMPORTED_MODULE_5__/* .NgControl */ .vO, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](AbstractTuiValueTransformer, 8));
  };
  AbstractTuiControl.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: AbstractTuiControl,
    hostVars: 4,
    hostBindings: function AbstractTuiControl_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("_readonly", ctx.readOnly)("_invalid", ctx.computedInvalid);
      }
    },
    inputs: {
      readOnly: "readOnly",
      pseudoInvalid: "pseudoInvalid"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
  });
  return AbstractTuiControl;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function tuiAsControl(useExisting) {
  return {
    provide: AbstractTuiControl,
    useExisting
  };
}
let AbstractTuiController = /*#__PURE__*/(() => {
  class AbstractTuiController {
    constructor() {
      this.change$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__/* .Subject */ .B();
    }
    ngOnChanges() {
      this.change$.next();
    }
  }
  AbstractTuiController.ɵfac = function AbstractTuiController_Factory(t) {
    return new (t || AbstractTuiController)();
  };
  AbstractTuiController.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: AbstractTuiController,
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return AbstractTuiController;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let AbstractTuiDialogService = /*#__PURE__*/(() => {
  class AbstractTuiDialogService extends rxjs__WEBPACK_IMPORTED_MODULE_15__/* .Observable */ .c {
    constructor(idService) {
      super(observer => this.dialogs$.subscribe(observer));
      this.idService = idService;
      this.dialogs$ = new rxjs__WEBPACK_IMPORTED_MODULE_16__/* .BehaviorSubject */ .t([]);
    }
    open(content, options = {}) {
      return new rxjs__WEBPACK_IMPORTED_MODULE_15__/* .Observable */ .c(observer => {
        const completeWith = result => {
          observer.next(result);
          observer.complete();
        };
        const dialog = Object.assign(Object.assign(Object.assign({}, this.defaultOptions), options), {
          content,
          completeWith,
          $implicit: observer,
          component: this.component,
          createdAt: Date.now(),
          id: this.idService.generate()
        });
        this.dialogs$.next([...this.dialogs$.value, dialog]);
        return () => {
          this.dialogs$.next(this.dialogs$.value.filter(item => item !== dialog));
        };
      });
    }
  }
  AbstractTuiDialogService.ɵfac = function AbstractTuiDialogService_Factory(t) {
    return new (t || AbstractTuiDialogService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_taiga_ui_cdk_services__WEBPACK_IMPORTED_MODULE_17__/* .TuiIdService */ .BF));
  };
  AbstractTuiDialogService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: AbstractTuiDialogService,
    factory: AbstractTuiDialogService.ɵfac
  });
  return AbstractTuiDialogService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let AbstractTuiDialogDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class AbstractTuiDialogDirective extends PolymorpheusTemplate {
    constructor(templateRef, cdr, service) {
      super(templateRef, cdr);
      this.service = service;
      this.open$ = new Subject();
      this.options = {};
      this.open = false;
      this.openChange = this.open$.pipe(distinctUntilChanged(), tuiIfMap(() => this.service.open(this, this.options).pipe(ignoreElements(), endWith(false))), share());
    }
    ngOnChanges() {
      this.open$.next(this.open);
    }
  }
  AbstractTuiDialogDirective.ɵfac = function AbstractTuiDialogDirective_Factory(t) {
    return new (t || AbstractTuiDialogDirective)(i0.ɵɵdirectiveInject(TemplateRef), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(AbstractTuiDialogService));
  };
  AbstractTuiDialogDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: AbstractTuiDialogDirective,
    features: [i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature]
  });
  return AbstractTuiDialogDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let AbstractTuiMultipleControl = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class AbstractTuiMultipleControl extends AbstractTuiControl {
    clear() {
      this.value = [];
    }
    getFallbackValue() {
      return [];
    }
  }
  AbstractTuiMultipleControl.ɵfac = /* @__PURE__ */(() => {
    let ɵAbstractTuiMultipleControl_BaseFactory;
    return function AbstractTuiMultipleControl_Factory(t) {
      return (ɵAbstractTuiMultipleControl_BaseFactory || (ɵAbstractTuiMultipleControl_BaseFactory = i0.ɵɵgetInheritedFactory(AbstractTuiMultipleControl)))(t || AbstractTuiMultipleControl);
    };
  })();
  AbstractTuiMultipleControl.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: AbstractTuiMultipleControl,
    features: [i0.ɵɵInheritDefinitionFeature]
  });
  return AbstractTuiMultipleControl;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let AbstractTuiNullableControl = /*#__PURE__*/(() => {
  class AbstractTuiNullableControl extends AbstractTuiControl {
    getFallbackValue() {
      return null;
    }
  }
  AbstractTuiNullableControl.ɵfac = /* @__PURE__ */(() => {
    let ɵAbstractTuiNullableControl_BaseFactory;
    return function AbstractTuiNullableControl_Factory(t) {
      return (ɵAbstractTuiNullableControl_BaseFactory || (ɵAbstractTuiNullableControl_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](AbstractTuiNullableControl)))(t || AbstractTuiNullableControl);
    };
  })();
  AbstractTuiNullableControl.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: AbstractTuiNullableControl,
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
  });
  return AbstractTuiNullableControl;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Abstract service for displaying portals
 */
let AbstractTuiPortalService = /*#__PURE__*/(() => {
  class AbstractTuiPortalService {
    get safeHost() {
      if (!this.host) {
        throw new _taiga_ui_cdk_exceptions__WEBPACK_IMPORTED_MODULE_18__/* .TuiNoHostException */ .fn();
      }
      return this.host;
    }
    attach(host) {
      this.host = host;
    }
    add(component) {
      return this.safeHost.addComponentChild(component);
    }
    remove({
      hostView
    }) {
      if (!hostView.destroyed) {
        hostView.destroy();
      }
    }
    addTemplate(templateRef, context) {
      return this.safeHost.addTemplateChild(templateRef, context);
    }
    removeTemplate(viewRef) {
      if (!viewRef.destroyed) {
        viewRef.destroy();
      }
    }
  }
  AbstractTuiPortalService.ɵfac = function AbstractTuiPortalService_Factory(t) {
    return new (t || AbstractTuiPortalService)();
  };
  AbstractTuiPortalService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: AbstractTuiPortalService,
    factory: AbstractTuiPortalService.ɵfac
  });
  return AbstractTuiPortalService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Abstract class for host element for dynamically created portals.
 */
let AbstractTuiPortalHostComponent = /*#__PURE__*/(() => {
  class AbstractTuiPortalHostComponent {
    constructor(injector, el, portalService) {
      this.injector = injector;
      this.el = el;
      portalService.attach(this);
    }
    /** @deprecated unused, will be removed in 4.0 **/
    get clientRect() {
      return this.el.nativeElement.getBoundingClientRect();
    }
    addComponentChild(component) {
      const parent = component.createInjector(this.injector);
      const resolver = parent.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver);
      const factory = resolver.resolveComponentFactory(component.component);
      // TODO: Remove in 4.0
      const providers = [{
        provide: AbstractTuiPortalHostComponent,
        useValue: this
      }];
      const injector = _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector.create({
        parent,
        providers
      });
      const ref = this.vcr.createComponent(factory, undefined, injector);
      ref.changeDetectorRef.detectChanges();
      return ref;
    }
    addTemplateChild(templateRef, context) {
      return this.vcr.createEmbeddedView(templateRef, context);
    }
  }
  AbstractTuiPortalHostComponent.ɵfac = function AbstractTuiPortalHostComponent_Factory(t) {
    return new (t || AbstractTuiPortalHostComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.INJECTOR), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](AbstractTuiPortalService));
  };
  AbstractTuiPortalHostComponent.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: AbstractTuiPortalHostComponent,
    viewQuery: function AbstractTuiPortalHostComponent_Query(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵviewQuery"](_c0, 5, _angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef);
      }
      if (rf & 2) {
        let _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵloadQuery"]()) && (ctx.vcr = _t.first);
      }
    }
  });
  return AbstractTuiPortalHostComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Use this abstract class to create your own toggleable themes.
 * A component extending this class must have CSS variables definitions
 * and have ViewEncapsulation set to NONE. A boolean input allows to
 * switch theme on or off.
 */
let AbstractTuiThemeSwitcher = /*#__PURE__*/(() => {
  class AbstractTuiThemeSwitcher {
    constructor(doc) {
      this.doc = doc;
      if (this.style !== null) {
        this.addTheme();
        return;
      }
      const styles = this.doc.head.querySelectorAll('style');
      this.constructor.style = styles[styles.length - 1];
    }
    get style() {
      return this.constructor.style;
    }
    ngOnDestroy() {
      this.removeTheme();
    }
    addTheme() {
      if (this.style) {
        this.doc.head.appendChild(this.style);
      }
    }
    removeTheme() {
      var _a;
      (_a = this.style) === null || _a === void 0 ? void 0 : _a.remove();
    }
  }
  AbstractTuiThemeSwitcher.style = null;
  AbstractTuiThemeSwitcher.ɵfac = function AbstractTuiThemeSwitcher_Factory(t) {
    return new (t || AbstractTuiThemeSwitcher)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_1__.DOCUMENT));
  };
  AbstractTuiThemeSwitcher.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: AbstractTuiThemeSwitcher
  });
  return AbstractTuiThemeSwitcher;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-abstract.js.map

/***/ }),

/***/ 4489:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ tuiAssert)
/* harmony export */ });
/* unused harmony export TuiValidationError */
/* harmony import */ var _taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2287);

const tuiAssert = {
  /**
   * @deprecated:
   * The current field no longer matters as
   * it will not be provided in production
   */
  enabled: false,
  get assert() {
    return ngDevMode ? Function.prototype.bind.call(console.assert, console) : _taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_0__/* .EMPTY_FUNCTION */ .x7;
  }
};
class TuiValidationError {
  constructor(message, context = {}) {
    this.message = message;
    this.context = context;
  }
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-classes.js.map

/***/ }),

/***/ 2287:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   BJ: () => (/* binding */ TUI_DEFAULT_IDENTITY_MATCHER),
/* harmony export */   Fr: () => (/* binding */ ALWAYS_FALSE_HANDLER),
/* harmony export */   Hk: () => (/* binding */ TUI_PARENT_ANIMATION),
/* harmony export */   Lo: () => (/* binding */ EMPTY_CLIENT_RECT),
/* harmony export */   Ml: () => (/* binding */ EMPTY_ARRAY),
/* harmony export */   Np: () => (/* binding */ svgNodeFilter),
/* harmony export */   Pd: () => (/* binding */ TUI_DEFAULT_STRINGIFY),
/* harmony export */   SD: () => (/* binding */ CHAR_HYPHEN),
/* harmony export */   Uq: () => (/* binding */ ALWAYS_TRUE_HANDLER),
/* harmony export */   Wt: () => (/* binding */ TUI_VERSION),
/* harmony export */   am: () => (/* binding */ CHAR_NO_BREAK_SPACE),
/* harmony export */   c: () => (/* binding */ CHAR_EN_DASH),
/* harmony export */   cZ: () => (/* binding */ POLLING_TIME),
/* harmony export */   el: () => (/* binding */ CHAR_MINUS),
/* harmony export */   x7: () => (/* binding */ EMPTY_FUNCTION),
/* harmony export */   xQ: () => (/* binding */ EMPTY_QUERY)
/* harmony export */ });
/* unused harmony exports CHAR_BULLET, CHAR_CURRENCY_SIGN, CHAR_ELLIPSIS, CHAR_EM_DASH, CHAR_LAQUO, CHAR_PLUS, CHAR_RAQUO, CHAR_ZERO_WIDTH_SPACE, CHROMIUM_EDGE_START_VERSION, TUI_DEFAULT_MATCHER, TUI_PARENT_STOP, TUI_STRICT_MATCHER, TUI_USED_ICONS */
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9969);



/**
 * Handler that always returns `false`.
 */
// eslint-disable-next-line no-restricted-syntax
const ALWAYS_FALSE_HANDLER = () => false;

/**
 * Handler that always returns `true`.
 */
// eslint-disable-next-line no-restricted-syntax
const ALWAYS_TRUE_HANDLER = () => true;

/**
 * @deprecated
 * TODO: drop support of legacy Edge (EdgeHTML) in v4.x
 */
const CHROMIUM_EDGE_START_VERSION = 79;
const rect = {
  bottom: 0,
  height: 0,
  left: 0,
  right: 0,
  top: 0,
  width: 0,
  x: 0,
  y: 0
};
/**
 * For type safety when using @ContentChildren and @ViewChildren
 *
 * NOTE: Be careful subscribing to 'changes'
 */
const EMPTY_QUERY = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.QueryList();
const EMPTY_ARRAY = [];
const EMPTY_FUNCTION = () => {};
const EMPTY_CLIENT_RECT = Object.assign(Object.assign({}, rect), {
  toJSON() {
    return rect;
  }
});

/**
 * Default method to turn arbitrary object into string
 */
const TUI_DEFAULT_STRINGIFY = item => String(item);
function bothEmpty(item1, item2) {
  return Array.isArray(item1) && Array.isArray(item2) && !item1.length && !item2.length;
}
/**
 * Default handler for matching stringified version of an item and a search query
 * @param item arbitrary element to match with a string
 * @param search search query
 * @param stringify handler to turn item into a string
 */
const TUI_DEFAULT_MATCHER = (item, search, stringify = TUI_DEFAULT_STRINGIFY) => stringify(item).toLowerCase().includes(search.toLowerCase());
/**
 * Default handler for strict matching stringified version of an item and a search query
 * @param item arbitrary element to match with a string
 * @param search search query
 * @param stringify handler to turn item into a string
 */
const TUI_STRICT_MATCHER = (item, search, stringify = TUI_DEFAULT_STRINGIFY) => stringify(item).toLowerCase() === search.toLowerCase();
/**
 * Default handler to match equality of two elements
 * ATTENTION: considers two empty arrays equal
 *
 * @param item1 first element
 * @param item2 second element
 */
const TUI_DEFAULT_IDENTITY_MATCHER = (item1, item2) => item1 === item2 || bothEmpty(item1, item2);

/**
 * Add to enable child :leave animation (fixes https://github.com/angular/angular/issues/15753)
 */
const TUI_PARENT_ANIMATION = (0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .trigger */ .hZ)('tuiParentAnimation', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .transition */ .kY)(':leave', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .query */ .P)(':scope > *', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .animateChild */ .MA)()], {
  optional: true
})])]);
/**
 * Add on parent to stop initial :enter animation for children
 */
const TUI_PARENT_STOP = (0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .trigger */ .hZ)('tuiParentStop', [(0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .transition */ .kY)(':enter', [])]);
const POLLING_TIME = 1000 / 15;

// Filtering SVGElements for TreeWalker
// Filter must be a function in IE, other modern browsers are compliant to this format
const svgNodeFilter = node => 'ownerSVGElement' in node ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;

/**
 * {@link https://unicode-table.com/en/00A0/ Non-breaking space}.
 */
const CHAR_NO_BREAK_SPACE = '\u00A0';
/**
 * {@link https://unicode-table.com/en/2013/ EN dash}
 * is used to indicate a range of numbers or a span of time.
 * @example 2006–2022
 * ___
 * Don't confuse with {@link CHAR_EM_DASH} or {@link CHAR_HYPHEN}!
 */
const CHAR_EN_DASH = '\u2013';
/**
 * {@link https://unicode-table.com/en/2014/ EM dash}
 * is used to mark a break in a sentence.
 * @example Taiga UI — powerful set of open source components for Angular
 * ___
 * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_HYPHEN}!
 */
const CHAR_EM_DASH = '\u2014';
/**
 * {@link https://unicode-table.com/en/00AB/ Left-Pointing Double Angle Quotation Mark}
 */
const CHAR_LAQUO = '\u00AB';
/**
 * {@link https://unicode-table.com/en/00BB/ Right-Pointing Double Angle Quotation Mark}
 */
const CHAR_RAQUO = '\u00BB';
/**
 * {@link https://unicode-table.com/en/002D/ Hyphen (minus sign)}
 * is used to combine words.
 * @example well-behaved
 * ___
 * Don't confuse with {@link CHAR_EN_DASH} or {@link CHAR_EM_DASH}!
 */
const CHAR_HYPHEN = '\u002D';
/**
 * {@link https://unicode-table.com/en/2212/ Minus}
 * is used as math operator symbol or before negative digits.
 * ---
 * Can be used as `&minus;`. Don't confuse with {@link CHAR_HYPHEN}
 */
const CHAR_MINUS = '\u2212';
/**
 * {@link https://unicode-table.com/en/002B/ Plus}
 */
const CHAR_PLUS = '\u002B';
/**
 * {@link https://unicode-table.com/en/2022/ Bullet}.
 */
const CHAR_BULLET = '\u2022';
/**
 * {@link https://unicode-table.com/en/2026/ Suspension points}.
 */
const CHAR_ELLIPSIS = '\u2026';
/**
 * {@link https://unicode-table.com/en/00A4/ Suspension points}.
 */
const CHAR_CURRENCY_SIGN = '\u00A4';
/**
 * {@link https://unicode-table.com/en/200b/ Suspension points}.
 */
const CHAR_ZERO_WIDTH_SPACE = '\u200B';

/**
 * @description:
 * AUTOGENERATED
 *
 * Array of icons used in taiga-ui components
 */
const TUI_USED_ICONS = (/* unused pure expression or super */ null && (['tuiIconMirMono', 'tuiIconVisaMono', 'tuiIconElectronMono', 'tuiIconMastercard', 'tuiIconMaestro', 'tuiIconAmex', 'tuiIconDinersClub', 'tuiIconDiscover', 'tuiIconHumo', 'tuiIconJCB', 'tuiIconRuPay', 'tuiIconUnionPay', 'tuiIconUzcard', 'tuiIconVerve', 'tuiIconCopyLarge', 'tuiIconCheckLarge', 'tuiIconLink', 'tuiIconSearch', 'tuiIconSun', 'tuiIconMoon', 'tuiIconCode', 'tuiIconMenuLarge', 'tuiIconRotate', 'tuiIconArrowLeft', 'tuiIconArrowRight', 'tuiIconPlus', 'tuiIconMinus', 'tuiIconMinimize', 'tuiIconEye', 'tuiIconEyeOff', 'tuiIconDrag', 'tuiIconSortAscending', 'tuiIconSortDescending', 'tuiIconSortOff', 'tuiIconCheck', 'tuiIconMinusLarge', 'tuiIconChevronUp', 'tuiIconHelpCircle', 'tuiIconClose', 'tuiIconAlertCircle', 'tuiIconChevronRight', 'tuiIconInfo', 'tuiIconCheckCircle', 'tuiIconXCircle', 'tuiIconChevronLeft', 'tuiIconStarLarge', 'tuiIconChevronDown', 'tuiIconChevronDownLarge', 'tuiIconFileLarge', 'tuiIconCheckCircleLarge', 'tuiIconAlertCircleLarge', 'tuiIconTrashLarge', 'tuiIconCopy', 'tuiIconEyeOffLarge', 'tuiIconEyeLarge', 'tuiIconClock', 'tuiIconClockLarge', 'tuiIconToggleOff', 'tuiIconToggleOffLarge', 'tuiIconToggleOn', 'tuiIconToggleOnLarge', 'tuiIconCalendar', 'tuiIconCalendarLarge']));
const TUI_VERSION = '3.70.0';

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-constants.js.map

/***/ }),

/***/ 4343:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   PE: () => (/* binding */ tuiPure)
/* harmony export */ });
/* unused harmony exports tuiDebounce, tuiDefaultProp, tuiRequiredSetter */
/* harmony import */ var _taiga_ui_cdk_exceptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6651);



/**
 * @deprecated:
 * not compatible with TypeScript 5
 */
function tuiDebounce(timeout) {
  let timeoutRef;
  return function (_target, _key, descriptor) {
    const {
      value
    } = descriptor;
    descriptor.value = function (...args) {
      clearTimeout(timeoutRef);
      timeoutRef = setTimeout(() => value.apply(this, args), timeout);
    };
    return descriptor;
  };
}
function errorGetDefault(key, component) {
  return `Default value for ${String(key)} was not provided in ${component}, error in Taiga UI Angular Kit`;
}
function errorSetDefault(key, component) {
  return `Undefined was passed as ${String(key)} to ${component}, which is invalid input, using default value:`;
}
function errorSetDefaultInitial(key, component) {
  return `Undefined was passed as default value for ${String(key)} to ${component}, error in Taiga UI Angular Kit`;
}
/**
 * @deprecated:
 * not compatible with TypeScript 5
 *
 * Decorator for checking input values for undefined. You can also pass
 * optional assertion to check input against.
 *
 * CAUTION: This decorator overwrites other getters and setters.
 */
function tuiDefaultProp(assertion, ...args) {
  return (target, key) => {
    const {
      name
    } = target.constructor;
    const errorGetDefaultMessage = ngDevMode && errorGetDefault(key, name);
    const errorSetDefaultMessage = ngDevMode && errorSetDefault(key, name);
    Object.defineProperty(target, key, {
      configurable: true,
      get() {
        ngDevMode && tuiAssert.assert(false, errorGetDefaultMessage);
        return undefined;
      },
      set(initialValue) {
        const isValid = initialValue !== undefined;
        const errorMessage = ngDevMode && errorSetDefaultInitial(key, name);
        let currentValue = initialValue;
        ngDevMode && tuiAssert.assert(isValid, errorMessage);
        if (ngDevMode && isValid && assertion && tuiAssert) {
          tuiAssert.assert(assertion.call(this, initialValue), `${String(key)} in ${name} received:`, initialValue, ...args);
        }
        Object.defineProperty(this, key, {
          configurable: true,
          get() {
            return currentValue;
          },
          set(value) {
            const isValid = value !== undefined;
            const backupValue = initialValue;
            ngDevMode && tuiAssert.assert(isValid, errorSetDefaultMessage, String(backupValue));
            if (ngDevMode && isValid && assertion && tuiAssert) {
              tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
            }
            currentValue = isValid ? value : backupValue;
          }
        });
      }
    });
  };
}
function decorateMethod(originalMethod) {
  let previousArgs = [];
  let originalFnWasCalledLeastAtOnce = false;
  let pureValue;
  return function tuiPureMethodPatched(...args) {
    const isPure = originalFnWasCalledLeastAtOnce && previousArgs.length === args.length && args.every((arg, index) => arg === previousArgs[index]);
    if (isPure) {
      return pureValue;
    }
    previousArgs = args;
    pureValue = originalMethod.apply(this, args);
    originalFnWasCalledLeastAtOnce = true;
    return pureValue;
  };
}
function decorateGetter(originalGetter, propertyKey, enumerable = true) {
  return function tuiPureGetterPatched() {
    const value = originalGetter.call(this);
    Object.defineProperty(this, propertyKey, {
      enumerable,
      value
    });
    return value;
  };
}
function tuiPure(target, propertyKeyOrContext, descriptor) {
  if (typeof target === 'function') {
    const context = propertyKeyOrContext;
    if (context.kind === 'getter') {
      return decorateGetter(target, context.name);
    }
    if (context.kind === 'method') {
      return decorateMethod(target);
    }
    throw new _taiga_ui_cdk_exceptions__WEBPACK_IMPORTED_MODULE_0__/* .TuiPureException */ .SQ();
  }
  const {
    get,
    enumerable,
    value
  } = descriptor;
  const propertyKey = propertyKeyOrContext;
  if (get) {
    return {
      configurable: true,
      enumerable,
      get: decorateGetter(get, propertyKey, enumerable)
    };
  }
  if (typeof value !== 'function') {
    throw new _taiga_ui_cdk_exceptions__WEBPACK_IMPORTED_MODULE_0__/* .TuiPureException */ .SQ();
  }
  const original = value;
  return {
    configurable: true,
    enumerable,
    get() {
      let previousArgs = [];
      let originalFnWasCalledLeastAtOnce = false;
      let pureValue;
      const patched = (...args) => {
        const isPure = originalFnWasCalledLeastAtOnce && previousArgs.length === args.length && args.every((arg, index) => arg === previousArgs[index]);
        if (isPure) {
          return pureValue;
        }
        previousArgs = args;
        pureValue = original.apply(this, args);
        originalFnWasCalledLeastAtOnce = true;
        return pureValue;
      };
      Object.defineProperty(this, propertyKey, {
        configurable: true,
        value: patched
      });
      return patched;
    }
  };
}
function errorSet(key, component) {
  return `Undefined was passed as ${String(key)} to ${component}, setter will not be called`;
}
/**
 * @deprecated:
 * not compatible with TypeScript 5
 *
 * Decorator for checking input setter values against a custom assertion which
 * takes value passed to input setter and component instance as arguments.
 * It specifically checks for undefined values and prevents calls to the
 * original setter in this case.
 */
function tuiRequiredSetter(assertion, ...args) {
  return (target, key, {
    configurable,
    enumerable,
    get,
    set
  }) => {
    const {
      name
    } = target.constructor;
    return {
      configurable,
      enumerable,
      get,
      set(value) {
        if (ngDevMode && value !== undefined && assertion && tuiAssert) {
          tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
        }
        if (!set || value === undefined) {
          ngDevMode && tuiAssert.assert(value !== undefined, errorSet(key, name));
          return;
        }
        set.call(this, value);
      }
    };
  };
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-decorators.js.map

/***/ }),

/***/ 4191:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Nx: () => (/* binding */ TuiLetDirective),
/* harmony export */   ks: () => (/* binding */ TuiLetModule)
/* harmony export */ });
/* unused harmony export TuiLetContext */
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);



/**
 * @internal
 */
class TuiLetContext {
  constructor(internalDirectiveInstance) {
    this.internalDirectiveInstance = internalDirectiveInstance;
  }
  get $implicit() {
    return this.internalDirectiveInstance.tuiLet;
  }
  get tuiLet() {
    return this.internalDirectiveInstance.tuiLet;
  }
}

/**
 * Works like *ngIf but does not have a condition — use it to declare
 * the result of pipes calculation (i.e. async pipe)
 */
let TuiLetDirective = /*#__PURE__*/(() => {
  class TuiLetDirective {
    constructor(viewContainer, templateRef) {
      viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));
    }
    /**
     * Asserts the correct type of the context for the template that `TuiLet` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `TuiLet` structural directive renders its template with a specific context type.
     */
    static ngTemplateContextGuard(_dir, _ctx) {
      return true;
    }
  }
  TuiLetDirective.ɵfac = function TuiLetDirective_Factory(t) {
    return new (t || TuiLetDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
  };
  TuiLetDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: TuiLetDirective,
    selectors: [["", "tuiLet", ""]],
    inputs: {
      tuiLet: "tuiLet"
    }
  });
  return TuiLetDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiLetModule = /*#__PURE__*/(() => {
  class TuiLetModule {}
  TuiLetModule.ɵfac = function TuiLetModule_Factory(t) {
    return new (t || TuiLetModule)();
  };
  TuiLetModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: TuiLetModule
  });
  TuiLetModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
  return TuiLetModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-directives-let.js.map

/***/ }),

/***/ 8883:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G: () => (/* binding */ TuiDayOfWeek),
/* harmony export */   n: () => (/* binding */ TuiMonthNumber)
/* harmony export */ });
// TODO: change type in v4.0
// eslint-disable-next-line no-restricted-syntax
var TuiDayOfWeek = /*#__PURE__*/function (TuiDayOfWeek) {
  TuiDayOfWeek[TuiDayOfWeek["Sunday"] = 0] = "Sunday";
  TuiDayOfWeek[TuiDayOfWeek["Monday"] = 1] = "Monday";
  TuiDayOfWeek[TuiDayOfWeek["Tuesday"] = 2] = "Tuesday";
  TuiDayOfWeek[TuiDayOfWeek["Wednesday"] = 3] = "Wednesday";
  TuiDayOfWeek[TuiDayOfWeek["Thursday"] = 4] = "Thursday";
  TuiDayOfWeek[TuiDayOfWeek["Friday"] = 5] = "Friday";
  TuiDayOfWeek[TuiDayOfWeek["Saturday"] = 6] = "Saturday";
  return TuiDayOfWeek;
}(TuiDayOfWeek || {});
// TODO: change type in v4.0
// eslint-disable-next-line no-restricted-syntax
var TuiMonthNumber = /*#__PURE__*/function (TuiMonthNumber) {
  TuiMonthNumber[TuiMonthNumber["January"] = 0] = "January";
  TuiMonthNumber[TuiMonthNumber["February"] = 1] = "February";
  TuiMonthNumber[TuiMonthNumber["March"] = 2] = "March";
  TuiMonthNumber[TuiMonthNumber["April"] = 3] = "April";
  TuiMonthNumber[TuiMonthNumber["May"] = 4] = "May";
  TuiMonthNumber[TuiMonthNumber["June"] = 5] = "June";
  TuiMonthNumber[TuiMonthNumber["July"] = 6] = "July";
  TuiMonthNumber[TuiMonthNumber["August"] = 7] = "August";
  TuiMonthNumber[TuiMonthNumber["September"] = 8] = "September";
  TuiMonthNumber[TuiMonthNumber["October"] = 9] = "October";
  TuiMonthNumber[TuiMonthNumber["November"] = 10] = "November";
  TuiMonthNumber[TuiMonthNumber["December"] = 11] = "December";
  return TuiMonthNumber;
}(TuiMonthNumber || {});
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-enums.js.map

/***/ }),

/***/ 6651:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GB: () => (/* binding */ TuiInvalidYearException),
/* harmony export */   SQ: () => (/* binding */ TuiPureException),
/* harmony export */   SV: () => (/* binding */ TuiOwnerDocumentException),
/* harmony export */   X0: () => (/* binding */ TuiInvalidMonthException),
/* harmony export */   c3: () => (/* binding */ TuiValueChangesException),
/* harmony export */   fn: () => (/* binding */ TuiNoHostException),
/* harmony export */   tt: () => (/* binding */ TuiInvalidDayException)
/* harmony export */ });
/* unused harmony exports TuiComputedDocumentException, TuiDocumentSelectionException, TuiTableSortKeyException, TuiTsParserException, TuiValuePresentException, TuiXmlParsingException */
class TuiComputedDocumentException extends Error {
  constructor() {
    super(ngDevMode ? 'Only use computedDocument after load event' : '');
  }
}
class TuiDocumentSelectionException extends Error {
  constructor() {
    super(ngDevMode ? 'Failed to get document selection' : '');
  }
}
class TuiInvalidDayException extends Error {
  constructor(day) {
    super(ngDevMode ? `Invalid day: ${day}` : '');
  }
}
class TuiInvalidMonthException extends Error {
  constructor(month) {
    super(ngDevMode ? `Invalid month: ${month}` : '');
  }
}
class TuiInvalidYearException extends Error {
  constructor(year) {
    super(ngDevMode ? `Invalid year: ${year}` : '');
  }
}
class TuiNoHostException extends Error {
  constructor() {
    super(ngDevMode ? 'Portals cannot be used without TuiPortalHostComponent' : '');
  }
}
class TuiOwnerDocumentException extends Error {
  constructor() {
    super(ngDevMode ? 'Element does not have ownerDocument' : '');
  }
}
class TuiPureException extends Error {
  constructor() {
    super(ngDevMode ? 'tuiPure can only be used with functions or getters' : '');
  }
}
class TuiTableSortKeyException extends Error {
  constructor() {
    super(ngDevMode ? 'Trying to sort with no key' : '');
  }
}
class TuiTsParserException extends Error {
  constructor() {
    super(ngDevMode ? 'TsFileParser: 1 component/module per ts-file' : '');
  }
}
class TuiValueChangesException extends Error {
  constructor() {
    super(ngDevMode ? 'Control does not have valueChanges' : '');
  }
}
class TuiValuePresentException extends Error {
  constructor() {
    super(ngDevMode ? 'Value must present' : '');
  }
}
class TuiXmlParsingException extends Error {
  constructor() {
    super(ngDevMode ? 'Error parsing XML string' : '');
  }
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-exceptions.js.map

/***/ }),

/***/ 9835:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A5: () => (/* binding */ tuiScrollFrom),
/* harmony export */   Eb: () => (/* binding */ tuiWatch),
/* harmony export */   MJ: () => (/* binding */ tuiQueryListChanges),
/* harmony export */   Pj: () => (/* binding */ tuiIsObserved),
/* harmony export */   aY: () => (/* binding */ tuiIfMap),
/* harmony export */   lD: () => (/* binding */ tuiControlValue),
/* harmony export */   oM: () => (/* binding */ tuiFocusVisibleObservable),
/* harmony export */   rB: () => (/* binding */ tuiZonefree),
/* harmony export */   sX: () => (/* binding */ tuiZoneOptimized),
/* harmony export */   xM: () => (/* binding */ tuiTypedFromEvent)
/* harmony export */ });
/* unused harmony exports TuiDragStage, TuiDragState, tuiDragAndDropFrom, tuiIsAlive, tuiItemsQueryListObservable, tuiMouseDragFinishFrom, tuiMustBePresent, tuiPressedObservable, tuiPreventDefault, tuiStopPropagation, tuiZonefull */
/* harmony import */ var _taiga_ui_cdk_exceptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6651);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1985);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3726);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1203);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1584);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(7786);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(8793);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(983);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9172);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5558);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6354);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(3294);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(4668);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(6697);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(5964);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(3557);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(7469);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(3993);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(8141);
/* harmony import */ var _taiga_ui_cdk_utils__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(9925);
/* harmony import */ var _taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(2287);
/* harmony import */ var _taiga_ui_cdk_utils_focus__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(8529);








/**
 * Turns AbstractControl/Abstract-control-directive valueChanges into ReplaySubject(1)
 */
function tuiControlValue(control) {
  return new rxjs__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .c(subscriber => {
    if (!control.valueChanges) {
      throw new _taiga_ui_cdk_exceptions__WEBPACK_IMPORTED_MODULE_1__/* .TuiValueChangesException */ .c3();
    }
    return control.valueChanges.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__/* .startWith */ .Z)(control.value)).subscribe(subscriber);
  });
}
function tuiTypedFromEvent(target, event, options = {}) {
  /**
   * @note:
   * in RxJS 7 type signature `TuiTypedEventTarget<E>` !== `HasEventTargetAddRemove<E>`
   */
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_3__/* .fromEvent */ .R)(target, event, options);
}

/**
 * Letting go of the mouse after it was pressed
 * @param target
 */
function tuiMouseDragFinishFrom(target) {
  return merge(tuiTypedFromEvent(target, 'mouseup'), tuiTypedFromEvent(target, 'dragend'));
}

// TODO: change type in v4.0
// eslint-disable-next-line no-restricted-syntax
var TuiDragStage = /*#__PURE__*/function (TuiDragStage) {
  TuiDragStage[TuiDragStage["Start"] = 0] = "Start";
  TuiDragStage[TuiDragStage["Continues"] = 1] = "Continues";
  TuiDragStage[TuiDragStage["End"] = 2] = "End";
  return TuiDragStage;
}(TuiDragStage || {});
class TuiDragState {
  constructor(stage, event) {
    this.stage = stage;
    this.event = event;
  }
}
function tuiDragAndDropFrom(element) {
  const {
    ownerDocument
  } = element;
  if (!ownerDocument) {
    throw new TuiOwnerDocumentException();
  }
  return concat(tuiTypedFromEvent(element, 'mousedown').pipe(take(1), map(event => new TuiDragState(TuiDragStage.Start, event))), merge(tuiTypedFromEvent(ownerDocument, 'mousemove').pipe(map(event => new TuiDragState(TuiDragStage.Continues, event))), tuiMouseDragFinishFrom(ownerDocument).pipe(take(1), map(event => new TuiDragState(TuiDragStage.End, event)), endWith(null))).pipe(takeWhile(tuiIsPresent))).pipe(repeat());
}

/**
 * Operator to set lifespan after which current value is considered obsolete
 */
function tuiIsAlive(lifespan = 0) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .pipe */ .F)((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__/* .switchMap */ .n)(() => (0,rxjs__WEBPACK_IMPORTED_MODULE_6__/* .timer */ .O)(lifespan).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__/* .map */ .T)(_taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_8__/* .ALWAYS_FALSE_HANDLER */ .Fr), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__/* .startWith */ .Z)(true))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__/* .distinctUntilChanged */ .F)());
}
let documentMouseUpIsAlive$;
let documentMouseDownIsAlive$;
function tuiFocusVisibleObservable(element) {
  const elementBlur$ = tuiTypedFromEvent(element, 'blur');
  const {
    ownerDocument
  } = element;
  if (!ownerDocument) {
    throw new _taiga_ui_cdk_exceptions__WEBPACK_IMPORTED_MODULE_1__/* .TuiOwnerDocumentException */ .SV();
  }
  if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {
    documentMouseUpIsAlive$ = tuiTypedFromEvent(ownerDocument, 'mouseup', {
      capture: true
    }).pipe(tuiIsAlive(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__/* .startWith */ .Z)(false), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__/* .shareReplay */ .t)({
      bufferSize: 1,
      refCount: true
    }));
    documentMouseDownIsAlive$ = tuiTypedFromEvent(ownerDocument, 'mousedown', {
      capture: true
    }).pipe(tuiIsAlive(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__/* .startWith */ .Z)(false), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__/* .shareReplay */ .t)({
      bufferSize: 1,
      refCount: true
    }));
  }
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_11__/* .merge */ .h)(
  // focus events excluding ones that came right after mouse action
  (0,rxjs__WEBPACK_IMPORTED_MODULE_12__/* .concat */ .x)(tuiTypedFromEvent(element, 'focus').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__/* .take */ .s)(1)),
  // filtering out blur events when element remains focused so that we ignore browser tab focus loss
  elementBlur$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__/* .filter */ .p)(() => !(0,_taiga_ui_cdk_utils_focus__WEBPACK_IMPORTED_MODULE_15__/* .tuiIsNativeFocused */ .X)(element)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__/* .take */ .s)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__/* .ignoreElements */ .w)())).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_17__/* .repeat */ .u)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_18__/* .withLatestFrom */ .E)(documentMouseDownIsAlive$, documentMouseUpIsAlive$, (_event, elementActual, documentActual) => elementActual || documentActual), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__/* .filter */ .p)(_taiga_ui_cdk_utils__WEBPACK_IMPORTED_MODULE_19__/* .tuiIsFalsy */ ._s))).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__/* .switchMap */ .n)(() => elementBlur$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__/* .map */ .T)(_taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_8__/* .ALWAYS_FALSE_HANDLER */ .Fr), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_13__/* .take */ .s)(1), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__/* .startWith */ .Z)(true))), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_9__/* .distinctUntilChanged */ .F)());
}
function tuiIfMap(project, predicate = Boolean) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .pipe */ .F)((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_5__/* .switchMap */ .n)(value => predicate(value) ? project(value) : rxjs__WEBPACK_IMPORTED_MODULE_20__/* .EMPTY */ .w));
}
function tuiIsObserved(observable) {
  var _a, _b;
  return 'observed' in observable ? observable.observed : !!((_b = (_a = observable) === null || _a === void 0 ? void 0 : _a.observers) === null || _b === void 0 ? void 0 : _b.length);
}

/**
 * Converts changes observable of a QueryList to an Observable of arrays
 */
function tuiQueryListChanges(queryList) {
  return queryList.changes.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_2__/* .startWith */ .Z)(null), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__/* .map */ .T)(() => (0,_taiga_ui_cdk_utils__WEBPACK_IMPORTED_MODULE_19__/* .tuiGetOriginalArrayFromQueryList */ .fk)(queryList)));
}
/**
 * @deprecated An alias, use {@link tuiQueryListChanges} instead
 */
const tuiItemsQueryListObservable = (/* unused pure expression or super */ null && (tuiQueryListChanges));
function tuiMustBePresent() {
  return map(value => {
    if (!tuiIsPresent(value)) {
      throw new TuiValuePresentException();
    }
    return value;
  });
}
function tuiPressedObservable(element, {
  onlyTrusted
} = {
  onlyTrusted: true
}) {
  const {
    ownerDocument
  } = element;
  if (!ownerDocument) {
    throw new TuiOwnerDocumentException();
  }
  return tuiTypedFromEvent(element, 'mousedown').pipe(filter(({
    isTrusted
  }) => isTrusted || !onlyTrusted), switchMap(() => tuiMouseDragFinishFrom(ownerDocument).pipe(map(ALWAYS_FALSE_HANDLER), take(1), startWith(true))));
}
function tuiPreventDefault() {
  return tap(event => event.preventDefault());
}

/**
 * Normalizes scroll event in case element is `html` (document.documentElement)
 */
function tuiScrollFrom(element) {
  return tuiTypedFromEvent(element === element.ownerDocument.documentElement ? element.ownerDocument : element, 'scroll');
}
function tuiStopPropagation() {
  return tap(e => {
    e.stopPropagation();
  });
}
function tuiWatch(cdr) {
  return (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_21__/* .tap */ .M)(() => {
    cdr.markForCheck();
  });
}
function tuiZonefull(zone) {
  return source => new rxjs__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .c(subscriber => source.subscribe({
    next: value => zone.run(() => subscriber.next(value)),
    error: error => zone.run(() => subscriber.error(error)),
    complete: () => zone.run(() => subscriber.complete())
  }));
}
function tuiZonefree(zone) {
  return source => new rxjs__WEBPACK_IMPORTED_MODULE_0__/* .Observable */ .c(subscriber => zone.runOutsideAngular(() => source.subscribe(subscriber)));
}
function tuiZoneOptimized(zone) {
  return (0,rxjs__WEBPACK_IMPORTED_MODULE_4__/* .pipe */ .F)(tuiZonefree(zone), tuiZonefull(zone));
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-observables.js.map

/***/ }),

/***/ 4340:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ew: () => (/* binding */ TuiDestroyService),
  vA: () => (/* binding */ TuiDirectiveStylesService),
  iF: () => (/* binding */ TuiFocusVisibleService),
  BF: () => (/* binding */ TuiIdService),
  Ft: () => (/* binding */ TuiObscuredService),
  o4: () => (/* binding */ TuiParentsScrollService),
  mC: () => (/* binding */ TuiResizeService),
  FR: () => (/* binding */ TuiStaticRequestService),
  aM: () => (/* binding */ TuiSwipeService)
});

// UNUSED EXPORTS: TuiPanService, TuiScrollService, TuiZoomService

// EXTERNAL MODULE: consume shared module (default) @angular/core@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/core/fesm2022/core.mjs)
var core_mjs_ = __webpack_require__(1750);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/ReplaySubject.js
var ReplaySubject = __webpack_require__(2771);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Observable.js
var internal_Observable = __webpack_require__(1985);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/defer.js
var observable_defer = __webpack_require__(9030);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/merge.js
var observable_merge = __webpack_require__(7786);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/fromEvent.js
var fromEvent = __webpack_require__(3726);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/from.js + 9 modules
var from = __webpack_require__(6648);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-observables.js
var taiga_ui_cdk_observables = __webpack_require__(9835);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
var operators_takeUntil = __webpack_require__(6977);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/delay.js + 1 modules
var delay = __webpack_require__(5335);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/throttleTime.js + 1 modules
var throttleTime = __webpack_require__(3386);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var operators_map = __webpack_require__(6354);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/startWith.js
var startWith = __webpack_require__(9172);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js
var distinctUntilChanged = __webpack_require__(3294);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/catchError.js
var catchError = __webpack_require__(9437);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/debounceTime.js
var debounceTime = __webpack_require__(152);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/share.js
var share = __webpack_require__(7647);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js
var operators_switchMap = __webpack_require__(5558);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js
var shareReplay = __webpack_require__(4668);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/pairwise.js
var operators_pairwise = __webpack_require__(3946);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/filter.js
var operators_filter = __webpack_require__(5964);
// EXTERNAL MODULE: ./node_modules/@ng-web-apis/common/fesm2015/ng-web-apis-common.js
var ng_web_apis_common = __webpack_require__(3864);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-constants.js
var taiga_ui_cdk_constants = __webpack_require__(2287);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-dom.js
var taiga_ui_cdk_utils_dom = __webpack_require__(5001);
// EXTERNAL MODULE: consume shared module (default) @angular/common@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/common/fesm2022/common.mjs)
var common_mjs_ = __webpack_require__(6412);
;// CONCATENATED MODULE: ./node_modules/@ng-web-apis/resize-observer/fesm2015/ng-web-apis-resize-observer.js






const RESIZE_OPTION_BOX_DEFAULT = 'content-box';
const RESIZE_OPTION_BOX = new core_mjs_.InjectionToken('Box model to observe changes', {
  providedIn: 'root',
  factory: () => RESIZE_OPTION_BOX_DEFAULT
});
const RESIZE_OBSERVER_SUPPORT = new core_mjs_.InjectionToken('Resize Observer API support', {
  providedIn: 'root',
  factory: () => !!(0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf).ResizeObserver
});
let ResizeObserverService = /*#__PURE__*/(() => {
  class ResizeObserverService extends internal_Observable/* Observable */.c {
    constructor({
      nativeElement
    }, ngZone, support, box) {
      let observer;
      super(subscriber => {
        if (!support) {
          subscriber.error('ResizeObserver is not supported in your browser');
          return;
        }
        observer = new ResizeObserver(entries => {
          ngZone.run(() => {
            subscriber.next(entries);
          });
        });
        observer.observe(nativeElement, {
          box
        });
        return () => {
          observer.disconnect();
        };
      });
      return this.pipe((0,share/* share */.u)());
    }
  }
  ResizeObserverService.ɵfac = function ResizeObserverService_Factory(t) {
    return new (t || ResizeObserverService)(core_mjs_["ɵɵinject"](core_mjs_.ElementRef), core_mjs_["ɵɵinject"](core_mjs_.NgZone), core_mjs_["ɵɵinject"](RESIZE_OBSERVER_SUPPORT), core_mjs_["ɵɵinject"](RESIZE_OPTION_BOX));
  };
  ResizeObserverService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: ResizeObserverService,
    factory: ResizeObserverService.ɵfac
  });
  return ResizeObserverService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * @deprecated View Engine legacy
 * TODO: use arrow function for `useFactory` and delete this exported function in future major release
 */
// TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed
function boxExtractor({
  nativeElement
}) {
  const attribute = nativeElement.getAttribute('waResizeBox');
  return boxFactory(attribute);
}
/**
 * @deprecated View Engine legacy
 * TODO: use arrow function for `useFactory` and delete this exported function in future major release
 */
function boxFactory(box) {
  return box || RESIZE_OPTION_BOX_DEFAULT;
}
let ResizeObserverDirective = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class ResizeObserverDirective {
    constructor(waResizeObserver, _box) {
      this.waResizeObserver = waResizeObserver;
    }
  }
  ResizeObserverDirective.ɵfac = function ResizeObserverDirective_Factory(t) {
    return new (t || ResizeObserverDirective)(i0.ɵɵdirectiveInject(ResizeObserverService), i0.ɵɵinjectAttribute('waResizeBox'));
  };
  ResizeObserverDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({
    type: ResizeObserverDirective,
    selectors: [["", "waResizeObserver", ""]],
    outputs: {
      waResizeObserver: "waResizeObserver"
    },
    features: [i0.ɵɵProvidersFeature([ResizeObserverService, {
      provide: RESIZE_OPTION_BOX,
      deps: [ElementRef],
      useFactory: boxExtractor
    }])]
  });
  return ResizeObserverDirective;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let ResizeObserverModule = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class ResizeObserverModule {}
  ResizeObserverModule.ɵfac = function ResizeObserverModule_Factory(t) {
    return new (t || ResizeObserverModule)();
  };
  ResizeObserverModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({
    type: ResizeObserverModule
  });
  ResizeObserverModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});
  return ResizeObserverModule;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Public API Surface of @ng-web-apis/resize-observer
 */

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=ng-web-apis-resize-observer.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-miscellaneous.js
var taiga_ui_cdk_utils_miscellaneous = __webpack_require__(9925);
// EXTERNAL MODULE: ./node_modules/tslib/tslib.es6.mjs
var tslib_es6 = __webpack_require__(1635);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
var OperatorSubscriber = __webpack_require__(4360);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
var innerFrom = __webpack_require__(8750);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/observable/dom/fetch.js




function fromFetch(input, initWithSelector = {}) {
  const {
      selector
    } = initWithSelector,
    init = (0,tslib_es6/* __rest */.Tt)(initWithSelector, ["selector"]);
  return new internal_Observable/* Observable */.c(subscriber => {
    const controller = new AbortController();
    const {
      signal
    } = controller;
    let abortable = true;
    const {
      signal: outerSignal
    } = init;
    if (outerSignal) {
      if (outerSignal.aborted) {
        controller.abort();
      } else {
        const outerSignalHandler = () => {
          if (!signal.aborted) {
            controller.abort();
          }
        };
        outerSignal.addEventListener('abort', outerSignalHandler);
        subscriber.add(() => outerSignal.removeEventListener('abort', outerSignalHandler));
      }
    }
    const perSubscriberInit = Object.assign(Object.assign({}, init), {
      signal
    });
    const handleError = err => {
      abortable = false;
      subscriber.error(err);
    };
    fetch(input, perSubscriberInit).then(response => {
      if (selector) {
        (0,innerFrom/* innerFrom */.Tg)(selector(response)).subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, undefined, () => {
          abortable = false;
          subscriber.complete();
        }, handleError));
      } else {
        abortable = false;
        subscriber.next(response);
        subscriber.complete();
      }
    }).catch(handleError);
    return () => {
      if (abortable) {
        controller.abort();
      }
    };
  });
}
//# sourceMappingURL=fetch.js.map
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-tokens.js + 1 modules
var taiga_ui_cdk_tokens = __webpack_require__(1410);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-services.js



















/**
 * @note:
 * Observable abstraction over ngOnDestroy to use with takeUntil
 *
 * Why we use `ReplaySubject` instead of `Subject`?
 * Well, we’ll use ReplaySubject to emit the last message in case
 * the subscription is ended after the component is destroyed.
 */
let TuiDestroyService = /*#__PURE__*/(() => {
  class TuiDestroyService extends ReplaySubject/* ReplaySubject */.m {
    constructor() {
      super(1);
    }
    ngOnDestroy() {
      this.next();
      this.complete();
    }
  }
  TuiDestroyService.ɵfac = function TuiDestroyService_Factory(t) {
    return new (t || TuiDestroyService)();
  };
  TuiDestroyService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiDestroyService,
    factory: TuiDestroyService.ɵfac
  });
  return TuiDestroyService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Service to use styles with directives
 */
let TuiDirectiveStylesService = /*#__PURE__*/(() => {
  class TuiDirectiveStylesService {
    constructor(resolver, injector) {
      this.resolver = resolver;
      this.injector = injector;
      this.map = new Map();
    }
    addComponent(component) {
      if (!this.map.has(component)) {
        this.map.set(component, this.resolver.resolveComponentFactory(component).create(this.injector));
      }
    }
    ngOnDestroy() {
      this.map.forEach(value => value.destroy());
    }
  }
  TuiDirectiveStylesService.ɵfac = function TuiDirectiveStylesService_Factory(t) {
    return new (t || TuiDirectiveStylesService)(core_mjs_["ɵɵinject"](core_mjs_.ComponentFactoryResolver), core_mjs_["ɵɵinject"](core_mjs_.INJECTOR));
  };
  TuiDirectiveStylesService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiDirectiveStylesService,
    factory: TuiDirectiveStylesService.ɵfac,
    providedIn: 'root'
  });
  return TuiDirectiveStylesService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Service to imitate :focus-visible
 * (https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible)
 * in browsers that do not support it
 */
let TuiFocusVisibleService = /*#__PURE__*/(() => {
  class TuiFocusVisibleService extends internal_Observable/* Observable */.c {
    constructor({
      nativeElement
    }, cdr, destroy$) {
      super(subscriber => this.focusVisible$.subscribe(subscriber));
      this.focusVisible$ = (0,taiga_ui_cdk_observables/* tuiFocusVisibleObservable */.oM)(nativeElement).pipe((0,taiga_ui_cdk_observables/* tuiWatch */.Eb)(cdr), (0,operators_takeUntil/* takeUntil */.Q)(destroy$));
    }
  }
  TuiFocusVisibleService.ɵfac = function TuiFocusVisibleService_Factory(t) {
    return new (t || TuiFocusVisibleService)(core_mjs_["ɵɵinject"](core_mjs_.ElementRef), core_mjs_["ɵɵinject"](core_mjs_.ChangeDetectorRef), core_mjs_["ɵɵinject"](TuiDestroyService, 2));
  };
  TuiFocusVisibleService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiFocusVisibleService,
    factory: TuiFocusVisibleService.ɵfac
  });
  return TuiFocusVisibleService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TUI = 'tui_';
/**
 * Generates unique ids
 */
let TuiIdService = /*#__PURE__*/(() => {
  class TuiIdService {
    generate() {
      return `${TUI}${TuiIdService.autoId++}${Date.now()}`;
    }
  }
  TuiIdService.autoId = 0;
  TuiIdService.ɵfac = function TuiIdService_Factory(t) {
    return new (t || TuiIdService)();
  };
  TuiIdService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiIdService,
    factory: TuiIdService.ɵfac,
    providedIn: 'root'
  });
  return TuiIdService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Service that subscribes to scroll events of all parent elements
 */
let TuiParentsScrollService = /*#__PURE__*/(() => {
  class TuiParentsScrollService extends internal_Observable/* Observable */.c {
    constructor(
    // Destructuring here causes memory leak
    el, win) {
      super(subscriber => this.callback$.subscribe(subscriber));
      this.callback$ = (0,observable_defer/* defer */.v)(() => {
        let {
          nativeElement
        } = el;
        const eventTargets = [win, nativeElement];
        while (nativeElement.parentElement) {
          nativeElement = nativeElement.parentElement;
          eventTargets.push(nativeElement);
        }
        return (0,observable_merge/* merge */.h)(...eventTargets.map(element => (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(element, 'scroll')));
      });
    }
  }
  TuiParentsScrollService.ɵfac = function TuiParentsScrollService_Factory(t) {
    return new (t || TuiParentsScrollService)(core_mjs_["ɵɵinject"](core_mjs_.ElementRef), core_mjs_["ɵɵinject"](ng_web_apis_common/* WINDOW */.jf));
  };
  TuiParentsScrollService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiParentsScrollService,
    factory: TuiParentsScrollService.ɵfac
  });
  return TuiParentsScrollService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

// @bad TODO: Consider Intersection Observer with fallback to current implementation
/**
 * Service that monitors element visibility by subscribing to scrolls
 * and polling with set interval, returns either null or an array
 * of elements that overlap given element edges
 */
let TuiObscuredService = /*#__PURE__*/(() => {
  class TuiObscuredService extends internal_Observable/* Observable */.c {
    constructor(parentsScroll$, {
      nativeElement
    }, zone, win, destroy$, animationFrame$) {
      super(subscriber => this.obscured$.subscribe(subscriber));
      this.obscured$ = (0,observable_merge/* merge */.h)(
      // delay is added so it will not interfere with other listeners
      (0,observable_merge/* merge */.h)(parentsScroll$, (0,fromEvent/* fromEvent */.R)(win, 'resize')).pipe((0,delay/* delay */.c)(0)), animationFrame$.pipe((0,throttleTime/* throttleTime */.c)(taiga_ui_cdk_constants/* POLLING_TIME */.cZ))).pipe((0,operators_map/* map */.T)(() => (0,taiga_ui_cdk_utils_dom/* tuiGetElementObscures */.J0)(nativeElement)), (0,startWith/* startWith */.Z)(null), (0,distinctUntilChanged/* distinctUntilChanged */.F)(), (0,taiga_ui_cdk_observables/* tuiZoneOptimized */.sX)(zone), (0,operators_takeUntil/* takeUntil */.Q)(destroy$));
    }
  }
  TuiObscuredService.ɵfac = function TuiObscuredService_Factory(t) {
    return new (t || TuiObscuredService)(core_mjs_["ɵɵinject"](TuiParentsScrollService, 2), core_mjs_["ɵɵinject"](core_mjs_.ElementRef), core_mjs_["ɵɵinject"](core_mjs_.NgZone), core_mjs_["ɵɵinject"](ng_web_apis_common/* WINDOW */.jf), core_mjs_["ɵɵinject"](TuiDestroyService, 2), core_mjs_["ɵɵinject"](ng_web_apis_common/* ANIMATION_FRAME */.dJ));
  };
  TuiObscuredService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiObscuredService,
    factory: TuiObscuredService.ɵfac
  });
  return TuiObscuredService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiPanService = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiPanService extends Observable {
    constructor({
      nativeElement
    }, doc) {
      super(subscriber => {
        merge(tuiTypedFromEvent(nativeElement, 'touchstart', {
          passive: true
        }), tuiTypedFromEvent(nativeElement, 'mousedown')).pipe(switchMap(() => merge(tuiTypedFromEvent(doc, 'touchmove', {
          passive: true
        }).pipe(filter(({
          touches
        }) => touches.length < 2), map(({
          touches
        }) => touches[0])), tuiTypedFromEvent(doc, 'mousemove'))), pairwise(), map(([first, second]) => {
          const deltaX = second.clientX - first.clientX;
          const deltaY = second.clientY - first.clientY;
          return [deltaX, deltaY];
        }),
        // eslint-disable-next-line rxjs/no-unsafe-takeuntil
        takeUntil(merge(tuiTypedFromEvent(doc, 'touchend'), tuiTypedFromEvent(doc, 'mouseup'))), repeat()).subscribe(subscriber);
      });
    }
  }
  TuiPanService.ɵfac = function TuiPanService_Factory(t) {
    return new (t || TuiPanService)(i0.ɵɵinject(ElementRef), i0.ɵɵinject(DOCUMENT));
  };
  TuiPanService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
    token: TuiPanService,
    factory: TuiPanService.ɵfac
  });
  return TuiPanService;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

// TODO: Remove in 4.0 when Safari is bumped to 13
let TuiResizeService = /*#__PURE__*/(() => {
  class TuiResizeService extends ResizeObserverService {
    constructor(el, zone, destroy$, support, box, animationFrame$) {
      super(el, zone, support, box);
      return this.pipe((0,catchError/* catchError */.W)(() =>
      /**
       * @note: if not supported ResizeObserver
       * remove `catchError` after supports modern browsers
       */
      animationFrame$.pipe((0,throttleTime/* throttleTime */.c)(taiga_ui_cdk_constants/* POLLING_TIME */.cZ), (0,operators_map/* map */.T)(() => `${el.nativeElement.clientWidth} ${el.nativeElement.clientHeight}`), (0,distinctUntilChanged/* distinctUntilChanged */.F)(), (0,operators_map/* map */.T)(() => taiga_ui_cdk_constants/* EMPTY_ARRAY */.Ml))), (0,debounceTime/* debounceTime */.B)(0), (0,taiga_ui_cdk_observables/* tuiZonefree */.rB)(zone), (0,share/* share */.u)(), (0,operators_takeUntil/* takeUntil */.Q)(destroy$));
    }
  }
  TuiResizeService.ɵfac = function TuiResizeService_Factory(t) {
    return new (t || TuiResizeService)(core_mjs_["ɵɵinject"](core_mjs_.ElementRef), core_mjs_["ɵɵinject"](core_mjs_.NgZone), core_mjs_["ɵɵinject"](TuiDestroyService, 2), core_mjs_["ɵɵinject"](RESIZE_OBSERVER_SUPPORT), core_mjs_["ɵɵinject"](RESIZE_OPTION_BOX), core_mjs_["ɵɵinject"](ng_web_apis_common/* ANIMATION_FRAME */.dJ));
  };
  TuiResizeService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiResizeService,
    factory: TuiResizeService.ɵfac
  });
  return TuiResizeService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const SCROLL_TIME = 300;
function getX(elementOrWindow) {
  return 'scrollX' in elementOrWindow ? elementOrWindow.scrollX : elementOrWindow.scrollLeft;
}
function getY(elementOrWindow) {
  return 'scrollY' in elementOrWindow ? elementOrWindow.scrollY : elementOrWindow.scrollTop;
}
let TuiScrollService = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiScrollService {
    constructor(performanceRef, animationFrame$) {
      this.performanceRef = performanceRef;
      this.animationFrame$ = animationFrame$;
    }
    scroll$(elementOrWindow, scrollTop, scrollLeft = getX(elementOrWindow), duration = SCROLL_TIME) {
      ngDevMode && tuiAssert.assert(duration >= 0, 'Duration cannot be negative');
      ngDevMode && tuiAssert.assert(scrollTop >= 0, 'scrollTop cannot be negative');
      ngDevMode && tuiAssert.assert(scrollLeft >= 0, 'scrollLeft cannot be negative');
      const initialTop = getY(elementOrWindow);
      const initialLeft = getX(elementOrWindow);
      const deltaTop = scrollTop - initialTop;
      const deltaLeft = scrollLeft - initialLeft;
      const observable = !duration ? of([scrollTop, scrollLeft]) : defer(() => of(this.performanceRef.now())).pipe(switchMap(start => this.animationFrame$.pipe(map(now => now - start))), map(elapsed => tuiEaseInOutQuad(tuiClamp(elapsed / duration, 0, 1))), map(percent => [initialTop + deltaTop * percent, initialLeft + deltaLeft * percent]), takeUntil(timer(duration)), endWith([scrollTop, scrollLeft]));
      return observable.pipe(tap(([scrollTop, scrollLeft]) => {
        var _a;
        (_a = elementOrWindow.scrollTo) === null || _a === void 0 ? void 0 : _a.call(elementOrWindow, scrollLeft, scrollTop);
      }));
    }
  }
  TuiScrollService.ɵfac = function TuiScrollService_Factory(t) {
    return new (t || TuiScrollService)(i0.ɵɵinject(PERFORMANCE), i0.ɵɵinject(ANIMATION_FRAME));
  };
  TuiScrollService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
    token: TuiScrollService,
    factory: TuiScrollService.ɵfac,
    providedIn: 'root'
  });
  return TuiScrollService;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiStaticRequestService = /*#__PURE__*/(() => {
  class TuiStaticRequestService {
    constructor(win, platformId) {
      this.win = win;
      this.platformId = platformId;
      this.cache = new Map();
    }
    request(url) {
      const cache = this.cache.get(url);
      if (cache) {
        return cache;
      }
      const response$ = 'AbortController' in this.win || (0,common_mjs_.isPlatformServer)(this.platformId) ? fromFetch(url) :
      /**
       * Fallback for Firefox 55 and 56
       * TODO: drop after browser support bump
       */
      (0,observable_defer/* defer */.v)(() => (0,from/* from */.H)(fetch(url)));
      const piped = response$.pipe((0,operators_switchMap/* switchMap */.n)(response => (0,tslib_es6/* __awaiter */.sH)(this, void 0, void 0, function* () {
        if (response.ok) {
          return response.text();
        }
        throw new Error(`Failed to load ${url} (${response.statusText})`);
      })), (0,shareReplay/* shareReplay */.t)({
        bufferSize: 1,
        refCount: false
      }));
      this.cache.set(url, piped);
      return piped;
    }
  }
  TuiStaticRequestService.ɵfac = function TuiStaticRequestService_Factory(t) {
    return new (t || TuiStaticRequestService)(core_mjs_["ɵɵinject"](ng_web_apis_common/* WINDOW */.jf), core_mjs_["ɵɵinject"](core_mjs_.PLATFORM_ID));
  };
  TuiStaticRequestService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiStaticRequestService,
    factory: TuiStaticRequestService.ɵfac,
    providedIn: 'root'
  });
  return TuiStaticRequestService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiSwipeService = /*#__PURE__*/(() => {
  class TuiSwipeService extends internal_Observable/* Observable */.c {
    constructor({
      nativeElement
    }, {
      timeout,
      threshold
    }, doc) {
      super(subscriber => {
        (0,observable_merge/* merge */.h)((0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(nativeElement, 'touchstart', {
          passive: true
        }), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(doc, 'touchend')).pipe((0,operators_pairwise/* pairwise */.J)(), (0,operators_filter/* filter */.p)(([first, second]) => !!first.touches.length && first.touches[0].identifier === second.changedTouches[0].identifier), (0,operators_map/* map */.T)(([start, end]) => {
          const startX = start.touches[0].clientX;
          const startY = start.touches[0].clientY;
          const endX = end.changedTouches[0].clientX;
          const endY = end.changedTouches[0].clientY;
          const distanceX = startX - endX;
          const distanceY = startY - endY;
          const duration = end.timeStamp - start.timeStamp;
          if ((Math.abs(distanceX) > threshold || Math.abs(distanceY) > threshold) && duration < timeout) {
            return {
              direction: (0,taiga_ui_cdk_utils_miscellaneous/* tuiGetSwipeDirection */.Al)(distanceX, distanceY),
              events: [start, end]
            };
          }
          return null;
        }), (0,operators_filter/* filter */.p)(taiga_ui_cdk_utils_miscellaneous/* tuiIsPresent */.Aj)).subscribe(subscriber);
      });
    }
  }
  TuiSwipeService.ɵfac = function TuiSwipeService_Factory(t) {
    return new (t || TuiSwipeService)(core_mjs_["ɵɵinject"](core_mjs_.ElementRef), core_mjs_["ɵɵinject"](taiga_ui_cdk_tokens/* TUI_SWIPE_OPTIONS */.xG), core_mjs_["ɵɵinject"](common_mjs_.DOCUMENT));
  };
  TuiSwipeService.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: TuiSwipeService,
    factory: TuiSwipeService.ɵfac
  });
  return TuiSwipeService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const TOUCH_SENSITIVITY = 0.01;
let TuiZoomService = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiZoomService extends Observable {
    constructor({
      nativeElement
    }, {
      wheelSensitivity
    }) {
      super(subscriber => {
        merge(tuiTypedFromEvent(nativeElement, 'touchstart', {
          passive: true
        }).pipe(filter(({
          touches
        }) => touches.length > 1), switchMap(startEvent => tuiTypedFromEvent(nativeElement, 'touchmove', {
          passive: true
        }).pipe(tuiPreventDefault(), scan((prev, event) => {
          const distance = tuiDistanceBetweenTouches(event);
          return {
            event,
            distance,
            delta: (distance - prev.distance) * TOUCH_SENSITIVITY
          };
        }, {
          event: startEvent,
          distance: tuiDistanceBetweenTouches(startEvent),
          delta: 0
        }), map(({
          event,
          delta
        }) => {
          const clientX = (event.touches[0].clientX + event.touches[1].clientX) / 2;
          const clientY = (event.touches[0].clientY + event.touches[1].clientY) / 2;
          return {
            clientX,
            clientY,
            delta,
            event
          };
        }), takeUntil(tuiTypedFromEvent(nativeElement, 'touchend'))))), tuiTypedFromEvent(nativeElement, 'wheel', {
          passive: false
        }).pipe(tuiPreventDefault(), map(wheel => ({
          clientX: wheel.clientX,
          clientY: wheel.clientY,
          delta: -wheel.deltaY * wheelSensitivity,
          event: wheel
        })))).subscribe(subscriber);
      });
    }
  }
  TuiZoomService.ɵfac = function TuiZoomService_Factory(t) {
    return new (t || TuiZoomService)(i0.ɵɵinject(ElementRef), i0.ɵɵinject(TUI_ZOOM_OPTIONS));
  };
  TuiZoomService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
    token: TuiZoomService,
    factory: TuiZoomService.ɵfac
  });
  return TuiZoomService;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-services.js.map

/***/ }),

/***/ 1410:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  t9: () => (/* binding */ TUI_ACTIVE_ELEMENT),
  vD: () => (/* binding */ TUI_ALERTS),
  t2: () => (/* binding */ TUI_BASE_HREF),
  lb: () => (/* binding */ TUI_DIALOGS),
  aX: () => (/* binding */ TUI_FOCUSABLE_ITEM_ACCESSOR),
  KS: () => (/* binding */ TUI_FONTS_READY),
  E: () => (/* binding */ TUI_IS_ANDROID),
  Hs: () => (/* binding */ TUI_IS_E2E),
  mg: () => (/* binding */ TUI_IS_IOS),
  Td: () => (/* binding */ TUI_IS_MOBILE),
  Ld: () => (/* binding */ TUI_IS_WEBKIT),
  HF: () => (/* binding */ TUI_SCROLL_REF),
  xG: () => (/* binding */ TUI_SWIPE_OPTIONS),
  Q_: () => (/* binding */ TUI_WINDOW_SIZE),
  IY: () => (/* binding */ tuiAsAlerts),
  jn: () => (/* binding */ tuiAsDialog),
  Jr: () => (/* binding */ tuiAsFocusableItemAccessor)
});

// UNUSED EXPORTS: TUI_DEFAULT_RENDERER, TUI_ENSURE_BASE_HREF, TUI_IS_APPLE, TUI_IS_CHROMIUM, TUI_IS_CYPRESS, TUI_IS_FIREFOX, TUI_IS_PLAYWRIGHT, TUI_IS_STACKBLITZ, TUI_PLATFORM, TUI_RANGE, TUI_REMOVED_ELEMENT, TUI_TAKE_ONLY_TRUSTED_EVENTS, TUI_TOUCH_SUPPORTED, TUI_WINDOW_HEIGHT, TUI_ZOOM_OPTIONS, tuiPlatformFactory

// EXTERNAL MODULE: consume shared module (default) @angular/common@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/common/fesm2022/common.mjs)
var common_mjs_ = __webpack_require__(6412);
// EXTERNAL MODULE: consume shared module (default) @angular/core@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/core/fesm2022/core.mjs)
var core_mjs_ = __webpack_require__(1750);
// EXTERNAL MODULE: ./node_modules/@ng-web-apis/common/fesm2015/ng-web-apis-common.js
var ng_web_apis_common = __webpack_require__(3864);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-observables.js
var taiga_ui_cdk_observables = __webpack_require__(9835);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-miscellaneous.js
var taiga_ui_cdk_utils_miscellaneous = __webpack_require__(9925);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-dom.js
var taiga_ui_cdk_utils_dom = __webpack_require__(5001);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-os.js
/**
 * @description:
 * All Chrome / Chromium-based browsers will return MacIntel on macOS,
 * no matter what the hardware architecture is. See the source code here:
 * https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/frame/navigator_id.cc;l=64;drc=703d3c472cf27470dad21a3f2c8972aca3732cd6
 * But maybe in future years, it will be changed to MacM1
 *
 * Documentation:
 * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/platform
 */
function tuiIsApplePlatform(navigator) {
  return navigator.platform.startsWith('Mac') || navigator.platform === 'iPhone';
}
const IOS_REG_EXP = /ipad|iphone|ipod/;
function tuiIsIos(navigator) {
  return IOS_REG_EXP.test(navigator.userAgent.toLowerCase()) || tuiIsApplePlatform(navigator) && navigator.maxTouchPoints > 1;
}
const SAFARI_REG_EXP = /^((?!chrome|android).)*safari/i;
function tuiIsApple(navigator) {
  return tuiIsIos(navigator) || SAFARI_REG_EXP.test(navigator.userAgent.toLowerCase());
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-os.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/BehaviorSubject.js
var BehaviorSubject = __webpack_require__(4412);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/timer.js + 1 modules
var timer = __webpack_require__(1584);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/merge.js
var merge = __webpack_require__(7786);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/of.js
var of = __webpack_require__(7673);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/from.js + 9 modules
var from = __webpack_require__(6648);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/empty.js
var empty = __webpack_require__(983);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js
var switchMap = __webpack_require__(5558);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var map = __webpack_require__(6354);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/startWith.js
var startWith = __webpack_require__(9172);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/share.js
var share = __webpack_require__(7647);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/filter.js
var filter = __webpack_require__(5964);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
var takeUntil = __webpack_require__(6977);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/repeatWhen.js
var repeatWhen = __webpack_require__(3981);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/withLatestFrom.js
var withLatestFrom = __webpack_require__(3993);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/take.js
var take = __webpack_require__(6697);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js
var distinctUntilChanged = __webpack_require__(3294);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js
var shareReplay = __webpack_require__(4668);
// EXTERNAL MODULE: ./node_modules/@angular/animations/fesm2022/browser.mjs
var browser = __webpack_require__(8008);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-constants.js
var taiga_ui_cdk_constants = __webpack_require__(2287);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-tokens.js










/**
 * Element currently being removed by AnimationEngine
 */
const TUI_REMOVED_ELEMENT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  const stub = {
    onRemovalComplete: () => {}
  };
  const element$ = new BehaviorSubject/* BehaviorSubject */.t(null);
  const engine = (0,core_mjs_.inject)(browser/* ɵAnimationEngine */.O6, core_mjs_.InjectFlags.Optional) || stub;
  const {
    onRemovalComplete = stub.onRemovalComplete
  } = engine;
  engine.onRemovalComplete = (element, context) => {
    element$.next(element);
    onRemovalComplete.call(engine, element, context);
  };
  return element$.pipe((0,switchMap/* switchMap */.n)(element => (0,timer/* timer */.O)(0).pipe((0,map/* map */.T)(() => null), (0,startWith/* startWith */.Z)(element))), (0,share/* share */.u)());
});

// Checks if focusout event should be considered leaving active zone
function isValidFocusout(target, removedElement = null) {
  return (
    // Not due to switching tabs/going to DevTools
    (0,taiga_ui_cdk_utils_dom/* tuiGetDocumentOrShadowRoot */.dd)(target).activeElement !== target &&
    // Not due to button/input becoming disabled or under disabled fieldset
    !target.matches(':disabled') &&
    // Not due to element being removed from DOM
    !(removedElement === null || removedElement === void 0 ? void 0 : removedElement.contains(target))
  );
}
function shadowRootActiveElement(root) {
  return (0,merge/* merge */.h)((0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(root, 'focusin').pipe((0,map/* map */.T)(({
    target
  }) => target)), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(root, 'focusout').pipe((0,filter/* filter */.p)(({
    target,
    relatedTarget
  }) => !!relatedTarget && isValidFocusout(target)), (0,map/* map */.T)(({
    relatedTarget
  }) => relatedTarget)));
}
/**
 * Active element on the document for ActiveZone
 */
const TUI_ACTIVE_ELEMENT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  const removedElement$ = (0,core_mjs_.inject)(TUI_REMOVED_ELEMENT);
  const win = (0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf);
  const doc = (0,core_mjs_.inject)(common_mjs_.DOCUMENT);
  const focusout$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(win, 'focusout');
  const focusin$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(win, 'focusin');
  const blur$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(win, 'blur');
  const mousedown$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(win, 'mousedown');
  const mouseup$ = (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(win, 'mouseup');
  return (0,merge/* merge */.h)(focusout$.pipe(
  // eslint-disable-next-line rxjs/no-unsafe-takeuntil
  (0,takeUntil/* takeUntil */.Q)(mousedown$),
  /**
   * TODO: replace to
   * repeat({delay: () => mouseup$})
   * in RxJS 7
   */
  // eslint-disable-next-line rxjs/no-ignored-notifier
  (0,repeatWhen/* repeatWhen */.Y)(() => mouseup$), (0,withLatestFrom/* withLatestFrom */.E)(removedElement$), (0,filter/* filter */.p)(([event, removedElement]) => isValidFocusout((0,taiga_ui_cdk_utils_dom/* tuiGetActualTarget */.U9)(event), removedElement)), (0,map/* map */.T)(([{
    relatedTarget
  }]) => relatedTarget)), blur$.pipe((0,map/* map */.T)(() => doc.activeElement), (0,filter/* filter */.p)(element => !!(element === null || element === void 0 ? void 0 : element.matches('iframe')))), focusin$.pipe((0,switchMap/* switchMap */.n)(event => {
    const target = (0,taiga_ui_cdk_utils_dom/* tuiGetActualTarget */.U9)(event);
    const root = (0,taiga_ui_cdk_utils_dom/* tuiGetDocumentOrShadowRoot */.dd)(target);
    return root === doc ? (0,of.of)(target) : shadowRootActiveElement(root).pipe((0,startWith/* startWith */.Z)(target));
  })), mousedown$.pipe((0,switchMap/* switchMap */.n)(event => {
    const actualTargetInCurrentTime = (0,taiga_ui_cdk_utils_dom/* tuiGetActualTarget */.U9)(event);
    return !doc.activeElement || doc.activeElement === doc.body ? (0,of.of)(actualTargetInCurrentTime) : focusout$.pipe((0,take/* take */.s)(1), (0,map/* map */.T)(
    /**
     * Do not use `map(() => tuiGetActualTarget(event))`
     * because we have different result in runtime
     */
    () => actualTargetInCurrentTime), (0,takeUntil/* takeUntil */.Q)((0,timer/* timer */.O)(0)));
  }))).pipe((0,distinctUntilChanged/* distinctUntilChanged */.F)(), (0,share/* share */.u)());
});

/**
 * A stream of alerts
 */
const TUI_ALERTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)([]);
function tuiAsAlerts(useExisting) {
  return {
    provide: TUI_ALERTS,
    multi: true,
    useExisting
  };
}
const TUI_BASE_HREF = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  var _a, _b;
  return (_b = (_a = (0,core_mjs_.inject)(common_mjs_.DOCUMENT).querySelector('base')) === null || _a === void 0 ? void 0 : _a.href) !== null && _b !== void 0 ? _b : '';
});

/**
 * A Renderer2 for global services
 * https://github.com/angular/angular/issues/17824#issuecomment-353239017
 * @deprecated unnecessary
 * TODO: remove in 4.0
 */
const TUI_DEFAULT_RENDERER = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(
// @ts-ignore
() => (0,core_mjs_.inject)(core_mjs_.RendererFactory2).createRenderer(null, null));

/**
 * A stream of dialogs
 */
const TUI_DIALOGS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)([]);
// TODO: Refactor dialogs in 4.0 so there is no need for module imports
function tuiAsDialog(useExisting) {
  return {
    provide: TUI_DIALOGS,
    multi: true,
    useExisting
  };
}

/**
 * @deprecated: use {@link TUI_BASE_HREF}
 */
const TUI_ENSURE_BASE_HREF = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  var _a;
  const baseHref = (_a = (0,core_mjs_.inject)(common_mjs_.DOCUMENT).querySelector('base')) === null || _a === void 0 ? void 0 : _a.href;
  if (baseHref) {
    return baseHref;
  }
  const link = (0,core_mjs_.inject)(common_mjs_.DOCUMENT).createElement('a');
  link.href = '';
  return link.pathname;
});

/**
 * A component that can be focused
 */
const TUI_FOCUSABLE_ITEM_ACCESSOR = new core_mjs_.InjectionToken('[TUI_FOCUSABLE_ITEM_ACCESSOR]');
function tuiAsFocusableItemAccessor(useExisting) {
  return {
    provide: TUI_FOCUSABLE_ITEM_ACCESSOR,
    useExisting
  };
}
const TUI_FONTS_READY = new core_mjs_.InjectionToken('[TUI_FONTS_READY]', {
  factory: () => {
    var _a;
    return (0,from/* from */.H)(((_a = (0,core_mjs_.inject)(common_mjs_.DOCUMENT).fonts) === null || _a === void 0 ? void 0 : _a.ready) || empty/* EMPTY */.w).pipe((0,shareReplay/* shareReplay */.t)({
      bufferSize: 1,
      refCount: false
    }));
  }
});

/**
 * iOS browser detection
 */
const TUI_IS_IOS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => tuiIsIos((0,core_mjs_.inject)(ng_web_apis_common/* NAVIGATOR */.kW)));

// https://stackoverflow.com/a/11381730/2706426 http://detectmobilebrowsers.com/
const firstRegex = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/;
const secondRegex = /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55\/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk\/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/;
/**
 * Mobile browser detection
 */
const TUI_IS_MOBILE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => firstRegex.test((0,core_mjs_.inject)(ng_web_apis_common/* USER_AGENT */._O).toLowerCase()) || secondRegex.test((0,core_mjs_.inject)(ng_web_apis_common/* USER_AGENT */._O).slice(0, 4).toLowerCase()));

/**
 * Mobile browser that is not iOS (technically includes Windows Phone, Blackberry etc.)
 */
const TUI_IS_ANDROID = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,core_mjs_.inject)(TUI_IS_MOBILE) && !(0,core_mjs_.inject)(TUI_IS_IOS));

/**
 * Apple(safari/webkit) detection
 */
const TUI_IS_APPLE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => tuiIsApple((0,core_mjs_.inject)(ng_web_apis_common/* NAVIGATOR */.kW)));

/**
 * Chromium browser engine detection
 */
const TUI_IS_CHROMIUM = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => !!(0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf).chrome);

/**
 * Detect if app is running under Cypress
 * {@link https://docs.cypress.io/faq/questions/using-cypress-faq#Is-there-any-way-to-detect-if-my-app-is-running-under-Cypress Cypress docs}
 */
const TUI_IS_CYPRESS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => !!(0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf).Cypress);

/**
 * Detect if app is running under Playwright
 */
const TUI_IS_PLAYWRIGHT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(taiga_ui_cdk_constants/* ALWAYS_FALSE_HANDLER */.Fr);

/**
 * Detect if app is running under any of test frameworks
 */
const TUI_IS_E2E = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,core_mjs_.inject)(TUI_IS_CYPRESS) || (0,core_mjs_.inject)(TUI_IS_PLAYWRIGHT));

/**
 * Firefox browser engine detection
 */
const TUI_IS_FIREFOX = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  var _a;
  return typeof ((_a = (0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf)) === null || _a === void 0 ? void 0 : _a.mozCancelFullScreen) !== 'undefined';
});
const TUI_IS_STACKBLITZ = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf).location.host.endsWith('stackblitz.io'));

/**
 * Webkit browser engine detection
 */
const TUI_IS_WEBKIT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  var _a;
  return !!((_a = (0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf)) === null || _a === void 0 ? void 0 : _a.webkitConvertPointFromNodeToPage);
});

// TODO: Switch to factory in 4.0
const TUI_PLATFORM = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)('web');
function tuiPlatformFactory() {
  if (inject(TUI_IS_IOS)) {
    return 'ios';
  }
  if (inject(TUI_IS_ANDROID)) {
    return 'android';
  }
  return 'web';
}

/**
 * SSR safe default empty Range
 */
const TUI_RANGE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,common_mjs_.isPlatformBrowser)((0,core_mjs_.inject)(core_mjs_.PLATFORM_ID)) ? new Range() : {});

/**
 * Scrollable container
 */
const TUI_SCROLL_REF = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => new core_mjs_.ElementRef((0,core_mjs_.inject)(common_mjs_.DOCUMENT).documentElement));

/**
 * Swipe options
 */
const TUI_SWIPE_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)({
  timeout: 500,
  threshold: 30
});

/**
 * @description:
 * The isTrusted read-only property of the Event interface is a boolean value that is true
 * when the event was generated by a user action, and false when the event was created or
 * modified by a script or dispatched via EventTarget.dispatchEvent().
 */
const TUI_TAKE_ONLY_TRUSTED_EVENTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(taiga_ui_cdk_constants/* ALWAYS_TRUE_HANDLER */.Uq);
const TUI_TOUCH_SUPPORTED = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf).matchMedia('(any-pointer: coarse)').matches);
const TUI_WINDOW_SIZE = new core_mjs_.InjectionToken('[TUI_WINDOW_SIZE]', {
  factory: () => {
    const w = (0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf);
    return (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(w, 'resize').pipe((0,startWith/* startWith */.Z)(null), (0,map/* map */.T)(() => {
      var _a, _b;
      const width = Math.max(w.document.documentElement.clientWidth || 0, w.innerWidth || 0, ((_a = w.visualViewport) === null || _a === void 0 ? void 0 : _a.width) || 0);
      const height = Math.max(w.document.documentElement.clientHeight || 0, w.innerHeight || 0, ((_b = w.visualViewport) === null || _b === void 0 ? void 0 : _b.height) || 0);
      return {
        width,
        height,
        top: 0,
        left: 0,
        right: width,
        bottom: height
      };
    }), (0,shareReplay/* shareReplay */.t)({
      bufferSize: 1,
      refCount: true
    }));
  }
});

/**
 * @deprecated Use {@link TUI_WINDOW_SIZE} instead
 */
const TUI_WINDOW_HEIGHT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,core_mjs_.inject)(TUI_WINDOW_SIZE).pipe((0,map/* map */.T)(({
  height
}) => height)));

/**
 * Zoom options
 */
const TUI_ZOOM_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)({
  wheelSensitivity: 0.01
});

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-tokens.js.map

/***/ }),

/***/ 7969:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Pr: () => (/* binding */ tuiIsSafari),
/* harmony export */   ce: () => (/* binding */ tuiIsFirefox)
/* harmony export */ });
/* unused harmony exports tuiIsEdge, tuiIsEdgeOlderThan */
function tuiIsEdge(userAgent) {
  return userAgent.toLowerCase().includes('edge');
}
const EDGE = 'edge/';
function tuiIsEdgeOlderThan(version, userAgent) {
  const currentVersion = parseInt(userAgent.slice(userAgent.toLowerCase().indexOf(EDGE) + EDGE.length), 10);
  return currentVersion < version;
}
function tuiIsFirefox(userAgent) {
  return userAgent.toLowerCase().includes('firefox');
}
function tuiIsSafari({
  ownerDocument: doc
}) {
  var _a, _b, _c, _d, _e, _f, _g, _h;
  const win = doc === null || doc === void 0 ? void 0 : doc.defaultView;
  const isMacOsSafari = typeof win.safari !== 'undefined' && ((_b = (_a = win.safari) === null || _a === void 0 ? void 0 : _a.pushNotification) === null || _b === void 0 ? void 0 : _b.toString()) === '[object SafariRemoteNotification]';
  const isIosSafari = !!((_d = (_c = win.navigator) === null || _c === void 0 ? void 0 : _c.vendor) === null || _d === void 0 ? void 0 : _d.includes('Apple')) && !((_f = (_e = win.navigator) === null || _e === void 0 ? void 0 : _e.userAgent) === null || _f === void 0 ? void 0 : _f.includes('CriOS')) && !((_h = (_g = win.navigator) === null || _g === void 0 ? void 0 : _g.userAgent) === null || _h === void 0 ? void 0 : _h.includes('FxiOS'));
  return isMacOsSafari || isIosSafari;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-browser.js.map

/***/ }),

/***/ 5001:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   D$: () => (/* binding */ tuiPointToClientRect),
/* harmony export */   J0: () => (/* binding */ tuiGetElementObscures),
/* harmony export */   Ki: () => (/* binding */ tuiIsHTMLElement),
/* harmony export */   Kv: () => (/* binding */ tuiRetargetedBoundaryCrossing),
/* harmony export */   P9: () => (/* binding */ tuiContainsOrAfter),
/* harmony export */   U9: () => (/* binding */ tuiGetActualTarget),
/* harmony export */   aT: () => (/* binding */ tuiGetElementOffset),
/* harmony export */   dd: () => (/* binding */ tuiGetDocumentOrShadowRoot),
/* harmony export */   dn: () => (/* binding */ tuiIsElementEditable),
/* harmony export */   kI: () => (/* binding */ tuiGetScrollParent),
/* harmony export */   qO: () => (/* binding */ tuiCanScroll),
/* harmony export */   ru: () => (/* binding */ tuiIsElement)
/* harmony export */ });
/* unused harmony exports tuiGetClipboardDataText, tuiGetSelectedText, tuiIsCurrentTarget, tuiIsInput, tuiIsInsideIframe, tuiIsNodeIn, tuiIsTextNode, tuiIsTextarea, tuiIsTextfield */
/* harmony import */ var _taiga_ui_cdk_utils_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4215);
/* harmony import */ var _taiga_ui_cdk_utils_miscellaneous__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9925);
/* harmony import */ var _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4489);



function canScrollVertical(element, rootElement, scrollEnd) {
  let currentElement = element;
  while (currentElement !== rootElement.parentElement) {
    if (Math.floor(currentElement.scrollTop) > 0 && !scrollEnd || Math.ceil(currentElement.scrollTop + currentElement.clientHeight) < currentElement.scrollHeight && scrollEnd) {
      return true;
    }
    if (currentElement.parentElement) {
      currentElement = currentElement.parentElement;
    } else {
      return false;
    }
  }
  return false;
}
function canScrollHorizontal(element, rootElement, scrollEnd) {
  let currentElement = element;
  while (currentElement !== rootElement.parentElement) {
    if (Math.floor(currentElement.scrollLeft) > 0 && !scrollEnd || Math.ceil(currentElement.scrollLeft + currentElement.clientWidth) < currentElement.scrollWidth && scrollEnd) {
      return true;
    }
    if (currentElement.parentElement) {
      currentElement = currentElement.parentElement;
    } else {
      return false;
    }
  }
  return false;
}
function tuiCanScroll(element, rootElement, vertical, scrollEnd) {
  return vertical ? canScrollVertical(element, rootElement, scrollEnd) : canScrollHorizontal(element, rootElement, scrollEnd);
}
function tuiContainsOrAfter(current, node) {
  try {
    return current.contains(node) || !!(node.compareDocumentPosition(current) & Node.DOCUMENT_POSITION_PRECEDING);
  } catch (_a) {
    return false;
  }
}
function tuiIsInput(element) {
  return element.matches('input');
}
function tuiIsTextarea(element) {
  return element.matches('textarea');
}
function tuiIsTextfield(element) {
  return tuiIsInput(element) || tuiIsTextarea(element);
}
function tuiIsElement(node) {
  return !!node && 'nodeType' in node && node.nodeType === Node.ELEMENT_NODE;
}
function tuiIsHTMLElement(node) {
  return !!node && node instanceof node.ownerDocument.defaultView.HTMLElement;
}
function tuiIsTextNode(node) {
  return node.nodeType === Node.TEXT_NODE;
}

/**
 * Gets actual target from open Shadow DOM if event happened within it
 */
function tuiGetActualTarget(event) {
  return event.composedPath()[0];
}
const DEFAULT_FORMAT = 'text/plain';
/**
 * Gets text from data of clipboardEvent, it also works in IE and Edge browsers
 */
function tuiGetClipboardDataText(event, format = DEFAULT_FORMAT) {
  return 'clipboardData' in event && event.clipboardData !== null ? event.clipboardData.getData(format) || event.clipboardData.getData(DEFAULT_FORMAT) : event.target.ownerDocument.defaultView.clipboardData.getData('text');
}
function tuiGetDocumentOrShadowRoot(node) {
  return 'getRootNode' in node && node.isConnected ? node.getRootNode() : node.ownerDocument;
}

/**
 * Returns array of Elements covering edges of given element or null if at least one edge middle point is visible
 *
 * CAUTION: Empty array means element if offscreen i.e. covered by no elements, rather than not covered
 * TODO: v4.0 change function signature to
 * ```ts
 * function tuiGetElementObscures(element: Element): readonly [Element, Element, Element, Element] | [] | null
 * ```
 */
function tuiGetElementObscures(element) {
  const {
    ownerDocument
  } = element;
  if (!(ownerDocument === null || ownerDocument === void 0 ? void 0 : ownerDocument.defaultView) || !element.getBoundingClientRect) {
    return null;
  }
  const {
    innerWidth,
    innerHeight
  } = ownerDocument.defaultView;
  const doc = tuiGetDocumentOrShadowRoot(element);
  const rect = element.getBoundingClientRect();
  if (rect.width === 0 && rect.height === 0) {
    return null;
  }
  const left = (0,_taiga_ui_cdk_utils_math__WEBPACK_IMPORTED_MODULE_0__/* .tuiClamp */ .wN)(Math.round(rect.left) + 2, 0, innerWidth);
  const top = (0,_taiga_ui_cdk_utils_math__WEBPACK_IMPORTED_MODULE_0__/* .tuiClamp */ .wN)(Math.round(rect.top) + 2, 0, innerHeight);
  const right = (0,_taiga_ui_cdk_utils_math__WEBPACK_IMPORTED_MODULE_0__/* .tuiClamp */ .wN)(Math.round(rect.right) - 2, 0, innerWidth);
  const bottom = (0,_taiga_ui_cdk_utils_math__WEBPACK_IMPORTED_MODULE_0__/* .tuiClamp */ .wN)(Math.round(rect.bottom) - 2, 0, innerHeight);
  const horizontalMiddle = (0,_taiga_ui_cdk_utils_math__WEBPACK_IMPORTED_MODULE_0__/* .tuiClamp */ .wN)(Math.round(rect.left + rect.width / 2), 0, innerWidth);
  const verticalMiddle = (0,_taiga_ui_cdk_utils_math__WEBPACK_IMPORTED_MODULE_0__/* .tuiClamp */ .wN)(Math.round(rect.top + rect.height / 2), 0, innerHeight);
  const elements = [doc.elementFromPoint(horizontalMiddle, top), doc.elementFromPoint(horizontalMiddle, bottom), doc.elementFromPoint(left, verticalMiddle), doc.elementFromPoint(right, verticalMiddle)];
  const nonNull = elements.filter(_taiga_ui_cdk_utils_miscellaneous__WEBPACK_IMPORTED_MODULE_1__/* .tuiIsPresent */ .Aj);
  if (!nonNull.length) {
    return nonNull;
  }
  const filtered = nonNull.filter(el => !element.contains(el));
  return filtered.length === 4 ? filtered : null;
}

/**
 * Calculates offset for an element relative to it's parent several levels above
 *
 * @param host parent element
 * @param element
 * @return object with offsetTop and offsetLeft number properties
 */
function tuiGetElementOffset(host, element) {
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_2__/* .tuiAssert */ .B.assert(host.contains(element), 'Host must contain element');
  let {
    offsetTop,
    offsetLeft,
    offsetParent
  } = element;
  while (tuiIsHTMLElement(offsetParent) && offsetParent !== host) {
    offsetTop += offsetParent.offsetTop;
    offsetLeft += offsetParent.offsetLeft;
    offsetParent = offsetParent.offsetParent;
  }
  return {
    offsetTop,
    offsetLeft
  };
}

/**
 * Finds the nearest parent with scroll in it
 *
 * @param element initial element
 * @param vertical flag for orientation of scroll
 */
function tuiGetScrollParent(element, vertical = true) {
  if (element === null) {
    return null;
  }
  if (vertical && element.scrollHeight > element.clientHeight) {
    return element;
  }
  if (!vertical && element.scrollWidth > element.clientWidth) {
    return element;
  }
  return tuiGetScrollParent(element.parentElement, vertical);
}

/**
 * @description:
 * cross browser way to get selected text
 *
 * History:
 * BUG - window.getSelection() fails when text selected in a form field
 * https://bugzilla.mozilla.org/show_bug.cgi?id=85686
 */
function tuiGetSelectedText({
  getSelection,
  document
}) {
  var _a;
  return document.activeElement && tuiIsTextfield(document.activeElement) ? document.activeElement.value.slice(document.activeElement.selectionStart || 0, document.activeElement.selectionEnd || 0) : ((_a = getSelection()) === null || _a === void 0 ? void 0 : _a.toString()) || null;
}
function tuiIsCurrentTarget({
  target,
  currentTarget
}) {
  return target === currentTarget;
}
function tuiIsElementEditable(element) {
  return tuiIsTextfield(element) && !element.readOnly || !!element.isContentEditable;
}

/**
 * Checks if an app is running inside <iframe /> tag
 */
function tuiIsInsideIframe(win) {
  return win.parent !== win;
}

/**
 * Checks if node is inside a specific selector
 *
 * @param node
 * @param selector
 * @return true if node is inside a particular selector
 */
function tuiIsNodeIn(node, selector) {
  var _a;
  return tuiIsTextNode(node) ? !!((_a = node.parentElement) === null || _a === void 0 ? void 0 : _a.closest(selector)) : tuiIsElement(node) && !!node.closest(selector);
}
function tuiPointToClientRect(x = 0, y = 0) {
  const rect = {
    x,
    y,
    left: x,
    right: x,
    top: y,
    bottom: y,
    width: 0,
    height: 0
  };
  return Object.assign(Object.assign({}, rect), {
    toJSON() {
      return rect;
    }
  });
}
function tuiRetargetedBoundaryCrossing(event) {
  // firefox
  if ('explicitOriginalTarget' in event) {
    return (event === null || event === void 0 ? void 0 : event.explicitOriginalTarget) !== event.target;
  }
  // chrome
  if ('pointerId' in event) {
    return event.pointerId === -1;
  }
  // safari
  if ('detail' in event && 'webkitForce' in event) {
    return (event === null || event === void 0 ? void 0 : event.detail) === 0;
  }
  return false;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-dom.js.map

/***/ }),

/***/ 8529:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hn: () => (/* binding */ tuiIsNativeKeyboardFocusable),
/* harmony export */   Ij: () => (/* binding */ tuiIsNativeFocusedIn),
/* harmony export */   SI: () => (/* binding */ tuiBlurNativeFocused),
/* harmony export */   X: () => (/* binding */ tuiIsNativeFocused),
/* harmony export */   ai: () => (/* binding */ tuiSetNativeMouseFocused),
/* harmony export */   km: () => (/* binding */ tuiGetClosestFocusable),
/* harmony export */   x_: () => (/* binding */ tuiGetNativeFocused),
/* harmony export */   yO: () => (/* binding */ tuiMoveFocus)
/* harmony export */ });
/* unused harmony export tuiIsNativeMouseFocusable */
/* harmony import */ var _taiga_ui_cdk_utils_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5001);
/* harmony import */ var _taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2287);



/**
 * Returns current active element, including shadow dom
 *
 * @return element or null
 */
function tuiGetNativeFocused({
  activeElement
}) {
  if (!(activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot)) {
    return activeElement;
  }
  let element = activeElement.shadowRoot.activeElement;
  while (element === null || element === void 0 ? void 0 : element.shadowRoot) {
    element = element.shadowRoot.activeElement;
  }
  return element;
}

/**
 * Finds and blurs current active element, including shadow DOM
 */
function tuiBlurNativeFocused(doc) {
  const activeElement = tuiGetNativeFocused(doc);
  if ((0,_taiga_ui_cdk_utils_dom__WEBPACK_IMPORTED_MODULE_0__/* .tuiIsHTMLElement */ .Ki)(activeElement)) {
    activeElement.blur();
  }
}

/**
 * Checks for signs that element can be focused with keyboard. tabIndex above 0 is ignored to
 * only target natural focus order. Not checking the possibility of an element to
 * be focused, for example element can have display: none applied to it or any other
 * circumstances could prevent actual focus.
 */
function tuiIsNativeKeyboardFocusable(element) {
  if (element.hasAttribute('disabled') || element.getAttribute('tabIndex') === '-1') {
    return false;
  }
  if ((0,_taiga_ui_cdk_utils_dom__WEBPACK_IMPORTED_MODULE_0__/* .tuiIsHTMLElement */ .Ki)(element) && element.isContentEditable || element.getAttribute('tabIndex') === '0') {
    return true;
  }
  switch (element.tagName) {
    case 'BUTTON':
    case 'SELECT':
    case 'TEXTAREA':
      return true;
    case 'VIDEO':
    case 'AUDIO':
      return element.hasAttribute('controls');
    case 'INPUT':
      return element.getAttribute('type') !== 'hidden';
    case 'A':
    case 'LINK':
      return element.hasAttribute('href');
    default:
      return false;
  }
}
function tuiIsNativeMouseFocusable(element) {
  return !element.hasAttribute('disabled') && (element.getAttribute('tabIndex') === '-1' || tuiIsNativeKeyboardFocusable(element));
}

/**
 * @description:
 * Finds the closest element that can be focused with a keyboard or mouse in theory
 */
function tuiGetClosestFocusable({
  initial,
  root,
  previous = false,
  keyboard = true
}) {
  if (!root.ownerDocument) {
    return null;
  }
  const check = keyboard ? tuiIsNativeKeyboardFocusable : tuiIsNativeMouseFocusable;
  const treeWalker = root.ownerDocument.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, _taiga_ui_cdk_constants__WEBPACK_IMPORTED_MODULE_1__/* .svgNodeFilter */ .Np);
  treeWalker.currentNode = initial;
  while (previous ? treeWalker.previousNode() : treeWalker.nextNode()) {
    if ((0,_taiga_ui_cdk_utils_dom__WEBPACK_IMPORTED_MODULE_0__/* .tuiIsHTMLElement */ .Ki)(treeWalker.currentNode)) {
      initial = treeWalker.currentNode;
    }
    if ((0,_taiga_ui_cdk_utils_dom__WEBPACK_IMPORTED_MODULE_0__/* .tuiIsHTMLElement */ .Ki)(initial) && check(initial)) {
      return initial;
    }
  }
  return null;
}

/**
 * Checks if element is focused.
 *
 * Could return true even after blur since element remains focused if you switch away from a browser tab.
 *
 * @param node or null (as a common return value of DOM nodes walking)
 * @return true if focused
 */
function tuiIsNativeFocused(node) {
  return !!(node === null || node === void 0 ? void 0 : node.ownerDocument) && tuiGetNativeFocused(node.ownerDocument) === node && node.ownerDocument.hasFocus();
}

/**
 * Checks if focused element is within given element.
 *
 * @param node
 * @return true if focused node is contained within element
 */
function tuiIsNativeFocusedIn(node) {
  // !node.contains - check for IE11
  if (!node.ownerDocument || !node.contains) {
    return false;
  }
  const nativeFocused = tuiGetNativeFocused(node.ownerDocument);
  return nativeFocused !== null && node.contains(nativeFocused) && node.ownerDocument.hasFocus();
}

/**
 * Utility method for moving focus in a list of elements
 *
 * @param currentIndex currently focused index
 * @param elements array of focusable elements
 * @param step a step to move focus by, typically -1 or 1
 */
function tuiMoveFocus(currentIndex, elements, step) {
  currentIndex += step;
  while (currentIndex >= 0 && currentIndex < elements.length) {
    elements[currentIndex].focus();
    if (tuiIsNativeFocused(elements[currentIndex])) {
      return;
    }
    currentIndex += step;
  }
}

/**
 * Focuses or blurs element with mouse action imitation (to spoof {@link TuiFocusVisibleService})
 *
 * @param element
 * @param focused desired focused state
 * @param preventScroll optionally prevent native browser scroll after focus
 */
function tuiSetNativeMouseFocused(element, focused = true, preventScroll = false) {
  if (!element.ownerDocument) {
    return;
  }
  if (typeof Event === 'function') {
    element.dispatchEvent(new Event('mousedown', {
      bubbles: true,
      cancelable: true
    }));
  } else {
    const event = element.ownerDocument.createEvent('Event');
    event.initEvent('mousedown', true, true);
    element.dispatchEvent(event);
  }
  if (focused) {
    element.focus({
      preventScroll
    });
  } else {
    element.blur();
  }
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-focus.js.map

/***/ }),

/***/ 4215:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Vj: () => (/* binding */ tuiRoundWith),
/* harmony export */   Zi: () => (/* binding */ tuiToInt),
/* harmony export */   bQ: () => (/* binding */ tuiInRange),
/* harmony export */   fS: () => (/* binding */ tuiNormalizeToIntNumber),
/* harmony export */   wN: () => (/* binding */ tuiClamp)
/* harmony export */ });
/* unused harmony exports tuiCeil, tuiFloor, tuiQuantize, tuiRound, tuiSum, tuiToInteger, tuiToRadians, tuiTrunc */
/* harmony import */ var _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4489);


/**
 * Clamps a value between two inclusive limits
 *
 * @param value
 * @param min lower limit
 * @param max upper limit
 */
function tuiClamp(value, min, max) {
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(!Number.isNaN(value));
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(!Number.isNaN(min));
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(!Number.isNaN(max));
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(max >= min);
  return Math.min(max, Math.max(min, value));
}
function tuiInRange(value, fromInclude, toExclude) {
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(!Number.isNaN(value));
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(!Number.isNaN(fromInclude));
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(!Number.isNaN(toExclude));
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(fromInclude < toExclude);
  return value >= fromInclude && value < toExclude;
}

/**
 * Normalizes any number to an integer within inclusive range
 *
 * @param value
 * @param min lower inclusive integer
 * @param max upper inclusive integer
 * @return an integer between min and max inclusive
 */
function tuiNormalizeToIntNumber(value, min, max) {
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(Number.isInteger(min));
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(Number.isInteger(max));
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(min <= max);
  if (Number.isNaN(value) || value <= min) {
    return min;
  }
  if (value >= max) {
    return max;
  }
  return Math.round(value);
}

/**
 * Rounds a number to the closest value in a fixed discrete series
 *
 * @param value
 * @param quantum series step
 */
function tuiQuantize(value, quantum) {
  ngDevMode && tuiAssert.assert(Number.isFinite(value));
  ngDevMode && tuiAssert.assert(Number.isFinite(quantum));
  ngDevMode && tuiAssert.assert(quantum > 0);
  const remainder = value % quantum;
  return remainder < quantum / 2 ? value - remainder : value + quantum - remainder;
}
const MAX_PRECISION = 292;
/**
 * Rounding number to the set precision
 *
 * @param value
 * @param precision number of digits in a float part
 * @param func rounding function (round, floor, ceil)
 */
function calculate(value, precision, func) {
  if (value === Infinity) {
    return value;
  }
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(!Number.isNaN(value), 'Value must be number');
  ngDevMode && _taiga_ui_cdk_classes__WEBPACK_IMPORTED_MODULE_0__/* .tuiAssert */ .B.assert(Number.isInteger(precision), 'Precision must be integer');
  precision = Math.min(precision, MAX_PRECISION);
  const pair = `${value}e`.split('e');
  const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));
  const processedPair = `${tempValue}e`.split('e');
  return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);
}
function tuiRound(value, precision = 0) {
  return calculate(value, precision, Math.round);
}
function tuiCeil(value, precision = 0) {
  return calculate(value, precision, Math.ceil);
}
function tuiFloor(value, precision = 0) {
  return calculate(value, precision, Math.floor);
}
function tuiTrunc(value, precision = 0) {
  return calculate(value, precision, Math.trunc);
}
function tuiRoundWith({
  value,
  precision,
  method
}) {
  switch (method) {
    case 'round':
      return tuiRound(value, precision);
    case 'ceil':
      return tuiCeil(value, precision);
    case 'floor':
      return tuiFloor(value, precision);
    default:
      return tuiTrunc(value, precision);
  }
}

/**
 * Calculates sum of any number of passed arguments
 */
function tuiSum(...args) {
  return args.reduce((a, b) => a + b, 0);
}
function tuiToInt(bool) {
  return bool ? 1 : 0;
}
function tuiToInteger(value) {
  return parseInt(value, 10);
}

/**
 * Converts angle in degrees to radians
 */
function tuiToRadians(deg) {
  return deg * Math.PI / 180;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-math.js.map

/***/ }),

/***/ 9925:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Aj: () => (/* binding */ tuiIsPresent),
/* harmony export */   Al: () => (/* binding */ tuiGetSwipeDirection),
/* harmony export */   ET: () => (/* binding */ tuiCreateTokenFromFactory),
/* harmony export */   FU: () => (/* binding */ tuiUniqBy),
/* harmony export */   GV: () => (/* binding */ tuiArrayRemove),
/* harmony export */   YB: () => (/* binding */ tuiIsString),
/* harmony export */   _s: () => (/* binding */ tuiIsFalsy),
/* harmony export */   fk: () => (/* binding */ tuiGetOriginalArrayFromQueryList),
/* harmony export */   gc: () => (/* binding */ tuiCreateToken),
/* harmony export */   sZ: () => (/* binding */ tuiIsNumber)
/* harmony export */ });
/* unused harmony exports tuiArrayShallowEquals, tuiArrayToggle, tuiCleanObject, tuiCreateOptions, tuiDefaultSort, tuiDistanceBetweenTouches, tuiEaseInOutQuad, tuiFlatLength, tuiIsObject, tuiIsValidUrl, tuiMarkControlAsTouchedAndValidate, tuiNullableSame, tuiObjectFromEntries, tuiProvideOptions */
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);



function tuiArrayRemove(array, index) {
  return array.slice(0, Math.max(index, 0)).concat(array.slice(Math.max(index + 1, 0)));
}
function tuiArrayShallowEquals(a, b) {
  return a.length === b.length && a.every((item, index) => item === b[index]);
}
function tuiArrayToggle(array, item) {
  const index = array.indexOf(item);
  return index === -1 ? [...array, item] : tuiArrayRemove(array, index);
}
function tuiIsString(value) {
  return typeof value === 'string';
}
function checkValueIsEmpty(value) {
  const nextValue = tuiIsString(value) ? value.trim() : value;
  return [undefined, null, NaN, ''].includes(nextValue);
}
function tuiCleanObject(object) {
  return JSON.parse(JSON.stringify(object, (_key, value) => checkValueIsEmpty(value) ? undefined : value));
}
function tuiCreateToken(defaults) {
  return tuiCreateTokenFromFactory(() => defaults);
}
function tuiCreateTokenFromFactory(factory) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('', {
    factory
  });
}

/** @deprecated use {@link tuiCreateToken} instead */
function tuiCreateOptions(defaults) {
  return tuiCreateTokenFromFactory(() => defaults);
}
function tuiDefaultSort(x, y) {
  if (x === y) {
    return 0;
  }
  if (tuiIsString(x) && tuiIsString(y)) {
    return x.localeCompare(y);
  }
  return x > y ? 1 : -1;
}
function tuiDistanceBetweenTouches({
  touches
}) {
  return Math.hypot(touches[0].clientX - touches[1].clientX, touches[0].clientY - touches[1].clientY);
}
function tuiEaseInOutQuad(t) {
  ngDevMode && tuiAssert.assert(t >= 0 && t <= 1, 'Input must be between 0 and 1 inclusive but received ', t);
  return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
}

/**
 * Flattens two-dimensional array and calculates resulting length
 *
 * @param array twi dimensional array
 */
function tuiFlatLength(array) {
  return array.reduce((count, section) => count + section.length, 0);
}

/**
 * Extracts original array from {@link QueryList} rather than
 * creating a copy like {@link QueryList.toArray} does.
 * @param queryList
 * @returns original array from {@link QueryList}.
 */
function tuiGetOriginalArrayFromQueryList(queryList) {
  let array = [];
  queryList.find((_item, _index, originalArray) => {
    array = originalArray;
    return true;
  });
  return array;
}
function tuiGetSwipeDirection(deltaX, deltaY) {
  if (Math.abs(deltaY) > Math.abs(deltaX)) {
    return deltaY > 0 ? 'top' : 'bottom';
  }
  return deltaX > 0 ? 'left' : 'right';
}
function tuiIsFalsy(value) {
  return !value;
}
function tuiIsNumber(value) {
  return typeof value === 'number';
}
function tuiIsObject(value) {
  return typeof value === 'object' && !!value;
}
function tuiIsPresent(value) {
  return value !== null && value !== undefined;
}
function tuiIsValidUrl(url) {
  const pattern = new RegExp('^([a-zA-Z]+:\\/\\/)?' +
  // protocol
  '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.)+[a-z]{2,}|localhost|' +
  // domain name
  '((\\d{1,3}\\.){3}\\d{1,3}))' +
  // OR IP (v4) address
  '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' +
  // port and path
  '(\\?[;&a-z\\d%_.~+=-]*)?' +
  // query string
  '(\\#[-a-z\\d_]*)?$',
  // fragment locator
  'i');
  return pattern.test(url);
}
function tuiMarkControlAsTouchedAndValidate(control) {
  if (control instanceof FormArray) {
    control.controls.forEach(nestedControl => {
      tuiMarkControlAsTouchedAndValidate(nestedControl);
    });
  }
  if (control instanceof FormGroup) {
    Object.values(control.controls).forEach(nestedControl => {
      tuiMarkControlAsTouchedAndValidate(nestedControl);
    });
  }
  control.markAsTouched();
  control.updateValueAndValidity();
}

/**
 * Checks identity for nullable elements.
 *
 * @param a element a
 * @param b element b
 * @param handler called if both elements are not null
 * @return true if either both are null or they pass identity handler
 */
function tuiNullableSame(a, b, handler) {
  if (a === null) {
    return b === null;
  }
  if (b === null) {
    return false;
  }
  return handler(a, b);
}

/**
 * @deprecated use `Object.fromEntries` instead
 * (check browser support first https://caniuse.com/mdn-javascript_builtins_object_fromentries)
 * ___
 * TODO: after we bump Firefox to 63+ replace this function with `Object.fromEntries`.
 * TODO: Add `es2019.object` to `tsconfig.json` => `compilerOptions.lib`.
 *
 */
function tuiObjectFromEntries(keyValuePairs) {
  return keyValuePairs.reduce((obj, [key, val]) => Object.assign(Object.assign({}, obj), {
    [key]: val
  }), {});
}
function tuiProvideOptions(provide, options, fallback) {
  return {
    provide,
    deps: [[new Optional(), new SkipSelf(), provide]],
    useFactory: parent => Object.assign(Object.assign({}, parent || fallback), options)
  };
}
function tuiUniqBy(array, key) {
  return Array.from(array.reduce((map, item) => map.has(item[key]) ? map : map.set(item[key], item), new Map()).values());
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-miscellaneous.js.map

/***/ }),

/***/ 95:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   o: () => (/* binding */ tuiSvgLinearGradientProcessor)
/* harmony export */ });
/* harmony import */ var _taiga_ui_cdk_utils_miscellaneous__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9925);

function makeRandomSalt() {
  return Math.floor(Math.random() * Date.now());
}
function escapeRegExp(search) {
  return search.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
}
function extractLinearGradientIdsFromSvg(svg) {
  var _a;
  const ids = ((_a = svg.match(/url\(("?)('*)#(.*?)('*)\)/g)) !== null && _a !== void 0 ? _a : []).map(url => url.slice(4, url.length - 1).replace(/['"#]+/g, ''));
  return Array.from(new Set(ids));
}
/**
 * TODO: remove in v4.0
 * @deprecated
 */
function setFallbackForGradientFill(svg, fallback) {
  try {
    const tree = new DOMParser().parseFromString(svg, 'text/html');
    tree.body.querySelectorAll('[fill^=url]') // only gradient
    .forEach(element => element.setAttribute('fill', `${element.getAttribute('fill')} ${fallback}`.trim()));
    return tree.body.innerHTML.trim();
  } catch (_a) {
    return svg;
  }
}
/**
 * @description:
 * Any ‘linearGradient’ attributes which are defined on the referenced
 * element which are not defined on this element are inherited by this element.
 * If this element has no defined gradient stops, and the referenced element does
 * (possibly due to its own ‘xlink:href’ attribute), then this element inherits
 * the gradient stop from the referenced element. Inheritance can be indirect
 * to an arbitrary level; thus, if the referenced element inherits attribute
 * or gradient stops due to its own ‘xlink:href’ attribute, then the current
 * element can inherit those attributes or gradient stops.
 *
 * Documentation: https://www.w3.org/TR/SVG11/pservers.html
 *
 */
function tuiSvgLinearGradientProcessor(svg, salt = makeRandomSalt(),
/**
 * TODO: remove in v4.0
 * @deprecated
 */
fallback = 'rgba(0, 0, 0, 0.7)') {
  if ((0,_taiga_ui_cdk_utils_miscellaneous__WEBPACK_IMPORTED_MODULE_0__/* .tuiIsString */ .YB)(svg)) {
    const uniqueIds = extractLinearGradientIdsFromSvg(svg);
    const rawSvg = uniqueIds.reduce((newSvg, previousId) => {
      const escapedId = escapeRegExp(previousId);
      const newId = `id_${salt}_${previousId}`;
      return newSvg.replace(new RegExp(`"${escapedId}"`, 'g'), `"${newId}"`).replace(new RegExp(`'${escapedId}'`, 'g'), `'${newId}'`).replace(new RegExp(`url\\('#${escapedId}'\\)`, 'g'), `url('#${newId}')`).replace(new RegExp(`url\\("#${escapedId}"\\)`, 'g'), `url("#${newId}")`).replace(new RegExp(`url\\(#${escapedId}\\)`, 'g'), `url(#${newId})`);
    }, svg);
    return setFallbackForGradientFill(rawSvg, fallback);
  }
  return svg;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-cdk-utils-svg.js.map

/***/ }),

/***/ 7359:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GR: () => (/* binding */ tuiFallbackRectAccessor),
/* harmony export */   Np: () => (/* binding */ tuiAsDriver),
/* harmony export */   Q: () => (/* binding */ AbstractTuiDriverDirective),
/* harmony export */   XW: () => (/* binding */ tuiAsVehicle),
/* harmony export */   Xu: () => (/* binding */ TuiDriver),
/* harmony export */   Z3: () => (/* binding */ tuiRectAccessorFor),
/* harmony export */   aX: () => (/* binding */ AbstractTuiTextfieldHost),
/* harmony export */   cf: () => (/* binding */ TuiRectAccessor),
/* harmony export */   dg: () => (/* binding */ TuiPositionAccessor),
/* harmony export */   lL: () => (/* binding */ TuiVehicle),
/* harmony export */   mI: () => (/* binding */ tuiPositionAccessorFor),
/* harmony export */   nR: () => (/* binding */ tuiAsPositionAccessor),
/* harmony export */   yq: () => (/* binding */ tuiAsRectAccessor)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4340);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(683);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1985);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7786);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(3294);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6977);







// eslint-disable-next-line @typescript-eslint/naming-convention
class TuiDriver extends rxjs__WEBPACK_IMPORTED_MODULE_1__/* .Observable */ .c {}
function tuiAsDriver(useExisting) {
  return {
    provide: TuiDriver,
    multi: true,
    useExisting
  };
}

// eslint-disable-next-line @typescript-eslint/naming-convention
class TuiVehicle {}
function tuiAsVehicle(useExisting) {
  return {
    provide: TuiVehicle,
    multi: true,
    useExisting
  };
}
let AbstractTuiDriverDirective = /*#__PURE__*/(() => {
  class AbstractTuiDriverDirective {
    constructor(destroy$, drivers, vehicles) {
      this.destroy$ = destroy$;
      this.drivers = drivers;
      this.vehicles = vehicles;
    }
    ngOnInit() {
      const vehicle = this.vehicles.find(({
        type
      }) => type === this.type);
      (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .merge */ .h)(...this.drivers.filter(({
        type
      }) => type === this.type)).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .distinctUntilChanged */ .F)(), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__/* .takeUntil */ .Q)(this.destroy$)).subscribe(value => {
        vehicle === null || vehicle === void 0 ? void 0 : vehicle.toggle(value);
      });
    }
  }
  AbstractTuiDriverDirective.ɵfac = function AbstractTuiDriverDirective_Factory(t) {
    return new (t || AbstractTuiDriverDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__/* .TuiDestroyService */ .ew, 2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](TuiDriver), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](TuiVehicle));
  };
  AbstractTuiDriverDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: AbstractTuiDriverDirective
  });
  return AbstractTuiDriverDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let AbstractTuiTextfieldHost = /*#__PURE__*/(() => {
  class AbstractTuiTextfieldHost {
    constructor(host) {
      this.host = host;
    }
    get readOnly() {
      return this.host.readOnly;
    }
    get disabled() {
      return this.host.computedDisabled;
    }
    get invalid() {
      return this.host.computedInvalid;
    }
    get focusable() {
      return this.host.computedFocusable;
    }
    get inputMode() {
      return 'text';
    }
    get value() {
      var _a;
      return ((_a = this.host.value) === null || _a === void 0 ? void 0 : _a.toString()) || '';
    }
    process(_input) {}
  }
  AbstractTuiTextfieldHost.ɵfac = function AbstractTuiTextfieldHost_Factory(t) {
    return new (t || AbstractTuiTextfieldHost)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .AbstractTuiControl */ .Er));
  };
  AbstractTuiTextfieldHost.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: AbstractTuiTextfieldHost
  });
  return AbstractTuiTextfieldHost;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

// eslint-disable-next-line @typescript-eslint/naming-convention
class TuiPositionAccessor {}
function tuiPositionAccessorFor(type) {
  return {
    provide: TuiPositionAccessor,
    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf(), TuiPositionAccessor]],
    useFactory: accessors => accessors.find(accessor => accessor.type === type)
  };
}
function tuiAsPositionAccessor(useExisting) {
  return {
    provide: TuiPositionAccessor,
    multi: true,
    useExisting
  };
}

// TODO: Rename to getBoundingClientRect to match the DOM API
// eslint-disable-next-line @typescript-eslint/naming-convention
class TuiRectAccessor {}
function tuiRectAccessorFor(type, fallback) {
  return {
    provide: TuiRectAccessor,
    deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf(), TuiRectAccessor], fallback],
    useFactory: tuiFallbackRectAccessor(type)
  };
}
function tuiFallbackRectAccessor(type) {
  return (accessors, fallback) => accessors.find(accessor => accessor !== fallback && accessor.type === type) || fallback;
}
function tuiAsRectAccessor(useExisting) {
  return {
    provide: TuiRectAccessor,
    multi: true,
    useExisting
  };
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-abstract.js.map

/***/ }),

/***/ 2782:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Pv: () => (/* binding */ TuiButtonModule),
/* harmony export */   SM: () => (/* binding */ TuiButtonComponent)
/* harmony export */ });
/* unused harmony exports TUI_BUTTON_DEFAULT_OPTIONS, TUI_BUTTON_OPTIONS, tuiButtonOptionsProvider */
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9925);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(683);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8529);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(1410);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(4340);
/* harmony import */ var _taiga_ui_core_directives__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8323);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(983);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9172);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6354);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3294);
/* harmony import */ var _taiga_ui_core_enums__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7919);
/* harmony import */ var _taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(4350);
/* harmony import */ var _taiga_ui_core_components_loader__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(6249);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6412);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _taiga_ui_core_directives_wrapper__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(2061);
/* harmony import */ var _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(800);


















const _c0 = ["tuiButton", ""];
const _c1 = ["*"];
function TuiButtonComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainer"](0);
  }
}
function TuiButtonComponent_span_4_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tui-svg", 8);
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", text_r1);
  }
}
function TuiButtonComponent_span_4_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, TuiButtonComponent_span_4_tui_svg_1_Template, 1, 1, "tui-svg", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.icon);
  }
}
function TuiButtonComponent_span_6_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tui-svg", 8);
  }
  if (rf & 2) {
    const text_r3 = ctx.polymorpheusOutlet;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", text_r3);
  }
}
function TuiButtonComponent_span_6_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "span", 9);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, TuiButtonComponent_span_6_tui_svg_1_Template, 1, 1, "tui-svg", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.iconRight);
  }
}
function TuiButtonComponent_tui_loader_7_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tui-loader", 10);
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("inheritColor", true)("size", ctx_r1.loaderSize);
  }
}
const TUI_BUTTON_DEFAULT_OPTIONS = {
  size: 'l',
  shape: null,
  appearance: _taiga_ui_core_enums__WEBPACK_IMPORTED_MODULE_2__/* .TuiAppearance */ .bC.Primary
};
/**
 * Default parameters for button component
 */
const TUI_BUTTON_OPTIONS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_3__/* .tuiCreateToken */ .gc)(TUI_BUTTON_DEFAULT_OPTIONS);
function tuiButtonOptionsProvider(options) {
  return tuiProvideOptions(TUI_BUTTON_OPTIONS, options, TUI_BUTTON_DEFAULT_OPTIONS);
}
let TuiButtonComponent = /*#__PURE__*/(() => {
  class TuiButtonComponent extends _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_4__/* .AbstractTuiInteractive */ .Xb {
    constructor(mode, el, options) {
      var _a;
      super();
      this.mode = mode;
      this.el = el;
      this.options = options;
      this.mode$ = ((_a = this.mode) === null || _a === void 0 ? void 0 : _a.change$) || rxjs__WEBPACK_IMPORTED_MODULE_5__/* .EMPTY */ .w;
      this.appearance = null;
      this.disabled = false;
      this.shape = this.options.shape;
      this.showLoader = false;
      this.size = this.options.size;
      this.appearance$ = this.mode$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__/* .startWith */ .Z)(null), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_7__/* .map */ .T)(() => this.computedAppearance), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__/* .distinctUntilChanged */ .F)());
    }
    get nativeFocusableElement() {
      return this.nativeDisabled ? null : this.el.nativeElement;
    }
    get focused() {
      return !this.showLoader && (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_9__/* .tuiIsNativeFocused */ .X)(this.el.nativeElement);
    }
    get loaderSize() {
      return this.size === 'l' || this.size === 'xl' ? 'm' : 's';
    }
    get computedAppearance() {
      var _a;
      return (_a = this.appearance) !== null && _a !== void 0 ? _a : this.options.appearance || '';
    }
    get nativeDisabled() {
      return this.computedDisabled || this.showLoader ? '' : null;
    }
    get tabIndex() {
      return this.focusable ? 0 : -1;
    }
    onFocused(focused) {
      this.updateFocused(focused);
    }
  }
  TuiButtonComponent.ɵfac = function TuiButtonComponent_Factory(t) {
    return new (t || TuiButtonComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_core_directives__WEBPACK_IMPORTED_MODULE_10__/* .TuiModeDirective */ .h, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](TUI_BUTTON_OPTIONS));
  };
  TuiButtonComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: TuiButtonComponent,
    selectors: [["button", "tuiButton", ""], ["button", "tuiIconButton", ""], ["a", "tuiButton", ""], ["a", "tuiIconButton", ""]],
    hostVars: 7,
    hostBindings: function TuiButtonComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("focusin", function TuiButtonComponent_focusin_HostBindingHandler() {
          return ctx.onFocused(true);
        })("focusout", function TuiButtonComponent_focusout_HostBindingHandler() {
          return ctx.onFocused(false);
        });
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵhostProperty"]("tabIndex", ctx.tabIndex);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("data-shape", ctx.shape)("data-size", ctx.size)("data-appearance", ctx.computedAppearance)("disabled", ctx.nativeDisabled);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("_loading", ctx.showLoader);
      }
    },
    inputs: {
      appearance: "appearance",
      disabled: "disabled",
      icon: "icon",
      iconRight: "iconRight",
      shape: "shape",
      showLoader: "showLoader",
      size: "size"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([(0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_11__/* .tuiAsFocusableItemAccessor */ .Jr)(TuiButtonComponent), _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_12__/* .TuiDestroyService */ .ew]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]],
    attrs: _c0,
    ngContentSelectors: _c1,
    decls: 8,
    vars: 10,
    consts: [[4, "ngIf"], ["tuiWrapper", "", 1, "t-wrapper", 3, "active", "appearance", "disabled", "hover"], [1, "t-content"], ["class", "t-left", 4, "ngIf"], ["class", "t-right", 4, "ngIf"], ["class", "t-loader", 3, "inheritColor", "size", 4, "ngIf"], [1, "t-left"], ["class", "t-icon", 3, "src", 4, "polymorpheusOutlet"], [1, "t-icon", 3, "src"], [1, "t-right"], [1, "t-loader", 3, "inheritColor", "size"]],
    template: function TuiButtonComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, TuiButtonComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "async");
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](2, "div", 1)(3, "span", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](4, TuiButtonComponent_span_4_Template, 2, 1, "span", 3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](5);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](6, TuiButtonComponent_span_6_Template, 2, 1, "span", 4);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](7, TuiButtonComponent_tui_loader_7_Template, 1, 2, "tui-loader", 5);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 8, ctx.appearance$));
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("active", ctx.pseudoActive)("appearance", ctx.computedAppearance)("disabled", ctx.computedDisabled)("hover", ctx.pseudoHover);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.icon);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.iconRight);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.showLoader);
      }
    },
    dependencies: [_taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_13__/* .TuiSvgComponent */ ._Y, _taiga_ui_core_components_loader__WEBPACK_IMPORTED_MODULE_14__/* .TuiLoaderComponent */ .jT, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _taiga_ui_core_directives_wrapper__WEBPACK_IMPORTED_MODULE_15__/* .TuiWrapperDirective */ .l, _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_16__/* .PolymorpheusOutletDirective */ .OA, _angular_common__WEBPACK_IMPORTED_MODULE_1__.AsyncPipe],
    styles: ["[_nghost-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:inline-block;flex-shrink:0;vertical-align:top;border-radius:var(--tui-radius-m);-webkit-user-select:none;-moz-user-select:none;user-select:none;outline:none;color:inherit}[data-shape=rounded][_nghost-%COMP%]{border-radius:6.25rem}[data-size=xs][_nghost-%COMP%]{height:var(--tui-height-xs);font-weight:normal}[data-size=xs][data-shape=square][_nghost-%COMP%], [data-size=xs][tuiIconButton][_nghost-%COMP%]{width:var(--tui-height-xs)}[data-size=s][_nghost-%COMP%]{height:var(--tui-height-s);font-weight:normal}[data-size=s][data-shape=square][_nghost-%COMP%], [data-size=s][tuiIconButton][_nghost-%COMP%]{width:var(--tui-height-s)}[data-size=m][_nghost-%COMP%]{height:var(--tui-height-m);font:var(--tui-font-text-m);font-weight:bold}[data-size=m][data-shape=square][_nghost-%COMP%], [data-size=m][tuiIconButton][_nghost-%COMP%]{width:var(--tui-height-m)}[data-size=l][_nghost-%COMP%]{height:var(--tui-height-l);font:var(--tui-font-text-m);font-weight:bold}[data-size=l][data-shape=square][_nghost-%COMP%], [data-size=l][tuiIconButton][_nghost-%COMP%]{width:var(--tui-height-l)}[data-size=xl][_nghost-%COMP%]{height:3.75rem;font:var(--tui-font-text-m);font-weight:bold}[data-size=xl][data-shape=square][_nghost-%COMP%], [data-size=xl][tuiIconButton][_nghost-%COMP%]{width:3.75rem}[tuiIconButton][_nghost-%COMP%]{font-size:0!important}[tuiIconButton][_nghost-%COMP%]   .t-left[_ngcontent-%COMP%], [tuiIconButton][_nghost-%COMP%]   .t-right[_ngcontent-%COMP%]{margin:0!important}.t-loader[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;cursor:default}.t-left[_ngcontent-%COMP%]{margin-right:.5rem}[data-size=s][_nghost-%COMP%]   .t-left[_ngcontent-%COMP%]{margin-right:.375rem}[data-size=xs][_nghost-%COMP%]   .t-left[_ngcontent-%COMP%]{margin-right:.25rem}.t-right[_ngcontent-%COMP%]{margin:0 -.25rem 0 .25rem}[data-size=s][_nghost-%COMP%]   .t-right[_ngcontent-%COMP%]{margin:0 -.25rem 0 .375rem}[data-size=xs][_nghost-%COMP%]   .t-right[_ngcontent-%COMP%]{margin:0 -.125rem 0 .25rem}.t-icon[_ngcontent-%COMP%]{display:flex;max-width:100%;max-height:100%;align-items:center;justify-content:center}.t-left[_ngcontent-%COMP%], .t-right[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:center;width:1.5rem;height:1.5rem}[data-size=s][_nghost-%COMP%]   .t-left[_ngcontent-%COMP%], [data-size=s][_nghost-%COMP%]   .t-right[_ngcontent-%COMP%], [data-size=xs][_nghost-%COMP%]   .t-left[_ngcontent-%COMP%], [data-size=xs][_nghost-%COMP%]   .t-right[_ngcontent-%COMP%]{width:1rem;height:1rem}[tuiIconButton][data-appearance=icon][data-size=s][_nghost-%COMP%]   .t-left[_ngcontent-%COMP%], [tuiIconButton][data-appearance=icon][data-size=s][_nghost-%COMP%]   .t-right[_ngcontent-%COMP%], [tuiIconButton][data-appearance=link][data-size=s][_nghost-%COMP%]   .t-left[_ngcontent-%COMP%], [tuiIconButton][data-appearance=link][data-size=s][_nghost-%COMP%]   .t-right[_ngcontent-%COMP%]{width:1.5rem;height:1.5rem}.t-wrapper[_ngcontent-%COMP%]{box-sizing:border-box;cursor:pointer;isolation:isolate}[data-size=xs][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 var(--tui-padding, .375rem)}[data-size=xs][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-width:1px}[data-size=s][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 var(--tui-padding, .75rem)}[data-size=m][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 var(--tui-padding, 1.5rem)}[data-size=l][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 var(--tui-padding, 2.25rem)}[data-size=xl][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 var(--tui-padding, 2.5rem)}[data-shape=square][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%], [tuiIconButton][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0}.t-content[_ngcontent-%COMP%]{display:flex;height:100%;align-items:center;justify-content:center;text-align:center}._loading[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{opacity:0}"],
    changeDetection: 0
  });
  return TuiButtonComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiButtonModule = /*#__PURE__*/(() => {
  class TuiButtonModule {}
  TuiButtonModule.ɵfac = function TuiButtonModule_Factory(t) {
    return new (t || TuiButtonModule)();
  };
  TuiButtonModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: TuiButtonModule
  });
  TuiButtonModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_16__/* .PolymorpheusModule */ .yJ, _taiga_ui_core_directives_wrapper__WEBPACK_IMPORTED_MODULE_15__/* .TuiWrapperModule */ .E, _taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_13__/* .TuiSvgModule */ .vl, _taiga_ui_core_components_loader__WEBPACK_IMPORTED_MODULE_14__/* .TuiLoaderModule */ .Yc]]
  });
  return TuiButtonModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-button.js.map

/***/ }),

/***/ 1974:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ TuiLinkComponent),
/* harmony export */   l: () => (/* binding */ TuiLinkModule)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9835);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2287);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8529);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(4340);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(1410);
/* harmony import */ var _taiga_ui_core_providers__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(7291);
/* harmony import */ var _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8502);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7786);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6354);
/* harmony import */ var _taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(4350);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6412);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_1__);














// @bad TODO: Think about extending Interactive
const _c0 = ["tuiLink", ""];
const _c1 = ["*"];
function TuiLinkComponent_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tui-svg", 3);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r0.icon || "");
  }
}
function TuiLinkComponent_tui_svg_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tui-svg", 4);
  }
  if (rf & 2) {
    const ctx_r0 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx_r0.icon || "");
  }
}
let TuiLinkComponent = /*#__PURE__*/(() => {
  class TuiLinkComponent {
    constructor(el, mode$, focusVisible$) {
      this.el = el;
      this.mode$ = mode$;
      this.pseudo = false;
      this.icon = '';
      this.iconAlign = 'right';
      this.iconRotated = false;
      this.mode = null;
      this.focusVisible = false;
      this.focusedChange = (0,rxjs__WEBPACK_IMPORTED_MODULE_2__/* .merge */ .h)((0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_3__/* .tuiTypedFromEvent */ .xM)(this.el.nativeElement, 'focusin').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__/* .map */ .T)(_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__/* .ALWAYS_TRUE_HANDLER */ .Uq)), (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_3__/* .tuiTypedFromEvent */ .xM)(this.el.nativeElement, 'focusout').pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__/* .map */ .T)(_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__/* .ALWAYS_FALSE_HANDLER */ .Fr)));
      focusVisible$.subscribe(visible => {
        this.focusVisible = visible;
      });
    }
    get nativeFocusableElement() {
      return this.el.nativeElement;
    }
    get focused() {
      return (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .tuiIsNativeFocused */ .X)(this.nativeFocusableElement);
    }
    get hasIcon() {
      return !!this.icon;
    }
    get iconAlignLeft() {
      return this.hasIcon && this.iconAlign === 'left';
    }
    get iconAlignRight() {
      return this.hasIcon && this.iconAlign === 'right';
    }
  }
  TuiLinkComponent.ɵfac = function TuiLinkComponent_Factory(t) {
    return new (t || TuiLinkComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_7__/* .TUI_MODE */ .fL), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_8__/* .TuiFocusVisibleService */ .iF));
  };
  TuiLinkComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: TuiLinkComponent,
    selectors: [["a", "tuiLink", ""], ["button", "tuiLink", ""]],
    hostVars: 7,
    hostBindings: function TuiLinkComponent_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("$.data-mode.attr", function TuiLinkComponent___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        });
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("data-host-mode", ctx.mode);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("_pseudo", ctx.pseudo)("_icon-rotated", ctx.iconRotated)("_focus-visible", ctx.focusVisible);
      }
    },
    inputs: {
      pseudo: "pseudo",
      icon: "icon",
      iconAlign: "iconAlign",
      iconRotated: "iconRotated",
      mode: "mode"
    },
    exportAs: ["tuiLink"],
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([(0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_9__/* .tuiAsFocusableItemAccessor */ .Jr)(TuiLinkComponent), _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_8__/* .TuiFocusVisibleService */ .iF, _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_8__/* .TuiDestroyService */ .ew, _taiga_ui_core_providers__WEBPACK_IMPORTED_MODULE_10__/* .MODE_PROVIDER */ .si])],
    attrs: _c0,
    ngContentSelectors: _c1,
    decls: 4,
    vars: 2,
    consts: [["class", "t-icon t-icon_left", 3, "src", 4, "ngIf"], [1, "t-content"], ["class", "t-icon t-icon_right", 3, "src", 4, "ngIf"], [1, "t-icon", "t-icon_left", 3, "src"], [1, "t-icon", "t-icon_right", 3, "src"]],
    template: function TuiLinkComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, TuiLinkComponent_tui_svg_0_Template, 1, 1, "tui-svg", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "span", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, TuiLinkComponent_tui_svg_3_Template, 1, 1, "tui-svg", 2);
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.iconAlignLeft);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.iconAlignRight);
      }
    },
    dependencies: [_taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_11__/* .TuiSvgComponent */ ._Y, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf],
    styles: ["[_nghost-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;transition-property:color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;color:var(--tui-link);text-align:left;text-transform:inherit;font-weight:inherit;cursor:pointer;outline:none}[_nghost-%COMP%]:hover{color:var(--tui-link-hover)}[_nghost-%COMP%]:disabled{opacity:var(--tui-disabled-opacity);cursor:default}[data-mode=onLight][_nghost-%COMP%]{color:var(--tui-text-02)}[data-mode=onLight][_nghost-%COMP%]:hover, [data-mode=onLight]._active[_nghost-%COMP%]{color:var(--tui-text-01)}[data-mode=onLight]._pseudo[_nghost-%COMP%]{color:var(--tui-text-01)}[data-mode=onLight]._pseudo[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{-webkit-text-decoration-color:rgba(0,0,0,.48);text-decoration-color:#0000007a}[data-mode=onLight]._pseudo[_nghost-%COMP%]:hover, [data-mode=onLight]._pseudo._active[_nghost-%COMP%]{color:var(--tui-text-03)}[data-mode=onLight][data-host-mode=negative][_nghost-%COMP%]{color:var(--tui-negative-night)}[data-mode=onLight][data-host-mode=negative][_nghost-%COMP%]:hover, [data-mode=onLight][data-host-mode=negative][_nghost-%COMP%]:active, [data-mode=onLight][data-host-mode=negative]._active[_nghost-%COMP%]{color:var(--tui-negative-night-hover)}[data-mode=onDark][_nghost-%COMP%]{color:var(--tui-text-03-night)}[data-mode=onDark][_nghost-%COMP%]:hover, [data-mode=onDark][_nghost-%COMP%]:active, [data-mode=onDark]._active[_nghost-%COMP%]{color:var(--tui-text-01-night)}[data-mode=onDark]._pseudo[_nghost-%COMP%]{color:var(--tui-text-01-night)}[data-mode=onDark]._pseudo[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{-webkit-text-decoration-color:rgba(255,255,255,.48);text-decoration-color:#ffffff7a}[data-mode=onDark]._pseudo[_nghost-%COMP%]:hover, [data-mode=onDark]._pseudo[_nghost-%COMP%]:active, [data-mode=onDark]._pseudo._active[_nghost-%COMP%]{color:var(--tui-text-03-night)}[data-mode=onDark][data-host-mode=positive][_nghost-%COMP%]{color:var(--tui-positive-night)}[data-mode=onDark][data-host-mode=positive][_nghost-%COMP%]:hover, [data-mode=onDark][data-host-mode=positive][_nghost-%COMP%]:active, [data-mode=onDark][data-host-mode=positive]._active[_nghost-%COMP%]{color:var(--tui-positive-night-hover)}[data-host-mode=negative][_nghost-%COMP%]{color:var(--tui-negative)}[data-host-mode=negative][_nghost-%COMP%]:hover{color:var(--tui-negative-hover)}[data-host-mode=negative]._pseudo[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{-webkit-text-decoration-color:rgba(222,76,30,.48);text-decoration-color:#de4c1e7a}[data-host-mode=positive][_nghost-%COMP%]{color:var(--tui-positive)}[data-host-mode=positive][_nghost-%COMP%]:hover{color:var(--tui-positive-hover)}[data-host-mode=positive]._pseudo[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{-webkit-text-decoration-color:rgba(58,169,129,.48);text-decoration-color:#3aa9817a}._focus-visible[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{background:var(--tui-selection)}[data-mode=onLight]._focus-visible[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{background:var(--tui-clear);color:var(--tui-text-01)}[data-mode=onDark]._focus-visible[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{background:var(--tui-clear-inverse);color:var(--tui-text-01-night)}[data-host-mode=positive]._focus-visible[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{background:var(--tui-success-bg)}[data-host-mode=negative]._focus-visible[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{background:var(--tui-error-bg)}._pseudo[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding-bottom:.15em;-webkit-text-decoration:underline dashed rgba(51,111,238,.48);text-decoration:underline dashed rgba(51,111,238,.48);text-underline-offset:.2em;text-decoration-thickness:.7px}.t-icon[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;width:var(--tui-link-icon-size, 1.5rem);height:var(--tui-link-icon-size, 1.5rem);margin-top:-.125rem}.t-icon_left[_ngcontent-%COMP%]{margin-right:.25rem}.t-icon_right[_ngcontent-%COMP%]{margin-left:.25rem}._icon-rotated[_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:rotate(180deg)}"],
    changeDetection: 0
  });
  return TuiLinkComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiLinkModule = /*#__PURE__*/(() => {
  class TuiLinkModule {}
  TuiLinkModule.ɵfac = function TuiLinkModule_Factory(t) {
    return new (t || TuiLinkModule)();
  };
  TuiLinkModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: TuiLinkModule
  });
  TuiLinkModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_11__/* .TuiSvgModule */ .vl]]
  });
  return TuiLinkModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-link.js.map

/***/ }),

/***/ 6249:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Yc: () => (/* binding */ TuiLoaderModule),
/* harmony export */   jT: () => (/* binding */ TuiLoaderComponent)
/* harmony export */ });
/* unused harmony exports TUI_LOADER_DEFAULT_OPTIONS, TUI_LOADER_OPTIONS, tuiLoaderOptionsProvider */
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6412);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9925);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7969);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8529);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1410);
/* harmony import */ var _taiga_ui_core_utils_miscellaneous__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(465);
/* harmony import */ var _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(800);









/** Default values for the loader options. */
const _c0 = ["*"];
function TuiLoaderComponent_div_2_div_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtext"](1);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtextInterpolate1"](" ", text_r1, " ");
  }
}
function TuiLoaderComponent_div_2_div_3_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, TuiLoaderComponent_div_2_div_3_ng_container_1_Template, 2, 1, "ng-container", 7);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("t-text_horizontal", ctx_r1.isHorizontal);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.textContent);
  }
}
function TuiLoaderComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "div", 2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](1, "svg", 3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](2, "circle", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](3, TuiLoaderComponent_div_2_div_3_Template, 2, 3, "div", 5);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("t-loader_horizontal", ctx_r1.isHorizontal)("t-loader_inherit-color", ctx_r1.inheritColor);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("data-size", ctx_r1.size);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](3);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r1.hasText);
  }
}
const TUI_LOADER_DEFAULT_OPTIONS = {
  size: 'm',
  inheritColor: false,
  overlay: false
};
/**
 * Default parameters for loader component
 */
const TUI_LOADER_OPTIONS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_2__/* .tuiCreateToken */ .gc)(TUI_LOADER_DEFAULT_OPTIONS);
function tuiLoaderOptionsProvider(options) {
  return tuiProvideOptions(TUI_LOADER_OPTIONS, options, TUI_LOADER_DEFAULT_OPTIONS);
}
let TuiLoaderComponent = /*#__PURE__*/(() => {
  class TuiLoaderComponent {
    constructor(doc, el, isIos, options) {
      this.doc = doc;
      this.el = el;
      this.isIos = isIos;
      this.options = options;
      this.size = this.options.size;
      this.inheritColor = this.options.inheritColor;
      this.overlay = this.options.overlay;
      this.loading = true;
      this.isApple = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_3__/* .tuiIsSafari */ .Pr)(this.el.nativeElement) || this.isIos;
    }
    set showLoader(value) {
      // @bad TODO: https://github.com/angular/angular/issues/32083 think of a better way
      if (value && this.focused) {
        (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_4__/* .tuiBlurNativeFocused */ .SI)(this.doc);
      }
      this.loading = value;
    }
    get hasOverlay() {
      return this.overlay && this.loading;
    }
    get hasText() {
      return !!this.textContent;
    }
    get isHorizontal() {
      return !(0,_taiga_ui_core_utils_miscellaneous__WEBPACK_IMPORTED_MODULE_5__/* .tuiSizeBigger */ .Wu)(this.size);
    }
    get focused() {
      return (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_4__/* .tuiIsNativeFocusedIn */ .Ij)(this.el.nativeElement);
    }
  }
  TuiLoaderComponent.ɵfac = function TuiLoaderComponent_Factory(t) {
    return new (t || TuiLoaderComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .TUI_IS_IOS */ .mg), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](TUI_LOADER_OPTIONS));
  };
  TuiLoaderComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
    type: TuiLoaderComponent,
    selectors: [["tui-loader"]],
    hostVars: 2,
    hostBindings: function TuiLoaderComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("_loading", ctx.loading);
      }
    },
    inputs: {
      size: "size",
      inheritColor: "inheritColor",
      overlay: "overlay",
      textContent: "textContent",
      showLoader: "showLoader"
    },
    ngContentSelectors: _c0,
    decls: 3,
    vars: 7,
    consts: [[1, "t-content", 3, "disabled"], ["class", "t-loader", 3, "t-loader_horizontal", "t-loader_inherit-color", 4, "ngIf"], [1, "t-loader"], ["automation-id", "tui-loader__loader", "focusable", "false", "viewBox", "0 0 100 100", "xmlns", "http://www.w3.org/2000/svg", 1, "t-icon"], ["cx", "50", "cy", "50", "r", "50", "stroke-dasharray", "314", 1, "t-circle"], ["automation-id", "tui-loader__text", "class", "t-text", 3, "t-text_horizontal", 4, "ngIf"], ["automation-id", "tui-loader__text", 1, "t-text"], [4, "polymorpheusOutlet"]],
    template: function TuiLoaderComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojectionDef"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "fieldset", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵprojection"](1);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](2, TuiLoaderComponent_div_2_Template, 4, 6, "div", 1);
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵclassProp"]("t-content_has-overlay", ctx.hasOverlay)("t-content_loading", ctx.loading);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("disabled", ctx.loading && !ctx.isApple);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("inert", ctx.loading || null);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx.loading);
      }
    },
    dependencies: [_angular_common__WEBPACK_IMPORTED_MODULE_0__.NgIf, _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_7__/* .PolymorpheusOutletDirective */ .OA],
    styles: ["@keyframes _ngcontent-%COMP%_tuiLoaderDashOffset{0%{stroke-dashoffset:-66}50%{stroke-dashoffset:-314}to{stroke-dashoffset:-66}}@keyframes _ngcontent-%COMP%_tuiLoaderRotate{0%{transform:rotate(0)}50%{transform:rotate(1turn)}to{transform:rotate(3turn)}}[_nghost-%COMP%]{position:relative;display:flex;min-width:1.5rem}._loading[_nghost-%COMP%]{overflow:hidden}.t-content[_ngcontent-%COMP%]{z-index:0;min-width:100%;height:100%;padding:0;margin:0;border:none}.t-content_has-overlay[_ngcontent-%COMP%]{opacity:.3}.t-content_loading[_ngcontent-%COMP%]{pointer-events:none}.t-loader[_ngcontent-%COMP%]{position:relative;left:-100%;display:flex;flex-direction:column;align-items:center;justify-content:center;min-width:100%;flex-shrink:0;align-self:center;color:var(--tui-text-01);stroke:var(--tui-primary);animation:tuiFadeIn var(--tui-duration)}.t-loader.t-loader_horizontal[_ngcontent-%COMP%]{flex-direction:row}.t-loader.t-loader_inherit-color[_ngcontent-%COMP%]{color:inherit;stroke:currentColor}.t-loader[data-size=xs][_ngcontent-%COMP%]{font-size:.75rem;stroke-width:38}.t-loader[data-size=s][_ngcontent-%COMP%]{font-size:1rem;stroke-width:25}.t-loader[data-size=m][_ngcontent-%COMP%]{font-size:1.5rem;stroke-width:17}.t-loader[data-size=l][_ngcontent-%COMP%]{font-size:2.5rem;stroke-width:15}.t-loader[data-size=xl][_ngcontent-%COMP%]{font-size:3.5rem;stroke-width:14}.t-loader[data-size=xxl][_ngcontent-%COMP%]{font-size:5rem;stroke-width:10}.t-text[_ngcontent-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-top:1rem;color:inherit;max-width:100%;text-align:center;stroke-width:0}.t-text_horizontal[_ngcontent-%COMP%]{margin:0 0 0 1rem}.t-icon[_ngcontent-%COMP%]{display:block;min-width:1em;max-width:1em;min-height:1em;max-height:1em;margin:.25rem -.5em;border-radius:100%;overflow:hidden;transform:scaleY(-1);animation:_ngcontent-%COMP%_tuiLoaderRotate 3s linear infinite}@supports (-webkit-hyphens: none){.t-icon[_ngcontent-%COMP%]{overflow:visible}}.t-circle[_ngcontent-%COMP%]{fill:none;stroke:inherit;stroke-width:inherit;animation:_ngcontent-%COMP%_tuiLoaderDashOffset 3s linear infinite}"],
    changeDetection: 0
  });
  return TuiLoaderComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiLoaderModule = /*#__PURE__*/(() => {
  class TuiLoaderModule {}
  TuiLoaderModule.ɵfac = function TuiLoaderModule_Factory(t) {
    return new (t || TuiLoaderModule)();
  };
  TuiLoaderModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
    type: TuiLoaderModule
  });
  TuiLoaderModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
    imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_0__.CommonModule, _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_7__/* .PolymorpheusModule */ .yJ]]
  });
  return TuiLoaderModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-loader.js.map

/***/ }),

/***/ 8821:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ TuiNotificationModule),
/* harmony export */   v: () => (/* binding */ TuiNotificationComponent)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9835);
/* harmony import */ var _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8502);
/* harmony import */ var _taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4350);
/* harmony import */ var _taiga_ui_core_components_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(2782);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6412);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(800);













const _c0 = ["*"];
const _c1 = a0 => ({
  $implicit: a0
});
function TuiNotificationComponent_ng_container_0_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "tui-svg", 5);
  }
  if (rf & 2) {
    const iconName_r1 = ctx.polymorpheusOutlet;
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", iconName_r1);
  }
}
function TuiNotificationComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](1, TuiNotificationComponent_ng_container_0_tui_svg_1_Template, 1, 1, "tui-svg", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("polymorpheusOutlet", ctx_r1.icon)("polymorpheusOutletContext", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpureFunction1"](2, _c1, ctx_r1.status));
  }
}
function TuiNotificationComponent_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](0, "button", 6);
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipe"](1, "async");
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("click", function TuiNotificationComponent_button_3_Template_button_click_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵrestoreView"](_r3);
      const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
      return _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵresetView"](ctx_r1.close.emit());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("icon", ctx_r1.icons.close)("title", _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpipeBind1"](1, 2, ctx_r1.closeWord$));
  }
}
let TuiNotificationComponent = /*#__PURE__*/(() => {
  class TuiNotificationComponent {
    constructor(closeWord$, icons, options) {
      this.closeWord$ = closeWord$;
      this.icons = icons;
      this.options = options;
      /**
       * @deprecated Use {@link TuiNotificationComponent.icon} input or TUI_NOTIFICATION_OPTIONS instead
       */
      this.hasIcon = this.options.hasIcon;
      this.icon = this.options.icon;
      this.status = this.options.status;
      this.size = this.options.size;
      this.hideClose = false;
      this.close = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.EventEmitter();
    }
    get hasClose() {
      return !this.hideClose && (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_2__/* .tuiIsObserved */ .Pj)(this.close);
    }
  }
  TuiNotificationComponent.ɵfac = function TuiNotificationComponent_Factory(t) {
    return new (t || TuiNotificationComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_3__/* .TUI_CLOSE_WORD */ .R3), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_3__/* .TUI_COMMON_ICONS */ ._Z), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_3__/* .TUI_NOTIFICATION_OPTIONS */ .Ub));
  };
  TuiNotificationComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({
    type: TuiNotificationComponent,
    selectors: [["tui-notification"], ["a", "tuiNotification", ""], ["button", "tuiNotification", ""]],
    hostVars: 2,
    hostBindings: function TuiNotificationComponent_HostBindings(rf, ctx) {
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("data-status", ctx.status)("data-size", ctx.size);
      }
    },
    inputs: {
      hasIcon: "hasIcon",
      icon: "icon",
      status: "status",
      size: "size",
      hideClose: "hideClose"
    },
    outputs: {
      close: "close"
    },
    ngContentSelectors: _c0,
    decls: 5,
    vars: 3,
    consts: [[4, "ngIf"], [1, "t-content"], ["appearance", "icon", "automation-id", "tui-notification__close", "size", "xs", "tuiIconButton", "", "type", "button", "class", "t-close", 3, "icon", "title", "click", 4, "ngIf"], ["automation-id", "tui-notification__more", 1, "t-more", 3, "src"], ["automation-id", "tui-notification__icon", "class", "t-icon", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-notification__icon", 1, "t-icon", 3, "src"], ["appearance", "icon", "automation-id", "tui-notification__close", "size", "xs", "tuiIconButton", "", "type", "button", 1, "t-close", 3, "click", "icon", "title"]],
    template: function TuiNotificationComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojectionDef"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](0, TuiNotificationComponent_ng_container_0_Template, 2, 4, "ng-container", 0);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementStart"](1, "div", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵprojection"](2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelementEnd"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵtemplate"](3, TuiNotificationComponent_button_3_Template, 2, 4, "button", 2);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](4, "tui-svg", 3);
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.icon && ctx.hasIcon);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"](3);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("ngIf", ctx.hasClose);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵadvance"]();
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵproperty"]("src", ctx.icons.more);
      }
    },
    dependencies: [_taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_4__/* .TuiSvgComponent */ ._Y, _taiga_ui_core_components_button__WEBPACK_IMPORTED_MODULE_5__/* .TuiButtonComponent */ .SM, _angular_common__WEBPACK_IMPORTED_MODULE_1__.NgIf, _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_6__/* .PolymorpheusOutletDirective */ .OA, _angular_common__WEBPACK_IMPORTED_MODULE_1__.AsyncPipe],
    styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:flex;padding:.75rem 1rem;border-radius:var(--tui-radius-m);background:#fff;background:var(--tui-base-01);box-sizing:border-box;overflow:hidden}[_nghost-%COMP%]   .t-more[_ngcontent-%COMP%]{display:none}button[_nghost-%COMP%], a[_nghost-%COMP%]{border:none;cursor:pointer}button[_nghost-%COMP%]   .t-more[_ngcontent-%COMP%], a[_nghost-%COMP%]   .t-more[_ngcontent-%COMP%]{display:inline-flex;color:var(--tui-text-01);opacity:.5}[data-size=s][_nghost-%COMP%]{padding:.375rem .625rem}[data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{width:1rem;height:1.25rem;margin:0 .375rem 0 -.125rem}[data-size=s][_nghost-%COMP%]   .t-close[_ngcontent-%COMP%]{margin:-.125rem -.375rem -.125rem .75rem}[data-size=s][_nghost-%COMP%]   .t-more[_ngcontent-%COMP%]{margin:-.125rem -.375rem -.125rem 0}[data-size=m][_nghost-%COMP%]{padding:.75rem}[data-size=m][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{width:1.25rem;height:1.25rem;margin-right:.5rem}[data-size=m][_nghost-%COMP%]   .t-close[_ngcontent-%COMP%]{margin:-.125rem -.125rem -.125rem 1rem}[data-size=m][_nghost-%COMP%]   .t-more[_ngcontent-%COMP%]{margin:-.125rem -.375rem -.125rem 0}[data-size=l][_nghost-%COMP%]{padding:1rem;font:var(--tui-font-text-m);border-radius:var(--tui-radius-l)}[data-size=l][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{width:1.5rem;height:1.5rem;margin-right:.5rem}[data-size=l][_nghost-%COMP%]   .t-more[_ngcontent-%COMP%]{margin-right:-.5rem}[data-status=info][_nghost-%COMP%]{color:var(--tui-info-fill);background:linear-gradient(var(--tui-info-bg),var(--tui-info-bg)),var(--tui-base-01)}[data-status=success][_nghost-%COMP%]{color:var(--tui-success-fill);background:linear-gradient(var(--tui-success-bg),var(--tui-success-bg)),var(--tui-base-01)}[data-status=error][_nghost-%COMP%]{color:var(--tui-error-fill);background:linear-gradient(var(--tui-error-bg),var(--tui-error-bg)),var(--tui-base-01)}[data-status=warning][_nghost-%COMP%]{color:var(--tui-warning-fill);background:linear-gradient(var(--tui-warning-bg),var(--tui-warning-bg)),var(--tui-base-01)}[data-status=neutral][_nghost-%COMP%]{color:var(--tui-neutral-fill);background:linear-gradient(var(--tui-neutral-bg),var(--tui-neutral-bg)),var(--tui-base-01)}.t-content[_ngcontent-%COMP%]{flex:1;word-break:break-word;color:var(--tui-text-01);text-align:left;align-self:center}"],
    changeDetection: 0
  });
  return TuiNotificationComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiNotificationModule = /*#__PURE__*/(() => {
  class TuiNotificationModule {}
  TuiNotificationModule.ɵfac = function TuiNotificationModule_Factory(t) {
    return new (t || TuiNotificationModule)();
  };
  TuiNotificationModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: TuiNotificationModule
  });
  TuiNotificationModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({
    imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_1__.CommonModule, _taiga_ui_core_components_svg__WEBPACK_IMPORTED_MODULE_4__/* .TuiSvgModule */ .vl, _taiga_ui_core_components_button__WEBPACK_IMPORTED_MODULE_5__/* .TuiButtonModule */ .Pv, _tinkoff_ng_polymorpheus__WEBPACK_IMPORTED_MODULE_6__/* .PolymorpheusModule */ .yJ]]
  });
  return TuiNotificationModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-notification.js.map

/***/ }),

/***/ 4350:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   _Y: () => (/* binding */ TuiSvgComponent),
/* harmony export */   vl: () => (/* binding */ TuiSvgModule)
/* harmony export */ });
/* unused harmony exports TUI_DEPRECATED_ICONS, TUI_SVG_DEFAULT_OPTIONS, TUI_SVG_OPTIONS, TUI_SVG_SRC_INTERCEPTORS, tuiSvgOptionsProvider, tuiSvgSrcInterceptors */
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(1635);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6412);
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_common__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(345);
/* harmony import */ var _ng_web_apis_common__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(3864);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(4191);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(95);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9925);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(4489);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(5001);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(4340);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(1410);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(4343);
/* harmony import */ var _taiga_ui_core_constants__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(8048);
/* harmony import */ var _taiga_ui_core_services__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(1193);
/* harmony import */ var _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8502);
/* harmony import */ var _taiga_ui_core_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(465);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3669);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(2771);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(7673);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(5558);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9172);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9437);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(6354);


















function TuiSvgComponent_ng_container_0_div_1_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "div", 3);
  }
  if (rf & 2) {
    const innerHTML_r1 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]().tuiLet;
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("innerHTML", innerHTML_r1, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsanitizeHtml"]);
  }
}
function TuiSvgComponent_ng_container_0_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵgetCurrentView"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnamespaceSVG"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementStart"](0, "svg", 4);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("error", function TuiSvgComponent_ng_container_0_ng_template_2_Template_svg_error_0_listener() {
      _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵrestoreView"](_r2);
      const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);
      return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵresetView"](ctx_r2.onError());
    });
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](1, "use");
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementEnd"]();
  }
  if (rf & 2) {
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"](2);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("href", ctx_r2.use, null, "xlink");
  }
}
function TuiSvgComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerStart"](0);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](1, TuiSvgComponent_ng_container_0_div_1_Template, 1, 1, "div", 2)(2, TuiSvgComponent_ng_container_0_ng_template_2_Template, 2, 1, "ng-template", null, 0, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplateRefExtractor"]);
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelementContainerEnd"]();
  }
  if (rf & 2) {
    const useTemplate_r4 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵreference"](3);
    const ctx_r2 = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵnextContext"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵadvance"]();
    _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("ngIf", ctx_r2.isInnerHTML)("ngIfElse", useTemplate_r4);
  }
}
const TUI_DEPRECATED_ICONS = {
  tuiIconAttach: 'tuiIconPaperclip',
  tuiIconAttention: 'tuiIconAlertCircle',
  tuiIconBackCircle: 'tuiIconArrowLeftCircle',
  tuiIconCall: 'tuiIconPhone',
  tuiIconCallIn: 'tuiIconPhoneIncoming',
  tuiIconCallOut: 'tuiIconPhoneOutgoing',
  tuiIconCallTransfer: 'tuiIconPhoneForwarded',
  tuiIconCancel: 'tuiIconXCircle',
  tuiIconCancelCircle: 'tuiIconSlash',
  tuiIconCard: 'tuiIconCreditCard',
  tuiIconCards: 'tuiIconCreditCard',
  tuiIconChartBar: 'tuiIconBarChart',
  tuiIconChart: 'tuiIconBarChart',
  tuiIconCheckList: 'tuiIconClipboard',
  tuiIconCloseCircle: 'tuiIconXCircle',
  tuiIconCollapse: 'tuiIconMinimize',
  tuiIconComment: 'tuiIconMessageSquare',
  tuiIconCommentFw: 'tuiIconMessageForward',
  tuiIconCompany: 'tuiIconBriefcase',
  tuiIconDefaultDoc: 'tuiIconFile',
  tuiIconDesktop: 'tuiIconMonitor',
  tuiIconDesktopOff: 'tuiIconMonitorOff',
  tuiIconDislike: 'tuiIconThumbsDown',
  tuiIconDone: 'tuiIconCheckCircle',
  tuiIconDraft: 'tuiIconEdit2',
  tuiIconEyeOpen: 'tuiIconEye',
  tuiIconEyeClosed: 'tuiIconEyeOff',
  tuiIconExpand: 'tuiIconMaximize',
  tuiIconExternal: 'tuiIconExternalLink',
  tuiIconFrame: 'tuiIconLayout',
  tuiIconGeo: 'tuiIconMapPin',
  tuiIconHeartFilled: 'tuiIconHeart',
  tuiIconHide: 'tuiIconEyeOff',
  tuiIconImg: 'tuiIconImage',
  tuiIconInfoCircle: 'tuiIconInfo',
  tuiIconLike: 'tuiIconThumbsUp',
  tuiIconLockOpen: 'tuiIconUnlock',
  tuiIconMobile: 'tuiIconSmartphone',
  tuiIconMoreHor: 'tuiIconMoreHorizontal',
  tuiIconMoreVer: 'tuiIconMoreVertical',
  tuiIconMoreVert: 'tuiIconMoreVertical',
  tuiIconPicture: 'tuiIconImage',
  tuiIconPin: 'tuiIconMapPin',
  tuiIconPrint: 'tuiIconPrinter',
  tuiIconRefresh: 'tuiIconRefreshCw',
  tuiIconRemove: 'tuiIconX',
  tuiIconShow: 'tuiIconEye',
  tuiIconSound: 'tuiIconVolume',
  tuiIconSoundOff: 'tuiIconVolumeX',
  tuiIconStarFilled: 'tuiIconStar',
  tuiIconStop: 'tuiIconSquare',
  tuiIconStructure: 'tuiIconGrid',
  tuiIconTime: 'tuiIconClock',
  tuiIconTooltip: 'tuiIconHelpCircle',
  tuiIconViewList: 'tuiIconList',
  tuiIconWifiOn: 'tuiIconWifi'
};
const TUI_SVG_DEFAULT_OPTIONS = {
  iconsPlace: _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__/* .TUI_DEFAULT_ICONS_PLACE */ .QU,
  path: (0,_taiga_ui_core_utils__WEBPACK_IMPORTED_MODULE_3__/* .tuiIconsPathFactory */ .yu)(_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__/* .TUI_DEFAULT_ICONS_PLACE */ .QU),
  srcProcessor: rxjs__WEBPACK_IMPORTED_MODULE_4__/* .identity */ .D,
  contentProcessor: _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__/* .tuiSvgLinearGradientProcessor */ .o,
  deprecated: src => {
    const oldIcon = src.replace('Large', '').replace('Outline', '');
    const newIcon = TUI_DEPRECATED_ICONS[oldIcon];
    return newIcon ? `${oldIcon}/(Large|Outline) is deprecated, use ${newIcon}/(Large|Outline) instead` : '';
  }
};
/**
 * SVG component options
 */
const TUI_SVG_OPTIONS = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .tuiCreateTokenFromFactory */ .ET)(() => ({
  iconsPlace: (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__/* .TUI_ICONS_PLACE */ .YX),
  path: (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__/* .TUI_ICONS_PATH */ ._t),
  deprecated: TUI_SVG_DEFAULT_OPTIONS.deprecated,
  srcProcessor: (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__/* .TUI_SVG_SRC_PROCESSOR */ .Qy),
  contentProcessor: (0,_angular_core__WEBPACK_IMPORTED_MODULE_1__.inject)(_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__/* .TUI_SVG_CONTENT_PROCESSOR */ .Rm)
}));
const TUI_SVG_SRC_INTERCEPTORS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__.InjectionToken('[TUI_SVG_SRC_INTERCEPTORS]');
function tuiSvgSrcInterceptors(interceptor) {
  return {
    provide: TUI_SVG_SRC_INTERCEPTORS,
    useValue: interceptor,
    multi: true
  };
}
const tuiSvgOptionsProvider = options => ({
  provide: TUI_SVG_OPTIONS,
  deps: [[new SkipSelf(), new Optional(), TUI_SVG_OPTIONS], [new Optional(), TUI_ICONS_PLACE], [new Optional(), TUI_ICONS_PATH], [new Optional(), TUI_SVG_SRC_PROCESSOR], [new Optional(), TUI_SVG_CONTENT_PROCESSOR]],
  useFactory: (fallback, iconsPlace, path, srcProcessor, contentProcessor) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;
    return {
      iconsPlace: (_c = (_b = (_a = options.iconsPlace) !== null && _a !== void 0 ? _a : fallback === null || fallback === void 0 ? void 0 : fallback.iconsPlace) !== null && _b !== void 0 ? _b : iconsPlace) !== null && _c !== void 0 ? _c : TUI_SVG_DEFAULT_OPTIONS.iconsPlace,
      path: tuiIsString(options.path) ? tuiIconsPathFactory(options.path) : (_f = (_e = (_d = options.path) !== null && _d !== void 0 ? _d : fallback === null || fallback === void 0 ? void 0 : fallback.path) !== null && _e !== void 0 ? _e : path) !== null && _f !== void 0 ? _f : TUI_SVG_DEFAULT_OPTIONS.path,
      deprecated: (_h = (_g = options.deprecated) !== null && _g !== void 0 ? _g : fallback === null || fallback === void 0 ? void 0 : fallback.deprecated) !== null && _h !== void 0 ? _h : TUI_SVG_DEFAULT_OPTIONS.deprecated,
      srcProcessor: (_l = (_k = (_j = options.srcProcessor) !== null && _j !== void 0 ? _j : fallback === null || fallback === void 0 ? void 0 : fallback.srcProcessor) !== null && _k !== void 0 ? _k : srcProcessor) !== null && _l !== void 0 ? _l : TUI_SVG_DEFAULT_OPTIONS.srcProcessor,
      contentProcessor: (_p = (_o = (_m = options.contentProcessor) !== null && _m !== void 0 ? _m : fallback === null || fallback === void 0 ? void 0 : fallback.contentProcessor) !== null && _o !== void 0 ? _o : contentProcessor) !== null && _p !== void 0 ? _p : TUI_SVG_DEFAULT_OPTIONS.contentProcessor
    };
  }
});
const UNDEFINED_NAMED_ICON = 'Attempted to use undefined named icon';
const MISSING_EXTERNAL_ICON = 'External icon is missing on the given URL';
const FAILED_EXTERNAL_ICON = 'Failed to load external SVG';
// TODO: Consider moving to CDK along with SvgService and SvgDefsHostComponent
let TuiSvgComponent = /*#__PURE__*/(() => {
  class TuiSvgComponent {
    constructor(doc, win, options, srcInterceptors, tuiSanitizer, svgService, staticRequestService, sanitizer, el, baseHref) {
      this.doc = doc;
      this.win = win;
      this.options = options;
      this.srcInterceptors = srcInterceptors;
      this.tuiSanitizer = tuiSanitizer;
      this.svgService = svgService;
      this.staticRequestService = staticRequestService;
      this.sanitizer = sanitizer;
      this.el = el;
      this.baseHref = baseHref;
      this.src$ = new rxjs__WEBPACK_IMPORTED_MODULE_7__/* .ReplaySubject */ .m(1);
      this.icon = '';
      this.innerHTML$ = this.src$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_8__/* .switchMap */ .n)(() => {
        if ((0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .tuiIsString */ .YB)(this.icon)) {
          return this.isExternal ? this.getExternalIcon(this.icon) : (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(this.getSafeHtml(this.icon));
        }
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)(this.icon);
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__/* .startWith */ .Z)(''));
    }
    set src(src) {
      var _a;
      const deprecated = this.options.deprecated(String(src));
      ngDevMode && _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_11__/* .tuiAssert */ .B.assert(!deprecated, deprecated);
      this.icon = ((_a = this.srcInterceptors) !== null && _a !== void 0 ? _a : []).reduce((newSrc, interceptor) => interceptor(newSrc, this.options), this.options.srcProcessor(src || ''));
      this.src$.next();
    }
    get src() {
      return this.icon;
    }
    get use() {
      if ((0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .tuiIsString */ .YB)(this.icon)) {
        return this.icon.includes('.svg#') ? this.icon : this.resolveName(this.icon, this.options.path);
      }
      return '';
    }
    get isInnerHTML() {
      return !(0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .tuiIsString */ .YB)(this.icon) || this.isSrc || this.isExternal || this.isName && this.isShadowDOM;
    }
    get isShadowDOM() {
      return (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_12__/* .tuiGetDocumentOrShadowRoot */ .dd)(this.el.nativeElement) !== this.doc;
    }
    get isUse() {
      return this.use.replace(_taiga_ui_core_constants__WEBPACK_IMPORTED_MODULE_13__/* .TUI_CACHE_BUSTING_PAYLOAD */ .sf, '').includes('.svg#');
    }
    get isExternal() {
      return this.isUrl || this.isCrossDomain;
    }
    get isUrl() {
      return (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .tuiIsString */ .YB)(this.icon) && this.icon.replace(_taiga_ui_core_constants__WEBPACK_IMPORTED_MODULE_13__/* .TUI_CACHE_BUSTING_PAYLOAD */ .sf, '').endsWith('.svg');
    }
    get isSrc() {
      return (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .tuiIsString */ .YB)(this.icon) && (0,_taiga_ui_core_utils__WEBPACK_IMPORTED_MODULE_3__/* .tuiIsPresumedHTMLString */ .cJ)(this.icon);
    }
    get isName() {
      return !this.isUrl && !this.isUse && !this.isSrc;
    }
    get isCrossDomain() {
      const {
        use,
        isUse,
        win
      } = this;
      return isUse && use.startsWith('http') && !!win.origin && !use.startsWith(win.origin);
    }
    onError(message = MISSING_EXTERNAL_ICON) {
      const {
        icon
      } = this;
      const event = new CustomEvent(_taiga_ui_core_constants__WEBPACK_IMPORTED_MODULE_13__/* .TUI_ICON_ERROR */ .s8, {
        bubbles: true,
        detail: {
          message,
          icon: icon
        }
      });
      ngDevMode && _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_11__/* .tuiAssert */ .B.assert(false, message, icon);
      this.el.nativeElement.dispatchEvent(event);
    }
    resolveName(name, iconsPath) {
      return iconsPath(name, this.baseHref);
    }
    getSafeHtml(src) {
      return this.isSrc ? this.sanitize(src) : this.process(src);
    }
    process(src) {
      const icon = this.svgService.getOriginal(src);
      if (this.isName && !icon && !!src) {
        this.onError(UNDEFINED_NAMED_ICON);
      }
      // Empty line for innerHTML when icon is shown through USE tag
      return !this.isShadowDOM || !this.isName ? '' : this.sanitize(icon || '');
    }
    sanitize(src) {
      src = this.options.contentProcessor(src);
      return this.tuiSanitizer && (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_6__/* .tuiIsString */ .YB)(src) ? this.sanitizer.bypassSecurityTrustHtml(this.tuiSanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_1__.SecurityContext.HTML, src) || '') : src;
    }
    getExternalIcon(src) {
      const url = src.includes('.svg') ? src : this.use;
      return this.staticRequestService.request(url).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_14__/* .catchError */ .W)(() => {
        this.onError(FAILED_EXTERNAL_ICON);
        return (0,rxjs__WEBPACK_IMPORTED_MODULE_9__.of)('');
      }), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_15__/* .map */ .T)(response => this.sanitize(response.replace('<svg', '<svg focusable="false"'))));
    }
  }
  TuiSvgComponent.ɵfac = function TuiSvgComponent_Factory(t) {
    return new (t || TuiSvgComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__.DOCUMENT), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_ng_web_apis_common__WEBPACK_IMPORTED_MODULE_16__/* .WINDOW */ .jf), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](TUI_SVG_OPTIONS), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](TUI_SVG_SRC_INTERCEPTORS, 8), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__/* .TUI_SANITIZER */ .rf, 8), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_taiga_ui_core_services__WEBPACK_IMPORTED_MODULE_17__/* .TuiSvgService */ .kd), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_18__/* .TuiStaticRequestService */ .FR), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_19__/* .DomSanitizer */ .up), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_20__/* .TUI_BASE_HREF */ .t2));
  };
  TuiSvgComponent.ɵcmp = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({
    type: TuiSvgComponent,
    selectors: [["tui-svg"]],
    inputs: {
      src: "src"
    },
    decls: 2,
    vars: 3,
    consts: [["useTemplate", ""], [4, "tuiLet"], ["class", "t-src", 3, "innerHTML", 4, "ngIf", "ngIfElse"], [1, "t-src", 3, "innerHTML"], ["focusable", "false", "height", "100%", "version", "1.1", "width", "100%", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", "xmlns", "http://www.w3.org/2000/svg", 1, "t-svg", 3, "error"]],
    template: function TuiSvgComponent_Template(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵtemplate"](0, TuiSvgComponent_ng_container_0_Template, 4, 2, "ng-container", 1);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpipe"](1, "async");
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵproperty"]("tuiLet", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵpipeBind1"](1, 1, ctx.innerHTML$));
      }
    },
    dependencies: [_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_21__/* .TuiLetDirective */ .Nx, _angular_common__WEBPACK_IMPORTED_MODULE_0__.NgIf, _angular_common__WEBPACK_IMPORTED_MODULE_0__.AsyncPipe],
    styles: ["[_nghost-%COMP%]{display:inline-flex;vertical-align:middle;flex-shrink:0;align-items:center;justify-content:center;line-height:0;height:1.5rem;width:1.5rem;fill:transparent;stroke:transparent;font-size:1rem}.t-src[_ngcontent-%COMP%]{display:flex;width:100%;height:100%;align-items:center;justify-content:center}.t-svg[_ngcontent-%COMP%]{overflow:visible}"],
    changeDetection: 0
  });
  (0,tslib__WEBPACK_IMPORTED_MODULE_22__/* .__decorate */ .Cg)([_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_23__/* .tuiPure */ .PE], TuiSvgComponent.prototype, "resolveName", null);
  return TuiSvgComponent;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiSvgModule = /*#__PURE__*/(() => {
  class TuiSvgModule {}
  TuiSvgModule.ɵfac = function TuiSvgModule_Factory(t) {
    return new (t || TuiSvgModule)();
  };
  TuiSvgModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({
    type: TuiSvgModule
  });
  TuiSvgModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({
    imports: [[_angular_common__WEBPACK_IMPORTED_MODULE_0__.CommonModule, _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_21__/* .TuiLetModule */ .ks]]
  });
  return TuiSvgModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-components-svg.js.map

/***/ }),

/***/ 8048:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   G$: () => (/* binding */ TUI_HINT_DIRECTIONS),
/* harmony export */   RK: () => (/* binding */ TUI_DEFAULT_NUMBER_FORMAT),
/* harmony export */   Uk: () => (/* binding */ TUI_SCROLL_INTO_VIEW),
/* harmony export */   V3: () => (/* binding */ tuiEditingKeys),
/* harmony export */   Vp: () => (/* binding */ DEFAULT_ICONS_PATH),
/* harmony export */   s8: () => (/* binding */ TUI_ICON_ERROR),
/* harmony export */   sf: () => (/* binding */ TUI_CACHE_BUSTING_PAYLOAD)
/* harmony export */ });
/* unused harmony exports MASK_CARET_TRAP, TUI_DECIMAL_SYMBOLS, TUI_DEFAULT_MARKER_HANDLER, TUI_DIGIT_REGEXP, TUI_EXPAND_LOADED, TUI_LAST_PUNCTUATION_MARK_REGEXP, TUI_LATIN_AND_NUMBERS_REGEXP, TUI_LATIN_REGEXP, TUI_LEADING_ZEROES_REGEXP, TUI_MASK_SYMBOLS_REGEXP, TUI_NON_DIGITS_REGEXP, TUI_NON_DIGIT_REGEXP, TUI_SCROLLABLE */
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2287);

const TUI_CACHE_BUSTING_PAYLOAD = `?v=${_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_0__/* .TUI_VERSION */ .Wt}`;

/**
 * @deprecated
 * TODO: delete in v4.0
 */
const TUI_DECIMAL_SYMBOLS = (/* unused pure expression or super */ null && ([',', '.']));
const DEFAULT_ICONS_PATH = name => name.includes('.svg#') ? name : `#${name}`;
const TUI_DEFAULT_MARKER_HANDLER = () => EMPTY_ARRAY;
const TUI_DEFAULT_NUMBER_FORMAT = {
  decimalLimit: Infinity,
  decimalSeparator: ',',
  thousandSeparator: _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_0__/* .CHAR_NO_BREAK_SPACE */ .am,
  zeroPadding: true,
  rounding: 'truncate',
  decimal: 'not-zero'
};
const tuiEditingKeys = ['Spacebar', 'Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Left', 'Right', 'End', 'Home'];

/**
 * An event indicating that async data for expand has finished loading.
 * Dispatch to finish loading states for {@link TuiExpandComponent}.
 */
const TUI_EXPAND_LOADED = 'tui-expand-loaded';
/**
 * An event for scrolling an element into view within {@link TuiScrollbarComponent}.
 */
const TUI_SCROLL_INTO_VIEW = 'tui-scroll-into-view';
/**
 * An event to notify {@link TuiScrollbarComponent} that
 * it should control a nested element.
 */
const TUI_SCROLLABLE = 'tui-scrollable';
/**
 * An event indicating and error during icon loading in {@link TuiSvgComponent}.
 */
const TUI_ICON_ERROR = 'tui-icon-error';
const TUI_HINT_DIRECTIONS = ['bottom-left', 'bottom', 'bottom-right', 'top-left', 'top', 'top-right', 'left-top', 'left', 'left-bottom', 'right-top', 'right', 'right-bottom'];

/**
 * @deprecated Use {@link https://github.com/taiga-family/maskito Maskito}
 * TODO: delete in v4.0
 */
const MASK_CARET_TRAP = '[]';
const TUI_DIGIT_REGEXP = /\d/;
const TUI_NON_DIGIT_REGEXP = /\D/;
const TUI_NON_DIGITS_REGEXP = /\D+/g;
const TUI_LEADING_ZEROES_REGEXP = /^0+/;
const TUI_MASK_SYMBOLS_REGEXP = /[ \-_()]/g;
const TUI_LAST_PUNCTUATION_MARK_REGEXP = /[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]$/;
const TUI_LATIN_REGEXP = /[A-z]/;
const TUI_LATIN_AND_NUMBERS_REGEXP = /[A-z|0-9]/;

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-constants.js.map

/***/ }),

/***/ 8323:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Q: () => (/* binding */ TuiModeModule),
/* harmony export */   h: () => (/* binding */ TuiModeDirective)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(683);



let TuiModeDirective = /*#__PURE__*/(() => {
  class TuiModeDirective extends _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .AbstractTuiController */ .zY {
    constructor() {
      super(...arguments);
      this.mode = null;
    }
  }
  TuiModeDirective.ɵfac = /* @__PURE__ */(() => {
    let ɵTuiModeDirective_BaseFactory;
    return function TuiModeDirective_Factory(t) {
      return (ɵTuiModeDirective_BaseFactory || (ɵTuiModeDirective_BaseFactory = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵgetInheritedFactory"](TuiModeDirective)))(t || TuiModeDirective);
    };
  })();
  TuiModeDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: TuiModeDirective,
    selectors: [["", "tuiMode", ""]],
    inputs: {
      mode: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInputFlags"].None, "tuiMode", "mode"]
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInheritDefinitionFeature"]]
  });
  return TuiModeDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiModeModule = /*#__PURE__*/(() => {
  class TuiModeModule {}
  TuiModeModule.ɵfac = function TuiModeModule_Factory(t) {
    return new (t || TuiModeModule)();
  };
  TuiModeModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: TuiModeModule
  });
  TuiModeModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
  return TuiModeModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-directives-mode.js.map

/***/ }),

/***/ 2061:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ TuiWrapperModule),
/* harmony export */   l: () => (/* binding */ TuiWrapperDirective)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_core_enums__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7919);
/* harmony import */ var _taiga_ui_core_providers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7291);
/* harmony import */ var _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8502);






let TuiWrapperDirective = /*#__PURE__*/(() => {
  class TuiWrapperDirective {
    constructor(mode$) {
      this.mode$ = mode$;
      this.disabled = false;
      this.readOnly = false;
      this.hover = null;
      this.active = null;
      this.focus = false;
      this.invalid = false;
      this.appearance = '';
    }
    get computedInvalid() {
      return !this.disabled && !this.readOnly && this.invalid;
    }
    get computedFocused() {
      return this.focus && !this.disabled;
    }
    get interactiveState() {
      if (this.disabled) {
        return _taiga_ui_core_enums__WEBPACK_IMPORTED_MODULE_1__/* .TuiInteractiveState */ .Ks.Disabled;
      }
      if (this.readOnly) {
        return _taiga_ui_core_enums__WEBPACK_IMPORTED_MODULE_1__/* .TuiInteractiveState */ .Ks.Readonly;
      }
      if (this.active) {
        return _taiga_ui_core_enums__WEBPACK_IMPORTED_MODULE_1__/* .TuiInteractiveState */ .Ks.Active;
      }
      if (this.hover) {
        return _taiga_ui_core_enums__WEBPACK_IMPORTED_MODULE_1__/* .TuiInteractiveState */ .Ks.Hover;
      }
      return null;
    }
    get noHover() {
      return this.readOnly || this.hover === false;
    }
    get noActive() {
      return this.readOnly || this.active === false;
    }
  }
  TuiWrapperDirective.ɵfac = function TuiWrapperDirective_Factory(t) {
    return new (t || TuiWrapperDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_2__/* .TUI_MODE */ .fL));
  };
  TuiWrapperDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: TuiWrapperDirective,
    selectors: [["", "tuiWrapper", ""]],
    hostVars: 10,
    hostBindings: function TuiWrapperDirective_HostBindings(rf, ctx) {
      if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵlistener"]("$.data-mode.attr", function TuiWrapperDirective___data_mode_attr_HostBindingHandler() {
          return ctx.mode$;
        });
      }
      if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵattribute"]("data-appearance", ctx.appearance)("data-state", ctx.interactiveState);
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵclassProp"]("_invalid", ctx.computedInvalid)("_focused", ctx.computedFocused)("_no-hover", ctx.noHover)("_no-active", ctx.noActive);
      }
    },
    inputs: {
      disabled: "disabled",
      readOnly: "readOnly",
      hover: "hover",
      active: "active",
      focus: "focus",
      invalid: "invalid",
      appearance: "appearance"
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵProvidersFeature"]([_taiga_ui_core_providers__WEBPACK_IMPORTED_MODULE_3__/* .MODE_PROVIDER */ .si])]
  });
  return TuiWrapperDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiWrapperModule = /*#__PURE__*/(() => {
  class TuiWrapperModule {}
  TuiWrapperModule.ɵfac = function TuiWrapperModule_Factory(t) {
    return new (t || TuiWrapperModule)();
  };
  TuiWrapperModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: TuiWrapperModule
  });
  TuiWrapperModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
  return TuiWrapperModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-directives-wrapper.js.map

/***/ }),

/***/ 7919:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ks: () => (/* binding */ TuiInteractiveState),
/* harmony export */   bC: () => (/* binding */ TuiAppearance)
/* harmony export */ });
/* unused harmony exports TuiDropdownAnimation, TuiNotification, TuiRangeState */
// TODO: change type in v4.0
// eslint-disable-next-line no-restricted-syntax
var TuiAppearance = /*#__PURE__*/function (TuiAppearance) {
  TuiAppearance["Accent"] = "accent";
  TuiAppearance["Flat"] = "flat";
  TuiAppearance["Icon"] = "icon";
  TuiAppearance["Outline"] = "outline";
  TuiAppearance["Primary"] = "primary";
  TuiAppearance["Secondary"] = "secondary";
  TuiAppearance["SecondaryDestructive"] = "secondary-destructive";
  TuiAppearance["Table"] = "table";
  TuiAppearance["Textfield"] = "textfield";
  TuiAppearance["Whiteblock"] = "whiteblock";
  TuiAppearance["WhiteblockActive"] = "whiteblock-active";
  return TuiAppearance;
}(TuiAppearance || {});
/** @deprecated not used anymore TODO: remove in 4.0 **/
// eslint-disable-next-line no-restricted-syntax
var TuiDropdownAnimation = /*#__PURE__*/function (TuiDropdownAnimation) {
  TuiDropdownAnimation["FadeInBottom"] = "fadeInBottom";
  TuiDropdownAnimation["FadeInTop"] = "fadeInTop";
  return TuiDropdownAnimation;
}(TuiDropdownAnimation || {});
/**
 * @internal used in calendar, year picker and wrapper
 */
// TODO: change type in v4.0
// eslint-disable-next-line no-restricted-syntax
var TuiInteractiveState = /*#__PURE__*/function (TuiInteractiveState) {
  TuiInteractiveState["Active"] = "active";
  TuiInteractiveState["Disabled"] = "disabled";
  TuiInteractiveState["Hover"] = "hover";
  TuiInteractiveState["Readonly"] = "readonly";
  return TuiInteractiveState;
}(TuiInteractiveState || {});
/**
 * @deprecated use union type TuiNotificationT instead
 */
// eslint-disable-next-line no-restricted-syntax
var TuiNotification = /*#__PURE__*/function (TuiNotification) {
  TuiNotification["Error"] = "error";
  TuiNotification["Info"] = "info";
  TuiNotification["Success"] = "success";
  TuiNotification["Warning"] = "warning";
  return TuiNotification;
}(TuiNotification || {});
/**
 * @internal used in calendar and year picker
 */
// TODO: change type in v4.0
// eslint-disable-next-line no-restricted-syntax
var TuiRangeState = /*#__PURE__*/function (TuiRangeState) {
  TuiRangeState["End"] = "end";
  TuiRangeState["Single"] = "single";
  TuiRangeState["Start"] = "start";
  return TuiRangeState;
}(TuiRangeState || {});
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-enums.js.map

/***/ }),

/***/ 7291:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   si: () => (/* binding */ MODE_PROVIDER)
/* harmony export */ });
/* unused harmony exports TUI_IS_MOBILE_RES_PROVIDER, tuiWatchedControllerFactory */
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8502);
/* harmony import */ var _taiga_ui_core_directives_mode__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8323);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7673);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(9172);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6354);







/**
 * @deprecated: drop in v4.0
 */
const TUI_IS_MOBILE_RES_PROVIDER = {
  provide: _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_1__/* .TUI_IS_MOBILE_RES */ .GW,
  deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__.SkipSelf(), _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_1__/* .TUI_IS_MOBILE_RES */ .GW], _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef],
  useFactory: (mobile$, {
    nativeElement
  }) => {
    nativeElement['$.class._mobile'] = mobile$;
    return mobile$;
  }
};
const MODE_PROVIDER = {
  provide: _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_1__/* .TUI_MODE */ .fL,
  deps: [[new _angular_core__WEBPACK_IMPORTED_MODULE_0__.Optional(), _taiga_ui_core_directives_mode__WEBPACK_IMPORTED_MODULE_2__/* .TuiModeDirective */ .h], _angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef],
  useFactory: (mode, {
    nativeElement
  }) => {
    const mode$ = mode ? mode.change$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .startWith */ .Z)(null), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__/* .map */ .T)(() => mode.mode)) : (0,rxjs__WEBPACK_IMPORTED_MODULE_5__.of)(null);
    nativeElement['$.data-mode.attr'] = mode$;
    return mode$;
  }
};
function tuiWatchedControllerFactory(controller, cdr, destroy$) {
  controller.change$.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe();
  return controller;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-providers.js.map

/***/ }),

/***/ 1193:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $n: () => (/* binding */ TuiBreakpointService),
/* harmony export */   Vj: () => (/* binding */ TuiHintService),
/* harmony export */   ZE: () => (/* binding */ TuiPositionService),
/* harmony export */   kd: () => (/* binding */ TuiSvgService),
/* harmony export */   yt: () => (/* binding */ TuiVisualViewportService),
/* harmony export */   z3: () => (/* binding */ TuiRouterLinkActiveService)
/* harmony export */ });
/* unused harmony exports TuiFormatDateService, TuiNightThemeService */
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(9835);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1410);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(2287);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(4340);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(4489);
/* harmony import */ var _taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8502);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1985);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(4412);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(7786);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(1584);
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(983);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6354);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3294);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(4668);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(980);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(6977);
/* harmony import */ var _ng_web_apis_common__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(3864);
/* harmony import */ var _taiga_ui_core_abstract__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(7359);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7688);
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_angular_router__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(345);
/* harmony import */ var _taiga_ui_core_utils_dom__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(365);

















/**
 * Service to provide the current breakpoint based on Taiga UI's media queries
 */
let TuiBreakpointService = /*#__PURE__*/(() => {
  class TuiBreakpointService extends rxjs__WEBPACK_IMPORTED_MODULE_2__/* .Observable */ .c {
    constructor(media, ngZone, size$) {
      super(subscriber => this.stream$.subscribe(subscriber));
      this.media = media;
      this.ngZone = ngZone;
      this.size$ = size$;
      this.sorted = Object.values(this.media).sort((a, b) => a - b);
      this.invert = Object.keys(this.media).reduce((ret, key) => Object.assign(Object.assign({}, ret), {
        [this.media[key]]: key
      }), {});
      this.stream$ = this.size$.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .map */ .T)(({
        width
      }) => this.sorted.find(size => size > width)), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .map */ .T)(key => this.invert[key || this.sorted[this.sorted.length - 1]]), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__/* .distinctUntilChanged */ .F)(), (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__/* .tuiZoneOptimized */ .sX)(this.ngZone), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_6__/* .shareReplay */ .t)({
        bufferSize: 1,
        refCount: true
      }));
    }
  }
  TuiBreakpointService.ɵfac = function TuiBreakpointService_Factory(t) {
    return new (t || TuiBreakpointService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_7__/* .TUI_MEDIA */ .IA), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_8__/* .TUI_WINDOW_SIZE */ .Q_));
  };
  TuiBreakpointService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: TuiBreakpointService,
    factory: TuiBreakpointService.ɵfac,
    providedIn: 'root'
  });
  return TuiBreakpointService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiFormatDateService = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiFormatDateService {
    constructor(locale) {
      this.locale = locale;
    }
    format(timestamp) {
      return of(new Date(timestamp).toLocaleTimeString(this.locale, {
        hour: 'numeric',
        minute: '2-digit'
      }));
    }
  }
  TuiFormatDateService.ɵfac = function TuiFormatDateService_Factory(t) {
    return new (t || TuiFormatDateService)(i0.ɵɵinject(LOCALE_ID));
  };
  TuiFormatDateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
    token: TuiFormatDateService,
    factory: TuiFormatDateService.ɵfac,
    providedIn: 'root'
  });
  return TuiFormatDateService;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Service for displaying hints/tooltips
 */
let TuiHintService = /*#__PURE__*/(() => {
  class TuiHintService extends rxjs__WEBPACK_IMPORTED_MODULE_9__/* .BehaviorSubject */ .t {
    constructor() {
      super([]);
    }
    add(directive) {
      this.next(this.value.concat(directive));
    }
    remove(directive) {
      if (this.value.includes(directive)) {
        this.next(this.value.filter(hint => hint !== directive));
      }
    }
  }
  TuiHintService.ɵfac = function TuiHintService_Factory(t) {
    return new (t || TuiHintService)();
  };
  TuiHintService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: TuiHintService,
    factory: TuiHintService.ɵfac,
    providedIn: 'root'
  });
  return TuiHintService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiNightThemeService = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class TuiNightThemeService extends Observable {
    constructor(win) {
      const media = win.matchMedia('(prefers-color-scheme: dark)');
      const media$ = fromEvent(media, 'change').pipe(startWith(null), map(() => media.matches), share());
      super(subscriber => media$.subscribe(subscriber));
    }
  }
  TuiNightThemeService.ɵfac = function TuiNightThemeService_Factory(t) {
    return new (t || TuiNightThemeService)(i0.ɵɵinject(WINDOW));
  };
  TuiNightThemeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
    token: TuiNightThemeService,
    factory: TuiNightThemeService.ɵfac,
    providedIn: 'root'
  });
  return TuiNightThemeService;
})()));
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiPositionService = /*#__PURE__*/(() => {
  class TuiPositionService extends rxjs__WEBPACK_IMPORTED_MODULE_2__/* .Observable */ .c {
    constructor(
    // Destructuring here causes memory leak
    el, animationFrame, zone, accessor) {
      super(subscriber => animationFrame.pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .map */ .T)(() => el.nativeElement.getBoundingClientRect()), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .map */ .T)(rect => accessor.getPosition(rect)), (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__/* .tuiZonefree */ .rB)(zone), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_10__/* .finalize */ .j)(() => accessor.getPosition(_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_11__/* .EMPTY_CLIENT_RECT */ .Lo))).subscribe(subscriber));
    }
  }
  TuiPositionService.ɵfac = function TuiPositionService_Factory(t) {
    return new (t || TuiPositionService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ElementRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_ng_web_apis_common__WEBPACK_IMPORTED_MODULE_12__/* .ANIMATION_FRAME */ .dJ), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_taiga_ui_core_abstract__WEBPACK_IMPORTED_MODULE_13__/* .TuiPositionAccessor */ .dg));
  };
  TuiPositionService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: TuiPositionService,
    factory: TuiPositionService.ɵfac
  });
  return TuiPositionService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

// TODO: Remove when Angular is update and `RouterLinkActive` has output
let TuiRouterLinkActiveService = /*#__PURE__*/(() => {
  class TuiRouterLinkActiveService extends rxjs__WEBPACK_IMPORTED_MODULE_2__/* .Observable */ .c {
    constructor(routerLinkActive, zone, animationFrame$, destroy$) {
      const stream$ = routerLinkActive ? (0,rxjs__WEBPACK_IMPORTED_MODULE_14__/* .merge */ .h)((0,rxjs__WEBPACK_IMPORTED_MODULE_15__/* .timer */ .O)(0),
      // SSR (animationFrame$ never emits value during SSR)
      animationFrame$).pipe((0,rxjs_operators__WEBPACK_IMPORTED_MODULE_3__/* .map */ .T)(() => routerLinkActive.isActive), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_4__/* .distinctUntilChanged */ .F)(), (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_5__/* .tuiZoneOptimized */ .sX)(zone), (0,rxjs_operators__WEBPACK_IMPORTED_MODULE_16__/* .takeUntil */ .Q)(destroy$)) : rxjs__WEBPACK_IMPORTED_MODULE_17__/* .EMPTY */ .w;
      super(subscriber => stream$.subscribe(subscriber));
    }
  }
  TuiRouterLinkActiveService.ɵfac = function TuiRouterLinkActiveService_Factory(t) {
    return new (t || TuiRouterLinkActiveService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_router__WEBPACK_IMPORTED_MODULE_1__.RouterLinkActive, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.NgZone), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_ng_web_apis_common__WEBPACK_IMPORTED_MODULE_12__/* .ANIMATION_FRAME */ .dJ), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_18__/* .TuiDestroyService */ .ew, 2));
  };
  TuiRouterLinkActiveService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: TuiRouterLinkActiveService,
    factory: TuiRouterLinkActiveService.ɵfac
  });
  return TuiRouterLinkActiveService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Service for reusing SVGs without inlining each instance
 */
let TuiSvgService = /*#__PURE__*/(() => {
  class TuiSvgService {
    constructor(tuiSanitizer, sanitizer, icons) {
      this.tuiSanitizer = tuiSanitizer;
      this.sanitizer = sanitizer;
      this.originals = {};
      this.items$ = new rxjs__WEBPACK_IMPORTED_MODULE_9__/* .BehaviorSubject */ .t(new Map());
      this.define(icons);
    }
    define(icons) {
      const {
        value
      } = this.items$;
      Object.keys(icons).forEach(key => {
        this.defineIcon(key, icons[key], value);
      });
      this.items$.next(value);
    }
    getOriginal(name) {
      return this.originals[name] || null;
    }
    defineIcon(name, src, map) {
      if (map.has(name)) {
        return;
      }
      const parsed = this.parseSrc(name, src);
      if (!parsed) {
        ngDevMode && _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_19__/* .tuiAssert */ .B.assert(false, 'Unable to parse given SVG src');
        return;
      }
      map.set(name, parsed);
      this.originals = Object.assign(Object.assign({}, this.originals), {
        [name]: src
      });
    }
    parseSrc(name, src) {
      return this.sanitize((0,_taiga_ui_core_utils_dom__WEBPACK_IMPORTED_MODULE_20__/* .tuiProcessIcon */ .$6)(src, name));
    }
    sanitize(src) {
      return this.sanitizer.bypassSecurityTrustHtml((this.tuiSanitizer ? this.tuiSanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.HTML, src) : this.sanitizer.sanitize(_angular_core__WEBPACK_IMPORTED_MODULE_0__.SecurityContext.HTML, src)) || '');
    }
  }
  TuiSvgService.ɵfac = function TuiSvgService_Factory(t) {
    return new (t || TuiSvgService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_7__/* .TUI_SANITIZER */ .rf, 8), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_platform_browser__WEBPACK_IMPORTED_MODULE_21__/* .DomSanitizer */ .up), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_taiga_ui_core_tokens__WEBPACK_IMPORTED_MODULE_7__/* .TUI_ICONS */ .Y7));
  };
  TuiSvgService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: TuiSvgService,
    factory: TuiSvgService.ɵfac,
    providedIn: 'root'
  });
  return TuiSvgService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let TuiVisualViewportService = /*#__PURE__*/(() => {
  class TuiVisualViewportService {
    constructor(win, isWebkit) {
      this.win = win;
      this.isWebkit = isWebkit;
    }
    // https://bugs.webkit.org/show_bug.cgi?id=207089
    correct(point) {
      var _a, _b, _c, _d;
      return this.isWebkit ? [point[0] + ((_b = (_a = this.win.visualViewport) === null || _a === void 0 ? void 0 : _a.offsetTop) !== null && _b !== void 0 ? _b : 0), point[1] + ((_d = (_c = this.win.visualViewport) === null || _c === void 0 ? void 0 : _c.offsetLeft) !== null && _d !== void 0 ? _d : 0)] : point;
    }
  }
  TuiVisualViewportService.ɵfac = function TuiVisualViewportService_Factory(t) {
    return new (t || TuiVisualViewportService)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_ng_web_apis_common__WEBPACK_IMPORTED_MODULE_12__/* .WINDOW */ .jf), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_8__/* .TUI_IS_WEBKIT */ .Ld));
  };
  TuiVisualViewportService.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
    token: TuiVisualViewportService,
    factory: TuiVisualViewportService.ɵfac,
    providedIn: 'root'
  });
  return TuiVisualViewportService;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-services.js.map

/***/ }),

/***/ 8502:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  U_: () => (/* binding */ TUI_ANIMATIONS_DURATION),
  fx: () => (/* binding */ TUI_ANIMATION_OPTIONS),
  R3: () => (/* binding */ TUI_CLOSE_WORD),
  _Z: () => (/* binding */ TUI_COMMON_ICONS),
  KN: () => (/* binding */ TUI_DATA_LIST_HOST),
  QU: () => (/* binding */ TUI_DEFAULT_ICONS_PLACE),
  Y7: () => (/* binding */ TUI_ICONS),
  _t: () => (/* binding */ TUI_ICONS_PATH),
  YX: () => (/* binding */ TUI_ICONS_PLACE),
  GW: () => (/* binding */ TUI_IS_MOBILE_RES),
  Qc: () => (/* binding */ TUI_LEGACY_MASK),
  IA: () => (/* binding */ TUI_MEDIA),
  fL: () => (/* binding */ TUI_MODE),
  Fm: () => (/* binding */ TUI_MONTHS),
  wH: () => (/* binding */ TUI_NOTHING_FOUND_MESSAGE),
  Ub: () => (/* binding */ TUI_NOTIFICATION_OPTIONS),
  t9: () => (/* binding */ TUI_NUMBER_FORMAT),
  Z6: () => (/* binding */ TUI_OPTION_CONTENT),
  vo: () => (/* binding */ TUI_REDUCED_MOTION),
  rf: () => (/* binding */ TUI_SANITIZER),
  Rm: () => (/* binding */ TUI_SVG_CONTENT_PROCESSOR),
  Qy: () => (/* binding */ TUI_SVG_SRC_PROCESSOR),
  Eo: () => (/* binding */ TUI_TEXTFIELD_APPEARANCE),
  w2: () => (/* binding */ TUI_TEXTFIELD_HOST),
  HG: () => (/* binding */ TUI_THEME),
  r0: () => (/* binding */ TUI_VALUE_ACCESSOR),
  ob: () => (/* binding */ TUI_VIEWPORT),
  WD: () => (/* binding */ tuiAsDataListAccessor),
  PU: () => (/* binding */ tuiAsDataListHost),
  NW: () => (/* binding */ tuiAsOptionContent),
  Sc: () => (/* binding */ tuiAsTextfieldHost)
});

// UNUSED EXPORTS: STATUS_ICON, TUI_ANIMATIONS_DEFAULT_DURATION, TUI_ASSERT_ENABLED, TUI_DATA_LIST_ACCESSOR, TUI_DAY_TYPE_HANDLER, TUI_DEFAULT_ERROR_MESSAGE, TUI_DOCUMENT_OR_SHADOW_ROOT, TUI_ELEMENT_REF, TUI_FIRST_DAY_OF_WEEK, TUI_NOTIFICATION_DEFAULT_OPTIONS, TUI_NUMBER_FORMAT_OBSERVABLE, TUI_ORDERED_SHORT_WEEK_DAYS, TUI_SCROLL_REF, TUI_SELECTION_STREAM, TUI_SHORT_WEEK_DAYS, TUI_SPIN_ICONS, TUI_SPIN_TEXTS, tuiAsViewport, tuiCommonIconsProvider, tuiNotificationOptionsProvider, tuiNumberFormatProvider

// EXTERNAL MODULE: consume shared module (default) @angular/core@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/core/fesm2022/core.mjs)
var core_mjs_ = __webpack_require__(1750);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-miscellaneous.js
var taiga_ui_cdk_utils_miscellaneous = __webpack_require__(9925);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-enums.js
var taiga_ui_cdk_enums = __webpack_require__(8883);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-observables.js
var taiga_ui_cdk_observables = __webpack_require__(9835);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-svg.js
var taiga_ui_cdk_utils_svg = __webpack_require__(95);
// EXTERNAL MODULE: consume shared module (default) @angular/common@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/common/fesm2022/common.mjs)
var common_mjs_ = __webpack_require__(6412);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/i18n/fesm2015/taiga-ui-i18n-tools.js + 2 modules
var taiga_ui_i18n_tools = __webpack_require__(4585);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-utils-miscellaneous.js
var taiga_ui_core_utils_miscellaneous = __webpack_require__(465);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-utils-dom.js
var taiga_ui_core_utils_dom = __webpack_require__(365);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-utils-mobile.js

function tuiIsMobile(win, {
  mobile
}) {
  return (0,taiga_ui_core_utils_dom/* tuiGetViewportWidth */.hV)(win) < mobile;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-utils-mobile.js.map
// EXTERNAL MODULE: ./node_modules/@ng-web-apis/common/fesm2015/ng-web-apis-common.js
var ng_web_apis_common = __webpack_require__(3864);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/share.js
var share = __webpack_require__(7647);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/startWith.js
var startWith = __webpack_require__(9172);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var map = __webpack_require__(6354);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js
var distinctUntilChanged = __webpack_require__(3294);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js
var switchMap = __webpack_require__(5558);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
var takeUntil = __webpack_require__(6977);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-constants.js
var taiga_ui_core_constants = __webpack_require__(8048);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/of.js
var of = __webpack_require__(7673);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/merge.js
var merge = __webpack_require__(7786);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/identity.js
var identity = __webpack_require__(3669);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-enums.js
var taiga_ui_core_enums = __webpack_require__(7919);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-tokens.js










const TUI_REDUCED_MOTION = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  var _a, _b, _c;
  return (_c = (_b = (_a = (0,core_mjs_.inject)(common_mjs_.DOCUMENT).defaultView) === null || _a === void 0 ? void 0 : _a.matchMedia) === null || _b === void 0 ? void 0 : _b.call(_a, '(prefers-reduced-motion: reduce)').matches) !== null && _c !== void 0 ? _c : false;
});
const TUI_ANIMATIONS_DEFAULT_DURATION = 300;
/**
 * Duration of all Taiga UI animations in ms
 */
const TUI_ANIMATIONS_DURATION = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,core_mjs_.inject)(TUI_REDUCED_MOTION) ? 0 : TUI_ANIMATIONS_DEFAULT_DURATION);

/**
 * Options for Taiga UI animations
 */
const TUI_ANIMATION_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => ({
  value: '',
  params: {
    duration: (0,core_mjs_.inject)(TUI_ANIMATIONS_DURATION)
  }
}));

/**
 * @deprecated:
 * Flag to enable assertions across Taiga UI
 *
 * The current token no longer matters as
 * it will not be provided in production
 */
const TUI_ASSERT_ENABLED = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,core_mjs_.isDevMode)());
const COMMON_ICONS = {
  check: 'tuiIconCheck',
  close: 'tuiIconClose',
  error: 'tuiIconAlertCircle',
  more: 'tuiIconChevronRight'
};
const TUI_COMMON_ICONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(COMMON_ICONS);
function tuiCommonIconsProvider(icons) {
  return tuiProvideOptions(TUI_COMMON_ICONS, icons, COMMON_ICONS);
}

/**
 * Accessor for data-list options
 */
const TUI_DATA_LIST_ACCESSOR = new core_mjs_.InjectionToken('[TUI_DATA_LIST_ACCESSOR]');
function tuiAsDataListAccessor(useExisting) {
  return {
    provide: TUI_DATA_LIST_ACCESSOR,
    useExisting
  };
}

/**
 * DataList controller
 */
const TUI_DATA_LIST_HOST = new core_mjs_.InjectionToken('[TUI_DATA_LIST_HOST]');
function tuiAsDataListHost(useExisting) {
  return {
    provide: TUI_DATA_LIST_HOST,
    useExisting
  };
}

/**
 * Token for adding data-type attribute to calendar cell
 */
const TUI_DAY_TYPE_HANDLER = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(day => day.isWeekend ? 'weekend' : 'weekday');
const TUI_DOCUMENT_OR_SHADOW_ROOT = new core_mjs_.InjectionToken('[TUI_DOCUMENT_OR_SHADOW_ROOT]');

/**
 * ElementRef when you cannot use @Input for single time injection
 */
const TUI_ELEMENT_REF = new core_mjs_.InjectionToken('[TUI_ELEMENT_REF]');

/**
 * The first day of the week index
 */
const TUI_FIRST_DAY_OF_WEEK = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(taiga_ui_cdk_enums/* TuiDayOfWeek */.G.Monday);

/**
 * Localized months names
 */
const TUI_MONTHS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('months'));
/**
 * i18n 'close' word
 */
const TUI_CLOSE_WORD = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('close'));
/**
 * i18n 'Nothing found' message
 */
const TUI_NOTHING_FOUND_MESSAGE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('nothingFoundMessage'));
/**
 * i18n of error message
 */
const TUI_DEFAULT_ERROR_MESSAGE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('defaultErrorMessage'));
/**
 * spin i18n texts
 */
const TUI_SPIN_TEXTS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('spinTexts'));
/**
 * calendars i18n texts
 */
const TUI_SHORT_WEEK_DAYS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)((0,taiga_ui_i18n_tools/* tuiExtractI18n */.Y)('shortWeekDays'));
const TUI_DEFAULT_ICONS_PLACE = 'assets/taiga-ui/icons';
/**
 * Path to icons
 * @deprecated Use {@link TUI_SVG_OPTIONS} instead
 */
const TUI_ICONS_PLACE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_DEFAULT_ICONS_PLACE);

/**
 * A key/value dictionary of icon names and src to be defined with TuiSvgService
 */
const TUI_ICONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)({});

/**
 * A handler to retrieve USE id for icon by name
 * @deprecated Use {@link TUI_SVG_OPTIONS} instead
 */
const TUI_ICONS_PATH = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => (0,taiga_ui_core_utils_miscellaneous/* tuiIconsPathFactory */.yu)((0,core_mjs_.inject)(TUI_ICONS_PLACE)));

/**
 * Token for media constant
 */
const TUI_MEDIA = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)({
  mobile: 768,
  desktopSmall: 1024,
  desktopLarge: 1280
});

/**
 * @deprecated use {@link https://taiga-ui.dev/services/breakpoint-service TuiBreakpointService}
 * TODO: drop in v4.0
 * Mobile resolution stream for private providers
 */
const TUI_IS_MOBILE_RES = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  const win = (0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf);
  const media = (0,core_mjs_.inject)(TUI_MEDIA);
  return (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(win, 'resize').pipe((0,share/* share */.u)(), (0,startWith/* startWith */.Z)(null), (0,map/* map */.T)(() => tuiIsMobile(win, media)), (0,distinctUntilChanged/* distinctUntilChanged */.F)(), (0,taiga_ui_cdk_observables/* tuiZoneOptimized */.sX)((0,core_mjs_.inject)(core_mjs_.NgZone)));
});

/**
 * @internal
 * @deprecated
 * Don't use it! Will be removed after changing the mask.
 */
const TUI_LEGACY_MASK = new core_mjs_.InjectionToken('[TUI_LEGACY_MASK]');

/**
 * Mode stream for private providers
 */
const TUI_MODE = new core_mjs_.InjectionToken('[TUI_MODE]');

/** @deprecated remove export */
const STATUS_ICON = {
  info: 'tuiIconInfo',
  success: 'tuiIconCheckCircle',
  error: 'tuiIconXCircle',
  warning: 'tuiIconAlertCircle',
  neutral: 'tuiIconInfo'
};
/** Default values for the notification options. */
const TUI_NOTIFICATION_DEFAULT_OPTIONS = {
  autoClose: 3000,
  label: '',
  status: 'info',
  hasCloseButton: true,
  icon: ({
    $implicit
  }) => STATUS_ICON[$implicit],
  size: 'm',
  hasIcon: true,
  defaultAutoCloseTime: 3000
};
/**
 * Default parameters for notification alert component
 */
const TUI_NOTIFICATION_OPTIONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(TUI_NOTIFICATION_DEFAULT_OPTIONS);
function tuiNotificationOptionsProvider(options) {
  return tuiProvideOptions(TUI_NOTIFICATION_OPTIONS, options, TUI_NOTIFICATION_DEFAULT_OPTIONS);
}

/**
 * Formatting configuration for displayed numbers
 */
const TUI_NUMBER_FORMAT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(taiga_ui_core_constants/* TUI_DEFAULT_NUMBER_FORMAT */.RK);
function tuiNumberFormatProvider(options) {
  return tuiProvideOptions(TUI_NUMBER_FORMAT, options, TUI_DEFAULT_NUMBER_FORMAT);
}

/**
 * Formatting configuration for displayed numbers
 */
const TUI_NUMBER_FORMAT_OBSERVABLE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)((0,of.of)(Object.assign(Object.assign({}, taiga_ui_core_constants/* TUI_DEFAULT_NUMBER_FORMAT */.RK), {
  decimalLimit: NaN
})));

/**
 * Content for tuiOption component
 */
const TUI_OPTION_CONTENT = new core_mjs_.InjectionToken('[TUI_OPTION_CONTENT]');
function tuiAsOptionContent(useValue) {
  return {
    provide: TUI_OPTION_CONTENT,
    useValue
  };
}

/**
 * TODO: v4.0 delete the whole file
 */
const convertToSundayFirstWeekFormat = weekDaysNames => {
  const sundayIndex = weekDaysNames.length - 1;
  return [weekDaysNames[sundayIndex], ...weekDaysNames.slice(0, sundayIndex)];
};
/**
 * Ordered calendars i18n texts
 * @deprecated
 */
const TUI_ORDERED_SHORT_WEEK_DAYS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  const firstDayOfWeekIndex = (0,core_mjs_.inject)(TUI_FIRST_DAY_OF_WEEK);
  return (0,core_mjs_.inject)(TUI_SHORT_WEEK_DAYS).pipe((0,map/* map */.T)(convertToSundayFirstWeekFormat), (0,map/* map */.T)(weekDays => [...weekDays.slice(firstDayOfWeekIndex), ...weekDays.slice(0, firstDayOfWeekIndex)]));
});

/**
 * A custom Sanitizer to sanitize source before inlining
 */
const TUI_SANITIZER = new core_mjs_.InjectionToken('[TUI_SANITIZER]');

/**
 * @deprecated import from `@taiga-ui/cdk` instead
 */
const TUI_SCROLL_REF = (/* unused pure expression or super */ null && (TUI_SCROLL_REF$1));

/**
 * A stream of possible selection changes
 */
const TUI_SELECTION_STREAM = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  const doc = (0,core_mjs_.inject)(common_mjs_.DOCUMENT);
  return (0,merge/* merge */.h)((0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(doc, 'selectionchange'), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(doc, 'mouseup'), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(doc, 'mousedown').pipe((0,switchMap/* switchMap */.n)(() => (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(doc, 'mousemove').pipe((0,takeUntil/* takeUntil */.Q)((0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(doc, 'mouseup'))))), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(doc, 'keydown'), (0,taiga_ui_cdk_observables/* tuiTypedFromEvent */.xM)(doc, 'keyup')).pipe((0,share/* share */.u)());
});
const TUI_SPIN_ICONS = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)({
  decrement: 'tuiIconChevronLeft',
  increment: 'tuiIconChevronRight'
});

/**
 * Transform function the contents of the loaded svg file
 * @deprecated Use {@link TUI_SVG_OPTIONS} instead
 */
const TUI_SVG_CONTENT_PROCESSOR = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(taiga_ui_cdk_utils_svg/* tuiSvgLinearGradientProcessor */.o);

/**
 * Source path processor for svg
 * @deprecated Use {@link TUI_SVG_OPTIONS} instead
 */
const TUI_SVG_SRC_PROCESSOR = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(identity/* identity */.D);

/**
 * Appearance for inputs
 * @deprecated use {@link TUI_TEXTFIELD_APPEARANCE_DIRECTIVE} instead
 * TODO: Remove in 4.0
 */
const TUI_TEXTFIELD_APPEARANCE = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)(taiga_ui_core_enums/* TuiAppearance */.bC.Textfield);

/**
 * An interface to communicate with textfield based controls
 */
const TUI_TEXTFIELD_HOST = new core_mjs_.InjectionToken('[TUI_TEXTFIELD_HOST]');
function tuiAsTextfieldHost(useExisting) {
  return {
    provide: TUI_TEXTFIELD_HOST,
    useExisting
  };
}
const TUI_THEME = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateToken */.gc)('Taiga');

/**
 * Buffer token to pass NG_VALUE_ACCESSOR to a different Injector
 */
const TUI_VALUE_ACCESSOR = new core_mjs_.InjectionToken('[TUI_VALUE_ACCESSOR]');

/**
 * Viewport accessor
 */
const TUI_VIEWPORT = (0,taiga_ui_cdk_utils_miscellaneous/* tuiCreateTokenFromFactory */.ET)(() => {
  const win = (0,core_mjs_.inject)(ng_web_apis_common/* WINDOW */.jf);
  return {
    type: 'viewport',
    getClientRect() {
      return {
        top: 0,
        left: 0,
        right: win.innerWidth,
        bottom: win.innerHeight,
        width: win.innerWidth,
        height: win.innerHeight
      };
    }
  };
});
function tuiAsViewport(useExisting) {
  return {
    provide: TUI_VIEWPORT,
    useExisting
  };
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-tokens.js.map

/***/ }),

/***/ 365:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   $6: () => (/* binding */ tuiProcessIcon),
/* harmony export */   hV: () => (/* binding */ tuiGetViewportWidth),
/* harmony export */   m0: () => (/* binding */ tuiCheckFixedPosition)
/* harmony export */ });
/* unused harmony exports tuiGetSafeAreaSize, tuiGetScreenWidth, tuiGetViewportHeight, tuiGetWordRange */

function tuiCheckFixedPosition(element) {
  if (!element || typeof getComputedStyle === 'undefined') {
    return false;
  }
  const style = getComputedStyle(element);
  return style.getPropertyValue('position') === 'fixed' || tuiCheckFixedPosition(element.parentElement);
}

/**
 * Calculates size of safe area on mobile devices (status bars)
 *
 * ATTENTION: Only use in browser environment
 */
function tuiGetSafeAreaSize() {
  if (!CSS.supports('padding-top: env(safe-area-inset-top)')) {
    return 0;
  }
  const div = document.createElement('div');
  div.style.paddingTop = 'env(safe-area-inset-top)';
  document.body.appendChild(div);
  const safeAreaSize = parseInt(window.getComputedStyle(div).paddingTop, 10) || 0;
  document.body.removeChild(div);
  return safeAreaSize;
}
function tuiGetScreenWidth(doc) {
  return Math.max(doc.documentElement.clientWidth, doc.defaultView ? doc.defaultView.innerWidth : 0);
}

/**
 * @description:
 * Cross-browser @media (height)
 *
 * 1. window.innerWidth
 * 1.1. gets CSS viewport @media (height) which include scrollbars
 * 1.2. initial-scale and zoom variations may cause mobile values to
 *      wrongly scale down to what PPK calls the visual
 *      viewport and be smaller than the @media values
 *  1.3. zoom may cause values to be 1px off due to native rounding
 *
 *  2. document.documentElement.clientHeight
 *  2.1. equals CSS viewport width minus scrollbar width
 *  2.2. matches @media (height) when there is no scrollbar
 *  2.3. available cross-browser
 *  2.4. inaccurate if doctype is missing
 */
function tuiGetViewportHeight({
  document,
  innerHeight
}) {
  return Math.max(document.documentElement.clientHeight || 0, innerHeight || 0);
}

/**
 * @description:
 * Cross-browser @media (width)
 *
 * 1. window.innerWidth
 * 1.1. gets CSS viewport @media (width) which include scrollbars
 * 1.2. initial-scale and zoom variations may cause mobile values to
 *      wrongly scale down to what PPK calls the visual
 *      viewport and be smaller than the @media values
 *  1.3. zoom may cause values to be 1px off due to native rounding
 *
 *  2. document.documentElement.clientWidth
 *  2.1. equals CSS viewport width minus scrollbar width
 *  2.2. matches @media (width) when there is no scrollbar
 *  2.3. available cross-browser
 *  2.4. inaccurate if doctype is missing
 */
function tuiGetViewportWidth({
  document,
  innerWidth
}) {
  return Math.max(document.documentElement.clientWidth || 0, innerWidth || 0);
}

/**
 * Creates a cloned range with its boundaries set at word boundaries
 *
 * @param currentRange a range to clone
 * @return modified range
 */
function tuiGetWordRange(currentRange) {
  const range = currentRange.cloneRange();
  const {
    startContainer,
    startOffset,
    endContainer,
    endOffset
  } = range;
  const {
    ownerDocument
  } = startContainer;
  if (!ownerDocument) {
    return range;
  }
  const treeWalker = ownerDocument.createTreeWalker(ownerDocument.body, NodeFilter.SHOW_TEXT, svgNodeFilter);
  treeWalker.currentNode = startContainer;
  do {
    const container = treeWalker.currentNode;
    const textContent = container.textContent || '';
    const content = container === startContainer ? textContent.slice(0, Math.max(0, startOffset + 1)) : textContent;
    const offset = Math.max(content.lastIndexOf(' '), content.lastIndexOf(CHAR_NO_BREAK_SPACE), content.lastIndexOf(CHAR_ZERO_WIDTH_SPACE)) + 1;
    range.setStart(container, 0);
    if (offset) {
      range.setStart(container, offset);
      break;
    }
  } while (treeWalker.previousNode());
  treeWalker.currentNode = endContainer;
  do {
    const container = treeWalker.currentNode;
    const textContent = container.textContent || '';
    const content = container === endContainer ? textContent.slice(endOffset + 1) : textContent;
    const offset = [content.indexOf(' '), content.indexOf(CHAR_NO_BREAK_SPACE), content.indexOf(CHAR_ZERO_WIDTH_SPACE)].reduce((result, item) => result === -1 || item === -1 ? Math.max(result, item) : Math.min(result, item), -1);
    range.setEnd(container, textContent.length);
    if (offset !== -1) {
      range.setEnd(container, offset + textContent.length - content.length);
      break;
    }
  } while (treeWalker.nextNode());
  return range;
}
const WIDTH_SEARCH = 'width="';
const HEIGHT_SEARCH = 'height="';
const START = '<svg';
function tuiProcessIcon(source, name) {
  if (source.includes(`id="${name}"`)) {
    return source;
  }
  const src = source.slice(Math.max(0, source.indexOf(START)));
  const attributes = src.slice(0, Math.max(0, src.indexOf('>')));
  if (!(attributes === null || attributes === void 0 ? void 0 : attributes.includes(WIDTH_SEARCH)) || !attributes.includes(HEIGHT_SEARCH)) {
    return `${src.replace(START, `<svg xmlns="http://www.w3.org/2000/svg"><g id="${name}" xmlns="http://www.w3.org/2000/svg"><svg`)}</g></svg>`;
  }
  const indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
  const indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
  const widthOffset = indexOfWidth + WIDTH_SEARCH.length;
  const heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
  const widthString = attributes.slice(widthOffset, attributes.indexOf('"', widthOffset));
  const heightString = attributes.slice(heightOffset, attributes.indexOf('"', heightOffset));
  if (!heightString || !widthString || widthString.includes('%') || heightString.includes('%') || widthString.includes('em') || heightString.includes('em')) {
    return src.replace(START, `<svg id="${name}"`);
  }
  const width = parseInt(widthString, 10);
  const height = parseInt(heightString, 10);
  return `<g id="${name}" xmlns="http://www.w3.org/2000/svg"><svg  x="50%" y="50%" width="${width / 16}em" height="${height / 16}em" overflow="visible" viewBox="0 0 ${width} ${height}"><svg x="${-width / 2}" y="${-height / 2}">${src}</svg></svg></g>`;
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-utils-dom.js.map

/***/ }),

/***/ 465:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   GS: () => (/* binding */ tuiIsObscured),
/* harmony export */   On: () => (/* binding */ tuiIsEditingKey),
/* harmony export */   Wu: () => (/* binding */ tuiSizeBigger),
/* harmony export */   cJ: () => (/* binding */ tuiIsPresumedHTMLString),
/* harmony export */   f3: () => (/* binding */ tuiGetBorder),
/* harmony export */   tu: () => (/* binding */ tuiOverrideOptions),
/* harmony export */   yu: () => (/* binding */ tuiIconsPathFactory)
/* harmony export */ });
/* harmony import */ var _taiga_ui_core_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8048);
/* harmony import */ var _taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5001);


const ITEM_SIZE = 1.5;
const CONTENT_SIZE = 2.5;
function tuiGetBorder(hasIcon, hasCleaner = false, hasTooltip = false, hasContent = false, size = 'm') {
  const offset = size === 's' ? 0 : 0.25;
  let border = 0;
  if (hasIcon) {
    border += ITEM_SIZE + offset;
  }
  if (hasCleaner) {
    border += ITEM_SIZE + offset;
  }
  if (hasTooltip) {
    border += ITEM_SIZE + offset;
  }
  if (hasContent) {
    border += CONTENT_SIZE + offset;
  }
  return border;
}
function tuiIconsPathFactory(staticPath) {
  const base = staticPath.endsWith('/') ? staticPath : `${staticPath}/`;
  return name => {
    if (name.startsWith('tuiIcon')) {
      return `${base}${name}.svg${_taiga_ui_core_constants__WEBPACK_IMPORTED_MODULE_0__/* .TUI_CACHE_BUSTING_PAYLOAD */ .sf}#${name}`;
    }
    return (0,_taiga_ui_core_constants__WEBPACK_IMPORTED_MODULE_0__/* .DEFAULT_ICONS_PATH */ .Vp)(name);
  };
}

/**
 * Check if pressed key is interactive in terms of input field
 */
function tuiIsEditingKey(key) {
  return key.length === 1 || _taiga_ui_core_constants__WEBPACK_IMPORTED_MODULE_0__/* .tuiEditingKeys */ .V3.includes(key);
}

/**
 * @internal
 */
function tuiIsObscured(el, exceptSelector = 'tui-hints-host') {
  var _a;
  return !!((_a = (0,_taiga_ui_cdk__WEBPACK_IMPORTED_MODULE_1__/* .tuiGetElementObscures */ .J0)(el)) === null || _a === void 0 ? void 0 : _a.some(el => !el.closest(exceptSelector)));
}
function tuiIsPresumedHTMLString(candidate) {
  const trimmed = candidate.trim();
  return trimmed.startsWith('<') && trimmed.endsWith('>');
}
function tuiOverrideOptions(override, fallback) {
  return (directive, options) => {
    const result = directive || Object.assign({}, options || fallback);
    Object.keys(override).forEach(key => {
      // Update directive props with new defaults before inputs are processed
      result[key] = override[key];
    });
    return result;
  };
}
const SIZES = {
  xxs: 0,
  xs: 1,
  s: 2,
  m: 3,
  l: 4,
  xl: 5,
  xxl: 6
};
/**
 * Compares size constants to determine if first size is bigger than the second
 *
 * @param size size that we need to compare
 * @param biggerThanSize size to compare with, 's' by default
 */
function tuiSizeBigger(size, biggerThanSize = 's') {
  return SIZES[size] > SIZES[biggerThanSize];
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-core-utils-miscellaneous.js.map

/***/ }),

/***/ 2725:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   p: () => (/* binding */ TuiCountryIsoCode)
/* harmony export */ });
// TODO: change type in v4.0
// eslint-disable-next-line no-restricted-syntax
var TuiCountryIsoCode = /*#__PURE__*/function (TuiCountryIsoCode) {
  TuiCountryIsoCode["AD"] = "AD";
  TuiCountryIsoCode["AE"] = "AE";
  TuiCountryIsoCode["AF"] = "AF";
  TuiCountryIsoCode["AG"] = "AG";
  TuiCountryIsoCode["AI"] = "AI";
  TuiCountryIsoCode["AL"] = "AL";
  TuiCountryIsoCode["AM"] = "AM";
  TuiCountryIsoCode["AO"] = "AO";
  TuiCountryIsoCode["AR"] = "AR";
  TuiCountryIsoCode["AT"] = "AT";
  TuiCountryIsoCode["AU"] = "AU";
  TuiCountryIsoCode["AW"] = "AW";
  TuiCountryIsoCode["AZ"] = "AZ";
  TuiCountryIsoCode["BA"] = "BA";
  TuiCountryIsoCode["BB"] = "BB";
  TuiCountryIsoCode["BD"] = "BD";
  TuiCountryIsoCode["BE"] = "BE";
  TuiCountryIsoCode["BF"] = "BF";
  TuiCountryIsoCode["BG"] = "BG";
  TuiCountryIsoCode["BH"] = "BH";
  TuiCountryIsoCode["BI"] = "BI";
  TuiCountryIsoCode["BJ"] = "BJ";
  TuiCountryIsoCode["BL"] = "BL";
  TuiCountryIsoCode["BM"] = "BM";
  TuiCountryIsoCode["BN"] = "BN";
  TuiCountryIsoCode["BO"] = "BO";
  TuiCountryIsoCode["BQ"] = "BQ";
  TuiCountryIsoCode["BR"] = "BR";
  TuiCountryIsoCode["BS"] = "BS";
  TuiCountryIsoCode["BT"] = "BT";
  TuiCountryIsoCode["BW"] = "BW";
  TuiCountryIsoCode["BY"] = "BY";
  TuiCountryIsoCode["BZ"] = "BZ";
  TuiCountryIsoCode["CA"] = "CA";
  TuiCountryIsoCode["CD"] = "CD";
  TuiCountryIsoCode["CF"] = "CF";
  TuiCountryIsoCode["CG"] = "CG";
  TuiCountryIsoCode["CH"] = "CH";
  TuiCountryIsoCode["CI"] = "CI";
  TuiCountryIsoCode["CL"] = "CL";
  TuiCountryIsoCode["CM"] = "CM";
  TuiCountryIsoCode["CN"] = "CN";
  TuiCountryIsoCode["CO"] = "CO";
  TuiCountryIsoCode["CR"] = "CR";
  TuiCountryIsoCode["CU"] = "CU";
  TuiCountryIsoCode["CV"] = "CV";
  TuiCountryIsoCode["CW"] = "CW";
  TuiCountryIsoCode["CY"] = "CY";
  TuiCountryIsoCode["CZ"] = "CZ";
  TuiCountryIsoCode["DE"] = "DE";
  TuiCountryIsoCode["DJ"] = "DJ";
  TuiCountryIsoCode["DK"] = "DK";
  TuiCountryIsoCode["DM"] = "DM";
  TuiCountryIsoCode["DO"] = "DO";
  TuiCountryIsoCode["DZ"] = "DZ";
  TuiCountryIsoCode["EC"] = "EC";
  TuiCountryIsoCode["EE"] = "EE";
  TuiCountryIsoCode["EG"] = "EG";
  TuiCountryIsoCode["ER"] = "ER";
  TuiCountryIsoCode["ES"] = "ES";
  TuiCountryIsoCode["ET"] = "ET";
  TuiCountryIsoCode["FI"] = "FI";
  TuiCountryIsoCode["FJ"] = "FJ";
  TuiCountryIsoCode["FK"] = "FK";
  TuiCountryIsoCode["FM"] = "FM";
  TuiCountryIsoCode["FR"] = "FR";
  TuiCountryIsoCode["GA"] = "GA";
  TuiCountryIsoCode["GB"] = "GB";
  TuiCountryIsoCode["GD"] = "GD";
  TuiCountryIsoCode["GE"] = "GE";
  TuiCountryIsoCode["GF"] = "GF";
  TuiCountryIsoCode["GH"] = "GH";
  TuiCountryIsoCode["GI"] = "GI";
  TuiCountryIsoCode["GL"] = "GL";
  TuiCountryIsoCode["GM"] = "GM";
  TuiCountryIsoCode["GN"] = "GN";
  TuiCountryIsoCode["GP"] = "GP";
  TuiCountryIsoCode["GQ"] = "GQ";
  TuiCountryIsoCode["GR"] = "GR";
  TuiCountryIsoCode["GT"] = "GT";
  TuiCountryIsoCode["GW"] = "GW";
  TuiCountryIsoCode["GY"] = "GY";
  TuiCountryIsoCode["HK"] = "HK";
  TuiCountryIsoCode["HN"] = "HN";
  TuiCountryIsoCode["HR"] = "HR";
  TuiCountryIsoCode["HT"] = "HT";
  TuiCountryIsoCode["HU"] = "HU";
  TuiCountryIsoCode["ID"] = "ID";
  TuiCountryIsoCode["IE"] = "IE";
  TuiCountryIsoCode["IL"] = "IL";
  TuiCountryIsoCode["IN"] = "IN";
  TuiCountryIsoCode["IQ"] = "IQ";
  TuiCountryIsoCode["IR"] = "IR";
  TuiCountryIsoCode["IS"] = "IS";
  TuiCountryIsoCode["IT"] = "IT";
  TuiCountryIsoCode["JM"] = "JM";
  TuiCountryIsoCode["JO"] = "JO";
  TuiCountryIsoCode["JP"] = "JP";
  TuiCountryIsoCode["KE"] = "KE";
  TuiCountryIsoCode["KG"] = "KG";
  TuiCountryIsoCode["KH"] = "KH";
  TuiCountryIsoCode["KM"] = "KM";
  TuiCountryIsoCode["KN"] = "KN";
  TuiCountryIsoCode["KP"] = "KP";
  TuiCountryIsoCode["KR"] = "KR";
  TuiCountryIsoCode["KW"] = "KW";
  TuiCountryIsoCode["KY"] = "KY";
  TuiCountryIsoCode["KZ"] = "KZ";
  TuiCountryIsoCode["LA"] = "LA";
  TuiCountryIsoCode["LB"] = "LB";
  TuiCountryIsoCode["LC"] = "LC";
  TuiCountryIsoCode["LI"] = "LI";
  TuiCountryIsoCode["LK"] = "LK";
  TuiCountryIsoCode["LR"] = "LR";
  TuiCountryIsoCode["LS"] = "LS";
  TuiCountryIsoCode["LT"] = "LT";
  TuiCountryIsoCode["LU"] = "LU";
  TuiCountryIsoCode["LV"] = "LV";
  TuiCountryIsoCode["LY"] = "LY";
  TuiCountryIsoCode["MA"] = "MA";
  TuiCountryIsoCode["MC"] = "MC";
  TuiCountryIsoCode["MD"] = "MD";
  TuiCountryIsoCode["ME"] = "ME";
  TuiCountryIsoCode["MF"] = "MF";
  TuiCountryIsoCode["MG"] = "MG";
  TuiCountryIsoCode["MK"] = "MK";
  TuiCountryIsoCode["ML"] = "ML";
  TuiCountryIsoCode["MM"] = "MM";
  TuiCountryIsoCode["MN"] = "MN";
  TuiCountryIsoCode["MO"] = "MO";
  TuiCountryIsoCode["MQ"] = "MQ";
  TuiCountryIsoCode["MR"] = "MR";
  TuiCountryIsoCode["MS"] = "MS";
  TuiCountryIsoCode["MT"] = "MT";
  TuiCountryIsoCode["MU"] = "MU";
  TuiCountryIsoCode["MV"] = "MV";
  TuiCountryIsoCode["MW"] = "MW";
  TuiCountryIsoCode["MX"] = "MX";
  TuiCountryIsoCode["MY"] = "MY";
  TuiCountryIsoCode["MZ"] = "MZ";
  TuiCountryIsoCode["NA"] = "NA";
  TuiCountryIsoCode["NC"] = "NC";
  TuiCountryIsoCode["NE"] = "NE";
  TuiCountryIsoCode["NG"] = "NG";
  TuiCountryIsoCode["NI"] = "NI";
  TuiCountryIsoCode["NL"] = "NL";
  TuiCountryIsoCode["NO"] = "NO";
  TuiCountryIsoCode["NP"] = "NP";
  TuiCountryIsoCode["NZ"] = "NZ";
  TuiCountryIsoCode["OM"] = "OM";
  TuiCountryIsoCode["PA"] = "PA";
  TuiCountryIsoCode["PE"] = "PE";
  TuiCountryIsoCode["PF"] = "PF";
  TuiCountryIsoCode["PG"] = "PG";
  TuiCountryIsoCode["PH"] = "PH";
  TuiCountryIsoCode["PK"] = "PK";
  TuiCountryIsoCode["PL"] = "PL";
  TuiCountryIsoCode["PT"] = "PT";
  TuiCountryIsoCode["PW"] = "PW";
  TuiCountryIsoCode["PY"] = "PY";
  TuiCountryIsoCode["QA"] = "QA";
  TuiCountryIsoCode["RE"] = "RE";
  TuiCountryIsoCode["RO"] = "RO";
  TuiCountryIsoCode["RS"] = "RS";
  TuiCountryIsoCode["RU"] = "RU";
  TuiCountryIsoCode["RW"] = "RW";
  TuiCountryIsoCode["SA"] = "SA";
  TuiCountryIsoCode["SB"] = "SB";
  TuiCountryIsoCode["SC"] = "SC";
  TuiCountryIsoCode["SD"] = "SD";
  TuiCountryIsoCode["SE"] = "SE";
  TuiCountryIsoCode["SG"] = "SG";
  TuiCountryIsoCode["SH"] = "SH";
  TuiCountryIsoCode["SI"] = "SI";
  TuiCountryIsoCode["SK"] = "SK";
  TuiCountryIsoCode["SL"] = "SL";
  TuiCountryIsoCode["SM"] = "SM";
  TuiCountryIsoCode["SN"] = "SN";
  TuiCountryIsoCode["SO"] = "SO";
  TuiCountryIsoCode["SR"] = "SR";
  TuiCountryIsoCode["ST"] = "ST";
  TuiCountryIsoCode["SV"] = "SV";
  TuiCountryIsoCode["SX"] = "SX";
  TuiCountryIsoCode["SY"] = "SY";
  TuiCountryIsoCode["SZ"] = "SZ";
  TuiCountryIsoCode["TC"] = "TC";
  TuiCountryIsoCode["TD"] = "TD";
  TuiCountryIsoCode["TG"] = "TG";
  TuiCountryIsoCode["TH"] = "TH";
  TuiCountryIsoCode["TJ"] = "TJ";
  TuiCountryIsoCode["TL"] = "TL";
  TuiCountryIsoCode["TM"] = "TM";
  TuiCountryIsoCode["TN"] = "TN";
  TuiCountryIsoCode["TO"] = "TO";
  TuiCountryIsoCode["TR"] = "TR";
  TuiCountryIsoCode["TT"] = "TT";
  TuiCountryIsoCode["TW"] = "TW";
  TuiCountryIsoCode["TZ"] = "TZ";
  TuiCountryIsoCode["UA"] = "UA";
  TuiCountryIsoCode["UG"] = "UG";
  TuiCountryIsoCode["US"] = "US";
  TuiCountryIsoCode["UY"] = "UY";
  TuiCountryIsoCode["UZ"] = "UZ";
  TuiCountryIsoCode["VC"] = "VC";
  TuiCountryIsoCode["VE"] = "VE";
  TuiCountryIsoCode["VG"] = "VG";
  TuiCountryIsoCode["VN"] = "VN";
  TuiCountryIsoCode["VU"] = "VU";
  TuiCountryIsoCode["WS"] = "WS";
  TuiCountryIsoCode["XK"] = "XK";
  TuiCountryIsoCode["YE"] = "YE";
  TuiCountryIsoCode["YT"] = "YT";
  TuiCountryIsoCode["ZA"] = "ZA";
  TuiCountryIsoCode["ZM"] = "ZM";
  TuiCountryIsoCode["ZW"] = "ZW";
  return TuiCountryIsoCode;
}(TuiCountryIsoCode || {});
/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-i18n-enums.js.map

/***/ }),

/***/ 4585:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  Y: () => (/* binding */ tuiExtractI18n)
});

// EXTERNAL MODULE: consume shared module (default) @angular/core@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/core/fesm2022/core.mjs)
var core_mjs_ = __webpack_require__(1750);
// EXTERNAL MODULE: ./node_modules/@taiga-ui/i18n/fesm2015/taiga-ui-i18n-enums.js
var taiga_ui_i18n_enums = __webpack_require__(2725);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/i18n/fesm2015/taiga-ui-i18n-languages-english.js

const TUI_ENGLISH_LANGUAGE_ADDON_COMMERCE = {
  cardNumber: ['Number', 'Card number'],
  cardExpiry: ['Expires', 'Valid through']
};
const TUI_ENGLISH_LANGUAGE_ADDON_EDITOR = {
  colorSelectorModeNames: ['Solid color', 'Gradient'],
  toolbarTools: {
    undo: 'Undo',
    redo: 'Redo',
    font: 'Font',
    fontStyle: 'Font style',
    fontSize: 'Font size',
    bold: 'Bold',
    italic: 'Italic',
    underline: 'Underline',
    strikeThrough: 'Strike through',
    justify: 'Justify',
    justifyLeft: 'Justify left',
    justifyCenter: 'Justify center',
    justifyRight: 'Justify right',
    justifyFull: 'Justify full',
    list: 'List',
    indent: 'Indent',
    outdent: 'Outdent',
    unorderedList: 'Unordered list',
    orderedList: 'Ordered list',
    quote: 'Quote',
    foreColor: 'Color',
    backColor: 'Background color',
    hiliteColor: 'Highlight color',
    clear: 'Clear',
    link: 'Link',
    attach: 'Attach file',
    tex: 'Insert TeX',
    code: 'Code',
    image: 'Insert image',
    insertHorizontalRule: 'Insert horizontal rule',
    superscript: 'Superscript',
    subscript: 'Subscript',
    insertTable: 'Insert table',
    insertGroup: 'Insert group',
    hiliteGroup: 'Hilite group',
    removeGroup: 'Remove group',
    insertAnchor: 'Insert anchor',
    mergeCells: 'Merge cells',
    splitCells: 'Split cells',
    rowsColumnsManaging: 'Managing rows and columns',
    cellColor: 'Cell color',
    setDetails: 'Details',
    removeDetails: 'Remove details'
  },
  editorEditLink: {
    urlExample: 'example.com',
    anchorExample: 'anchor'
  },
  editorTableCommands: [['Insert column before', 'Insert column after'], ['Insert row before', 'Insert row after'], ['Delete column', 'Delete row']],
  editorCodeOptions: ['Code in the text', 'Code in block'],
  editorFontOptions: {
    small: 'Small',
    large: 'Large',
    normal: 'Normal',
    title: 'Title',
    subtitle: 'Subtitle'
  }
};
const TUI_ENGLISH_LANGUAGE_ADDON_PREVIEW = {
  previewTexts: {
    rotate: 'Rotate'
  },
  zoomTexts: {
    zoomOut: 'Zoom out',
    zoomIn: 'Zoom in',
    reset: 'Reset'
  }
};
const TUI_ENGLISH_LANGUAGE_ADDON_TABLE = {
  showHideText: 'Show/Hide',
  paginationTexts: {
    pages: 'Pages',
    linesPerPage: 'Lines per page',
    of: 'of'
  }
};
const TUI_ENGLISH_LANGUAGE_COUNTRIES = {
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AD]: 'Andorra',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AE]: 'United Arab Emirates',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AF]: 'Afghanistan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AG]: 'Antigua and Barbuda',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BL]: 'Saint Barthélemy',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AI]: 'Anguilla',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AL]: 'Albania',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AM]: 'Armenia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AO]: 'Angola',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AR]: 'Argentina',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AT]: 'Austria',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AU]: 'Australia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AW]: 'Aruba',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.AZ]: 'Azerbaijan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BA]: 'Bosnia and Herzegovina',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BB]: 'Barbados',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BD]: 'Bangladesh',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BE]: 'Belgium',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BF]: 'Burkina Faso',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BG]: 'Bulgaria',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BH]: 'Bahrain',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BI]: 'Burundi',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BJ]: 'Benin',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GF]: 'Guyana',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BM]: 'Bermuda',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BN]: 'Brunei Darussalam',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BO]: 'Bolivia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BQ]: 'Bonaire, Sint Eustatius and Saba',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BR]: 'Brazil',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BS]: 'Bahamas',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BT]: 'Bhutan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BW]: 'Botswana',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BY]: 'Belarus',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.BZ]: 'Belize',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CA]: 'Canada',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CD]: 'Dem. Rep. Congo (Kinshasa)',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CF]: 'Central African Republic',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CG]: 'Congo (Brazzaville)',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CH]: 'Switzerland',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CI]: 'Ivory Coast',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CL]: 'Chile',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CM]: 'Cameroon',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CN]: 'China',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CO]: 'Colombia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CR]: 'Costa Rica',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CU]: 'Cuba',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CV]: 'Cape Verde',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CW]: 'Curaçao',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CY]: 'Cyprus',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.CZ]: 'Czech Republic',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DE]: 'Germany',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DJ]: 'Djibouti',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DK]: 'Denmark',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DM]: 'Dominica',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DO]: 'Dominican Republic',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.DZ]: 'Algeria',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.EC]: 'Ecuador',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.EE]: 'Estonia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.EG]: 'Egypt',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ER]: 'Eritrea',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ES]: 'Spain',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ET]: 'Ethiopia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FI]: 'Finland',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FJ]: 'Fiji',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FK]: 'Falkland Islands',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FM]: 'F.S. of Micronesia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.FR]: 'France',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GA]: 'Gabon',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GB]: 'United Kingdom',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GD]: 'Grenada',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GE]: 'Georgia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GP]: 'Guadeloupe',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GH]: 'Ghana',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GI]: 'Gibraltar',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GL]: 'Greenland',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GM]: 'Gambia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GN]: 'Guinea',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MF]: 'Saint-Martin',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GQ]: 'Equatorial Guinea',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GR]: 'Greece',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GT]: 'Guatemala',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GW]: 'Guinea-Bissau',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.GY]: 'Guyana',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HK]: 'Hong Kong',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HN]: 'Honduras',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HR]: 'Croatia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HT]: 'Haiti',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.HU]: 'Hungary',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ID]: 'Indonesia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IE]: 'Ireland',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IL]: 'Israel',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IN]: 'India',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IQ]: 'Iraq',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IR]: 'Iran',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IS]: 'Iceland',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.IT]: 'Italy',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.JM]: 'Jamaica',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.JO]: 'Jordan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.JP]: 'Japan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KE]: 'Kenya',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KG]: 'Kyrgyzstan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KH]: 'Cambodia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KM]: 'Comoros',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KN]: 'Saint Kitts and Nevis',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KP]: 'Korean PDR',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KR]: 'Rep. Korea',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KW]: 'Kuwait',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KY]: 'Cayman Islands',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.KZ]: 'Kazakhstan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LA]: 'Laos',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LB]: 'Lebanon',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LC]: 'Saint Lucia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LI]: 'Liechtenstein',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LK]: 'Sri Lanka',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LR]: 'Liberia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LS]: 'Lesotho',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LT]: 'Lithuania',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LU]: 'Luxembourg',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LV]: 'Latvia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.LY]: 'Libya',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MA]: 'Morocco',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MC]: 'Monaco',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MD]: 'Moldova',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ME]: 'Montenegro',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MQ]: 'Martinique',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MG]: 'Madagascar',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MK]: 'Rep. of North Macedonia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ML]: 'Mali',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MM]: 'Burma (Myanmar)',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MN]: 'Mongolia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MO]: 'Macau',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RE]: 'Réunion',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MR]: 'Mauritania',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MS]: 'Montserrat',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MT]: 'Malta',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MU]: 'Mauritius',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MV]: 'Maldives',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MW]: 'Malawi',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MX]: 'Mexico',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MY]: 'Malaysia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.MZ]: 'Mozambique',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NA]: 'Namibia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NC]: 'New Caledonia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NE]: 'Niger',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NG]: 'Nigeria',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NI]: 'Nicaragua',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NL]: 'Netherlands',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NO]: 'Norway',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NP]: 'Nepal',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.NZ]: 'New Zealand',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.OM]: 'Oman',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PA]: 'Panama',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PE]: 'Peru',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PF]: 'French Polynesia (Tahiti)',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PG]: 'Papua New Guinea',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PH]: 'Philippines',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PK]: 'Pakistan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PL]: 'Poland',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PT]: 'Portugal',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PW]: 'Palau',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.PY]: 'Paraguay',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.QA]: 'Qatar',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.YT]: 'Mayotte',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RO]: 'Romania',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RS]: 'Serbia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RU]: 'Russia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.RW]: 'Rwanda',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SA]: 'Saudi Arabia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SB]: 'Solomon Islands',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SC]: 'Seychelles',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SD]: 'Sudan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SE]: 'Sweden',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SG]: 'Singapore',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SH]: 'Saint Helena',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SI]: 'Slovenia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SK]: 'Slovakia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SL]: 'Sierra Leone',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SM]: 'San Marino',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SN]: 'Senegal',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SO]: 'Somalia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SR]: 'Suriname',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ST]: 'Sao Tome and Principe',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SV]: 'El Salvador',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SX]: 'Sint Maarten',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SY]: 'Syrian Arab Republic',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.SZ]: 'Swaziland',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TC]: 'Turks and Caicos',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TD]: 'Chad',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TG]: 'Togo',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TH]: 'Thailand',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TJ]: 'Tajikistan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TL]: 'East Timor',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TM]: 'Turkmenistan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TN]: 'Tunisia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TO]: 'Tonga',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TR]: 'Turkey',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TT]: 'Trinidad and Tobago',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TW]: 'Taiwan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.TZ]: 'Tanzania',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.UA]: 'Ukraine',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.UG]: 'Uganda',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.US]: 'USA',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.UY]: 'Uruguay',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.UZ]: 'Uzbekistan',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VC]: 'Saint Vincent and the Grenadines',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VE]: 'Venezuela',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VG]: 'British Virgin Islands',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VN]: 'Vietnam',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.VU]: 'Vanuatu',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.WS]: 'Samoa',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.XK]: 'Kosovo',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.YE]: 'Yemen',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ZA]: 'South Africa',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ZM]: 'Zambia',
  [taiga_ui_i18n_enums/* TuiCountryIsoCode */.p.ZW]: 'Zimbabwe'
};
const TUI_ENGLISH_LANGUAGE_CORE = {
  months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
  close: 'Close',
  nothingFoundMessage: 'Nothing found',
  defaultErrorMessage: 'Value is invalid',
  spinTexts: ['Previous', 'Next'],
  shortWeekDays: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],
  countries: TUI_ENGLISH_LANGUAGE_COUNTRIES
};
const TUI_ENGLISH_LANGUAGE_KIT = {
  cancel: 'Cancel',
  done: 'Done',
  more: 'More',
  otherDate: 'Other date...',
  showAll: 'Show all',
  hide: 'Hide',
  mobileCalendarTexts: ['Choose day', 'Choose range', 'Choose days'],
  range: ['from', 'to'],
  countTexts: ['Plus', 'Minus'],
  time: {
    'HH:MM': 'HH:MM',
    'HH:MM:SS': 'HH:MM:SS',
    'HH:MM:SS.MSS': 'HH:MM:SS.MSS'
  },
  dateTexts: {
    DMY: 'dd.mm.yyyy',
    MDY: 'mm.dd.yyyy',
    YMD: 'yyyy.mm.dd'
  },
  digitalInformationUnits: ['B', 'KiB', 'MiB'],
  passwordTexts: ['Show password', 'Hide password'],
  copyTexts: ['Copy', 'Copied'],
  shortCalendarMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  pagination: ['Previous page', 'Next page'],
  fileTexts: {
    loadingError: 'Upload failed',
    preview: 'Preview',
    remove: 'Remove'
  },
  inputFileTexts: {
    defaultLabelSingle: 'or drop\u00A0it\u00A0here',
    defaultLabelMultiple: 'or drop\u00A0them\u00A0here',
    defaultLinkSingle: 'Choose a file',
    defaultLinkMultiple: 'Choose files',
    maxSizeRejectionReason: 'File is larger than ',
    formatRejectionReason: 'Wrong file type',
    drop: 'Drop file here',
    dropMultiple: 'Drop files here'
  },
  multiSelectTexts: {
    all: 'Select all',
    none: 'Select none'
  },
  prompt: {
    yes: 'Yes',
    no: 'No'
  }
};
const TUI_ENGLISH_LANGUAGE = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({
  name: 'english'
}, TUI_ENGLISH_LANGUAGE_CORE), TUI_ENGLISH_LANGUAGE_KIT), TUI_ENGLISH_LANGUAGE_ADDON_TABLE), TUI_ENGLISH_LANGUAGE_ADDON_COMMERCE), TUI_ENGLISH_LANGUAGE_ADDON_EDITOR), TUI_ENGLISH_LANGUAGE_ADDON_PREVIEW);

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-i18n-languages-english.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/of.js
var of = __webpack_require__(7673);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/i18n/fesm2015/taiga-ui-i18n-tokens.js




/**
 * Default Language for Taiga UI libraries i18n
 */
const TUI_DEFAULT_LANGUAGE = new core_mjs_.InjectionToken('[TUI_DEFAULT_LANGUAGE]', {
  factory: () => TUI_ENGLISH_LANGUAGE
});
/**
 * Language for Taiga UI libraries i18n
 */
const TUI_LANGUAGE = new core_mjs_.InjectionToken('[TUI_LANGUAGE]', {
  factory: () => (0,of.of)((0,core_mjs_.inject)(TUI_DEFAULT_LANGUAGE))
});

/**
 * Webpack chunk loader for Taiga UI libraries i18n
 * @note: cannot be transferred to a shared file
 * ReferenceError: Cannot access 'TUI_LANGUAGE_LOADER' before initialization
 */
const TUI_LANGUAGE_LOADER = new core_mjs_.InjectionToken('[TUI_LANGUAGE_LOADER]');

/**
 * Default key for search value in storage
 */
const TUI_LANGUAGE_STORAGE_KEY = new core_mjs_.InjectionToken('[TUI_LANGUAGE_STORAGE_KEY]', {
  factory: () => 'tuiLanguage'
});

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-i18n-tokens.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/isObservable.js
var isObservable = __webpack_require__(4402);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js
var switchMap = __webpack_require__(5558);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var map = __webpack_require__(6354);
;// CONCATENATED MODULE: ./node_modules/@taiga-ui/i18n/fesm2015/taiga-ui-i18n-tools.js




function tuiExtractI18n(key) {
  return () => (0,core_mjs_.inject)(TUI_LANGUAGE).pipe((0,switchMap/* switchMap */.n)(streamOrValue => (0,isObservable/* isObservable */.A)(streamOrValue) ? streamOrValue : (0,of.of)(streamOrValue)), (0,map/* map */.T)(lang => lang[key]));
}

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=taiga-ui-i18n-tools.js.map

/***/ }),

/***/ 800:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A7: () => (/* binding */ PolymorpheusTemplate),
/* harmony export */   OA: () => (/* binding */ PolymorpheusOutletDirective),
/* harmony export */   lS: () => (/* binding */ PolymorpheusComponent),
/* harmony export */   su: () => (/* binding */ POLYMORPHEUS_CONTEXT),
/* harmony export */   yJ: () => (/* binding */ PolymorpheusModule)
/* harmony export */ });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_angular_core__WEBPACK_IMPORTED_MODULE_0__);



/**
 * Use this token to access context within your components when
 * instantiating them through {@link PolymorpheusOutletDirective}
 */
const POLYMORPHEUS_CONTEXT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__.InjectionToken('POLYMORPHEUS_CONTEXT');

/**
 * Wrapper class for a component that will be used as content for {@link PolymorpheusOutletDirective}
 *
 * @param component — an Angular component to be dynamically created
 * @param injector — optional {@link Injector} for lazy loaded module case
 *
 * TODO: Remove second generic as it is irrelevant, remove `null` from injector type
 */
class PolymorpheusComponent {
  constructor(component, i) {
    this.component = component;
    this.i = i;
  }
  createInjector(injector, useValue) {
    return _angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector.create({
      parent: this.i || injector,
      providers: [{
        provide: POLYMORPHEUS_CONTEXT,
        useValue
      }]
    });
  }
}

/**
 * ng-template wrapper directive also stores {@link ChangeDetectorRef} to properly handle change detection.
 */
let PolymorpheusTemplate = /*#__PURE__*/(() => {
  class PolymorpheusTemplate {
    constructor(template, cdr) {
      this.template = template;
      this.cdr = cdr;
      this.polymorpheus = '';
    }
    check() {
      this.cdr.markForCheck();
    }
    static ngTemplateContextGuard(_dir, _ctx) {
      return true;
    }
  }
  /** @nocollapse */
  /** @nocollapse */PolymorpheusTemplate.ɵfac = function PolymorpheusTemplate_Factory(t) {
    return new (t || PolymorpheusTemplate)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef, 2), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef));
  };
  PolymorpheusTemplate.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: PolymorpheusTemplate,
    selectors: [["ng-template", "polymorpheus", ""]],
    inputs: {
      polymorpheus: "polymorpheus"
    },
    exportAs: ["polymorpheus"]
  });
  return PolymorpheusTemplate;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
class PolymorpheusContext {
  constructor($implicit) {
    this.$implicit = $implicit;
  }
  get polymorpheusOutlet() {
    return this.$implicit;
  }
}
/**
 * @deprecated: use {@link PolymorpheusContext} instead
 * Primitive types used as content by {@link PolymorpheusOutletDirective}
 */
class PrimitiveContext extends (/* unused pure expression or super */ null && (PolymorpheusContext)) {}
let PolymorpheusOutletDirective = /*#__PURE__*/(() => {
  class PolymorpheusOutletDirective {
    constructor(vcr, i, t) {
      this.vcr = vcr;
      this.i = i;
      this.t = t;
      this.content = '';
    }
    get template() {
      if (isDirective(this.content)) {
        return this.content.template;
      }
      return this.content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef ? this.content : this.t;
    }
    ngOnChanges({
      content
    }) {
      var _a;
      const context = this.getContext();
      (_a = this.c) === null || _a === void 0 ? void 0 : _a.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ChangeDetectorRef).markForCheck();
      if (!content) {
        return;
      }
      this.vcr.clear();
      const proxy = context && new Proxy(context, {
        get: (_, key) => {
          var _a;
          return (_a = this.getContext()) === null || _a === void 0 ? void 0 : _a[key];
        }
      });
      if (isComponent(this.content)) {
        this.process(this.content, proxy);
      } else if (
      // tslint:disable-next-line:triple-equals
      (context instanceof PolymorpheusContext && context.$implicit) != null) {
        this.vcr.createEmbeddedView(this.template, proxy);
      }
    }
    ngDoCheck() {
      if (isDirective(this.content)) {
        this.content.check();
      }
    }
    static ngTemplateContextGuard(_dir, _ctx) {
      return true;
    }
    getContext() {
      if (isTemplate(this.content) || isComponent(this.content)) {
        return this.context;
      }
      return new PolymorpheusContext(typeof this.content === 'function' ? this.content(this.context) : this.content);
    }
    process(content, proxy) {
      const injector = content.createInjector(this.i, proxy);
      this.c = this.vcr.createComponent(injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__.ComponentFactoryResolver).resolveComponentFactory(content.component), 0, injector);
    }
  }
  /** @nocollapse */
  /** @nocollapse */PolymorpheusOutletDirective.ɵfac = function PolymorpheusOutletDirective_Factory(t) {
    return new (t || PolymorpheusOutletDirective)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.ViewContainerRef), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.Injector), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef));
  };
  PolymorpheusOutletDirective.ɵdir = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({
    type: PolymorpheusOutletDirective,
    selectors: [["", "polymorpheusOutlet", ""]],
    inputs: {
      content: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInputFlags"].None, "polymorpheusOutlet", "content"],
      context: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵInputFlags"].None, "polymorpheusOutletContext", "context"]
    },
    features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]]
  });
  return PolymorpheusOutletDirective;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function isDirective(content) {
  return content instanceof PolymorpheusTemplate;
}
function isComponent(content) {
  return content instanceof PolymorpheusComponent;
}
function isTemplate(content) {
  return isDirective(content) || content instanceof _angular_core__WEBPACK_IMPORTED_MODULE_0__.TemplateRef;
}
let PolymorpheusModule = /*#__PURE__*/(() => {
  class PolymorpheusModule {}
  /** @nocollapse */
  /** @nocollapse */
  /** @nocollapse */PolymorpheusModule.ɵfac = function PolymorpheusModule_Factory(t) {
    return new (t || PolymorpheusModule)();
  };
  PolymorpheusModule.ɵmod = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({
    type: PolymorpheusModule
  });
  PolymorpheusModule.ɵinj = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({});
  return PolymorpheusModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Public API Surface of ng-polymorpheus
 */

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=tinkoff-ng-polymorpheus.js.map

/***/ }),

/***/ 2771:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   m: () => (/* binding */ ReplaySubject)
/* harmony export */ });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1413);
/* harmony import */ var _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6129);


class ReplaySubject extends _Subject__WEBPACK_IMPORTED_MODULE_0__/* .Subject */ .B {
  constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = _scheduler_dateTimestampProvider__WEBPACK_IMPORTED_MODULE_1__/* .dateTimestampProvider */ .U) {
    super();
    this._bufferSize = _bufferSize;
    this._windowTime = _windowTime;
    this._timestampProvider = _timestampProvider;
    this._buffer = [];
    this._infiniteTimeWindow = true;
    this._infiniteTimeWindow = _windowTime === Infinity;
    this._bufferSize = Math.max(1, _bufferSize);
    this._windowTime = Math.max(1, _windowTime);
  }
  next(value) {
    const {
      isStopped,
      _buffer,
      _infiniteTimeWindow,
      _timestampProvider,
      _windowTime
    } = this;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    super.next(value);
  }
  _subscribe(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    const subscription = this._innerSubscribe(subscriber);
    const {
      _infiniteTimeWindow,
      _buffer
    } = this;
    const copy = _buffer.slice();
    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  }
  _trimBuffer() {
    const {
      _bufferSize,
      _timestampProvider,
      _buffer,
      _infiniteTimeWindow
    } = this;
    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      const now = _timestampProvider.now();
      let last = 0;
      for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last = i;
      }
      last && _buffer.splice(0, last + 1);
    }
  }
}
//# sourceMappingURL=ReplaySubject.js.map

/***/ }),

/***/ 3726:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   R: () => (/* binding */ fromEvent)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8750);
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1985);
/* harmony import */ var _operators_mergeMap__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(1397);
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7441);
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8071);
/* harmony import */ var _util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6450);






const nodeEventEmitterMethods = ['addListener', 'removeListener'];
const eventTargetMethods = ['addEventListener', 'removeEventListener'];
const jqueryMethods = ['on', 'off'];
function fromEvent(target, eventName, options, resultSelector) {
  if ((0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .T)(options)) {
    resultSelector = options;
    options = undefined;
  }
  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe((0,_util_mapOneOrManyArgs__WEBPACK_IMPORTED_MODULE_1__/* .mapOneOrManyArgs */ .I)(resultSelector));
  }
  const [add, remove] = isEventTarget(target) ? eventTargetMethods.map(methodName => handler => target[methodName](eventName, handler, options)) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [];
  if (!add) {
    if ((0,_util_isArrayLike__WEBPACK_IMPORTED_MODULE_2__/* .isArrayLike */ .X)(target)) {
      return (0,_operators_mergeMap__WEBPACK_IMPORTED_MODULE_3__/* .mergeMap */ .Z)(subTarget => fromEvent(subTarget, eventName, options))((0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_4__/* .innerFrom */ .Tg)(target));
    }
  }
  if (!add) {
    throw new TypeError('Invalid event target');
  }
  return new _Observable__WEBPACK_IMPORTED_MODULE_5__/* .Observable */ .c(subscriber => {
    const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);
    add(handler);
    return () => remove(handler);
  });
}
function toCommonHandlerRegistry(target, eventName) {
  return methodName => handler => target[methodName](eventName, handler);
}
function isNodeStyleEventEmitter(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .T)(target.addListener) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .T)(target.removeListener);
}
function isJQueryStyleEventEmitter(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .T)(target.on) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .T)(target.off);
}
function isEventTarget(target) {
  return (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .T)(target.addEventListener) && (0,_util_isFunction__WEBPACK_IMPORTED_MODULE_0__/* .isFunction */ .T)(target.removeEventListener);
}
//# sourceMappingURL=fromEvent.js.map

/***/ }),

/***/ 7786:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   h: () => (/* binding */ merge)
/* harmony export */ });
/* harmony import */ var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6365);
/* harmony import */ var _innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8750);
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(983);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9326);
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6648);





function merge(...args) {
  const scheduler = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__/* .popScheduler */ .lI)(args);
  const concurrent = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__/* .popNumber */ .R0)(args, Infinity);
  const sources = args;
  return !sources.length ? _empty__WEBPACK_IMPORTED_MODULE_1__/* .EMPTY */ .w : sources.length === 1 ? (0,_innerFrom__WEBPACK_IMPORTED_MODULE_2__/* .innerFrom */ .Tg)(sources[0]) : (0,_operators_mergeAll__WEBPACK_IMPORTED_MODULE_3__/* .mergeAll */ .U)(concurrent)((0,_from__WEBPACK_IMPORTED_MODULE_4__/* .from */ .H)(sources, scheduler));
}
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ 1584:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  O: () => (/* binding */ timer)
});

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Observable.js
var Observable = __webpack_require__(1985);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/async.js
var scheduler_async = __webpack_require__(3236);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/isScheduler.js
var isScheduler = __webpack_require__(9470);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/util/isDate.js
function isValidDate(value) {
  return value instanceof Date && !isNaN(value);
}
//# sourceMappingURL=isDate.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/observable/timer.js




function timer(dueTime = 0, intervalOrScheduler, scheduler = scheduler_async/* async */.b) {
  let intervalDuration = -1;
  if (intervalOrScheduler != null) {
    if ((0,isScheduler/* isScheduler */.m)(intervalOrScheduler)) {
      scheduler = intervalOrScheduler;
    } else {
      intervalDuration = intervalOrScheduler;
    }
  }
  return new Observable/* Observable */.c(subscriber => {
    let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
    if (due < 0) {
      due = 0;
    }
    let n = 0;
    return scheduler.schedule(function () {
      if (!subscriber.closed) {
        subscriber.next(n++);
        if (0 <= intervalDuration) {
          this.schedule(undefined, intervalDuration);
        } else {
          subscriber.complete();
        }
      }
    }, due);
  });
}
//# sourceMappingURL=timer.js.map

/***/ }),

/***/ 152:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   B: () => (/* binding */ debounceTime)
/* harmony export */ });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3236);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9974);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4360);



function debounceTime(dueTime, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__/* .asyncScheduler */ .E) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .N)((source, subscriber) => {
    let activeTask = null;
    let lastValue = null;
    let lastTime = null;
    const emit = () => {
      if (activeTask) {
        activeTask.unsubscribe();
        activeTask = null;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };
    function emitWhenIdle() {
      const targetTime = lastTime + dueTime;
      const now = scheduler.now();
      if (now < targetTime) {
        activeTask = this.schedule(undefined, targetTime - now);
        subscriber.add(activeTask);
        return;
      }
      emit();
    }
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__/* .createOperatorSubscriber */ ._)(subscriber, value => {
      lastValue = value;
      lastTime = scheduler.now();
      if (!activeTask) {
        activeTask = scheduler.schedule(emitWhenIdle, dueTime);
        subscriber.add(activeTask);
      }
    }, () => {
      emit();
      subscriber.complete();
    }, undefined, () => {
      lastValue = activeTask = null;
    }));
  });
}
//# sourceMappingURL=debounceTime.js.map

/***/ }),

/***/ 5335:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  c: () => (/* binding */ delay)
});

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/async.js
var scheduler_async = __webpack_require__(3236);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/concat.js + 1 modules
var concat = __webpack_require__(8793);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/take.js
var take = __webpack_require__(6697);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js
var ignoreElements = __webpack_require__(3557);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/mapTo.js
var mapTo = __webpack_require__(3703);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/mergeMap.js + 1 modules
var mergeMap = __webpack_require__(1397);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
var innerFrom = __webpack_require__(8750);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js






function delayWhen(delayDurationSelector, subscriptionDelay) {
  if (subscriptionDelay) {
    return source => (0,concat/* concat */.x)(subscriptionDelay.pipe((0,take/* take */.s)(1), (0,ignoreElements/* ignoreElements */.w)()), source.pipe(delayWhen(delayDurationSelector)));
  }
  return (0,mergeMap/* mergeMap */.Z)((value, index) => (0,innerFrom/* innerFrom */.Tg)(delayDurationSelector(value, index)).pipe((0,take/* take */.s)(1), (0,mapTo/* mapTo */.u)(value)));
}
//# sourceMappingURL=delayWhen.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/timer.js + 1 modules
var timer = __webpack_require__(1584);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/operators/delay.js



function delay(due, scheduler = scheduler_async/* asyncScheduler */.E) {
  const duration = (0,timer/* timer */.O)(due, scheduler);
  return delayWhen(() => duration);
}
//# sourceMappingURL=delay.js.map

/***/ }),

/***/ 3294:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   F: () => (/* binding */ distinctUntilChanged)
/* harmony export */ });
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3669);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9974);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4360);



function distinctUntilChanged(comparator, keySelector = _util_identity__WEBPACK_IMPORTED_MODULE_0__/* .identity */ .D) {
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .N)((source, subscriber) => {
    let previousKey;
    let first = true;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_2__/* .createOperatorSubscriber */ ._)(subscriber, value => {
      const currentKey = keySelector(value);
      if (first || !comparator(previousKey, currentKey)) {
        first = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),

/***/ 3557:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   w: () => (/* binding */ ignoreElements)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9974);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4360);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5343);



function ignoreElements() {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .N)((source, subscriber) => {
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ ._)(subscriber, _util_noop__WEBPACK_IMPORTED_MODULE_2__/* .noop */ .l));
  });
}
//# sourceMappingURL=ignoreElements.js.map

/***/ }),

/***/ 3946:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   J: () => (/* binding */ pairwise)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9974);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4360);


function pairwise() {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .N)((source, subscriber) => {
    let prev;
    let hasPrev = false;
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_1__/* .createOperatorSubscriber */ ._)(subscriber, value => {
      const p = prev;
      prev = value;
      hasPrev && subscriber.next([p, value]);
      hasPrev = true;
    }));
  });
}
//# sourceMappingURL=pairwise.js.map

/***/ }),

/***/ 7469:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ repeat)
/* harmony export */ });
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(983);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9974);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4360);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8750);
/* harmony import */ var _observable_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(1584);





function repeat(countOrConfig) {
  let count = Infinity;
  let delay;
  if (countOrConfig != null) {
    if (typeof countOrConfig === 'object') {
      ({
        count = Infinity,
        delay
      } = countOrConfig);
    } else {
      count = countOrConfig;
    }
  }
  return count <= 0 ? () => _observable_empty__WEBPACK_IMPORTED_MODULE_0__/* .EMPTY */ .w : (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .N)((source, subscriber) => {
    let soFar = 0;
    let sourceSub;
    const resubscribe = () => {
      sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();
      sourceSub = null;
      if (delay != null) {
        const notifier = typeof delay === 'number' ? (0,_observable_timer__WEBPACK_IMPORTED_MODULE_2__/* .timer */ .O)(delay) : (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__/* .innerFrom */ .Tg)(delay(soFar));
        const notifierSubscriber = (0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__/* .createOperatorSubscriber */ ._)(subscriber, () => {
          notifierSubscriber.unsubscribe();
          subscribeToSource();
        });
        notifier.subscribe(notifierSubscriber);
      } else {
        subscribeToSource();
      }
    };
    const subscribeToSource = () => {
      let syncUnsub = false;
      sourceSub = source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_4__/* .createOperatorSubscriber */ ._)(subscriber, undefined, () => {
        if (++soFar < count) {
          if (sourceSub) {
            resubscribe();
          } else {
            syncUnsub = true;
          }
        } else {
          subscriber.complete();
        }
      }));
      if (syncUnsub) {
        resubscribe();
      }
    };
    subscribeToSource();
  });
}
//# sourceMappingURL=repeat.js.map

/***/ }),

/***/ 3981:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Y: () => (/* binding */ repeatWhen)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8750);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1413);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9974);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4360);




function repeatWhen(notifier) {
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_0__/* .operate */ .N)((source, subscriber) => {
    let innerSub;
    let syncResub = false;
    let completions$;
    let isNotifierComplete = false;
    let isMainComplete = false;
    const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);
    const getCompletionSubject = () => {
      if (!completions$) {
        completions$ = new _Subject__WEBPACK_IMPORTED_MODULE_1__/* .Subject */ .B();
        (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__/* .innerFrom */ .Tg)(notifier(completions$)).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__/* .createOperatorSubscriber */ ._)(subscriber, () => {
          if (innerSub) {
            subscribeForRepeatWhen();
          } else {
            syncResub = true;
          }
        }, () => {
          isNotifierComplete = true;
          checkComplete();
        }));
      }
      return completions$;
    };
    const subscribeForRepeatWhen = () => {
      isMainComplete = false;
      innerSub = source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__/* .createOperatorSubscriber */ ._)(subscriber, undefined, () => {
        isMainComplete = true;
        !checkComplete() && getCompletionSubject().next();
      }));
      if (syncResub) {
        innerSub.unsubscribe();
        innerSub = null;
        syncResub = false;
        subscribeForRepeatWhen();
      }
    };
    subscribeForRepeatWhen();
  });
}
//# sourceMappingURL=repeatWhen.js.map

/***/ }),

/***/ 7647:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   u: () => (/* binding */ share)
/* harmony export */ });
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8750);
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1413);
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7707);
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9974);




function share(options = {}) {
  const {
    connector = () => new _Subject__WEBPACK_IMPORTED_MODULE_0__/* .Subject */ .B(),
    resetOnError = true,
    resetOnComplete = true,
    resetOnRefCountZero = true
  } = options;
  return wrapperSource => {
    let connection;
    let resetConnection;
    let subject;
    let refCount = 0;
    let hasCompleted = false;
    let hasErrored = false;
    const cancelReset = () => {
      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
      resetConnection = undefined;
    };
    const reset = () => {
      cancelReset();
      connection = subject = undefined;
      hasCompleted = hasErrored = false;
    };
    const resetAndUnsubscribe = () => {
      const conn = connection;
      reset();
      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
    };
    return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .N)((source, subscriber) => {
      refCount++;
      if (!hasErrored && !hasCompleted) {
        cancelReset();
      }
      const dest = subject = subject !== null && subject !== void 0 ? subject : connector();
      subscriber.add(() => {
        refCount--;
        if (refCount === 0 && !hasErrored && !hasCompleted) {
          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
        }
      });
      dest.subscribe(subscriber);
      if (!connection && refCount > 0) {
        connection = new _Subscriber__WEBPACK_IMPORTED_MODULE_2__/* .SafeSubscriber */ .Ms({
          next: value => dest.next(value),
          error: err => {
            hasErrored = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnError, err);
            dest.error(err);
          },
          complete: () => {
            hasCompleted = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnComplete);
            dest.complete();
          }
        });
        (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__/* .innerFrom */ .Tg)(source).subscribe(connection);
      }
    })(wrapperSource);
  };
}
function handleReset(reset, on, ...args) {
  if (on === true) {
    reset();
    return;
  }
  if (on === false) {
    return;
  }
  const onSubscriber = new _Subscriber__WEBPACK_IMPORTED_MODULE_2__/* .SafeSubscriber */ .Ms({
    next: () => {
      onSubscriber.unsubscribe();
      reset();
    }
  });
  return (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_3__/* .innerFrom */ .Tg)(on(...args)).subscribe(onSubscriber);
}
//# sourceMappingURL=share.js.map

/***/ }),

/***/ 4668:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   t: () => (/* binding */ shareReplay)
/* harmony export */ });
/* harmony import */ var _ReplaySubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2771);
/* harmony import */ var _share__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7647);


function shareReplay(configOrBufferSize, windowTime, scheduler) {
  let bufferSize;
  let refCount = false;
  if (configOrBufferSize && typeof configOrBufferSize === 'object') {
    ({
      bufferSize = Infinity,
      windowTime = Infinity,
      refCount = false,
      scheduler
    } = configOrBufferSize);
  } else {
    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
  }
  return (0,_share__WEBPACK_IMPORTED_MODULE_0__/* .share */ .u)({
    connector: () => new _ReplaySubject__WEBPACK_IMPORTED_MODULE_1__/* .ReplaySubject */ .m(bufferSize, windowTime, scheduler),
    resetOnError: true,
    resetOnComplete: false,
    resetOnRefCountZero: refCount
  });
}
//# sourceMappingURL=shareReplay.js.map

/***/ }),

/***/ 3386:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  c: () => (/* binding */ throttleTime)
});

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/async.js
var scheduler_async = __webpack_require__(3236);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/lift.js
var lift = __webpack_require__(9974);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
var OperatorSubscriber = __webpack_require__(4360);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
var innerFrom = __webpack_require__(8750);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/operators/throttle.js



function throttle(durationSelector, config) {
  return (0,lift/* operate */.N)((source, subscriber) => {
    const {
      leading = true,
      trailing = false
    } = config !== null && config !== void 0 ? config : {};
    let hasValue = false;
    let sendValue = null;
    let throttled = null;
    let isComplete = false;
    const endThrottling = () => {
      throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
      throttled = null;
      if (trailing) {
        send();
        isComplete && subscriber.complete();
      }
    };
    const cleanupThrottling = () => {
      throttled = null;
      isComplete && subscriber.complete();
    };
    const startThrottle = value => throttled = (0,innerFrom/* innerFrom */.Tg)(durationSelector(value)).subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, endThrottling, cleanupThrottling));
    const send = () => {
      if (hasValue) {
        hasValue = false;
        const value = sendValue;
        sendValue = null;
        subscriber.next(value);
        !isComplete && startThrottle(value);
      }
    };
    source.subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, value => {
      hasValue = true;
      sendValue = value;
      !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
    }, () => {
      isComplete = true;
      !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
    }));
  });
}
//# sourceMappingURL=throttle.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/timer.js + 1 modules
var timer = __webpack_require__(1584);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/operators/throttleTime.js



function throttleTime(duration, scheduler = scheduler_async/* asyncScheduler */.E, config) {
  const duration$ = (0,timer/* timer */.O)(duration, scheduler);
  return throttle(() => duration$, config);
}
//# sourceMappingURL=throttleTime.js.map

/***/ }),

/***/ 3993:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ withLatestFrom)
/* harmony export */ });
/* harmony import */ var _util_lift__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9974);
/* harmony import */ var _OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4360);
/* harmony import */ var _observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8750);
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(3669);
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5343);
/* harmony import */ var _util_args__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9326);






function withLatestFrom(...inputs) {
  const project = (0,_util_args__WEBPACK_IMPORTED_MODULE_0__/* .popResultSelector */ .ms)(inputs);
  return (0,_util_lift__WEBPACK_IMPORTED_MODULE_1__/* .operate */ .N)((source, subscriber) => {
    const len = inputs.length;
    const otherValues = new Array(len);
    let hasValue = inputs.map(() => false);
    let ready = false;
    for (let i = 0; i < len; i++) {
      (0,_observable_innerFrom__WEBPACK_IMPORTED_MODULE_2__/* .innerFrom */ .Tg)(inputs[i]).subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__/* .createOperatorSubscriber */ ._)(subscriber, value => {
        otherValues[i] = value;
        if (!ready && !hasValue[i]) {
          hasValue[i] = true;
          (ready = hasValue.every(_util_identity__WEBPACK_IMPORTED_MODULE_4__/* .identity */ .D)) && (hasValue = null);
        }
      }, _util_noop__WEBPACK_IMPORTED_MODULE_5__/* .noop */ .l));
    }
    source.subscribe((0,_OperatorSubscriber__WEBPACK_IMPORTED_MODULE_3__/* .createOperatorSubscriber */ ._)(subscriber, value => {
      if (ready) {
        const values = [value, ...otherValues];
        subscriber.next(project ? project(...values) : values);
      }
    }));
  });
}
//# sourceMappingURL=withLatestFrom.js.map

/***/ }),

/***/ 6780:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  R: () => (/* binding */ AsyncAction)
});

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Subscription.js + 1 modules
var Subscription = __webpack_require__(8359);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/Action.js

class Action extends Subscription/* Subscription */.yU {
  constructor(scheduler, work) {
    super();
  }
  schedule(state, delay = 0) {
    return this;
  }
}
//# sourceMappingURL=Action.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js
const intervalProvider = {
  setInterval(handler, timeout, ...args) {
    const {
      delegate
    } = intervalProvider;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval(handler, timeout, ...args);
    }
    return setInterval(handler, timeout, ...args);
  },
  clearInterval(handle) {
    const {
      delegate
    } = intervalProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: undefined
};
//# sourceMappingURL=intervalProvider.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/arrRemove.js
var arrRemove = __webpack_require__(7908);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js



class AsyncAction extends Action {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
    this.pending = false;
  }
  schedule(state, delay = 0) {
    var _a;
    if (this.closed) {
      return this;
    }
    this.state = state;
    const id = this.id;
    const scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }
    this.pending = true;
    this.delay = delay;
    this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
    return this;
  }
  requestAsyncId(scheduler, _id, delay = 0) {
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
  }
  recycleAsyncId(_scheduler, id, delay = 0) {
    if (delay != null && this.delay === delay && this.pending === false) {
      return id;
    }
    if (id != null) {
      intervalProvider.clearInterval(id);
    }
    return undefined;
  }
  execute(state, delay) {
    if (this.closed) {
      return new Error('executing a cancelled action');
    }
    this.pending = false;
    const error = this._execute(state, delay);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  }
  _execute(state, _delay) {
    let errored = false;
    let errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error('Scheduled action threw falsy error');
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  }
  unsubscribe() {
    if (!this.closed) {
      const {
        id,
        scheduler
      } = this;
      const {
        actions
      } = scheduler;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      (0,arrRemove/* arrRemove */.o)(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      super.unsubscribe();
    }
  }
}
//# sourceMappingURL=AsyncAction.js.map

/***/ }),

/***/ 9687:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  q: () => (/* binding */ AsyncScheduler)
});

// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = __webpack_require__(6129);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/Scheduler.js

class Scheduler {
  constructor(schedulerActionCtor, now = Scheduler.now) {
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  schedule(work, delay = 0, state) {
    return new this.schedulerActionCtor(this, work).schedule(state, delay);
  }
}
Scheduler.now = dateTimestampProvider/* dateTimestampProvider */.U.now;
//# sourceMappingURL=Scheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js

class AsyncScheduler extends Scheduler {
  constructor(SchedulerAction, now = Scheduler.now) {
    super(SchedulerAction, now);
    this.actions = [];
    this._active = false;
  }
  flush(action) {
    const {
      actions
    } = this;
    if (this._active) {
      actions.push(action);
      return;
    }
    let error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  }
}
//# sourceMappingURL=AsyncScheduler.js.map

/***/ }),

/***/ 3236:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   E: () => (/* binding */ asyncScheduler),
/* harmony export */   b: () => (/* binding */ async)
/* harmony export */ });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6780);
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9687);


const asyncScheduler = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__/* .AsyncScheduler */ .q(_AsyncAction__WEBPACK_IMPORTED_MODULE_1__/* .AsyncAction */ .R);
const async = asyncScheduler;
//# sourceMappingURL=async.js.map

/***/ }),

/***/ 6129:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   U: () => (/* binding */ dateTimestampProvider)
/* harmony export */ });
const dateTimestampProvider = {
  now() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: undefined
};
//# sourceMappingURL=dateTimestampProvider.js.map

/***/ }),

/***/ 2326:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   K: () => (/* binding */ argsOrArgArray)
/* harmony export */ });
const {
  isArray
} = Array;
function argsOrArgArray(args) {
  return args.length === 1 && isArray(args[0]) ? args[0] : args;
}
//# sourceMappingURL=argsOrArgArray.js.map

/***/ }),

/***/ 9969:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FX: () => (/* binding */ ɵPRE_STYLE),
/* harmony export */   If: () => (/* binding */ AnimationMetadataType),
/* harmony export */   K2: () => (/* binding */ sequence),
/* harmony export */   MA: () => (/* binding */ animateChild),
/* harmony export */   P: () => (/* binding */ query),
/* harmony export */   hZ: () => (/* binding */ trigger),
/* harmony export */   i0: () => (/* binding */ animate),
/* harmony export */   iF: () => (/* binding */ style),
/* harmony export */   kY: () => (/* binding */ transition),
/* harmony export */   kp: () => (/* binding */ AUTO_STYLE),
/* harmony export */   sf: () => (/* binding */ NoopAnimationPlayer),
/* harmony export */   ui: () => (/* binding */ AnimationGroupPlayer),
/* harmony export */   yc: () => (/* binding */ stagger)
/* harmony export */ });
/* unused harmony exports AnimationBuilder, AnimationFactory, animation, group, keyframes, state, useAnimation, ɵBrowserAnimationBuilder */
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6412);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1750);
/**
 * @license Angular v17.3.0
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */





/**
 * @description Constants for the categories of parameters that can be defined for animations.
 *
 * A corresponding function defines a set of parameters for each category, and
 * collects them into a corresponding `AnimationMetadata` object.
 *
 * @publicApi
 */
var AnimationMetadataType = /*#__PURE__*/function (AnimationMetadataType) {
  /**
   * Associates a named animation state with a set of CSS styles.
   * See [`state()`](api/animations/state)
   */
  AnimationMetadataType[AnimationMetadataType["State"] = 0] = "State";
  /**
   * Data for a transition from one animation state to another.
   * See `transition()`
   */
  AnimationMetadataType[AnimationMetadataType["Transition"] = 1] = "Transition";
  /**
   * Contains a set of animation steps.
   * See `sequence()`
   */
  AnimationMetadataType[AnimationMetadataType["Sequence"] = 2] = "Sequence";
  /**
   * Contains a set of animation steps.
   * See `{@link animations/group group()}`
   */
  AnimationMetadataType[AnimationMetadataType["Group"] = 3] = "Group";
  /**
   * Contains an animation step.
   * See `animate()`
   */
  AnimationMetadataType[AnimationMetadataType["Animate"] = 4] = "Animate";
  /**
   * Contains a set of animation steps.
   * See `keyframes()`
   */
  AnimationMetadataType[AnimationMetadataType["Keyframes"] = 5] = "Keyframes";
  /**
   * Contains a set of CSS property-value pairs into a named style.
   * See `style()`
   */
  AnimationMetadataType[AnimationMetadataType["Style"] = 6] = "Style";
  /**
   * Associates an animation with an entry trigger that can be attached to an element.
   * See `trigger()`
   */
  AnimationMetadataType[AnimationMetadataType["Trigger"] = 7] = "Trigger";
  /**
   * Contains a re-usable animation.
   * See `animation()`
   */
  AnimationMetadataType[AnimationMetadataType["Reference"] = 8] = "Reference";
  /**
   * Contains data to use in executing child animations returned by a query.
   * See `animateChild()`
   */
  AnimationMetadataType[AnimationMetadataType["AnimateChild"] = 9] = "AnimateChild";
  /**
   * Contains animation parameters for a re-usable animation.
   * See `useAnimation()`
   */
  AnimationMetadataType[AnimationMetadataType["AnimateRef"] = 10] = "AnimateRef";
  /**
   * Contains child-animation query data.
   * See `query()`
   */
  AnimationMetadataType[AnimationMetadataType["Query"] = 11] = "Query";
  /**
   * Contains data for staggering an animation sequence.
   * See `stagger()`
   */
  AnimationMetadataType[AnimationMetadataType["Stagger"] = 12] = "Stagger";
  return AnimationMetadataType;
}(AnimationMetadataType || {});
/**
 * Specifies automatic styling.
 *
 * @publicApi
 */
const AUTO_STYLE = '*';
/**
 * Creates a named animation trigger, containing a  list of [`state()`](api/animations/state)
 * and `transition()` entries to be evaluated when the expression
 * bound to the trigger changes.
 *
 * @param name An identifying string.
 * @param definitions  An animation definition object, containing an array of
 * [`state()`](api/animations/state) and `transition()` declarations.
 *
 * @return An object that encapsulates the trigger data.
 *
 * @usageNotes
 * Define an animation trigger in the `animations` section of `@Component` metadata.
 * In the template, reference the trigger by name and bind it to a trigger expression that
 * evaluates to a defined animation state, using the following format:
 *
 * `[@triggerName]="expression"`
 *
 * Animation trigger bindings convert all values to strings, and then match the
 * previous and current values against any linked transitions.
 * Booleans can be specified as `1` or `true` and `0` or `false`.
 *
 * ### Usage Example
 *
 * The following example creates an animation trigger reference based on the provided
 * name value.
 * The provided animation value is expected to be an array consisting of state and
 * transition declarations.
 *
 * ```typescript
 * @Component({
 *   selector: "my-component",
 *   templateUrl: "my-component-tpl.html",
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component makes use of the defined trigger
 * by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * ### Using an inline function
 * The `transition` animation method also supports reading an inline function which can decide
 * if its associated animation should be run.
 *
 * ```typescript
 * // this method is run each time the `myAnimationTrigger` trigger value changes.
 * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
 string]: any}): boolean {
 *   // notice that `element` and `params` are also available here
 *   return toState == 'yes-please-animate';
 * }
 *
 * @Component({
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger('myAnimationTrigger', [
 *       transition(myInlineMatcherFn, [
 *         // the animation sequence code
 *       ]),
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "yes-please-animate";
 * }
 * ```
 *
 * ### Disabling Animations
 * When true, the special animation control binding `@.disabled` binding prevents
 * all animations from rendering.
 * Place the  `@.disabled` binding on an element to disable
 * animations on the element itself, as well as any inner animation triggers
 * within the element.
 *
 * The following example shows how to use this feature:
 *
 * ```typescript
 * @Component({
 *   selector: 'my-component',
 *   template: `
 *     <div [@.disabled]="isDisabled">
 *       <div [@childAnimation]="exp"></div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger("childAnimation", [
 *       // ...
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   isDisabled = true;
 *   exp = '...';
 * }
 * ```
 *
 * When `@.disabled` is true, it prevents the `@childAnimation` trigger from animating,
 * along with any inner animations.
 *
 * ### Disable animations application-wide
 * When an area of the template is set to have animations disabled,
 * **all** inner components have their animations disabled as well.
 * This means that you can disable all animations for an app
 * by placing a host binding set on `@.disabled` on the topmost Angular component.
 *
 * ```typescript
 * import {Component, HostBinding} from '@angular/core';
 *
 * @Component({
 *   selector: 'app-component',
 *   templateUrl: 'app.component.html',
 * })
 * class AppComponent {
 *   @HostBinding('@.disabled')
 *   public animationsDisabled = true;
 * }
 * ```
 *
 * ### Overriding disablement of inner animations
 * Despite inner animations being disabled, a parent animation can `query()`
 * for inner elements located in disabled areas of the template and still animate
 * them if needed. This is also the case for when a sub animation is
 * queried by a parent and then later animated using `animateChild()`.
 *
 * ### Detecting when an animation is disabled
 * If a region of the DOM (or the entire application) has its animations disabled, the animation
 * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides
 * an instance of an `AnimationEvent`. If animations are disabled,
 * the `.disabled` flag on the event is true.
 *
 * @publicApi
 */
function trigger(name, definitions) {
  return {
    type: AnimationMetadataType.Trigger,
    name,
    definitions,
    options: {}
  };
}
/**
 * Defines an animation step that combines styling information with timing information.
 *
 * @param timings Sets `AnimateTimings` for the parent animation.
 * A string in the format "duration [delay] [easing]".
 *  - Duration and delay are expressed as a number and optional time unit,
 * such as "1s" or "10ms" for one second and 10 milliseconds, respectively.
 * The default unit is milliseconds.
 *  - The easing value controls how the animation accelerates and decelerates
 * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,
 * `ease-in-out`, or a `cubic-bezier()` function call.
 * If not supplied, no easing is applied.
 *
 * For example, the string "1s 100ms ease-out" specifies a duration of
 * 1000 milliseconds, and delay of 100 ms, and the "ease-out" easing style,
 * which decelerates near the end of the duration.
 * @param styles Sets AnimationStyles for the parent animation.
 * A function call to either `style()` or `keyframes()`
 * that returns a collection of CSS style entries to be applied to the parent animation.
 * When null, uses the styles from the destination state.
 * This is useful when describing an animation step that will complete an animation;
 * see "Animating to the final state" in `transitions()`.
 * @returns An object that encapsulates the animation step.
 *
 * @usageNotes
 * Call within an animation `sequence()`, `{@link animations/group group()}`, or
 * `transition()` call to specify an animation step
 * that applies given style data to the parent animation for a given amount of time.
 *
 * ### Syntax Examples
 * **Timing examples**
 *
 * The following examples show various `timings` specifications.
 * - `animate(500)` : Duration is 500 milliseconds.
 * - `animate("1s")` : Duration is 1000 milliseconds.
 * - `animate("100ms 0.5s")` : Duration is 100 milliseconds, delay is 500 milliseconds.
 * - `animate("5s ease-in")` : Duration is 5000 milliseconds, easing in.
 * - `animate("5s 10ms cubic-bezier(.17,.67,.88,.1)")` : Duration is 5000 milliseconds, delay is 10
 * milliseconds, easing according to a bezier curve.
 *
 * **Style examples**
 *
 * The following example calls `style()` to set a single CSS style.
 * ```typescript
 * animate(500, style({ background: "red" }))
 * ```
 * The following example calls `keyframes()` to set a CSS style
 * to different values for successive keyframes.
 * ```typescript
 * animate(500, keyframes(
 *  [
 *   style({ background: "blue" }),
 *   style({ background: "red" })
 *  ])
 * ```
 *
 * @publicApi
 */
function animate(timings, styles = null) {
  return {
    type: AnimationMetadataType.Animate,
    styles,
    timings
  };
}
/**
 * @description Defines a list of animation steps to be run in parallel.
 *
 * @param steps An array of animation step objects.
 * - When steps are defined by `style()` or `animate()`
 * function calls, each call within the group is executed instantly.
 * - To specify offset styles to be applied at a later time, define steps with
 * `keyframes()`, or use `animate()` calls with a delay value.
 * For example:
 *
 * ```typescript
 * group([
 *   animate("1s", style({ background: "black" })),
 *   animate("2s", style({ color: "white" }))
 * ])
 * ```
 *
 * @param options An options object containing a delay and
 * developer-defined parameters that provide styling defaults and
 * can be overridden on invocation.
 *
 * @return An object that encapsulates the group data.
 *
 * @usageNotes
 * Grouped animations are useful when a series of styles must be
 * animated at different starting times and closed off at different ending times.
 *
 * When called within a `sequence()` or a
 * `transition()` call, does not continue to the next
 * instruction until all of the inner animation steps have completed.
 *
 * @publicApi
 */
function group(steps, options = null) {
  return {
    type: AnimationMetadataType.Group,
    steps,
    options
  };
}
/**
 * Defines a list of animation steps to be run sequentially, one by one.
 *
 * @param steps An array of animation step objects.
 * - Steps defined by `style()` calls apply the styling data immediately.
 * - Steps defined by `animate()` calls apply the styling data over time
 *   as specified by the timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 }),
 *   animate("1s", style({ opacity: 1 }))
 * ])
 * ```
 *
 * @param options An options object containing a delay and
 * developer-defined parameters that provide styling defaults and
 * can be overridden on invocation.
 *
 * @return An object that encapsulates the sequence data.
 *
 * @usageNotes
 * When you pass an array of steps to a
 * `transition()` call, the steps run sequentially by default.
 * Compare this to the `{@link animations/group group()}` call, which runs animation steps in
 *parallel.
 *
 * When a sequence is used within a `{@link animations/group group()}` or a `transition()` call,
 * execution continues to the next instruction only after each of the inner animation
 * steps have completed.
 *
 * @publicApi
 **/
function sequence(steps, options = null) {
  return {
    type: AnimationMetadataType.Sequence,
    steps,
    options
  };
}
/**
 * Declares a key/value object containing CSS properties/styles that
 * can then be used for an animation [`state`](api/animations/state), within an animation
 *`sequence`, or as styling data for calls to `animate()` and `keyframes()`.
 *
 * @param tokens A set of CSS styles or HTML styles associated with an animation state.
 * The value can be any of the following:
 * - A key-value style pair associating a CSS property with a value.
 * - An array of key-value style pairs.
 * - An asterisk (*), to use auto-styling, where styles are derived from the element
 * being animated and applied to the animation when it starts.
 *
 * Auto-styling can be used to define a state that depends on layout or other
 * environmental factors.
 *
 * @return An object that encapsulates the style data.
 *
 * @usageNotes
 * The following examples create animation styles that collect a set of
 * CSS property values:
 *
 * ```typescript
 * // string values for CSS properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical pixel values
 * style({ width: 100, height: 0 })
 * ```
 *
 * The following example uses auto-styling to allow an element to animate from
 * a height of 0 up to its full height:
 *
 * ```
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * @publicApi
 **/
function style(tokens) {
  return {
    type: AnimationMetadataType.Style,
    styles: tokens,
    offset: null
  };
}
/**
 * Declares an animation state within a trigger attached to an element.
 *
 * @param name One or more names for the defined state in a comma-separated string.
 * The following reserved state names can be supplied to define a style for specific use
 * cases:
 *
 * - `void` You can associate styles with this name to be used when
 * the element is detached from the application. For example, when an `ngIf` evaluates
 * to false, the state of the associated element is void.
 *  - `*` (asterisk) Indicates the default state. You can associate styles with this name
 * to be used as the fallback when the state that is being animated is not declared
 * within the trigger.
 *
 * @param styles A set of CSS styles associated with this state, created using the
 * `style()` function.
 * This set of styles persists on the element once the state has been reached.
 * @param options Parameters that can be passed to the state when it is invoked.
 * 0 or more key-value pairs.
 * @return An object that encapsulates the new state data.
 *
 * @usageNotes
 * Use the `trigger()` function to register states to an animation trigger.
 * Use the `transition()` function to animate between states.
 * When a state is active within a component, its associated styles persist on the element,
 * even when the animation ends.
 *
 * @publicApi
 **/
function state(name, styles, options) {
  return {
    type: AnimationMetadataType.State,
    name,
    styles,
    options
  };
}
/**
 * Defines a set of animation styles, associating each style with an optional `offset` value.
 *
 * @param steps A set of animation styles with optional offset data.
 * The optional `offset` value for a style specifies a percentage of the total animation
 * time at which that style is applied.
 * @returns An object that encapsulates the keyframes data.
 *
 * @usageNotes
 * Use with the `animate()` call. Instead of applying animations
 * from the current state
 * to the destination state, keyframes describe how each style entry is applied and at what point
 * within the animation arc.
 * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).
 *
 * ### Usage
 *
 * In the following example, the offset values describe
 * when each `backgroundColor` value is applied. The color is red at the start, and changes to
 * blue when 20% of the total time has elapsed.
 *
 * ```typescript
 * // the provided offset values
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * If there are no `offset` values specified in the style entries, the offsets
 * are calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 *```

 * @publicApi
 */
function keyframes(steps) {
  return {
    type: AnimationMetadataType.Keyframes,
    steps
  };
}
/**
 * Declares an animation transition which is played when a certain specified condition is met.
 *
 * @param stateChangeExpr A string with a specific format or a function that specifies when the
 * animation transition should occur (see [State Change Expression](#state-change-expression)).
 *
 * @param steps One or more animation objects that represent the animation's instructions.
 *
 * @param options An options object that can be used to specify a delay for the animation or provide
 * custom parameters for it.
 *
 * @returns An object that encapsulates the transition data.
 *
 * @usageNotes
 *
 * ### State Change Expression
 *
 * The State Change Expression instructs Angular when to run the transition's animations, it can
 *either be
 *  - a string with a specific syntax
 *  - or a function that compares the previous and current state (value of the expression bound to
 *    the element's trigger) and returns `true` if the transition should occur or `false` otherwise
 *
 * The string format can be:
 *  - `fromState => toState`, which indicates that the transition's animations should occur then the
 *    expression bound to the trigger's element goes from `fromState` to `toState`
 *
 *    _Example:_
 *      ```typescript
 *        transition('open => closed', animate('.5s ease-out', style({ height: 0 }) ))
 *      ```
 *
 *  - `fromState <=> toState`, which indicates that the transition's animations should occur then
 *    the expression bound to the trigger's element goes from `fromState` to `toState` or vice versa
 *
 *    _Example:_
 *      ```typescript
 *        transition('enabled <=> disabled', animate('1s cubic-bezier(0.8,0.3,0,1)'))
 *      ```
 *
 *  - `:enter`/`:leave`, which indicates that the transition's animations should occur when the
 *    element enters or exists the DOM
 *
 *    _Example:_
 *      ```typescript
 *        transition(':enter', [
 *          style({ opacity: 0 }),
 *          animate('500ms', style({ opacity: 1 }))
 *        ])
 *      ```
 *
 *  - `:increment`/`:decrement`, which indicates that the transition's animations should occur when
 *    the numerical expression bound to the trigger's element has increased in value or decreased
 *
 *    _Example:_
 *      ```typescript
 *        transition(':increment', query('@counter', animateChild()))
 *      ```
 *
 *  - a sequence of any of the above divided by commas, which indicates that transition's animations
 *    should occur whenever one of the state change expressions matches
 *
 *    _Example:_
 *      ```typescript
 *        transition(':increment, * => enabled, :enter', animate('1s ease', keyframes([
 *          style({ transform: 'scale(1)', offset: 0}),
 *          style({ transform: 'scale(1.1)', offset: 0.7}),
 *          style({ transform: 'scale(1)', offset: 1})
 *        ]))),
 *      ```
 *
 * Also note that in such context:
 *  - `void` can be used to indicate the absence of the element
 *  - asterisks can be used as wildcards that match any state
 *  - (as a consequence of the above, `void => *` is equivalent to `:enter` and `* => void` is
 *    equivalent to `:leave`)
 *  - `true` and `false` also match expression values of `1` and `0` respectively (but do not match
 *    _truthy_ and _falsy_ values)
 *
 * <div class="alert is-helpful">
 *
 *  Be careful about entering end leaving elements as their transitions present a common
 *  pitfall for developers.
 *
 *  Note that when an element with a trigger enters the DOM its `:enter` transition always
 *  gets executed, but its `:leave` transition will not be executed if the element is removed
 *  alongside its parent (as it will be removed "without warning" before its transition has
 *  a chance to be executed, the only way that such transition can occur is if the element
 *  is exiting the DOM on its own).
 *
 *
 * </div>
 *
 * ### Animating to a Final State
 *
 * If the final step in a transition is a call to `animate()` that uses a timing value
 * with no `style` data, that step is automatically considered the final animation arc,
 * for the element to reach the final state, in such case Angular automatically adds or removes
 * CSS styles to ensure that the element is in the correct final state.
 *
 *
 * ### Usage Examples
 *
 *  - Transition animations applied based on
 *    the trigger's expression value
 *
 *   ```HTML
 *   <div [@myAnimationTrigger]="myStatusExp">
 *    ...
 *   </div>
 *   ```
 *
 *   ```typescript
 *   trigger("myAnimationTrigger", [
 *     ..., // states
 *     transition("on => off, open => closed", animate(500)),
 *     transition("* <=> error", query('.indicator', animateChild()))
 *   ])
 *   ```
 *
 *  - Transition animations applied based on custom logic dependent
 *    on the trigger's expression value and provided parameters
 *
 *    ```HTML
 *    <div [@myAnimationTrigger]="{
 *     value: stepName,
 *     params: { target: currentTarget }
 *    }">
 *     ...
 *    </div>
 *    ```
 *
 *    ```typescript
 *    trigger("myAnimationTrigger", [
 *      ..., // states
 *      transition(
 *        (fromState, toState, _element, params) =>
 *          ['firststep', 'laststep'].includes(fromState.toLowerCase())
 *          && toState === params?.['target'],
 *        animate('1s')
 *      )
 *    ])
 *    ```
 *
 * @publicApi
 **/
function transition(stateChangeExpr, steps, options = null) {
  return {
    type: AnimationMetadataType.Transition,
    expr: stateChangeExpr,
    animation: steps,
    options
  };
}
/**
 * Produces a reusable animation that can be invoked in another animation or sequence,
 * by calling the `useAnimation()` function.
 *
 * @param steps One or more animation objects, as returned by the `animate()`
 * or `sequence()` function, that form a transformation from one state to another.
 * A sequence is used by default when you pass an array.
 * @param options An options object that can contain a delay value for the start of the
 * animation, and additional developer-defined parameters.
 * Provided values for additional parameters are used as defaults,
 * and override values can be passed to the caller on invocation.
 * @returns An object that encapsulates the animation data.
 *
 * @usageNotes
 * The following example defines a reusable animation, providing some default parameter
 * values.
 *
 * ```typescript
 * var fadeAnimation = animation([
 *   style({ opacity: '{{ start }}' }),
 *   animate('{{ time }}',
 *   style({ opacity: '{{ end }}'}))
 *   ],
 *   { params: { time: '1000ms', start: 0, end: 1 }});
 * ```
 *
 * The following invokes the defined animation with a call to `useAnimation()`,
 * passing in override parameter values.
 *
 * ```js
 * useAnimation(fadeAnimation, {
 *   params: {
 *     time: '2s',
 *     start: 1,
 *     end: 0
 *   }
 * })
 * ```
 *
 * If any of the passed-in parameter values are missing from this call,
 * the default values are used. If one or more parameter values are missing before a step is
 * animated, `useAnimation()` throws an error.
 *
 * @publicApi
 */
function animation(steps, options = null) {
  return {
    type: AnimationMetadataType.Reference,
    animation: steps,
    options
  };
}
/**
 * Executes a queried inner animation element within an animation sequence.
 *
 * @param options An options object that can contain a delay value for the start of the
 * animation, and additional override values for developer-defined parameters.
 * @return An object that encapsulates the child animation data.
 *
 * @usageNotes
 * Each time an animation is triggered in Angular, the parent animation
 * has priority and any child animations are blocked. In order
 * for a child animation to run, the parent animation must query each of the elements
 * containing child animations, and run them using this function.
 *
 * Note that this feature is designed to be used with `query()` and it will only work
 * with animations that are assigned using the Angular animation library. CSS keyframes
 * and transitions are not handled by this API.
 *
 * @publicApi
 */
function animateChild(options = null) {
  return {
    type: AnimationMetadataType.AnimateChild,
    options
  };
}
/**
 * Starts a reusable animation that is created using the `animation()` function.
 *
 * @param animation The reusable animation to start.
 * @param options An options object that can contain a delay value for the start of
 * the animation, and additional override values for developer-defined parameters.
 * @return An object that contains the animation parameters.
 *
 * @publicApi
 */
function useAnimation(animation, options = null) {
  return {
    type: AnimationMetadataType.AnimateRef,
    animation,
    options
  };
}
/**
 * Finds one or more inner elements within the current element that is
 * being animated within a sequence. Use with `animate()`.
 *
 * @param selector The element to query, or a set of elements that contain Angular-specific
 * characteristics, specified with one or more of the following tokens.
 *  - `query(":enter")` or `query(":leave")` : Query for newly inserted/removed elements (not
 *     all elements can be queried via these tokens, see
 *     [Entering and Leaving Elements](#entering-and-leaving-elements))
 *  - `query(":animating")` : Query all currently animating elements.
 *  - `query("@triggerName")` : Query elements that contain an animation trigger.
 *  - `query("@*")` : Query all elements that contain an animation triggers.
 *  - `query(":self")` : Include the current element into the animation sequence.
 *
 * @param animation One or more animation steps to apply to the queried element or elements.
 * An array is treated as an animation sequence.
 * @param options An options object. Use the 'limit' field to limit the total number of
 * items to collect.
 * @return An object that encapsulates the query data.
 *
 * @usageNotes
 *
 * ### Multiple Tokens
 *
 * Tokens can be merged into a combined query selector string. For example:
 *
 * ```typescript
 *  query(':self, .record:enter, .record:leave, @subTrigger', [...])
 * ```
 *
 * The `query()` function collects multiple elements and works internally by using
 * `element.querySelectorAll`. Use the `limit` field of an options object to limit
 * the total number of items to be collected. For example:
 *
 * ```js
 * query('div', [
 *   animate(...),
 *   animate(...)
 * ], { limit: 1 })
 * ```
 *
 * By default, throws an error when zero items are found. Set the
 * `optional` flag to ignore this error. For example:
 *
 * ```js
 * query('.some-element-that-may-not-be-there', [
 *   animate(...),
 *   animate(...)
 * ], { optional: true })
 * ```
 *
 * ### Entering and Leaving Elements
 *
 * Not all elements can be queried via the `:enter` and `:leave` tokens, the only ones
 * that can are those that Angular assumes can enter/leave based on their own logic
 * (if their insertion/removal is simply a consequence of that of their parent they
 * should be queried via a different token in their parent's `:enter`/`:leave` transitions).
 *
 * The only elements Angular assumes can enter/leave based on their own logic (thus the only
 * ones that can be queried via the `:enter` and `:leave` tokens) are:
 *  - Those inserted dynamically (via `ViewContainerRef`)
 *  - Those that have a structural directive (which, under the hood, are a subset of the above ones)
 *
 * <div class="alert is-helpful">
 *
 *  Note that elements will be successfully queried via `:enter`/`:leave` even if their
 *  insertion/removal is not done manually via `ViewContainerRef`or caused by their structural
 *  directive (e.g. they enter/exit alongside their parent).
 *
 * </div>
 *
 * <div class="alert is-important">
 *
 *  There is an exception to what previously mentioned, besides elements entering/leaving based on
 *  their own logic, elements with an animation trigger can always be queried via `:leave` when
 * their parent is also leaving.
 *
 * </div>
 *
 * ### Usage Example
 *
 * The following example queries for inner elements and animates them
 * individually using `animate()`.
 *
 * ```typescript
 * @Component({
 *   selector: 'inner',
 *   template: `
 *     <div [@queryAnimation]="exp">
 *       <h1>Title</h1>
 *       <div class="content">
 *         Blah blah blah
 *       </div>
 *     </div>
 *   `,
 *   animations: [
 *    trigger('queryAnimation', [
 *      transition('* => goAnimate', [
 *        // hide the inner elements
 *        query('h1', style({ opacity: 0 })),
 *        query('.content', style({ opacity: 0 })),
 *
 *        // animate the inner elements in, one by one
 *        query('h1', animate(1000, style({ opacity: 1 }))),
 *        query('.content', animate(1000, style({ opacity: 1 }))),
 *      ])
 *    ])
 *  ]
 * })
 * class Cmp {
 *   exp = '';
 *
 *   goAnimate() {
 *     this.exp = 'goAnimate';
 *   }
 * }
 * ```
 *
 * @publicApi
 */
function query(selector, animation, options = null) {
  return {
    type: AnimationMetadataType.Query,
    selector,
    animation,
    options
  };
}
/**
 * Use within an animation `query()` call to issue a timing gap after
 * each queried item is animated.
 *
 * @param timings A delay value.
 * @param animation One ore more animation steps.
 * @returns An object that encapsulates the stagger data.
 *
 * @usageNotes
 * In the following example, a container element wraps a list of items stamped out
 * by an `ngFor`. The container element contains an animation trigger that will later be set
 * to query for each of the inner items.
 *
 * Each time items are added, the opacity fade-in animation runs,
 * and each removed item is faded out.
 * When either of these animations occur, the stagger effect is
 * applied after each item's animation is started.
 *
 * ```html
 * <!-- list.component.html -->
 * <button (click)="toggle()">Show / Hide Items</button>
 * <hr />
 * <div [@listAnimation]="items.length">
 *   <div *ngFor="let item of items">
 *     {{ item }}
 *   </div>
 * </div>
 * ```
 *
 * Here is the component code:
 *
 * ```typescript
 * import {trigger, transition, style, animate, query, stagger} from '@angular/animations';
 * @Component({
 *   templateUrl: 'list.component.html',
 *   animations: [
 *     trigger('listAnimation', [
 *     ...
 *     ])
 *   ]
 * })
 * class ListComponent {
 *   items = [];
 *
 *   showItems() {
 *     this.items = [0,1,2,3,4];
 *   }
 *
 *   hideItems() {
 *     this.items = [];
 *   }
 *
 *   toggle() {
 *     this.items.length ? this.hideItems() : this.showItems();
 *    }
 *  }
 * ```
 *
 * Here is the animation trigger code:
 *
 * ```typescript
 * trigger('listAnimation', [
 *   transition('* => *', [ // each time the binding value changes
 *     query(':leave', [
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 0 }))
 *       ])
 *     ]),
 *     query(':enter', [
 *       style({ opacity: 0 }),
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 1 }))
 *       ])
 *     ])
 *   ])
 * ])
 * ```
 *
 * @publicApi
 */
function stagger(timings, animation) {
  return {
    type: AnimationMetadataType.Stagger,
    timings,
    animation
  };
}

/**
 * An injectable service that produces an animation sequence programmatically within an
 * Angular component or directive.
 * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.
 *
 * @usageNotes
 *
 * To use this service, add it to your component or directive as a dependency.
 * The service is instantiated along with your component.
 *
 * Apps do not typically need to create their own animation players, but if you
 * do need to, follow these steps:
 *
 * 1. Use the <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code> method
 * to create a programmatic animation. The method returns an `AnimationFactory` instance.
 *
 * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.
 *
 * 3. Use the player object to control the animation programmatically.
 *
 * For example:
 *
 * ```ts
 * // import the service from BrowserAnimationsModule
 * import {AnimationBuilder} from '@angular/animations';
 * // require the service as a dependency
 * class MyCmp {
 *   constructor(private _builder: AnimationBuilder) {}
 *
 *   makeAnimation(element: any) {
 *     // first define a reusable animation
 *     const myAnimation = this._builder.build([
 *       style({ width: 0 }),
 *       animate(1000, style({ width: '100px' }))
 *     ]);
 *
 *     // use the returned factory object to create a player
 *     const player = myAnimation.create(element);
 *
 *     player.play();
 *   }
 * }
 * ```
 *
 * @publicApi
 */
let AnimationBuilder = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class AnimationBuilder {
    static #_ = this.ɵfac = function AnimationBuilder_Factory(t) {
      return new (t || AnimationBuilder)();
    };
    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
      token: AnimationBuilder,
      factory: () => (() => inject(BrowserAnimationBuilder))(),
      providedIn: 'root'
    });
  }
  return AnimationBuilder;
})()));
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * A factory object returned from the
 * <code>[AnimationBuilder.build](api/animations/AnimationBuilder#build)()</code>
 * method.
 *
 * @publicApi
 */
class AnimationFactory {}
let BrowserAnimationBuilder = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class BrowserAnimationBuilder extends AnimationBuilder {
    constructor(rootRenderer, doc) {
      super();
      this.animationModuleType = inject(ANIMATION_MODULE_TYPE, {
        optional: true
      });
      this._nextAnimationId = 0;
      const typeData = {
        id: '0',
        encapsulation: ViewEncapsulation.None,
        styles: [],
        data: {
          animation: []
        }
      };
      this._renderer = rootRenderer.createRenderer(doc.body, typeData);
      if (this.animationModuleType === null && !isAnimationRenderer(this._renderer)) {
        // We only support AnimationRenderer & DynamicDelegationRenderer for this AnimationBuilder
        throw new ɵRuntimeError(3600 /* RuntimeErrorCode.BROWSER_ANIMATION_BUILDER_INJECTED_WITHOUT_ANIMATIONS */, (typeof ngDevMode === 'undefined' || ngDevMode) && 'Angular detected that the `AnimationBuilder` was injected, but animation support was not enabled. ' + 'Please make sure that you enable animations in your application by calling `provideAnimations()` or `provideAnimationsAsync()` function.');
      }
    }
    build(animation) {
      const id = this._nextAnimationId;
      this._nextAnimationId++;
      const entry = Array.isArray(animation) ? sequence(animation) : animation;
      issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
      return new BrowserAnimationFactory(id, this._renderer);
    }
    static #_ = this.ɵfac = function BrowserAnimationBuilder_Factory(t) {
      return new (t || BrowserAnimationBuilder)(i0.ɵɵinject(i0.RendererFactory2), i0.ɵɵinject(DOCUMENT));
    };
    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
      token: BrowserAnimationBuilder,
      factory: BrowserAnimationBuilder.ɵfac,
      providedIn: 'root'
    });
  }
  return BrowserAnimationBuilder;
})()));
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
class BrowserAnimationFactory extends AnimationFactory {
  constructor(_id, _renderer) {
    super();
    this._id = _id;
    this._renderer = _renderer;
  }
  create(element, options) {
    return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
  }
}
class RendererAnimationPlayer {
  constructor(id, element, options, _renderer) {
    this.id = id;
    this.element = element;
    this._renderer = _renderer;
    this.parentPlayer = null;
    this._started = false;
    this.totalTime = 0;
    this._command('create', options);
  }
  _listen(eventName, callback) {
    return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);
  }
  _command(command, ...args) {
    issueAnimationCommand(this._renderer, this.element, this.id, command, args);
  }
  onDone(fn) {
    this._listen('done', fn);
  }
  onStart(fn) {
    this._listen('start', fn);
  }
  onDestroy(fn) {
    this._listen('destroy', fn);
  }
  init() {
    this._command('init');
  }
  hasStarted() {
    return this._started;
  }
  play() {
    this._command('play');
    this._started = true;
  }
  pause() {
    this._command('pause');
  }
  restart() {
    this._command('restart');
  }
  finish() {
    this._command('finish');
  }
  destroy() {
    this._command('destroy');
  }
  reset() {
    this._command('reset');
    this._started = false;
  }
  setPosition(p) {
    this._command('setPosition', p);
  }
  getPosition() {
    return unwrapAnimationRenderer(this._renderer)?.engine?.players[this.id]?.getPosition() ?? 0;
  }
}
function issueAnimationCommand(renderer, element, id, command, args) {
  renderer.setProperty(element, `@@${id}:${command}`, args);
}
/**
 * The following 2 methods cannot reference their correct types (AnimationRenderer &
 * DynamicDelegationRenderer) since this would introduce a import cycle.
 */
function unwrapAnimationRenderer(renderer) {
  const type = renderer.ɵtype;
  if (type === 0 /* AnimationRendererType.Regular */) {
    return renderer;
  } else if (type === 1 /* AnimationRendererType.Delegated */) {
    return renderer.animationRenderer;
  }
  return null;
}
function isAnimationRenderer(renderer) {
  const type = renderer.ɵtype;
  return type === 0 /* AnimationRendererType.Regular */ || type === 1 /* AnimationRendererType.Delegated */;
}

/**
 * An empty programmatic controller for reusable animations.
 * Used internally when animations are disabled, to avoid
 * checking for the null case when an animation player is expected.
 *
 * @see {@link animate}
 * @see {@link AnimationPlayer}
 * @see {@link ɵAnimationGroupPlayer AnimationGroupPlayer}
 *
 * @publicApi
 */
class NoopAnimationPlayer {
  constructor(duration = 0, delay = 0) {
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._originalOnDoneFns = [];
    this._originalOnStartFns = [];
    this._started = false;
    this._destroyed = false;
    this._finished = false;
    this._position = 0;
    this.parentPlayer = null;
    this.totalTime = duration + delay;
  }
  _onFinish() {
    if (!this._finished) {
      this._finished = true;
      this._onDoneFns.forEach(fn => fn());
      this._onDoneFns = [];
    }
  }
  onStart(fn) {
    this._originalOnStartFns.push(fn);
    this._onStartFns.push(fn);
  }
  onDone(fn) {
    this._originalOnDoneFns.push(fn);
    this._onDoneFns.push(fn);
  }
  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }
  hasStarted() {
    return this._started;
  }
  init() {}
  play() {
    if (!this.hasStarted()) {
      this._onStart();
      this.triggerMicrotask();
    }
    this._started = true;
  }
  /** @internal */
  triggerMicrotask() {
    queueMicrotask(() => this._onFinish());
  }
  _onStart() {
    this._onStartFns.forEach(fn => fn());
    this._onStartFns = [];
  }
  pause() {}
  restart() {}
  finish() {
    this._onFinish();
  }
  destroy() {
    if (!this._destroyed) {
      this._destroyed = true;
      if (!this.hasStarted()) {
        this._onStart();
      }
      this.finish();
      this._onDestroyFns.forEach(fn => fn());
      this._onDestroyFns = [];
    }
  }
  reset() {
    this._started = false;
    this._finished = false;
    this._onStartFns = this._originalOnStartFns;
    this._onDoneFns = this._originalOnDoneFns;
  }
  setPosition(position) {
    this._position = this.totalTime ? position * this.totalTime : 1;
  }
  getPosition() {
    return this.totalTime ? this._position / this.totalTime : 1;
  }
  /** @internal */
  triggerCallback(phaseName) {
    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
    methods.forEach(fn => fn());
    methods.length = 0;
  }
}

/**
 * A programmatic controller for a group of reusable animations.
 * Used internally to control animations.
 *
 * @see {@link AnimationPlayer}
 * @see {@link animations/group group}
 *
 */
class AnimationGroupPlayer {
  constructor(_players) {
    this._onDoneFns = [];
    this._onStartFns = [];
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this._onDestroyFns = [];
    this.parentPlayer = null;
    this.totalTime = 0;
    this.players = _players;
    let doneCount = 0;
    let destroyCount = 0;
    let startCount = 0;
    const total = this.players.length;
    if (total == 0) {
      queueMicrotask(() => this._onFinish());
    } else {
      this.players.forEach(player => {
        player.onDone(() => {
          if (++doneCount == total) {
            this._onFinish();
          }
        });
        player.onDestroy(() => {
          if (++destroyCount == total) {
            this._onDestroy();
          }
        });
        player.onStart(() => {
          if (++startCount == total) {
            this._onStart();
          }
        });
      });
    }
    this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);
  }
  _onFinish() {
    if (!this._finished) {
      this._finished = true;
      this._onDoneFns.forEach(fn => fn());
      this._onDoneFns = [];
    }
  }
  init() {
    this.players.forEach(player => player.init());
  }
  onStart(fn) {
    this._onStartFns.push(fn);
  }
  _onStart() {
    if (!this.hasStarted()) {
      this._started = true;
      this._onStartFns.forEach(fn => fn());
      this._onStartFns = [];
    }
  }
  onDone(fn) {
    this._onDoneFns.push(fn);
  }
  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }
  hasStarted() {
    return this._started;
  }
  play() {
    if (!this.parentPlayer) {
      this.init();
    }
    this._onStart();
    this.players.forEach(player => player.play());
  }
  pause() {
    this.players.forEach(player => player.pause());
  }
  restart() {
    this.players.forEach(player => player.restart());
  }
  finish() {
    this._onFinish();
    this.players.forEach(player => player.finish());
  }
  destroy() {
    this._onDestroy();
  }
  _onDestroy() {
    if (!this._destroyed) {
      this._destroyed = true;
      this._onFinish();
      this.players.forEach(player => player.destroy());
      this._onDestroyFns.forEach(fn => fn());
      this._onDestroyFns = [];
    }
  }
  reset() {
    this.players.forEach(player => player.reset());
    this._destroyed = false;
    this._finished = false;
    this._started = false;
  }
  setPosition(p) {
    const timeAtPosition = p * this.totalTime;
    this.players.forEach(player => {
      const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
      player.setPosition(position);
    });
  }
  getPosition() {
    const longestPlayer = this.players.reduce((longestSoFar, player) => {
      const newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;
      return newPlayerIsLongest ? player : longestSoFar;
    }, null);
    return longestPlayer != null ? longestPlayer.getPosition() : 0;
  }
  beforeDestroy() {
    this.players.forEach(player => {
      if (player.beforeDestroy) {
        player.beforeDestroy();
      }
    });
  }
  /** @internal */
  triggerCallback(phaseName) {
    const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
    methods.forEach(fn => fn());
    methods.length = 0;
  }
}
const ɵPRE_STYLE = '!';

/**
 * @module
 * @description
 * Entry point for all animation APIs of the animation package.
 */

/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */

// This file is not used to build this module. It is only used during editing

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=animations.mjs.map

/***/ }),

/***/ 8008:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   LS: () => (/* binding */ WebAnimationsDriver),
/* harmony export */   O6: () => (/* binding */ AnimationEngine),
/* harmony export */   Pw: () => (/* binding */ NoopAnimationDriver),
/* harmony export */   R6: () => (/* binding */ AnimationRendererFactory),
/* harmony export */   Xw: () => (/* binding */ AnimationDriver),
/* harmony export */   Yp: () => (/* binding */ AnimationStyleNormalizer),
/* harmony export */   zT: () => (/* binding */ WebAnimationsStyleNormalizer)
/* harmony export */ });
/* unused harmony exports ɵAnimation, ɵAnimationRenderer, ɵBaseAnimationRenderer, ɵNoopAnimationStyleNormalizer, ɵWebAnimationsPlayer, ɵallowPreviousPlayerStylesMerge, ɵcamelCaseToDashCase, ɵcontainsElement, ɵcreateEngine, ɵgetParentElement, ɵinvokeQuery, ɵnormalizeKeyframes, ɵvalidateStyleProperty, ɵvalidateWebAnimatableStyleProperty */
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9969);
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1750);
/**
 * @license Angular v17.3.0
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */




const LINE_START = '\n - ';
function invalidTimingValue(exp) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3000 /* RuntimeErrorCode.INVALID_TIMING_VALUE */, ngDevMode && `The provided timing value "${exp}" is invalid.`);
}
function negativeStepValue() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3100 /* RuntimeErrorCode.NEGATIVE_STEP_VALUE */, ngDevMode && 'Duration values below 0 are not allowed for this animation step.');
}
function negativeDelayValue() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3101 /* RuntimeErrorCode.NEGATIVE_DELAY_VALUE */, ngDevMode && 'Delay values below 0 are not allowed for this animation step.');
}
function invalidStyleParams(varName) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3001 /* RuntimeErrorCode.INVALID_STYLE_PARAMS */, ngDevMode && `Unable to resolve the local animation param ${varName} in the given list of values`);
}
function invalidParamValue(varName) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3003 /* RuntimeErrorCode.INVALID_PARAM_VALUE */, ngDevMode && `Please provide a value for the animation param ${varName}`);
}
function invalidNodeType(nodeType) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3004 /* RuntimeErrorCode.INVALID_NODE_TYPE */, ngDevMode && `Unable to resolve animation metadata node #${nodeType}`);
}
function invalidCssUnitValue(userProvidedProperty, value) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3005 /* RuntimeErrorCode.INVALID_CSS_UNIT_VALUE */, ngDevMode && `Please provide a CSS unit value for ${userProvidedProperty}:${value}`);
}
function invalidTrigger() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3006 /* RuntimeErrorCode.INVALID_TRIGGER */, ngDevMode && "animation triggers cannot be prefixed with an `@` sign (e.g. trigger('@foo', [...]))");
}
function invalidDefinition() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3007 /* RuntimeErrorCode.INVALID_DEFINITION */, ngDevMode && 'only state() and transition() definitions can sit inside of a trigger()');
}
function invalidState(metadataName, missingSubs) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3008 /* RuntimeErrorCode.INVALID_STATE */, ngDevMode && `state("${metadataName}", ...) must define default values for all the following style substitutions: ${missingSubs.join(', ')}`);
}
function invalidStyleValue(value) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3002 /* RuntimeErrorCode.INVALID_STYLE_VALUE */, ngDevMode && `The provided style string value ${value} is not allowed.`);
}
function invalidProperty(prop) {
  return new ɵRuntimeError(3009 /* RuntimeErrorCode.INVALID_PROPERTY */, ngDevMode && `The provided animation property "${prop}" is not a supported CSS property for animations`);
}
function invalidParallelAnimation(prop, firstStart, firstEnd, secondStart, secondEnd) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3010 /* RuntimeErrorCode.INVALID_PARALLEL_ANIMATION */, ngDevMode && `The CSS property "${prop}" that exists between the times of "${firstStart}ms" and "${firstEnd}ms" is also being animated in a parallel animation between the times of "${secondStart}ms" and "${secondEnd}ms"`);
}
function invalidKeyframes() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3011 /* RuntimeErrorCode.INVALID_KEYFRAMES */, ngDevMode && `keyframes() must be placed inside of a call to animate()`);
}
function invalidOffset() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3012 /* RuntimeErrorCode.INVALID_OFFSET */, ngDevMode && `Please ensure that all keyframe offsets are between 0 and 1`);
}
function keyframeOffsetsOutOfOrder() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3200 /* RuntimeErrorCode.KEYFRAME_OFFSETS_OUT_OF_ORDER */, ngDevMode && `Please ensure that all keyframe offsets are in order`);
}
function keyframesMissingOffsets() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3202 /* RuntimeErrorCode.KEYFRAMES_MISSING_OFFSETS */, ngDevMode && `Not all style() steps within the declared keyframes() contain offsets`);
}
function invalidStagger() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3013 /* RuntimeErrorCode.INVALID_STAGGER */, ngDevMode && `stagger() can only be used inside of query()`);
}
function invalidQuery(selector) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3014 /* RuntimeErrorCode.INVALID_QUERY */, ngDevMode && `\`query("${selector}")\` returned zero elements. (Use \`query("${selector}", { optional: true })\` if you wish to allow this.)`);
}
function invalidExpression(expr) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3015 /* RuntimeErrorCode.INVALID_EXPRESSION */, ngDevMode && `The provided transition expression "${expr}" is not supported`);
}
function invalidTransitionAlias(alias) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3016 /* RuntimeErrorCode.INVALID_TRANSITION_ALIAS */, ngDevMode && `The transition alias value "${alias}" is not supported`);
}
function validationFailed(errors) {
  return new ɵRuntimeError(3500 /* RuntimeErrorCode.VALIDATION_FAILED */, ngDevMode && `animation validation failed:\n${errors.map(err => err.message).join('\n')}`);
}
function buildingFailed(errors) {
  return new ɵRuntimeError(3501 /* RuntimeErrorCode.BUILDING_FAILED */, ngDevMode && `animation building failed:\n${errors.map(err => err.message).join('\n')}`);
}
function triggerBuildFailed(name, errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3404 /* RuntimeErrorCode.TRIGGER_BUILD_FAILED */, ngDevMode && `The animation trigger "${name}" has failed to build due to the following errors:\n - ${errors.map(err => err.message).join('\n - ')}`);
}
function animationFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3502 /* RuntimeErrorCode.ANIMATION_FAILED */, ngDevMode && `Unable to animate due to the following errors:${LINE_START}${errors.map(err => err.message).join(LINE_START)}`);
}
function registerFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3503 /* RuntimeErrorCode.REGISTRATION_FAILED */, ngDevMode && `Unable to build the animation due to the following errors: ${errors.map(err => err.message).join('\n')}`);
}
function missingOrDestroyedAnimation() {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3300 /* RuntimeErrorCode.MISSING_OR_DESTROYED_ANIMATION */, ngDevMode && "The requested animation doesn't exist or has already been destroyed");
}
function createAnimationFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3504 /* RuntimeErrorCode.CREATE_ANIMATION_FAILED */, ngDevMode && `Unable to create the animation due to the following errors:${errors.map(err => err.message).join('\n')}`);
}
function missingPlayer(id) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3301 /* RuntimeErrorCode.MISSING_PLAYER */, ngDevMode && `Unable to find the timeline player referenced by ${id}`);
}
function missingTrigger(phase, name) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3302 /* RuntimeErrorCode.MISSING_TRIGGER */, ngDevMode && `Unable to listen on the animation trigger event "${phase}" because the animation trigger "${name}" doesn\'t exist!`);
}
function missingEvent(name) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3303 /* RuntimeErrorCode.MISSING_EVENT */, ngDevMode && `Unable to listen on the animation trigger "${name}" because the provided event is undefined!`);
}
function unsupportedTriggerEvent(phase, name) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3400 /* RuntimeErrorCode.UNSUPPORTED_TRIGGER_EVENT */, ngDevMode && `The provided animation trigger event "${phase}" for the animation trigger "${name}" is not supported!`);
}
function unregisteredTrigger(name) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3401 /* RuntimeErrorCode.UNREGISTERED_TRIGGER */, ngDevMode && `The provided animation trigger "${name}" has not been registered!`);
}
function triggerTransitionsFailed(errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3402 /* RuntimeErrorCode.TRIGGER_TRANSITIONS_FAILED */, ngDevMode && `Unable to process animations due to the following failed trigger transitions\n ${errors.map(err => err.message).join('\n')}`);
}
function triggerParsingFailed(name, errors) {
  return new ɵRuntimeError(3403 /* RuntimeErrorCode.TRIGGER_PARSING_FAILED */, ngDevMode && `Animation parsing for the ${name} trigger have failed:${LINE_START}${errors.map(err => err.message).join(LINE_START)}`);
}
function transitionFailed(name, errors) {
  return new _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵRuntimeError"](3505 /* RuntimeErrorCode.TRANSITION_FAILED */, ngDevMode && `@${name} has failed due to:\n ${errors.map(err => err.message).join('\n- ')}`);
}

/**
 * Set of all animatable CSS properties
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties
 */
const ANIMATABLE_PROP_SET = /*#__PURE__*/new Set(['-moz-outline-radius', '-moz-outline-radius-bottomleft', '-moz-outline-radius-bottomright', '-moz-outline-radius-topleft', '-moz-outline-radius-topright', '-ms-grid-columns', '-ms-grid-rows', '-webkit-line-clamp', '-webkit-text-fill-color', '-webkit-text-stroke', '-webkit-text-stroke-color', 'accent-color', 'all', 'backdrop-filter', 'background', 'background-color', 'background-position', 'background-size', 'block-size', 'border', 'border-block-end', 'border-block-end-color', 'border-block-end-width', 'border-block-start', 'border-block-start-color', 'border-block-start-width', 'border-bottom', 'border-bottom-color', 'border-bottom-left-radius', 'border-bottom-right-radius', 'border-bottom-width', 'border-color', 'border-end-end-radius', 'border-end-start-radius', 'border-image-outset', 'border-image-slice', 'border-image-width', 'border-inline-end', 'border-inline-end-color', 'border-inline-end-width', 'border-inline-start', 'border-inline-start-color', 'border-inline-start-width', 'border-left', 'border-left-color', 'border-left-width', 'border-radius', 'border-right', 'border-right-color', 'border-right-width', 'border-start-end-radius', 'border-start-start-radius', 'border-top', 'border-top-color', 'border-top-left-radius', 'border-top-right-radius', 'border-top-width', 'border-width', 'bottom', 'box-shadow', 'caret-color', 'clip', 'clip-path', 'color', 'column-count', 'column-gap', 'column-rule', 'column-rule-color', 'column-rule-width', 'column-width', 'columns', 'filter', 'flex', 'flex-basis', 'flex-grow', 'flex-shrink', 'font', 'font-size', 'font-size-adjust', 'font-stretch', 'font-variation-settings', 'font-weight', 'gap', 'grid-column-gap', 'grid-gap', 'grid-row-gap', 'grid-template-columns', 'grid-template-rows', 'height', 'inline-size', 'input-security', 'inset', 'inset-block', 'inset-block-end', 'inset-block-start', 'inset-inline', 'inset-inline-end', 'inset-inline-start', 'left', 'letter-spacing', 'line-clamp', 'line-height', 'margin', 'margin-block-end', 'margin-block-start', 'margin-bottom', 'margin-inline-end', 'margin-inline-start', 'margin-left', 'margin-right', 'margin-top', 'mask', 'mask-border', 'mask-position', 'mask-size', 'max-block-size', 'max-height', 'max-inline-size', 'max-lines', 'max-width', 'min-block-size', 'min-height', 'min-inline-size', 'min-width', 'object-position', 'offset', 'offset-anchor', 'offset-distance', 'offset-path', 'offset-position', 'offset-rotate', 'opacity', 'order', 'outline', 'outline-color', 'outline-offset', 'outline-width', 'padding', 'padding-block-end', 'padding-block-start', 'padding-bottom', 'padding-inline-end', 'padding-inline-start', 'padding-left', 'padding-right', 'padding-top', 'perspective', 'perspective-origin', 'right', 'rotate', 'row-gap', 'scale', 'scroll-margin', 'scroll-margin-block', 'scroll-margin-block-end', 'scroll-margin-block-start', 'scroll-margin-bottom', 'scroll-margin-inline', 'scroll-margin-inline-end', 'scroll-margin-inline-start', 'scroll-margin-left', 'scroll-margin-right', 'scroll-margin-top', 'scroll-padding', 'scroll-padding-block', 'scroll-padding-block-end', 'scroll-padding-block-start', 'scroll-padding-bottom', 'scroll-padding-inline', 'scroll-padding-inline-end', 'scroll-padding-inline-start', 'scroll-padding-left', 'scroll-padding-right', 'scroll-padding-top', 'scroll-snap-coordinate', 'scroll-snap-destination', 'scrollbar-color', 'shape-image-threshold', 'shape-margin', 'shape-outside', 'tab-size', 'text-decoration', 'text-decoration-color', 'text-decoration-thickness', 'text-emphasis', 'text-emphasis-color', 'text-indent', 'text-shadow', 'text-underline-offset', 'top', 'transform', 'transform-origin', 'translate', 'vertical-align', 'visibility', 'width', 'word-spacing', 'z-index', 'zoom']);
function optimizeGroupPlayer(players) {
  switch (players.length) {
    case 0:
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .NoopAnimationPlayer */ .sf();
    case 1:
      return players[0];
    default:
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* ["ɵAnimationGroupPlayer"] */ .ui(players);
  }
}
function normalizeKeyframes$1(normalizer, keyframes, preStyles = new Map(), postStyles = new Map()) {
  const errors = [];
  const normalizedKeyframes = [];
  let previousOffset = -1;
  let previousKeyframe = null;
  keyframes.forEach(kf => {
    const offset = kf.get('offset');
    const isSameOffset = offset == previousOffset;
    const normalizedKeyframe = isSameOffset && previousKeyframe || new Map();
    kf.forEach((val, prop) => {
      let normalizedProp = prop;
      let normalizedValue = val;
      if (prop !== 'offset') {
        normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);
        switch (normalizedValue) {
          case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* ["ɵPRE_STYLE"] */ .FX:
            normalizedValue = preStyles.get(prop);
            break;
          case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp:
            normalizedValue = postStyles.get(prop);
            break;
          default:
            normalizedValue = normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
            break;
        }
      }
      normalizedKeyframe.set(normalizedProp, normalizedValue);
    });
    if (!isSameOffset) {
      normalizedKeyframes.push(normalizedKeyframe);
    }
    previousKeyframe = normalizedKeyframe;
    previousOffset = offset;
  });
  if (errors.length) {
    throw animationFailed(errors);
  }
  return normalizedKeyframes;
}
function listenOnPlayer(player, eventName, event, callback) {
  switch (eventName) {
    case 'start':
      player.onStart(() => callback(event && copyAnimationEvent(event, 'start', player)));
      break;
    case 'done':
      player.onDone(() => callback(event && copyAnimationEvent(event, 'done', player)));
      break;
    case 'destroy':
      player.onDestroy(() => callback(event && copyAnimationEvent(event, 'destroy', player)));
      break;
  }
}
function copyAnimationEvent(e, phaseName, player) {
  const totalTime = player.totalTime;
  const disabled = player.disabled ? true : false;
  const event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);
  const data = e['_data'];
  if (data != null) {
    event['_data'] = data;
  }
  return event;
}
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName = '', totalTime = 0, disabled) {
  return {
    element,
    triggerName,
    fromState,
    toState,
    phaseName,
    totalTime,
    disabled: !!disabled
  };
}
function getOrSetDefaultValue(map, key, defaultValue) {
  let value = map.get(key);
  if (!value) {
    map.set(key, value = defaultValue);
  }
  return value;
}
function parseTimelineCommand(command) {
  const separatorPos = command.indexOf(':');
  const id = command.substring(1, separatorPos);
  const action = command.slice(separatorPos + 1);
  return [id, action];
}
const documentElement = /* @__PURE__ */(() => typeof document === 'undefined' ? null : document.documentElement)();
function getParentElement(element) {
  const parent = element.parentNode || element.host || null; // consider host to support shadow DOM
  if (parent === documentElement) {
    return null;
  }
  return parent;
}
function containsVendorPrefix(prop) {
  // Webkit is the only real popular vendor prefix nowadays
  // cc: http://shouldiprefix.com/
  return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit
}
let _CACHED_BODY = null;
let _IS_WEBKIT = false;
function validateStyleProperty(prop) {
  if (!_CACHED_BODY) {
    _CACHED_BODY = getBodyNode() || {};
    _IS_WEBKIT = _CACHED_BODY.style ? 'WebkitAppearance' in _CACHED_BODY.style : false;
  }
  let result = true;
  if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {
    result = prop in _CACHED_BODY.style;
    if (!result && _IS_WEBKIT) {
      const camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.slice(1);
      result = camelProp in _CACHED_BODY.style;
    }
  }
  return result;
}
function validateWebAnimatableStyleProperty(prop) {
  return ANIMATABLE_PROP_SET.has(prop);
}
function getBodyNode() {
  if (typeof document != 'undefined') {
    return document.body;
  }
  return null;
}
function containsElement(elm1, elm2) {
  while (elm2) {
    if (elm2 === elm1) {
      return true;
    }
    elm2 = getParentElement(elm2);
  }
  return false;
}
function invokeQuery(element, selector, multi) {
  if (multi) {
    return Array.from(element.querySelectorAll(selector));
  }
  const elem = element.querySelector(selector);
  return elem ? [elem] : [];
}
function hypenatePropsKeys(original) {
  const newMap = new Map();
  original.forEach((val, prop) => {
    const newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');
    newMap.set(newProp, val);
  });
  return newMap;
}

/**
 * @publicApi
 *
 * `AnimationDriver` implentation for Noop animations
 */
let NoopAnimationDriver = /*#__PURE__*/(() => {
  class NoopAnimationDriver {
    /**
     * @returns Whether `prop` is a valid CSS property
     */
    validateStyleProperty(prop) {
      return validateStyleProperty(prop);
    }
    /**
     * @deprecated unused
     */
    matchesElement(_element, _selector) {
      // This method is deprecated and no longer in use so we return false.
      return false;
    }
    /**
     *
     * @returns Whether elm1 contains elm2.
     */
    containsElement(elm1, elm2) {
      return containsElement(elm1, elm2);
    }
    /**
     * @returns Rhe parent of the given element or `null` if the element is the `document`
     */
    getParentElement(element) {
      return getParentElement(element);
    }
    /**
     * @returns The result of the query selector on the element. The array will contain up to 1 item
     *     if `multi` is  `false`.
     */
    query(element, selector, multi) {
      return invokeQuery(element, selector, multi);
    }
    /**
     * @returns The `defaultValue` or empty string
     */
    computeStyle(element, prop, defaultValue) {
      return defaultValue || '';
    }
    /**
     * @returns An `NoopAnimationPlayer`
     */
    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {
      return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .NoopAnimationPlayer */ .sf(duration, delay);
    }
    static #_ = this.ɵfac = function NoopAnimationDriver_Factory(t) {
      return new (t || NoopAnimationDriver)();
    };
    static #_2 = this.ɵprov = /* @__PURE__ */_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({
      token: NoopAnimationDriver,
      factory: NoopAnimationDriver.ɵfac
    });
  }
  return NoopAnimationDriver;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @publicApi
 */
class AnimationDriver {
  /**
   * @deprecated Use the NoopAnimationDriver class.
   */
  static #_ = this.NOOP = /*#__PURE__*/new NoopAnimationDriver();
}
class AnimationStyleNormalizer {}
class NoopAnimationStyleNormalizer {
  normalizePropertyName(propertyName, errors) {
    return propertyName;
  }
  normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
    return value;
  }
}
const ONE_SECOND = 1000;
const SUBSTITUTION_EXPR_START = '{{';
const SUBSTITUTION_EXPR_END = '}}';
const ENTER_CLASSNAME = 'ng-enter';
const LEAVE_CLASSNAME = 'ng-leave';
const NG_TRIGGER_CLASSNAME = 'ng-trigger';
const NG_TRIGGER_SELECTOR = '.ng-trigger';
const NG_ANIMATING_CLASSNAME = 'ng-animating';
const NG_ANIMATING_SELECTOR = '.ng-animating';
function resolveTimingValue(value) {
  if (typeof value == 'number') return value;
  const matches = value.match(/^(-?[\.\d]+)(m?s)/);
  if (!matches || matches.length < 2) return 0;
  return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
}
function _convertTimeValueToMS(value, unit) {
  switch (unit) {
    case 's':
      return value * ONE_SECOND;
    default:
      // ms or something else
      return value;
  }
}
function resolveTiming(timings, errors, allowNegativeValues) {
  return timings.hasOwnProperty('duration') ? timings : parseTimeExpression(timings, errors, allowNegativeValues);
}
function parseTimeExpression(exp, errors, allowNegativeValues) {
  const regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
  let duration;
  let delay = 0;
  let easing = '';
  if (typeof exp === 'string') {
    const matches = exp.match(regex);
    if (matches === null) {
      errors.push(invalidTimingValue(exp));
      return {
        duration: 0,
        delay: 0,
        easing: ''
      };
    }
    duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
    const delayMatch = matches[3];
    if (delayMatch != null) {
      delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
    }
    const easingVal = matches[5];
    if (easingVal) {
      easing = easingVal;
    }
  } else {
    duration = exp;
  }
  if (!allowNegativeValues) {
    let containsErrors = false;
    let startIndex = errors.length;
    if (duration < 0) {
      errors.push(negativeStepValue());
      containsErrors = true;
    }
    if (delay < 0) {
      errors.push(negativeDelayValue());
      containsErrors = true;
    }
    if (containsErrors) {
      errors.splice(startIndex, 0, invalidTimingValue(exp));
    }
  }
  return {
    duration,
    delay,
    easing
  };
}
function normalizeKeyframes(keyframes) {
  if (!keyframes.length) {
    return [];
  }
  if (keyframes[0] instanceof Map) {
    return keyframes;
  }
  return keyframes.map(kf => new Map(Object.entries(kf)));
}
function normalizeStyles(styles) {
  return Array.isArray(styles) ? new Map(...styles) : new Map(styles);
}
function setStyles(element, styles, formerStyles) {
  styles.forEach((val, prop) => {
    const camelProp = dashCaseToCamelCase(prop);
    if (formerStyles && !formerStyles.has(prop)) {
      formerStyles.set(prop, element.style[camelProp]);
    }
    element.style[camelProp] = val;
  });
}
function eraseStyles(element, styles) {
  styles.forEach((_, prop) => {
    const camelProp = dashCaseToCamelCase(prop);
    element.style[camelProp] = '';
  });
}
function normalizeAnimationEntry(steps) {
  if (Array.isArray(steps)) {
    if (steps.length == 1) return steps[0];
    return (0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .sequence */ .K2)(steps);
  }
  return steps;
}
function validateStyleParams(value, options, errors) {
  const params = options.params || {};
  const matches = extractStyleParams(value);
  if (matches.length) {
    matches.forEach(varName => {
      if (!params.hasOwnProperty(varName)) {
        errors.push(invalidStyleParams(varName));
      }
    });
  }
}
const PARAM_REGEX = /*#__PURE__*/new RegExp(`${SUBSTITUTION_EXPR_START}\\s*(.+?)\\s*${SUBSTITUTION_EXPR_END}`, 'g');
function extractStyleParams(value) {
  let params = [];
  if (typeof value === 'string') {
    let match;
    while (match = PARAM_REGEX.exec(value)) {
      params.push(match[1]);
    }
    PARAM_REGEX.lastIndex = 0;
  }
  return params;
}
function interpolateParams(value, params, errors) {
  const original = `${value}`;
  const str = original.replace(PARAM_REGEX, (_, varName) => {
    let localVal = params[varName];
    // this means that the value was never overridden by the data passed in by the user
    if (localVal == null) {
      errors.push(invalidParamValue(varName));
      localVal = '';
    }
    return localVal.toString();
  });
  // we do this to assert that numeric values stay as they are
  return str == original ? value : str;
}
const DASH_CASE_REGEXP = /-+([a-z0-9])/g;
function dashCaseToCamelCase(input) {
  return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
function camelCaseToDashCase(input) {
  return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}
function allowPreviousPlayerStylesMerge(duration, delay) {
  return duration === 0 || delay === 0;
}
function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
  if (previousStyles.size && keyframes.length) {
    let startingKeyframe = keyframes[0];
    let missingStyleProps = [];
    previousStyles.forEach((val, prop) => {
      if (!startingKeyframe.has(prop)) {
        missingStyleProps.push(prop);
      }
      startingKeyframe.set(prop, val);
    });
    if (missingStyleProps.length) {
      for (let i = 1; i < keyframes.length; i++) {
        let kf = keyframes[i];
        missingStyleProps.forEach(prop => kf.set(prop, computeStyle(element, prop)));
      }
    }
  }
  return keyframes;
}
function visitDslNode(visitor, node, context) {
  switch (node.type) {
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Trigger:
      return visitor.visitTrigger(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.State:
      return visitor.visitState(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Transition:
      return visitor.visitTransition(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Sequence:
      return visitor.visitSequence(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Group:
      return visitor.visitGroup(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Animate:
      return visitor.visitAnimate(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Keyframes:
      return visitor.visitKeyframes(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Style:
      return visitor.visitStyle(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Reference:
      return visitor.visitReference(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.AnimateChild:
      return visitor.visitAnimateChild(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.AnimateRef:
      return visitor.visitAnimateRef(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Query:
      return visitor.visitQuery(node, context);
    case _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Stagger:
      return visitor.visitStagger(node, context);
    default:
      throw invalidNodeType(node.type);
  }
}
function computeStyle(element, prop) {
  return window.getComputedStyle(element)[prop];
}
const DIMENSIONAL_PROP_SET = /*#__PURE__*/new Set(['width', 'height', 'minWidth', 'minHeight', 'maxWidth', 'maxHeight', 'left', 'top', 'bottom', 'right', 'fontSize', 'outlineWidth', 'outlineOffset', 'paddingTop', 'paddingLeft', 'paddingBottom', 'paddingRight', 'marginTop', 'marginLeft', 'marginBottom', 'marginRight', 'borderRadius', 'borderWidth', 'borderTopWidth', 'borderLeftWidth', 'borderRightWidth', 'borderBottomWidth', 'textIndent', 'perspective']);
class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {
  normalizePropertyName(propertyName, errors) {
    return dashCaseToCamelCase(propertyName);
  }
  normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
    let unit = '';
    const strVal = value.toString().trim();
    if (DIMENSIONAL_PROP_SET.has(normalizedProperty) && value !== 0 && value !== '0') {
      if (typeof value === 'number') {
        unit = 'px';
      } else {
        const valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
          errors.push(invalidCssUnitValue(userProvidedProperty, value));
        }
      }
    }
    return strVal + unit;
  }
}
function createListOfWarnings(warnings) {
  const LINE_START = '\n - ';
  return `${LINE_START}${warnings.filter(Boolean).map(warning => warning).join(LINE_START)}`;
}
function warnValidation(warnings) {
  (typeof ngDevMode === 'undefined' || ngDevMode) && console.warn(`animation validation warnings:${createListOfWarnings(warnings)}`);
}
function warnTriggerBuild(name, warnings) {
  (typeof ngDevMode === 'undefined' || ngDevMode) && console.warn(`The animation trigger "${name}" has built with the following warnings:${createListOfWarnings(warnings)}`);
}
function warnRegister(warnings) {
  (typeof ngDevMode === 'undefined' || ngDevMode) && console.warn(`Animation built with the following warnings:${createListOfWarnings(warnings)}`);
}
function triggerParsingWarnings(name, warnings) {
  (typeof ngDevMode === 'undefined' || ngDevMode) && console.warn(`Animation parsing for the ${name} trigger presents the following warnings:${createListOfWarnings(warnings)}`);
}
function pushUnrecognizedPropertiesWarning(warnings, props) {
  if (props.length) {
    warnings.push(`The following provided properties are not recognized: ${props.join(', ')}`);
  }
}
const ANY_STATE = '*';
function parseTransitionExpr(transitionValue, errors) {
  const expressions = [];
  if (typeof transitionValue == 'string') {
    transitionValue.split(/\s*,\s*/).forEach(str => parseInnerTransitionStr(str, expressions, errors));
  } else {
    expressions.push(transitionValue);
  }
  return expressions;
}
function parseInnerTransitionStr(eventStr, expressions, errors) {
  if (eventStr[0] == ':') {
    const result = parseAnimationAlias(eventStr, errors);
    if (typeof result == 'function') {
      expressions.push(result);
      return;
    }
    eventStr = result;
  }
  const match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
  if (match == null || match.length < 4) {
    errors.push(invalidExpression(eventStr));
    return expressions;
  }
  const fromState = match[1];
  const separator = match[2];
  const toState = match[3];
  expressions.push(makeLambdaFromStates(fromState, toState));
  const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
  if (separator[0] == '<' && !isFullAnyStateExpr) {
    expressions.push(makeLambdaFromStates(toState, fromState));
  }
  return;
}
function parseAnimationAlias(alias, errors) {
  switch (alias) {
    case ':enter':
      return 'void => *';
    case ':leave':
      return '* => void';
    case ':increment':
      return (fromState, toState) => parseFloat(toState) > parseFloat(fromState);
    case ':decrement':
      return (fromState, toState) => parseFloat(toState) < parseFloat(fromState);
    default:
      errors.push(invalidTransitionAlias(alias));
      return '* => *';
  }
}
// DO NOT REFACTOR ... keep the follow set instantiations
// with the values intact (closure compiler for some reason
// removes follow-up lines that add the values outside of
// the constructor...
const TRUE_BOOLEAN_VALUES = /*#__PURE__*/new Set(['true', '1']);
const FALSE_BOOLEAN_VALUES = /*#__PURE__*/new Set(['false', '0']);
function makeLambdaFromStates(lhs, rhs) {
  const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
  const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
  return (fromState, toState) => {
    let lhsMatch = lhs == ANY_STATE || lhs == fromState;
    let rhsMatch = rhs == ANY_STATE || rhs == toState;
    if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
      lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
    }
    if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
      rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
    }
    return lhsMatch && rhsMatch;
  };
}
const SELF_TOKEN = ':self';
const SELF_TOKEN_REGEX = /*#__PURE__*/new RegExp(`s*${SELF_TOKEN}s*,?`, 'g');
/*
 * [Validation]
 * The visitor code below will traverse the animation AST generated by the animation verb functions
 * (the output is a tree of objects) and attempt to perform a series of validations on the data. The
 * following corner-cases will be validated:
 *
 * 1. Overlap of animations
 * Given that a CSS property cannot be animated in more than one place at the same time, it's
 * important that this behavior is detected and validated. The way in which this occurs is that
 * each time a style property is examined, a string-map containing the property will be updated with
 * the start and end times for when the property is used within an animation step.
 *
 * If there are two or more parallel animations that are currently running (these are invoked by the
 * group()) on the same element then the validator will throw an error. Since the start/end timing
 * values are collected for each property then if the current animation step is animating the same
 * property and its timing values fall anywhere into the window of time that the property is
 * currently being animated within then this is what causes an error.
 *
 * 2. Timing values
 * The validator will validate to see if a timing value of `duration delay easing` or
 * `durationNumber` is valid or not.
 *
 * (note that upon validation the code below will replace the timing data with an object containing
 * {duration,delay,easing}.
 *
 * 3. Offset Validation
 * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().
 * Offsets within keyframes() are considered valid when:
 *
 *   - No offsets are used at all
 *   - Each style() entry contains an offset value
 *   - Each offset is between 0 and 1
 *   - Each offset is greater to or equal than the previous one
 *
 * Otherwise an error will be thrown.
 */
function buildAnimationAst(driver, metadata, errors, warnings) {
  return new AnimationAstBuilderVisitor(driver).build(metadata, errors, warnings);
}
const ROOT_SELECTOR = '';
class AnimationAstBuilderVisitor {
  constructor(_driver) {
    this._driver = _driver;
  }
  build(metadata, errors, warnings) {
    const context = new AnimationAstBuilderContext(errors);
    this._resetContextStyleTimingState(context);
    const ast = visitDslNode(this, normalizeAnimationEntry(metadata), context);
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      if (context.unsupportedCSSPropertiesFound.size) {
        pushUnrecognizedPropertiesWarning(warnings, [...context.unsupportedCSSPropertiesFound.keys()]);
      }
    }
    return ast;
  }
  _resetContextStyleTimingState(context) {
    context.currentQuerySelector = ROOT_SELECTOR;
    context.collectedStyles = new Map();
    context.collectedStyles.set(ROOT_SELECTOR, new Map());
    context.currentTime = 0;
  }
  visitTrigger(metadata, context) {
    let queryCount = context.queryCount = 0;
    let depCount = context.depCount = 0;
    const states = [];
    const transitions = [];
    if (metadata.name.charAt(0) == '@') {
      context.errors.push(invalidTrigger());
    }
    metadata.definitions.forEach(def => {
      this._resetContextStyleTimingState(context);
      if (def.type == _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.State) {
        const stateDef = def;
        const name = stateDef.name;
        name.toString().split(/\s*,\s*/).forEach(n => {
          stateDef.name = n;
          states.push(this.visitState(stateDef, context));
        });
        stateDef.name = name;
      } else if (def.type == _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Transition) {
        const transition = this.visitTransition(def, context);
        queryCount += transition.queryCount;
        depCount += transition.depCount;
        transitions.push(transition);
      } else {
        context.errors.push(invalidDefinition());
      }
    });
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Trigger,
      name: metadata.name,
      states,
      transitions,
      queryCount,
      depCount,
      options: null
    };
  }
  visitState(metadata, context) {
    const styleAst = this.visitStyle(metadata.styles, context);
    const astParams = metadata.options && metadata.options.params || null;
    if (styleAst.containsDynamicStyles) {
      const missingSubs = new Set();
      const params = astParams || {};
      styleAst.styles.forEach(style => {
        if (style instanceof Map) {
          style.forEach(value => {
            extractStyleParams(value).forEach(sub => {
              if (!params.hasOwnProperty(sub)) {
                missingSubs.add(sub);
              }
            });
          });
        }
      });
      if (missingSubs.size) {
        context.errors.push(invalidState(metadata.name, [...missingSubs.values()]));
      }
    }
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.State,
      name: metadata.name,
      style: styleAst,
      options: astParams ? {
        params: astParams
      } : null
    };
  }
  visitTransition(metadata, context) {
    context.queryCount = 0;
    context.depCount = 0;
    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
    const matchers = parseTransitionExpr(metadata.expr, context.errors);
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Transition,
      matchers,
      animation,
      queryCount: context.queryCount,
      depCount: context.depCount,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitSequence(metadata, context) {
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Sequence,
      steps: metadata.steps.map(s => visitDslNode(this, s, context)),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitGroup(metadata, context) {
    const currentTime = context.currentTime;
    let furthestTime = 0;
    const steps = metadata.steps.map(step => {
      context.currentTime = currentTime;
      const innerAst = visitDslNode(this, step, context);
      furthestTime = Math.max(furthestTime, context.currentTime);
      return innerAst;
    });
    context.currentTime = furthestTime;
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Group,
      steps,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimate(metadata, context) {
    const timingAst = constructTimingAst(metadata.timings, context.errors);
    context.currentAnimateTimings = timingAst;
    let styleAst;
    let styleMetadata = metadata.styles ? metadata.styles : (0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .style */ .iF)({});
    if (styleMetadata.type == _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Keyframes) {
      styleAst = this.visitKeyframes(styleMetadata, context);
    } else {
      let styleMetadata = metadata.styles;
      let isEmpty = false;
      if (!styleMetadata) {
        isEmpty = true;
        const newStyleData = {};
        if (timingAst.easing) {
          newStyleData['easing'] = timingAst.easing;
        }
        styleMetadata = (0,_angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .style */ .iF)(newStyleData);
      }
      context.currentTime += timingAst.duration + timingAst.delay;
      const _styleAst = this.visitStyle(styleMetadata, context);
      _styleAst.isEmptyStep = isEmpty;
      styleAst = _styleAst;
    }
    context.currentAnimateTimings = null;
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Animate,
      timings: timingAst,
      style: styleAst,
      options: null
    };
  }
  visitStyle(metadata, context) {
    const ast = this._makeStyleAst(metadata, context);
    this._validateStyleAst(ast, context);
    return ast;
  }
  _makeStyleAst(metadata, context) {
    const styles = [];
    const metadataStyles = Array.isArray(metadata.styles) ? metadata.styles : [metadata.styles];
    for (let styleTuple of metadataStyles) {
      if (typeof styleTuple === 'string') {
        if (styleTuple === _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp) {
          styles.push(styleTuple);
        } else {
          context.errors.push(invalidStyleValue(styleTuple));
        }
      } else {
        styles.push(new Map(Object.entries(styleTuple)));
      }
    }
    let containsDynamicStyles = false;
    let collectedEasing = null;
    styles.forEach(styleData => {
      if (styleData instanceof Map) {
        if (styleData.has('easing')) {
          collectedEasing = styleData.get('easing');
          styleData.delete('easing');
        }
        if (!containsDynamicStyles) {
          for (let value of styleData.values()) {
            if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
              containsDynamicStyles = true;
              break;
            }
          }
        }
      }
    });
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Style,
      styles,
      easing: collectedEasing,
      offset: metadata.offset,
      containsDynamicStyles,
      options: null
    };
  }
  _validateStyleAst(ast, context) {
    const timings = context.currentAnimateTimings;
    let endTime = context.currentTime;
    let startTime = context.currentTime;
    if (timings && startTime > 0) {
      startTime -= timings.duration + timings.delay;
    }
    ast.styles.forEach(tuple => {
      if (typeof tuple === 'string') return;
      tuple.forEach((value, prop) => {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          if (!this._driver.validateStyleProperty(prop)) {
            tuple.delete(prop);
            context.unsupportedCSSPropertiesFound.add(prop);
            return;
          }
        }
        // This is guaranteed to have a defined Map at this querySelector location making it
        // safe to add the assertion here. It is set as a default empty map in prior methods.
        const collectedStyles = context.collectedStyles.get(context.currentQuerySelector);
        const collectedEntry = collectedStyles.get(prop);
        let updateCollectedStyle = true;
        if (collectedEntry) {
          if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
            context.errors.push(invalidParallelAnimation(prop, collectedEntry.startTime, collectedEntry.endTime, startTime, endTime));
            updateCollectedStyle = false;
          }
          // we always choose the smaller start time value since we
          // want to have a record of the entire animation window where
          // the style property is being animated in between
          startTime = collectedEntry.startTime;
        }
        if (updateCollectedStyle) {
          collectedStyles.set(prop, {
            startTime,
            endTime
          });
        }
        if (context.options) {
          validateStyleParams(value, context.options, context.errors);
        }
      });
    });
  }
  visitKeyframes(metadata, context) {
    const ast = {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Keyframes,
      styles: [],
      options: null
    };
    if (!context.currentAnimateTimings) {
      context.errors.push(invalidKeyframes());
      return ast;
    }
    const MAX_KEYFRAME_OFFSET = 1;
    let totalKeyframesWithOffsets = 0;
    const offsets = [];
    let offsetsOutOfOrder = false;
    let keyframesOutOfRange = false;
    let previousOffset = 0;
    const keyframes = metadata.steps.map(styles => {
      const style = this._makeStyleAst(styles, context);
      let offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);
      let offset = 0;
      if (offsetVal != null) {
        totalKeyframesWithOffsets++;
        offset = style.offset = offsetVal;
      }
      keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
      offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
      previousOffset = offset;
      offsets.push(offset);
      return style;
    });
    if (keyframesOutOfRange) {
      context.errors.push(invalidOffset());
    }
    if (offsetsOutOfOrder) {
      context.errors.push(keyframeOffsetsOutOfOrder());
    }
    const length = metadata.steps.length;
    let generatedOffset = 0;
    if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
      context.errors.push(keyframesMissingOffsets());
    } else if (totalKeyframesWithOffsets == 0) {
      generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
    }
    const limit = length - 1;
    const currentTime = context.currentTime;
    const currentAnimateTimings = context.currentAnimateTimings;
    const animateDuration = currentAnimateTimings.duration;
    keyframes.forEach((kf, i) => {
      const offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
      const durationUpToThisFrame = offset * animateDuration;
      context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
      currentAnimateTimings.duration = durationUpToThisFrame;
      this._validateStyleAst(kf, context);
      kf.offset = offset;
      ast.styles.push(kf);
    });
    return ast;
  }
  visitReference(metadata, context) {
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Reference,
      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimateChild(metadata, context) {
    context.depCount++;
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.AnimateChild,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimateRef(metadata, context) {
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.AnimateRef,
      animation: this.visitReference(metadata.animation, context),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitQuery(metadata, context) {
    const parentSelector = context.currentQuerySelector;
    const options = metadata.options || {};
    context.queryCount++;
    context.currentQuery = metadata;
    const [selector, includeSelf] = normalizeSelector(metadata.selector);
    context.currentQuerySelector = parentSelector.length ? parentSelector + ' ' + selector : selector;
    getOrSetDefaultValue(context.collectedStyles, context.currentQuerySelector, new Map());
    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
    context.currentQuery = null;
    context.currentQuerySelector = parentSelector;
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Query,
      selector,
      limit: options.limit || 0,
      optional: !!options.optional,
      includeSelf,
      animation,
      originalSelector: metadata.selector,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitStagger(metadata, context) {
    if (!context.currentQuery) {
      context.errors.push(invalidStagger());
    }
    const timings = metadata.timings === 'full' ? {
      duration: 0,
      delay: 0,
      easing: 'full'
    } : resolveTiming(metadata.timings, context.errors, true);
    return {
      type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Stagger,
      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
      timings,
      options: null
    };
  }
}
function normalizeSelector(selector) {
  const hasAmpersand = selector.split(/\s*,\s*/).find(token => token == SELF_TOKEN) ? true : false;
  if (hasAmpersand) {
    selector = selector.replace(SELF_TOKEN_REGEX, '');
  }
  // Note: the :enter and :leave aren't normalized here since those
  // selectors are filled in at runtime during timeline building
  selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR).replace(/@\w+/g, match => NG_TRIGGER_SELECTOR + '-' + match.slice(1)).replace(/:animating/g, NG_ANIMATING_SELECTOR);
  return [selector, hasAmpersand];
}
function normalizeParams(obj) {
  return obj ? {
    ...obj
  } : null;
}
class AnimationAstBuilderContext {
  constructor(errors) {
    this.errors = errors;
    this.queryCount = 0;
    this.depCount = 0;
    this.currentTransition = null;
    this.currentQuery = null;
    this.currentQuerySelector = null;
    this.currentAnimateTimings = null;
    this.currentTime = 0;
    this.collectedStyles = new Map();
    this.options = null;
    this.unsupportedCSSPropertiesFound = new Set();
  }
}
function consumeOffset(styles) {
  if (typeof styles == 'string') return null;
  let offset = null;
  if (Array.isArray(styles)) {
    styles.forEach(styleTuple => {
      if (styleTuple instanceof Map && styleTuple.has('offset')) {
        const obj = styleTuple;
        offset = parseFloat(obj.get('offset'));
        obj.delete('offset');
      }
    });
  } else if (styles instanceof Map && styles.has('offset')) {
    const obj = styles;
    offset = parseFloat(obj.get('offset'));
    obj.delete('offset');
  }
  return offset;
}
function constructTimingAst(value, errors) {
  if (value.hasOwnProperty('duration')) {
    return value;
  }
  if (typeof value == 'number') {
    const duration = resolveTiming(value, errors).duration;
    return makeTimingAst(duration, 0, '');
  }
  const strValue = value;
  const isDynamic = strValue.split(/\s+/).some(v => v.charAt(0) == '{' && v.charAt(1) == '{');
  if (isDynamic) {
    const ast = makeTimingAst(0, 0, '');
    ast.dynamic = true;
    ast.strValue = strValue;
    return ast;
  }
  const timings = resolveTiming(strValue, errors);
  return makeTimingAst(timings.duration, timings.delay, timings.easing);
}
function normalizeAnimationOptions(options) {
  if (options) {
    options = {
      ...options
    };
    if (options['params']) {
      options['params'] = normalizeParams(options['params']);
    }
  } else {
    options = {};
  }
  return options;
}
function makeTimingAst(duration, delay, easing) {
  return {
    duration,
    delay,
    easing
  };
}
function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing = null, subTimeline = false) {
  return {
    type: 1 /* AnimationTransitionInstructionType.TimelineAnimation */,
    element,
    keyframes,
    preStyleProps,
    postStyleProps,
    duration,
    delay,
    totalTime: duration + delay,
    easing,
    subTimeline
  };
}
class ElementInstructionMap {
  constructor() {
    this._map = new Map();
  }
  get(element) {
    return this._map.get(element) || [];
  }
  append(element, instructions) {
    let existingInstructions = this._map.get(element);
    if (!existingInstructions) {
      this._map.set(element, existingInstructions = []);
    }
    existingInstructions.push(...instructions);
  }
  has(element) {
    return this._map.has(element);
  }
  clear() {
    this._map.clear();
  }
}
const ONE_FRAME_IN_MILLISECONDS = 1;
const ENTER_TOKEN = ':enter';
const ENTER_TOKEN_REGEX = /*#__PURE__*/new RegExp(ENTER_TOKEN, 'g');
const LEAVE_TOKEN = ':leave';
const LEAVE_TOKEN_REGEX = /*#__PURE__*/new RegExp(LEAVE_TOKEN, 'g');
/*
 * The code within this file aims to generate web-animations-compatible keyframes from Angular's
 * animation DSL code.
 *
 * The code below will be converted from:
 *
 * ```
 * sequence([
 *   style({ opacity: 0 }),
 *   animate(1000, style({ opacity: 0 }))
 * ])
 * ```
 *
 * To:
 * ```
 * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]
 * duration = 1000
 * delay = 0
 * easing = ''
 * ```
 *
 * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a
 * combination of AST traversal and merge-sort-like algorithms are used.
 *
 * [AST Traversal]
 * Each of the animation verbs, when executed, will return an string-map object representing what
 * type of action it is (style, animate, group, etc...) and the data associated with it. This means
 * that when functional composition mix of these functions is evaluated (like in the example above)
 * then it will end up producing a tree of objects representing the animation itself.
 *
 * When this animation object tree is processed by the visitor code below it will visit each of the
 * verb statements within the visitor. And during each visit it will build the context of the
 * animation keyframes by interacting with the `TimelineBuilder`.
 *
 * [TimelineBuilder]
 * This class is responsible for tracking the styles and building a series of keyframe objects for a
 * timeline between a start and end time. The builder starts off with an initial timeline and each
 * time the AST comes across a `group()`, `keyframes()` or a combination of the two within a
 * `sequence()` then it will generate a sub timeline for each step as well as a new one after
 * they are complete.
 *
 * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub
 * timeline was created (based on one of the cases above) then the parent timeline will attempt to
 * merge the styles used within the sub timelines into itself (only with group() this will happen).
 * This happens with a merge operation (much like how the merge works in mergeSort) and it will only
 * copy the most recently used styles from the sub timelines into the parent timeline. This ensures
 * that if the styles are used later on in another phase of the animation then they will be the most
 * up-to-date values.
 *
 * [How Missing Styles Are Updated]
 * Each timeline has a `backFill` property which is responsible for filling in new styles into
 * already processed keyframes if a new style shows up later within the animation sequence.
 *
 * ```
 * sequence([
 *   style({ width: 0 }),
 *   animate(1000, style({ width: 100 })),
 *   animate(1000, style({ width: 200 })),
 *   animate(1000, style({ width: 300 }))
 *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere
 * else
 * ])
 * ```
 *
 * What is happening here is that the `height` value is added later in the sequence, but is missing
 * from all previous animation steps. Therefore when a keyframe is created it would also be missing
 * from all previous keyframes up until where it is first used. For the timeline keyframe generation
 * to properly fill in the style it will place the previous value (the value from the parent
 * timeline) or a default value of `*` into the backFill map.
 *
 * When a sub-timeline is created it will have its own backFill property. This is done so that
 * styles present within the sub-timeline do not accidentally seep into the previous/future timeline
 * keyframes
 *
 * [Validation]
 * The code in this file is not responsible for validation. That functionality happens with within
 * the `AnimationValidatorVisitor` code.
 */
function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = new Map(), finalStyles = new Map(), options, subInstructions, errors = []) {
  return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
}
class AnimationTimelineBuilderVisitor {
  buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {
    subInstructions = subInstructions || new ElementInstructionMap();
    const context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
    context.options = options;
    const delay = options.delay ? resolveTimingValue(options.delay) : 0;
    context.currentTimeline.delayNextStep(delay);
    context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
    visitDslNode(this, ast, context);
    // this checks to see if an actual animation happened
    const timelines = context.timelines.filter(timeline => timeline.containsAnimation());
    // note: we just want to apply the final styles for the rootElement, so we do not
    //       just apply the styles to the last timeline but the last timeline which
    //       element is the root one (basically `*`-styles are replaced with the actual
    //       state style values only for the root element)
    if (timelines.length && finalStyles.size) {
      let lastRootTimeline;
      for (let i = timelines.length - 1; i >= 0; i--) {
        const timeline = timelines[i];
        if (timeline.element === rootElement) {
          lastRootTimeline = timeline;
          break;
        }
      }
      if (lastRootTimeline && !lastRootTimeline.allowOnlyTimelineStyles()) {
        lastRootTimeline.setStyles([finalStyles], null, context.errors, options);
      }
    }
    return timelines.length ? timelines.map(timeline => timeline.buildKeyframes()) : [createTimelineInstruction(rootElement, [], [], [], 0, delay, '', false)];
  }
  visitTrigger(ast, context) {
    // these values are not visited in this AST
  }
  visitState(ast, context) {
    // these values are not visited in this AST
  }
  visitTransition(ast, context) {
    // these values are not visited in this AST
  }
  visitAnimateChild(ast, context) {
    const elementInstructions = context.subInstructions.get(context.element);
    if (elementInstructions) {
      const innerContext = context.createSubContext(ast.options);
      const startTime = context.currentTimeline.currentTime;
      const endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);
      if (startTime != endTime) {
        // we do this on the upper context because we created a sub context for
        // the sub child animations
        context.transformIntoNewTimeline(endTime);
      }
    }
    context.previousNode = ast;
  }
  visitAnimateRef(ast, context) {
    const innerContext = context.createSubContext(ast.options);
    innerContext.transformIntoNewTimeline();
    this._applyAnimationRefDelays([ast.options, ast.animation.options], context, innerContext);
    this.visitReference(ast.animation, innerContext);
    context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
    context.previousNode = ast;
  }
  _applyAnimationRefDelays(animationsRefsOptions, context, innerContext) {
    for (const animationRefOptions of animationsRefsOptions) {
      const animationDelay = animationRefOptions?.delay;
      if (animationDelay) {
        const animationDelayValue = typeof animationDelay === 'number' ? animationDelay : resolveTimingValue(interpolateParams(animationDelay, animationRefOptions?.params ?? {}, context.errors));
        innerContext.delayNextStep(animationDelayValue);
      }
    }
  }
  _visitSubInstructions(instructions, context, options) {
    const startTime = context.currentTimeline.currentTime;
    let furthestTime = startTime;
    // this is a special-case for when a user wants to skip a sub
    // animation from being fired entirely.
    const duration = options.duration != null ? resolveTimingValue(options.duration) : null;
    const delay = options.delay != null ? resolveTimingValue(options.delay) : null;
    if (duration !== 0) {
      instructions.forEach(instruction => {
        const instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
        furthestTime = Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
      });
    }
    return furthestTime;
  }
  visitReference(ast, context) {
    context.updateOptions(ast.options, true);
    visitDslNode(this, ast.animation, context);
    context.previousNode = ast;
  }
  visitSequence(ast, context) {
    const subContextCount = context.subContextCount;
    let ctx = context;
    const options = ast.options;
    if (options && (options.params || options.delay)) {
      ctx = context.createSubContext(options);
      ctx.transformIntoNewTimeline();
      if (options.delay != null) {
        if (ctx.previousNode.type == _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Style) {
          ctx.currentTimeline.snapshotCurrentStyles();
          ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        }
        const delay = resolveTimingValue(options.delay);
        ctx.delayNextStep(delay);
      }
    }
    if (ast.steps.length) {
      ast.steps.forEach(s => visitDslNode(this, s, ctx));
      // this is here just in case the inner steps only contain or end with a style() call
      ctx.currentTimeline.applyStylesToKeyframe();
      // this means that some animation function within the sequence
      // ended up creating a sub timeline (which means the current
      // timeline cannot overlap with the contents of the sequence)
      if (ctx.subContextCount > subContextCount) {
        ctx.transformIntoNewTimeline();
      }
    }
    context.previousNode = ast;
  }
  visitGroup(ast, context) {
    const innerTimelines = [];
    let furthestTime = context.currentTimeline.currentTime;
    const delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
    ast.steps.forEach(s => {
      const innerContext = context.createSubContext(ast.options);
      if (delay) {
        innerContext.delayNextStep(delay);
      }
      visitDslNode(this, s, innerContext);
      furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
      innerTimelines.push(innerContext.currentTimeline);
    });
    // this operation is run after the AST loop because otherwise
    // if the parent timeline's collected styles were updated then
    // it would pass in invalid data into the new-to-be forked items
    innerTimelines.forEach(timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline));
    context.transformIntoNewTimeline(furthestTime);
    context.previousNode = ast;
  }
  _visitTiming(ast, context) {
    if (ast.dynamic) {
      const strValue = ast.strValue;
      const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
      return resolveTiming(timingValue, context.errors);
    } else {
      return {
        duration: ast.duration,
        delay: ast.delay,
        easing: ast.easing
      };
    }
  }
  visitAnimate(ast, context) {
    const timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);
    const timeline = context.currentTimeline;
    if (timings.delay) {
      context.incrementTime(timings.delay);
      timeline.snapshotCurrentStyles();
    }
    const style = ast.style;
    if (style.type == _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Keyframes) {
      this.visitKeyframes(style, context);
    } else {
      context.incrementTime(timings.duration);
      this.visitStyle(style, context);
      timeline.applyStylesToKeyframe();
    }
    context.currentAnimateTimings = null;
    context.previousNode = ast;
  }
  visitStyle(ast, context) {
    const timeline = context.currentTimeline;
    const timings = context.currentAnimateTimings;
    // this is a special case for when a style() call
    // directly follows  an animate() call (but not inside of an animate() call)
    if (!timings && timeline.hasCurrentStyleProperties()) {
      timeline.forwardFrame();
    }
    const easing = timings && timings.easing || ast.easing;
    if (ast.isEmptyStep) {
      timeline.applyEmptyStep(easing);
    } else {
      timeline.setStyles(ast.styles, easing, context.errors, context.options);
    }
    context.previousNode = ast;
  }
  visitKeyframes(ast, context) {
    const currentAnimateTimings = context.currentAnimateTimings;
    const startTime = context.currentTimeline.duration;
    const duration = currentAnimateTimings.duration;
    const innerContext = context.createSubContext();
    const innerTimeline = innerContext.currentTimeline;
    innerTimeline.easing = currentAnimateTimings.easing;
    ast.styles.forEach(step => {
      const offset = step.offset || 0;
      innerTimeline.forwardTime(offset * duration);
      innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
      innerTimeline.applyStylesToKeyframe();
    });
    // this will ensure that the parent timeline gets all the styles from
    // the child even if the new timeline below is not used
    context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
    // we do this because the window between this timeline and the sub timeline
    // should ensure that the styles within are exactly the same as they were before
    context.transformIntoNewTimeline(startTime + duration);
    context.previousNode = ast;
  }
  visitQuery(ast, context) {
    // in the event that the first step before this is a style step we need
    // to ensure the styles are applied before the children are animated
    const startTime = context.currentTimeline.currentTime;
    const options = ast.options || {};
    const delay = options.delay ? resolveTimingValue(options.delay) : 0;
    if (delay && (context.previousNode.type === _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Style || startTime == 0 && context.currentTimeline.hasCurrentStyleProperties())) {
      context.currentTimeline.snapshotCurrentStyles();
      context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    }
    let furthestTime = startTime;
    const elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
    context.currentQueryTotal = elms.length;
    let sameElementTimeline = null;
    elms.forEach((element, i) => {
      context.currentQueryIndex = i;
      const innerContext = context.createSubContext(ast.options, element);
      if (delay) {
        innerContext.delayNextStep(delay);
      }
      if (element === context.element) {
        sameElementTimeline = innerContext.currentTimeline;
      }
      visitDslNode(this, ast.animation, innerContext);
      // this is here just incase the inner steps only contain or end
      // with a style() call (which is here to signal that this is a preparatory
      // call to style an element before it is animated again)
      innerContext.currentTimeline.applyStylesToKeyframe();
      const endTime = innerContext.currentTimeline.currentTime;
      furthestTime = Math.max(furthestTime, endTime);
    });
    context.currentQueryIndex = 0;
    context.currentQueryTotal = 0;
    context.transformIntoNewTimeline(furthestTime);
    if (sameElementTimeline) {
      context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
      context.currentTimeline.snapshotCurrentStyles();
    }
    context.previousNode = ast;
  }
  visitStagger(ast, context) {
    const parentContext = context.parentContext;
    const tl = context.currentTimeline;
    const timings = ast.timings;
    const duration = Math.abs(timings.duration);
    const maxTime = duration * (context.currentQueryTotal - 1);
    let delay = duration * context.currentQueryIndex;
    let staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;
    switch (staggerTransformer) {
      case 'reverse':
        delay = maxTime - delay;
        break;
      case 'full':
        delay = parentContext.currentStaggerTime;
        break;
    }
    const timeline = context.currentTimeline;
    if (delay) {
      timeline.delayNextStep(delay);
    }
    const startingTime = timeline.currentTime;
    visitDslNode(this, ast.animation, context);
    context.previousNode = ast;
    // time = duration + delay
    // the reason why this computation is so complex is because
    // the inner timeline may either have a delay value or a stretched
    // keyframe depending on if a subtimeline is not used or is used.
    parentContext.currentStaggerTime = tl.currentTime - startingTime + (tl.startTime - parentContext.currentTimeline.startTime);
  }
}
const DEFAULT_NOOP_PREVIOUS_NODE = {};
class AnimationTimelineContext {
  constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
    this._driver = _driver;
    this.element = element;
    this.subInstructions = subInstructions;
    this._enterClassName = _enterClassName;
    this._leaveClassName = _leaveClassName;
    this.errors = errors;
    this.timelines = timelines;
    this.parentContext = null;
    this.currentAnimateTimings = null;
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.subContextCount = 0;
    this.options = {};
    this.currentQueryIndex = 0;
    this.currentQueryTotal = 0;
    this.currentStaggerTime = 0;
    this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
    timelines.push(this.currentTimeline);
  }
  get params() {
    return this.options.params;
  }
  updateOptions(options, skipIfExists) {
    if (!options) return;
    const newOptions = options;
    let optionsToUpdate = this.options;
    // NOTE: this will get patched up when other animation methods support duration overrides
    if (newOptions.duration != null) {
      optionsToUpdate.duration = resolveTimingValue(newOptions.duration);
    }
    if (newOptions.delay != null) {
      optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
    }
    const newParams = newOptions.params;
    if (newParams) {
      let paramsToUpdate = optionsToUpdate.params;
      if (!paramsToUpdate) {
        paramsToUpdate = this.options.params = {};
      }
      Object.keys(newParams).forEach(name => {
        if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {
          paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);
        }
      });
    }
  }
  _copyOptions() {
    const options = {};
    if (this.options) {
      const oldParams = this.options.params;
      if (oldParams) {
        const params = options['params'] = {};
        Object.keys(oldParams).forEach(name => {
          params[name] = oldParams[name];
        });
      }
    }
    return options;
  }
  createSubContext(options = null, element, newTime) {
    const target = element || this.element;
    const context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
    context.previousNode = this.previousNode;
    context.currentAnimateTimings = this.currentAnimateTimings;
    context.options = this._copyOptions();
    context.updateOptions(options);
    context.currentQueryIndex = this.currentQueryIndex;
    context.currentQueryTotal = this.currentQueryTotal;
    context.parentContext = this;
    this.subContextCount++;
    return context;
  }
  transformIntoNewTimeline(newTime) {
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
    this.timelines.push(this.currentTimeline);
    return this.currentTimeline;
  }
  appendInstructionToTimeline(instruction, duration, delay) {
    const updatedTimings = {
      duration: duration != null ? duration : instruction.duration,
      delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
      easing: ''
    };
    const builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
    this.timelines.push(builder);
    return updatedTimings;
  }
  incrementTime(time) {
    this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
  }
  delayNextStep(delay) {
    // negative delays are not yet supported
    if (delay > 0) {
      this.currentTimeline.delayNextStep(delay);
    }
  }
  invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {
    let results = [];
    if (includeSelf) {
      results.push(this.element);
    }
    if (selector.length > 0) {
      // only if :self is used then the selector can be empty
      selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);
      selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);
      const multi = limit != 1;
      let elements = this._driver.query(this.element, selector, multi);
      if (limit !== 0) {
        elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) : elements.slice(0, limit);
      }
      results.push(...elements);
    }
    if (!optional && results.length == 0) {
      errors.push(invalidQuery(originalSelector));
    }
    return results;
  }
}
class TimelineBuilder {
  constructor(_driver, element, startTime, _elementTimelineStylesLookup) {
    this._driver = _driver;
    this.element = element;
    this.startTime = startTime;
    this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
    this.duration = 0;
    this.easing = null;
    this._previousKeyframe = new Map();
    this._currentKeyframe = new Map();
    this._keyframes = new Map();
    this._styleSummary = new Map();
    this._localTimelineStyles = new Map();
    this._pendingStyles = new Map();
    this._backFill = new Map();
    this._currentEmptyStepKeyframe = null;
    if (!this._elementTimelineStylesLookup) {
      this._elementTimelineStylesLookup = new Map();
    }
    this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);
    if (!this._globalTimelineStyles) {
      this._globalTimelineStyles = this._localTimelineStyles;
      this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
    }
    this._loadKeyframe();
  }
  containsAnimation() {
    switch (this._keyframes.size) {
      case 0:
        return false;
      case 1:
        return this.hasCurrentStyleProperties();
      default:
        return true;
    }
  }
  hasCurrentStyleProperties() {
    return this._currentKeyframe.size > 0;
  }
  get currentTime() {
    return this.startTime + this.duration;
  }
  delayNextStep(delay) {
    // in the event that a style() step is placed right before a stagger()
    // and that style() step is the very first style() value in the animation
    // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
    // properly applies the style() values to work with the stagger...
    const hasPreStyleStep = this._keyframes.size === 1 && this._pendingStyles.size;
    if (this.duration || hasPreStyleStep) {
      this.forwardTime(this.currentTime + delay);
      if (hasPreStyleStep) {
        this.snapshotCurrentStyles();
      }
    } else {
      this.startTime += delay;
    }
  }
  fork(element, currentTime) {
    this.applyStylesToKeyframe();
    return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
  }
  _loadKeyframe() {
    if (this._currentKeyframe) {
      this._previousKeyframe = this._currentKeyframe;
    }
    this._currentKeyframe = this._keyframes.get(this.duration);
    if (!this._currentKeyframe) {
      this._currentKeyframe = new Map();
      this._keyframes.set(this.duration, this._currentKeyframe);
    }
  }
  forwardFrame() {
    this.duration += ONE_FRAME_IN_MILLISECONDS;
    this._loadKeyframe();
  }
  forwardTime(time) {
    this.applyStylesToKeyframe();
    this.duration = time;
    this._loadKeyframe();
  }
  _updateStyle(prop, value) {
    this._localTimelineStyles.set(prop, value);
    this._globalTimelineStyles.set(prop, value);
    this._styleSummary.set(prop, {
      time: this.currentTime,
      value
    });
  }
  allowOnlyTimelineStyles() {
    return this._currentEmptyStepKeyframe !== this._currentKeyframe;
  }
  applyEmptyStep(easing) {
    if (easing) {
      this._previousKeyframe.set('easing', easing);
    }
    // special case for animate(duration):
    // all missing styles are filled with a `*` value then
    // if any destination styles are filled in later on the same
    // keyframe then they will override the overridden styles
    // We use `_globalTimelineStyles` here because there may be
    // styles in previous keyframes that are not present in this timeline
    for (let [prop, value] of this._globalTimelineStyles) {
      this._backFill.set(prop, value || _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp);
      this._currentKeyframe.set(prop, _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp);
    }
    this._currentEmptyStepKeyframe = this._currentKeyframe;
  }
  setStyles(input, easing, errors, options) {
    if (easing) {
      this._previousKeyframe.set('easing', easing);
    }
    const params = options && options.params || {};
    const styles = flattenStyles(input, this._globalTimelineStyles);
    for (let [prop, value] of styles) {
      const val = interpolateParams(value, params, errors);
      this._pendingStyles.set(prop, val);
      if (!this._localTimelineStyles.has(prop)) {
        this._backFill.set(prop, this._globalTimelineStyles.get(prop) ?? _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp);
      }
      this._updateStyle(prop, val);
    }
  }
  applyStylesToKeyframe() {
    if (this._pendingStyles.size == 0) return;
    this._pendingStyles.forEach((val, prop) => {
      this._currentKeyframe.set(prop, val);
    });
    this._pendingStyles.clear();
    this._localTimelineStyles.forEach((val, prop) => {
      if (!this._currentKeyframe.has(prop)) {
        this._currentKeyframe.set(prop, val);
      }
    });
  }
  snapshotCurrentStyles() {
    for (let [prop, val] of this._localTimelineStyles) {
      this._pendingStyles.set(prop, val);
      this._updateStyle(prop, val);
    }
  }
  getFinalKeyframe() {
    return this._keyframes.get(this.duration);
  }
  get properties() {
    const properties = [];
    for (let prop in this._currentKeyframe) {
      properties.push(prop);
    }
    return properties;
  }
  mergeTimelineCollectedStyles(timeline) {
    timeline._styleSummary.forEach((details1, prop) => {
      const details0 = this._styleSummary.get(prop);
      if (!details0 || details1.time > details0.time) {
        this._updateStyle(prop, details1.value);
      }
    });
  }
  buildKeyframes() {
    this.applyStylesToKeyframe();
    const preStyleProps = new Set();
    const postStyleProps = new Set();
    const isEmpty = this._keyframes.size === 1 && this.duration === 0;
    let finalKeyframes = [];
    this._keyframes.forEach((keyframe, time) => {
      const finalKeyframe = new Map([...this._backFill, ...keyframe]);
      finalKeyframe.forEach((value, prop) => {
        if (value === _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* ["ɵPRE_STYLE"] */ .FX) {
          preStyleProps.add(prop);
        } else if (value === _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp) {
          postStyleProps.add(prop);
        }
      });
      if (!isEmpty) {
        finalKeyframe.set('offset', time / this.duration);
      }
      finalKeyframes.push(finalKeyframe);
    });
    const preProps = [...preStyleProps.values()];
    const postProps = [...postStyleProps.values()];
    // special case for a 0-second animation (which is designed just to place styles onscreen)
    if (isEmpty) {
      const kf0 = finalKeyframes[0];
      const kf1 = new Map(kf0);
      kf0.set('offset', 0);
      kf1.set('offset', 1);
      finalKeyframes = [kf0, kf1];
    }
    return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
  }
}
class SubTimelineBuilder extends TimelineBuilder {
  constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {
    super(driver, element, timings.delay);
    this.keyframes = keyframes;
    this.preStyleProps = preStyleProps;
    this.postStyleProps = postStyleProps;
    this._stretchStartingKeyframe = _stretchStartingKeyframe;
    this.timings = {
      duration: timings.duration,
      delay: timings.delay,
      easing: timings.easing
    };
  }
  containsAnimation() {
    return this.keyframes.length > 1;
  }
  buildKeyframes() {
    let keyframes = this.keyframes;
    let {
      delay,
      duration,
      easing
    } = this.timings;
    if (this._stretchStartingKeyframe && delay) {
      const newKeyframes = [];
      const totalTime = duration + delay;
      const startingGap = delay / totalTime;
      // the original starting keyframe now starts once the delay is done
      const newFirstKeyframe = new Map(keyframes[0]);
      newFirstKeyframe.set('offset', 0);
      newKeyframes.push(newFirstKeyframe);
      const oldFirstKeyframe = new Map(keyframes[0]);
      oldFirstKeyframe.set('offset', roundOffset(startingGap));
      newKeyframes.push(oldFirstKeyframe);
      /*
        When the keyframe is stretched then it means that the delay before the animation
        starts is gone. Instead the first keyframe is placed at the start of the animation
        and it is then copied to where it starts when the original delay is over. This basically
        means nothing animates during that delay, but the styles are still rendered. For this
        to work the original offset values that exist in the original keyframes must be "warped"
        so that they can take the new keyframe + delay into account.
               delay=1000, duration=1000, keyframes = 0 .5 1
               turns into
               delay=0, duration=2000, keyframes = 0 .33 .66 1
       */
      // offsets between 1 ... n -1 are all warped by the keyframe stretch
      const limit = keyframes.length - 1;
      for (let i = 1; i <= limit; i++) {
        let kf = new Map(keyframes[i]);
        const oldOffset = kf.get('offset');
        const timeAtKeyframe = delay + oldOffset * duration;
        kf.set('offset', roundOffset(timeAtKeyframe / totalTime));
        newKeyframes.push(kf);
      }
      // the new starting keyframe should be added at the start
      duration = totalTime;
      delay = 0;
      easing = '';
      keyframes = newKeyframes;
    }
    return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
  }
}
function roundOffset(offset, decimalPoints = 3) {
  const mult = Math.pow(10, decimalPoints - 1);
  return Math.round(offset * mult) / mult;
}
function flattenStyles(input, allStyles) {
  const styles = new Map();
  let allProperties;
  input.forEach(token => {
    if (token === '*') {
      allProperties ??= allStyles.keys();
      for (let prop of allProperties) {
        styles.set(prop, _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp);
      }
    } else {
      for (let [prop, val] of token) {
        styles.set(prop, val);
      }
    }
  });
  return styles;
}
function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
  return {
    type: 0 /* AnimationTransitionInstructionType.TransitionAnimation */,
    element,
    triggerName,
    isRemovalTransition,
    fromState,
    fromStyles,
    toState,
    toStyles,
    timelines,
    queriedElements,
    preStyleProps,
    postStyleProps,
    totalTime,
    errors
  };
}
const EMPTY_OBJECT = {};
class AnimationTransitionFactory {
  constructor(_triggerName, ast, _stateStyles) {
    this._triggerName = _triggerName;
    this.ast = ast;
    this._stateStyles = _stateStyles;
  }
  match(currentState, nextState, element, params) {
    return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
  }
  buildStyles(stateName, params, errors) {
    let styler = this._stateStyles.get('*');
    if (stateName !== undefined) {
      styler = this._stateStyles.get(stateName?.toString()) || styler;
    }
    return styler ? styler.buildStyles(params, errors) : new Map();
  }
  build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
    const errors = [];
    const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
    const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
    const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
    const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
    const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
    const queriedElements = new Set();
    const preStyleMap = new Map();
    const postStyleMap = new Map();
    const isRemoval = nextState === 'void';
    const animationOptions = {
      params: applyParamDefaults(nextAnimationParams, transitionAnimationParams),
      delay: this.ast.options?.delay
    };
    const timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
    let totalTime = 0;
    timelines.forEach(tl => {
      totalTime = Math.max(tl.duration + tl.delay, totalTime);
    });
    if (errors.length) {
      return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
    }
    timelines.forEach(tl => {
      const elm = tl.element;
      const preProps = getOrSetDefaultValue(preStyleMap, elm, new Set());
      tl.preStyleProps.forEach(prop => preProps.add(prop));
      const postProps = getOrSetDefaultValue(postStyleMap, elm, new Set());
      tl.postStyleProps.forEach(prop => postProps.add(prop));
      if (elm !== element) {
        queriedElements.add(elm);
      }
    });
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      checkNonAnimatableInTimelines(timelines, this._triggerName, driver);
    }
    return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, [...queriedElements.values()], preStyleMap, postStyleMap, totalTime);
  }
}
/**
 * Checks inside a set of timelines if they try to animate a css property which is not considered
 * animatable, in that case it prints a warning on the console.
 * Besides that the function doesn't have any other effect.
 *
 * Note: this check is done here after the timelines are built instead of doing on a lower level so
 * that we can make sure that the warning appears only once per instruction (we can aggregate here
 * all the issues instead of finding them separately).
 *
 * @param timelines The built timelines for the current instruction.
 * @param triggerName The name of the trigger for the current instruction.
 * @param driver Animation driver used to perform the check.
 *
 */
function checkNonAnimatableInTimelines(timelines, triggerName, driver) {
  if (!driver.validateAnimatableStyleProperty) {
    return;
  }
  const allowedNonAnimatableProps = new Set([
  // 'easing' is a utility/synthetic prop we use to represent
  // easing functions, it represents a property of the animation
  // which is not animatable but different values can be used
  // in different steps
  'easing']);
  const invalidNonAnimatableProps = new Set();
  timelines.forEach(({
    keyframes
  }) => {
    const nonAnimatablePropsInitialValues = new Map();
    keyframes.forEach(keyframe => {
      const entriesToCheck = Array.from(keyframe.entries()).filter(([prop]) => !allowedNonAnimatableProps.has(prop));
      for (const [prop, value] of entriesToCheck) {
        if (!driver.validateAnimatableStyleProperty(prop)) {
          if (nonAnimatablePropsInitialValues.has(prop) && !invalidNonAnimatableProps.has(prop)) {
            const propInitialValue = nonAnimatablePropsInitialValues.get(prop);
            if (propInitialValue !== value) {
              invalidNonAnimatableProps.add(prop);
            }
          } else {
            nonAnimatablePropsInitialValues.set(prop, value);
          }
        }
      }
    });
  });
  if (invalidNonAnimatableProps.size > 0) {
    console.warn(`Warning: The animation trigger "${triggerName}" is attempting to animate the following` + ' not animatable properties: ' + Array.from(invalidNonAnimatableProps).join(', ') + '\n' + '(to check the list of all animatable properties visit https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties)');
  }
}
function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
  return matchFns.some(fn => fn(currentState, nextState, element, params));
}
function applyParamDefaults(userParams, defaults) {
  const result = {
    ...defaults
  };
  Object.entries(userParams).forEach(([key, value]) => {
    if (value != null) {
      result[key] = value;
    }
  });
  return result;
}
class AnimationStateStyles {
  constructor(styles, defaultParams, normalizer) {
    this.styles = styles;
    this.defaultParams = defaultParams;
    this.normalizer = normalizer;
  }
  buildStyles(params, errors) {
    const finalStyles = new Map();
    const combinedParams = applyParamDefaults(params, this.defaultParams);
    this.styles.styles.forEach(value => {
      if (typeof value !== 'string') {
        value.forEach((val, prop) => {
          if (val) {
            val = interpolateParams(val, combinedParams, errors);
          }
          const normalizedProp = this.normalizer.normalizePropertyName(prop, errors);
          val = this.normalizer.normalizeStyleValue(prop, normalizedProp, val, errors);
          finalStyles.set(prop, val);
        });
      }
    });
    return finalStyles;
  }
}
function buildTrigger(name, ast, normalizer) {
  return new AnimationTrigger(name, ast, normalizer);
}
class AnimationTrigger {
  constructor(name, ast, _normalizer) {
    this.name = name;
    this.ast = ast;
    this._normalizer = _normalizer;
    this.transitionFactories = [];
    this.states = new Map();
    ast.states.forEach(ast => {
      const defaultParams = ast.options && ast.options.params || {};
      this.states.set(ast.name, new AnimationStateStyles(ast.style, defaultParams, _normalizer));
    });
    balanceProperties(this.states, 'true', '1');
    balanceProperties(this.states, 'false', '0');
    ast.transitions.forEach(ast => {
      this.transitionFactories.push(new AnimationTransitionFactory(name, ast, this.states));
    });
    this.fallbackTransition = createFallbackTransition(name, this.states, this._normalizer);
  }
  get containsQueries() {
    return this.ast.queryCount > 0;
  }
  matchTransition(currentState, nextState, element, params) {
    const entry = this.transitionFactories.find(f => f.match(currentState, nextState, element, params));
    return entry || null;
  }
  matchStyles(currentState, params, errors) {
    return this.fallbackTransition.buildStyles(currentState, params, errors);
  }
}
function createFallbackTransition(triggerName, states, normalizer) {
  const matchers = [(fromState, toState) => true];
  const animation = {
    type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Sequence,
    steps: [],
    options: null
  };
  const transition = {
    type: _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AnimationMetadataType */ .If.Transition,
    animation,
    matchers,
    options: null,
    queryCount: 0,
    depCount: 0
  };
  return new AnimationTransitionFactory(triggerName, transition, states);
}
function balanceProperties(stateMap, key1, key2) {
  if (stateMap.has(key1)) {
    if (!stateMap.has(key2)) {
      stateMap.set(key2, stateMap.get(key1));
    }
  } else if (stateMap.has(key2)) {
    stateMap.set(key1, stateMap.get(key2));
  }
}
const EMPTY_INSTRUCTION_MAP = /*#__PURE__*/new ElementInstructionMap();
class TimelineAnimationEngine {
  constructor(bodyNode, _driver, _normalizer) {
    this.bodyNode = bodyNode;
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._animations = new Map();
    this._playersById = new Map();
    this.players = [];
  }
  register(id, metadata) {
    const errors = [];
    const warnings = [];
    const ast = buildAnimationAst(this._driver, metadata, errors, warnings);
    if (errors.length) {
      throw registerFailed(errors);
    } else {
      if (warnings.length) {
        warnRegister(warnings);
      }
      this._animations.set(id, ast);
    }
  }
  _buildPlayer(i, preStyles, postStyles) {
    const element = i.element;
    const keyframes = normalizeKeyframes$1(this._normalizer, i.keyframes, preStyles, postStyles);
    return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
  }
  create(id, element, options = {}) {
    const errors = [];
    const ast = this._animations.get(id);
    let instructions;
    const autoStylesMap = new Map();
    if (ast) {
      instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, new Map(), new Map(), options, EMPTY_INSTRUCTION_MAP, errors);
      instructions.forEach(inst => {
        const styles = getOrSetDefaultValue(autoStylesMap, inst.element, new Map());
        inst.postStyleProps.forEach(prop => styles.set(prop, null));
      });
    } else {
      errors.push(missingOrDestroyedAnimation());
      instructions = [];
    }
    if (errors.length) {
      throw createAnimationFailed(errors);
    }
    autoStylesMap.forEach((styles, element) => {
      styles.forEach((_, prop) => {
        styles.set(prop, this._driver.computeStyle(element, prop, _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp));
      });
    });
    const players = instructions.map(i => {
      const styles = autoStylesMap.get(i.element);
      return this._buildPlayer(i, new Map(), styles);
    });
    const player = optimizeGroupPlayer(players);
    this._playersById.set(id, player);
    player.onDestroy(() => this.destroy(id));
    this.players.push(player);
    return player;
  }
  destroy(id) {
    const player = this._getPlayer(id);
    player.destroy();
    this._playersById.delete(id);
    const index = this.players.indexOf(player);
    if (index >= 0) {
      this.players.splice(index, 1);
    }
  }
  _getPlayer(id) {
    const player = this._playersById.get(id);
    if (!player) {
      throw missingPlayer(id);
    }
    return player;
  }
  listen(id, element, eventName, callback) {
    // triggerName, fromState, toState are all ignored for timeline animations
    const baseEvent = makeAnimationEvent(element, '', '', '');
    listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
    return () => {};
  }
  command(id, element, command, args) {
    if (command == 'register') {
      this.register(id, args[0]);
      return;
    }
    if (command == 'create') {
      const options = args[0] || {};
      this.create(id, element, options);
      return;
    }
    const player = this._getPlayer(id);
    switch (command) {
      case 'play':
        player.play();
        break;
      case 'pause':
        player.pause();
        break;
      case 'reset':
        player.reset();
        break;
      case 'restart':
        player.restart();
        break;
      case 'finish':
        player.finish();
        break;
      case 'init':
        player.init();
        break;
      case 'setPosition':
        player.setPosition(parseFloat(args[0]));
        break;
      case 'destroy':
        this.destroy(id);
        break;
    }
  }
}
const QUEUED_CLASSNAME = 'ng-animate-queued';
const QUEUED_SELECTOR = '.ng-animate-queued';
const DISABLED_CLASSNAME = 'ng-animate-disabled';
const DISABLED_SELECTOR = '.ng-animate-disabled';
const STAR_CLASSNAME = 'ng-star-inserted';
const STAR_SELECTOR = '.ng-star-inserted';
const EMPTY_PLAYER_ARRAY = [];
const NULL_REMOVAL_STATE = {
  namespaceId: '',
  setForRemoval: false,
  setForMove: false,
  hasAnimation: false,
  removedBeforeQueried: false
};
const NULL_REMOVED_QUERIED_STATE = {
  namespaceId: '',
  setForMove: false,
  setForRemoval: false,
  hasAnimation: false,
  removedBeforeQueried: true
};
const REMOVAL_FLAG = '__ng_removed';
class StateValue {
  get params() {
    return this.options.params;
  }
  constructor(input, namespaceId = '') {
    this.namespaceId = namespaceId;
    const isObj = input && input.hasOwnProperty('value');
    const value = isObj ? input['value'] : input;
    this.value = normalizeTriggerValue(value);
    if (isObj) {
      // we drop the value property from options.
      const {
        value,
        ...options
      } = input;
      this.options = options;
    } else {
      this.options = {};
    }
    if (!this.options.params) {
      this.options.params = {};
    }
  }
  absorbOptions(options) {
    const newParams = options.params;
    if (newParams) {
      const oldParams = this.options.params;
      Object.keys(newParams).forEach(prop => {
        if (oldParams[prop] == null) {
          oldParams[prop] = newParams[prop];
        }
      });
    }
  }
}
const VOID_VALUE = 'void';
const DEFAULT_STATE_VALUE = /*#__PURE__*/new StateValue(VOID_VALUE);
class AnimationTransitionNamespace {
  constructor(id, hostElement, _engine) {
    this.id = id;
    this.hostElement = hostElement;
    this._engine = _engine;
    this.players = [];
    this._triggers = new Map();
    this._queue = [];
    this._elementListeners = new Map();
    this._hostClassName = 'ng-tns-' + id;
    addClass(hostElement, this._hostClassName);
  }
  listen(element, name, phase, callback) {
    if (!this._triggers.has(name)) {
      throw missingTrigger(phase, name);
    }
    if (phase == null || phase.length == 0) {
      throw missingEvent(name);
    }
    if (!isTriggerEventValid(phase)) {
      throw unsupportedTriggerEvent(phase, name);
    }
    const listeners = getOrSetDefaultValue(this._elementListeners, element, []);
    const data = {
      name,
      phase,
      callback
    };
    listeners.push(data);
    const triggersWithStates = getOrSetDefaultValue(this._engine.statesByElement, element, new Map());
    if (!triggersWithStates.has(name)) {
      addClass(element, NG_TRIGGER_CLASSNAME);
      addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
      triggersWithStates.set(name, DEFAULT_STATE_VALUE);
    }
    return () => {
      // the event listener is removed AFTER the flush has occurred such
      // that leave animations callbacks can fire (otherwise if the node
      // is removed in between then the listeners would be deregistered)
      this._engine.afterFlush(() => {
        const index = listeners.indexOf(data);
        if (index >= 0) {
          listeners.splice(index, 1);
        }
        if (!this._triggers.has(name)) {
          triggersWithStates.delete(name);
        }
      });
    };
  }
  register(name, ast) {
    if (this._triggers.has(name)) {
      // throw
      return false;
    } else {
      this._triggers.set(name, ast);
      return true;
    }
  }
  _getTrigger(name) {
    const trigger = this._triggers.get(name);
    if (!trigger) {
      throw unregisteredTrigger(name);
    }
    return trigger;
  }
  trigger(element, triggerName, value, defaultToFallback = true) {
    const trigger = this._getTrigger(triggerName);
    const player = new TransitionAnimationPlayer(this.id, triggerName, element);
    let triggersWithStates = this._engine.statesByElement.get(element);
    if (!triggersWithStates) {
      addClass(element, NG_TRIGGER_CLASSNAME);
      addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);
      this._engine.statesByElement.set(element, triggersWithStates = new Map());
    }
    let fromState = triggersWithStates.get(triggerName);
    const toState = new StateValue(value, this.id);
    const isObj = value && value.hasOwnProperty('value');
    if (!isObj && fromState) {
      toState.absorbOptions(fromState.options);
    }
    triggersWithStates.set(triggerName, toState);
    if (!fromState) {
      fromState = DEFAULT_STATE_VALUE;
    }
    const isRemoval = toState.value === VOID_VALUE;
    // normally this isn't reached by here, however, if an object expression
    // is passed in then it may be a new object each time. Comparing the value
    // is important since that will stay the same despite there being a new object.
    // The removal arc here is special cased because the same element is triggered
    // twice in the event that it contains animations on the outer/inner portions
    // of the host container
    if (!isRemoval && fromState.value === toState.value) {
      // this means that despite the value not changing, some inner params
      // have changed which means that the animation final styles need to be applied
      if (!objEquals(fromState.params, toState.params)) {
        const errors = [];
        const fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);
        const toStyles = trigger.matchStyles(toState.value, toState.params, errors);
        if (errors.length) {
          this._engine.reportError(errors);
        } else {
          this._engine.afterFlush(() => {
            eraseStyles(element, fromStyles);
            setStyles(element, toStyles);
          });
        }
      }
      return;
    }
    const playersOnElement = getOrSetDefaultValue(this._engine.playersByElement, element, []);
    playersOnElement.forEach(player => {
      // only remove the player if it is queued on the EXACT same trigger/namespace
      // we only also deal with queued players here because if the animation has
      // started then we want to keep the player alive until the flush happens
      // (which is where the previousPlayers are passed into the new player)
      if (player.namespaceId == this.id && player.triggerName == triggerName && player.queued) {
        player.destroy();
      }
    });
    let transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);
    let isFallbackTransition = false;
    if (!transition) {
      if (!defaultToFallback) return;
      transition = trigger.fallbackTransition;
      isFallbackTransition = true;
    }
    this._engine.totalQueuedPlayers++;
    this._queue.push({
      element,
      triggerName,
      transition,
      fromState,
      toState,
      player,
      isFallbackTransition
    });
    if (!isFallbackTransition) {
      addClass(element, QUEUED_CLASSNAME);
      player.onStart(() => {
        removeClass(element, QUEUED_CLASSNAME);
      });
    }
    player.onDone(() => {
      let index = this.players.indexOf(player);
      if (index >= 0) {
        this.players.splice(index, 1);
      }
      const players = this._engine.playersByElement.get(element);
      if (players) {
        let index = players.indexOf(player);
        if (index >= 0) {
          players.splice(index, 1);
        }
      }
    });
    this.players.push(player);
    playersOnElement.push(player);
    return player;
  }
  deregister(name) {
    this._triggers.delete(name);
    this._engine.statesByElement.forEach(stateMap => stateMap.delete(name));
    this._elementListeners.forEach((listeners, element) => {
      this._elementListeners.set(element, listeners.filter(entry => {
        return entry.name != name;
      }));
    });
  }
  clearElementCache(element) {
    this._engine.statesByElement.delete(element);
    this._elementListeners.delete(element);
    const elementPlayers = this._engine.playersByElement.get(element);
    if (elementPlayers) {
      elementPlayers.forEach(player => player.destroy());
      this._engine.playersByElement.delete(element);
    }
  }
  _signalRemovalForInnerTriggers(rootElement, context) {
    const elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true);
    // emulate a leave animation for all inner nodes within this node.
    // If there are no animations found for any of the nodes then clear the cache
    // for the element.
    elements.forEach(elm => {
      // this means that an inner remove() operation has already kicked off
      // the animation on this element...
      if (elm[REMOVAL_FLAG]) return;
      const namespaces = this._engine.fetchNamespacesByElement(elm);
      if (namespaces.size) {
        namespaces.forEach(ns => ns.triggerLeaveAnimation(elm, context, false, true));
      } else {
        this.clearElementCache(elm);
      }
    });
    // If the child elements were removed along with the parent, their animations might not
    // have completed. Clear all the elements from the cache so we don't end up with a memory leak.
    this._engine.afterFlushAnimationsDone(() => elements.forEach(elm => this.clearElementCache(elm)));
  }
  triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {
    const triggerStates = this._engine.statesByElement.get(element);
    const previousTriggersValues = new Map();
    if (triggerStates) {
      const players = [];
      triggerStates.forEach((state, triggerName) => {
        previousTriggersValues.set(triggerName, state.value);
        // this check is here in the event that an element is removed
        // twice (both on the host level and the component level)
        if (this._triggers.has(triggerName)) {
          const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);
          if (player) {
            players.push(player);
          }
        }
      });
      if (players.length) {
        this._engine.markElementAsRemoved(this.id, element, true, context, previousTriggersValues);
        if (destroyAfterComplete) {
          optimizeGroupPlayer(players).onDone(() => this._engine.processLeaveNode(element));
        }
        return true;
      }
    }
    return false;
  }
  prepareLeaveAnimationListeners(element) {
    const listeners = this._elementListeners.get(element);
    const elementStates = this._engine.statesByElement.get(element);
    // if this statement fails then it means that the element was picked up
    // by an earlier flush (or there are no listeners at all to track the leave).
    if (listeners && elementStates) {
      const visitedTriggers = new Set();
      listeners.forEach(listener => {
        const triggerName = listener.name;
        if (visitedTriggers.has(triggerName)) return;
        visitedTriggers.add(triggerName);
        const trigger = this._triggers.get(triggerName);
        const transition = trigger.fallbackTransition;
        const fromState = elementStates.get(triggerName) || DEFAULT_STATE_VALUE;
        const toState = new StateValue(VOID_VALUE);
        const player = new TransitionAnimationPlayer(this.id, triggerName, element);
        this._engine.totalQueuedPlayers++;
        this._queue.push({
          element,
          triggerName,
          transition,
          fromState,
          toState,
          player,
          isFallbackTransition: true
        });
      });
    }
  }
  removeNode(element, context) {
    const engine = this._engine;
    if (element.childElementCount) {
      this._signalRemovalForInnerTriggers(element, context);
    }
    // this means that a * => VOID animation was detected and kicked off
    if (this.triggerLeaveAnimation(element, context, true)) return;
    // find the player that is animating and make sure that the
    // removal is delayed until that player has completed
    let containsPotentialParentTransition = false;
    if (engine.totalAnimations) {
      const currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];
      // when this `if statement` does not continue forward it means that
      // a previous animation query has selected the current element and
      // is animating it. In this situation want to continue forwards and
      // allow the element to be queued up for animation later.
      if (currentPlayers && currentPlayers.length) {
        containsPotentialParentTransition = true;
      } else {
        let parent = element;
        while (parent = parent.parentNode) {
          const triggers = engine.statesByElement.get(parent);
          if (triggers) {
            containsPotentialParentTransition = true;
            break;
          }
        }
      }
    }
    // at this stage we know that the element will either get removed
    // during flush or will be picked up by a parent query. Either way
    // we need to fire the listeners for this element when it DOES get
    // removed (once the query parent animation is done or after flush)
    this.prepareLeaveAnimationListeners(element);
    // whether or not a parent has an animation we need to delay the deferral of the leave
    // operation until we have more information (which we do after flush() has been called)
    if (containsPotentialParentTransition) {
      engine.markElementAsRemoved(this.id, element, false, context);
    } else {
      const removalFlag = element[REMOVAL_FLAG];
      if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
        // we do this after the flush has occurred such
        // that the callbacks can be fired
        engine.afterFlush(() => this.clearElementCache(element));
        engine.destroyInnerAnimations(element);
        engine._onRemovalComplete(element, context);
      }
    }
  }
  insertNode(element, parent) {
    addClass(element, this._hostClassName);
  }
  drainQueuedTransitions(microtaskId) {
    const instructions = [];
    this._queue.forEach(entry => {
      const player = entry.player;
      if (player.destroyed) return;
      const element = entry.element;
      const listeners = this._elementListeners.get(element);
      if (listeners) {
        listeners.forEach(listener => {
          if (listener.name == entry.triggerName) {
            const baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
            baseEvent['_data'] = microtaskId;
            listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
          }
        });
      }
      if (player.markedForDestroy) {
        this._engine.afterFlush(() => {
          // now we can destroy the element properly since the event listeners have
          // been bound to the player
          player.destroy();
        });
      } else {
        instructions.push(entry);
      }
    });
    this._queue = [];
    return instructions.sort((a, b) => {
      // if depCount == 0 them move to front
      // otherwise if a contains b then move back
      const d0 = a.transition.ast.depCount;
      const d1 = b.transition.ast.depCount;
      if (d0 == 0 || d1 == 0) {
        return d0 - d1;
      }
      return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
    });
  }
  destroy(context) {
    this.players.forEach(p => p.destroy());
    this._signalRemovalForInnerTriggers(this.hostElement, context);
  }
}
class TransitionAnimationEngine {
  /** @internal */
  _onRemovalComplete(element, context) {
    this.onRemovalComplete(element, context);
  }
  constructor(bodyNode, driver, _normalizer, scheduler) {
    this.bodyNode = bodyNode;
    this.driver = driver;
    this._normalizer = _normalizer;
    this.scheduler = scheduler;
    this.players = [];
    this.newHostElements = new Map();
    this.playersByElement = new Map();
    this.playersByQueriedElement = new Map();
    this.statesByElement = new Map();
    this.disabledNodes = new Set();
    this.totalAnimations = 0;
    this.totalQueuedPlayers = 0;
    this._namespaceLookup = {};
    this._namespaceList = [];
    this._flushFns = [];
    this._whenQuietFns = [];
    this.namespacesByHostElement = new Map();
    this.collectedEnterElements = [];
    this.collectedLeaveElements = [];
    // this method is designed to be overridden by the code that uses this engine
    this.onRemovalComplete = (element, context) => {};
  }
  get queuedPlayers() {
    const players = [];
    this._namespaceList.forEach(ns => {
      ns.players.forEach(player => {
        if (player.queued) {
          players.push(player);
        }
      });
    });
    return players;
  }
  createNamespace(namespaceId, hostElement) {
    const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);
    if (this.bodyNode && this.driver.containsElement(this.bodyNode, hostElement)) {
      this._balanceNamespaceList(ns, hostElement);
    } else {
      // defer this later until flush during when the host element has
      // been inserted so that we know exactly where to place it in
      // the namespace list
      this.newHostElements.set(hostElement, ns);
      // given that this host element is a part of the animation code, it
      // may or may not be inserted by a parent node that is of an
      // animation renderer type. If this happens then we can still have
      // access to this item when we query for :enter nodes. If the parent
      // is a renderer then the set data-structure will normalize the entry
      this.collectEnterElement(hostElement);
    }
    return this._namespaceLookup[namespaceId] = ns;
  }
  _balanceNamespaceList(ns, hostElement) {
    const namespaceList = this._namespaceList;
    const namespacesByHostElement = this.namespacesByHostElement;
    const limit = namespaceList.length - 1;
    if (limit >= 0) {
      let found = false;
      // Find the closest ancestor with an existing namespace so we can then insert `ns` after it,
      // establishing a top-down ordering of namespaces in `this._namespaceList`.
      let ancestor = this.driver.getParentElement(hostElement);
      while (ancestor) {
        const ancestorNs = namespacesByHostElement.get(ancestor);
        if (ancestorNs) {
          // An animation namespace has been registered for this ancestor, so we insert `ns`
          // right after it to establish top-down ordering of animation namespaces.
          const index = namespaceList.indexOf(ancestorNs);
          namespaceList.splice(index + 1, 0, ns);
          found = true;
          break;
        }
        ancestor = this.driver.getParentElement(ancestor);
      }
      if (!found) {
        // No namespace exists that is an ancestor of `ns`, so `ns` is inserted at the front to
        // ensure that any existing descendants are ordered after `ns`, retaining the desired
        // top-down ordering.
        namespaceList.unshift(ns);
      }
    } else {
      namespaceList.push(ns);
    }
    namespacesByHostElement.set(hostElement, ns);
    return ns;
  }
  register(namespaceId, hostElement) {
    let ns = this._namespaceLookup[namespaceId];
    if (!ns) {
      ns = this.createNamespace(namespaceId, hostElement);
    }
    return ns;
  }
  registerTrigger(namespaceId, name, trigger) {
    let ns = this._namespaceLookup[namespaceId];
    if (ns && ns.register(name, trigger)) {
      this.totalAnimations++;
    }
  }
  destroy(namespaceId, context) {
    if (!namespaceId) return;
    this.afterFlush(() => {});
    this.afterFlushAnimationsDone(() => {
      const ns = this._fetchNamespace(namespaceId);
      this.namespacesByHostElement.delete(ns.hostElement);
      const index = this._namespaceList.indexOf(ns);
      if (index >= 0) {
        this._namespaceList.splice(index, 1);
      }
      ns.destroy(context);
      delete this._namespaceLookup[namespaceId];
    });
  }
  _fetchNamespace(id) {
    return this._namespaceLookup[id];
  }
  fetchNamespacesByElement(element) {
    // normally there should only be one namespace per element, however
    // if @triggers are placed on both the component element and then
    // its host element (within the component code) then there will be
    // two namespaces returned. We use a set here to simply deduplicate
    // the namespaces in case (for the reason described above) there are multiple triggers
    const namespaces = new Set();
    const elementStates = this.statesByElement.get(element);
    if (elementStates) {
      for (let stateValue of elementStates.values()) {
        if (stateValue.namespaceId) {
          const ns = this._fetchNamespace(stateValue.namespaceId);
          if (ns) {
            namespaces.add(ns);
          }
        }
      }
    }
    return namespaces;
  }
  trigger(namespaceId, element, name, value) {
    if (isElementNode(element)) {
      const ns = this._fetchNamespace(namespaceId);
      if (ns) {
        ns.trigger(element, name, value);
        return true;
      }
    }
    return false;
  }
  insertNode(namespaceId, element, parent, insertBefore) {
    if (!isElementNode(element)) return;
    // special case for when an element is removed and reinserted (move operation)
    // when this occurs we do not want to use the element for deletion later
    const details = element[REMOVAL_FLAG];
    if (details && details.setForRemoval) {
      details.setForRemoval = false;
      details.setForMove = true;
      const index = this.collectedLeaveElements.indexOf(element);
      if (index >= 0) {
        this.collectedLeaveElements.splice(index, 1);
      }
    }
    // in the event that the namespaceId is blank then the caller
    // code does not contain any animation code in it, but it is
    // just being called so that the node is marked as being inserted
    if (namespaceId) {
      const ns = this._fetchNamespace(namespaceId);
      // This if-statement is a workaround for router issue #21947.
      // The router sometimes hits a race condition where while a route
      // is being instantiated a new navigation arrives, triggering leave
      // animation of DOM that has not been fully initialized, until this
      // is resolved, we need to handle the scenario when DOM is not in a
      // consistent state during the animation.
      if (ns) {
        ns.insertNode(element, parent);
      }
    }
    // only *directives and host elements are inserted before
    if (insertBefore) {
      this.collectEnterElement(element);
    }
  }
  collectEnterElement(element) {
    this.collectedEnterElements.push(element);
  }
  markElementAsDisabled(element, value) {
    if (value) {
      if (!this.disabledNodes.has(element)) {
        this.disabledNodes.add(element);
        addClass(element, DISABLED_CLASSNAME);
      }
    } else if (this.disabledNodes.has(element)) {
      this.disabledNodes.delete(element);
      removeClass(element, DISABLED_CLASSNAME);
    }
  }
  removeNode(namespaceId, element, context) {
    if (isElementNode(element)) {
      this.scheduler?.notify();
      const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;
      if (ns) {
        ns.removeNode(element, context);
      } else {
        this.markElementAsRemoved(namespaceId, element, false, context);
      }
      const hostNS = this.namespacesByHostElement.get(element);
      if (hostNS && hostNS.id !== namespaceId) {
        hostNS.removeNode(element, context);
      }
    } else {
      this._onRemovalComplete(element, context);
    }
  }
  markElementAsRemoved(namespaceId, element, hasAnimation, context, previousTriggersValues) {
    this.collectedLeaveElements.push(element);
    element[REMOVAL_FLAG] = {
      namespaceId,
      setForRemoval: context,
      hasAnimation,
      removedBeforeQueried: false,
      previousTriggersValues
    };
  }
  listen(namespaceId, element, name, phase, callback) {
    if (isElementNode(element)) {
      return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
    }
    return () => {};
  }
  _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
    return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
  }
  destroyInnerAnimations(containerElement) {
    let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
    elements.forEach(element => this.destroyActiveAnimationsForElement(element));
    if (this.playersByQueriedElement.size == 0) return;
    elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
    elements.forEach(element => this.finishActiveQueriedAnimationOnElement(element));
  }
  destroyActiveAnimationsForElement(element) {
    const players = this.playersByElement.get(element);
    if (players) {
      players.forEach(player => {
        // special case for when an element is set for destruction, but hasn't started.
        // in this situation we want to delay the destruction until the flush occurs
        // so that any event listeners attached to the player are triggered.
        if (player.queued) {
          player.markedForDestroy = true;
        } else {
          player.destroy();
        }
      });
    }
  }
  finishActiveQueriedAnimationOnElement(element) {
    const players = this.playersByQueriedElement.get(element);
    if (players) {
      players.forEach(player => player.finish());
    }
  }
  whenRenderingDone() {
    return new Promise(resolve => {
      if (this.players.length) {
        return optimizeGroupPlayer(this.players).onDone(() => resolve());
      } else {
        resolve();
      }
    });
  }
  processLeaveNode(element) {
    const details = element[REMOVAL_FLAG];
    if (details && details.setForRemoval) {
      // this will prevent it from removing it twice
      element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;
      if (details.namespaceId) {
        this.destroyInnerAnimations(element);
        const ns = this._fetchNamespace(details.namespaceId);
        if (ns) {
          ns.clearElementCache(element);
        }
      }
      this._onRemovalComplete(element, details.setForRemoval);
    }
    if (element.classList?.contains(DISABLED_CLASSNAME)) {
      this.markElementAsDisabled(element, false);
    }
    this.driver.query(element, DISABLED_SELECTOR, true).forEach(node => {
      this.markElementAsDisabled(node, false);
    });
  }
  flush(microtaskId = -1) {
    let players = [];
    if (this.newHostElements.size) {
      this.newHostElements.forEach((ns, element) => this._balanceNamespaceList(ns, element));
      this.newHostElements.clear();
    }
    if (this.totalAnimations && this.collectedEnterElements.length) {
      for (let i = 0; i < this.collectedEnterElements.length; i++) {
        const elm = this.collectedEnterElements[i];
        addClass(elm, STAR_CLASSNAME);
      }
    }
    if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
      const cleanupFns = [];
      try {
        players = this._flushAnimations(cleanupFns, microtaskId);
      } finally {
        for (let i = 0; i < cleanupFns.length; i++) {
          cleanupFns[i]();
        }
      }
    } else {
      for (let i = 0; i < this.collectedLeaveElements.length; i++) {
        const element = this.collectedLeaveElements[i];
        this.processLeaveNode(element);
      }
    }
    this.totalQueuedPlayers = 0;
    this.collectedEnterElements.length = 0;
    this.collectedLeaveElements.length = 0;
    this._flushFns.forEach(fn => fn());
    this._flushFns = [];
    if (this._whenQuietFns.length) {
      // we move these over to a variable so that
      // if any new callbacks are registered in another
      // flush they do not populate the existing set
      const quietFns = this._whenQuietFns;
      this._whenQuietFns = [];
      if (players.length) {
        optimizeGroupPlayer(players).onDone(() => {
          quietFns.forEach(fn => fn());
        });
      } else {
        quietFns.forEach(fn => fn());
      }
    }
  }
  reportError(errors) {
    throw triggerTransitionsFailed(errors);
  }
  _flushAnimations(cleanupFns, microtaskId) {
    const subTimelines = new ElementInstructionMap();
    const skippedPlayers = [];
    const skippedPlayersMap = new Map();
    const queuedInstructions = [];
    const queriedElements = new Map();
    const allPreStyleElements = new Map();
    const allPostStyleElements = new Map();
    const disabledElementsSet = new Set();
    this.disabledNodes.forEach(node => {
      disabledElementsSet.add(node);
      const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);
      for (let i = 0; i < nodesThatAreDisabled.length; i++) {
        disabledElementsSet.add(nodesThatAreDisabled[i]);
      }
    });
    const bodyNode = this.bodyNode;
    const allTriggerElements = Array.from(this.statesByElement.keys());
    const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);
    // this must occur before the instructions are built below such that
    // the :enter queries match the elements (since the timeline queries
    // are fired during instruction building).
    const enterNodeMapIds = new Map();
    let i = 0;
    enterNodeMap.forEach((nodes, root) => {
      const className = ENTER_CLASSNAME + i++;
      enterNodeMapIds.set(root, className);
      nodes.forEach(node => addClass(node, className));
    });
    const allLeaveNodes = [];
    const mergedLeaveNodes = new Set();
    const leaveNodesWithoutAnimations = new Set();
    for (let i = 0; i < this.collectedLeaveElements.length; i++) {
      const element = this.collectedLeaveElements[i];
      const details = element[REMOVAL_FLAG];
      if (details && details.setForRemoval) {
        allLeaveNodes.push(element);
        mergedLeaveNodes.add(element);
        if (details.hasAnimation) {
          this.driver.query(element, STAR_SELECTOR, true).forEach(elm => mergedLeaveNodes.add(elm));
        } else {
          leaveNodesWithoutAnimations.add(element);
        }
      }
    }
    const leaveNodeMapIds = new Map();
    const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
    leaveNodeMap.forEach((nodes, root) => {
      const className = LEAVE_CLASSNAME + i++;
      leaveNodeMapIds.set(root, className);
      nodes.forEach(node => addClass(node, className));
    });
    cleanupFns.push(() => {
      enterNodeMap.forEach((nodes, root) => {
        const className = enterNodeMapIds.get(root);
        nodes.forEach(node => removeClass(node, className));
      });
      leaveNodeMap.forEach((nodes, root) => {
        const className = leaveNodeMapIds.get(root);
        nodes.forEach(node => removeClass(node, className));
      });
      allLeaveNodes.forEach(element => {
        this.processLeaveNode(element);
      });
    });
    const allPlayers = [];
    const erroneousTransitions = [];
    for (let i = this._namespaceList.length - 1; i >= 0; i--) {
      const ns = this._namespaceList[i];
      ns.drainQueuedTransitions(microtaskId).forEach(entry => {
        const player = entry.player;
        const element = entry.element;
        allPlayers.push(player);
        if (this.collectedEnterElements.length) {
          const details = element[REMOVAL_FLAG];
          // animations for move operations (elements being removed and reinserted,
          // e.g. when the order of an *ngFor list changes) are currently not supported
          if (details && details.setForMove) {
            if (details.previousTriggersValues && details.previousTriggersValues.has(entry.triggerName)) {
              const previousValue = details.previousTriggersValues.get(entry.triggerName);
              // we need to restore the previous trigger value since the element has
              // only been moved and hasn't actually left the DOM
              const triggersWithStates = this.statesByElement.get(entry.element);
              if (triggersWithStates && triggersWithStates.has(entry.triggerName)) {
                const state = triggersWithStates.get(entry.triggerName);
                state.value = previousValue;
                triggersWithStates.set(entry.triggerName, state);
              }
            }
            player.destroy();
            return;
          }
        }
        const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);
        const leaveClassName = leaveNodeMapIds.get(element);
        const enterClassName = enterNodeMapIds.get(element);
        const instruction = this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);
        if (instruction.errors && instruction.errors.length) {
          erroneousTransitions.push(instruction);
          return;
        }
        // even though the element may not be in the DOM, it may still
        // be added at a later point (due to the mechanics of content
        // projection and/or dynamic component insertion) therefore it's
        // important to still style the element.
        if (nodeIsOrphaned) {
          player.onStart(() => eraseStyles(element, instruction.fromStyles));
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          skippedPlayers.push(player);
          return;
        }
        // if an unmatched transition is queued and ready to go
        // then it SHOULD NOT render an animation and cancel the
        // previously running animations.
        if (entry.isFallbackTransition) {
          player.onStart(() => eraseStyles(element, instruction.fromStyles));
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          skippedPlayers.push(player);
          return;
        }
        // this means that if a parent animation uses this animation as a sub-trigger
        // then it will instruct the timeline builder not to add a player delay, but
        // instead stretch the first keyframe gap until the animation starts. This is
        // important in order to prevent extra initialization styles from being
        // required by the user for the animation.
        const timelines = [];
        instruction.timelines.forEach(tl => {
          tl.stretchStartingKeyframe = true;
          if (!this.disabledNodes.has(tl.element)) {
            timelines.push(tl);
          }
        });
        instruction.timelines = timelines;
        subTimelines.append(element, instruction.timelines);
        const tuple = {
          instruction,
          player,
          element
        };
        queuedInstructions.push(tuple);
        instruction.queriedElements.forEach(element => getOrSetDefaultValue(queriedElements, element, []).push(player));
        instruction.preStyleProps.forEach((stringMap, element) => {
          if (stringMap.size) {
            let setVal = allPreStyleElements.get(element);
            if (!setVal) {
              allPreStyleElements.set(element, setVal = new Set());
            }
            stringMap.forEach((_, prop) => setVal.add(prop));
          }
        });
        instruction.postStyleProps.forEach((stringMap, element) => {
          let setVal = allPostStyleElements.get(element);
          if (!setVal) {
            allPostStyleElements.set(element, setVal = new Set());
          }
          stringMap.forEach((_, prop) => setVal.add(prop));
        });
      });
    }
    if (erroneousTransitions.length) {
      const errors = [];
      erroneousTransitions.forEach(instruction => {
        errors.push(transitionFailed(instruction.triggerName, instruction.errors));
      });
      allPlayers.forEach(player => player.destroy());
      this.reportError(errors);
    }
    const allPreviousPlayersMap = new Map();
    // this map tells us which element in the DOM tree is contained by
    // which animation. Further down this map will get populated once
    // the players are built and in doing so we can use it to efficiently
    // figure out if a sub player is skipped due to a parent player having priority.
    const animationElementMap = new Map();
    queuedInstructions.forEach(entry => {
      const element = entry.element;
      if (subTimelines.has(element)) {
        animationElementMap.set(element, element);
        this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
      }
    });
    skippedPlayers.forEach(player => {
      const element = player.element;
      const previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);
      previousPlayers.forEach(prevPlayer => {
        getOrSetDefaultValue(allPreviousPlayersMap, element, []).push(prevPlayer);
        prevPlayer.destroy();
      });
    });
    // this is a special case for nodes that will be removed either by
    // having their own leave animations or by being queried in a container
    // that will be removed once a parent animation is complete. The idea
    // here is that * styles must be identical to ! styles because of
    // backwards compatibility (* is also filled in by default in many places).
    // Otherwise * styles will return an empty value or "auto" since the element
    // passed to getComputedStyle will not be visible (since * === destination)
    const replaceNodes = allLeaveNodes.filter(node => {
      return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
    });
    // POST STAGE: fill the * styles
    const postStylesMap = new Map();
    const allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .AUTO_STYLE */ .kp);
    allLeaveQueriedNodes.forEach(node => {
      if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
        replaceNodes.push(node);
      }
    });
    // PRE STAGE: fill the ! styles
    const preStylesMap = new Map();
    enterNodeMap.forEach((nodes, root) => {
      cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* ["ɵPRE_STYLE"] */ .FX);
    });
    replaceNodes.forEach(node => {
      const post = postStylesMap.get(node);
      const pre = preStylesMap.get(node);
      postStylesMap.set(node, new Map([...(post?.entries() ?? []), ...(pre?.entries() ?? [])]));
    });
    const rootPlayers = [];
    const subPlayers = [];
    const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
    queuedInstructions.forEach(entry => {
      const {
        element,
        player,
        instruction
      } = entry;
      // this means that it was never consumed by a parent animation which
      // means that it is independent and therefore should be set for animation
      if (subTimelines.has(element)) {
        if (disabledElementsSet.has(element)) {
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          player.disabled = true;
          player.overrideTotalTime(instruction.totalTime);
          skippedPlayers.push(player);
          return;
        }
        // this will flow up the DOM and query the map to figure out
        // if a parent animation has priority over it. In the situation
        // that a parent is detected then it will cancel the loop. If
        // nothing is detected, or it takes a few hops to find a parent,
        // then it will fill in the missing nodes and signal them as having
        // a detected parent (or a NO_PARENT value via a special constant).
        let parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;
        if (animationElementMap.size > 1) {
          let elm = element;
          const parentsToAdd = [];
          while (elm = elm.parentNode) {
            const detectedParent = animationElementMap.get(elm);
            if (detectedParent) {
              parentWithAnimation = detectedParent;
              break;
            }
            parentsToAdd.push(elm);
          }
          parentsToAdd.forEach(parent => animationElementMap.set(parent, parentWithAnimation));
        }
        const innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);
        player.setRealPlayer(innerPlayer);
        if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
          rootPlayers.push(player);
        } else {
          const parentPlayers = this.playersByElement.get(parentWithAnimation);
          if (parentPlayers && parentPlayers.length) {
            player.parentPlayer = optimizeGroupPlayer(parentPlayers);
          }
          skippedPlayers.push(player);
        }
      } else {
        eraseStyles(element, instruction.fromStyles);
        player.onDestroy(() => setStyles(element, instruction.toStyles));
        // there still might be a ancestor player animating this
        // element therefore we will still add it as a sub player
        // even if its animation may be disabled
        subPlayers.push(player);
        if (disabledElementsSet.has(element)) {
          skippedPlayers.push(player);
        }
      }
    });
    // find all of the sub players' corresponding inner animation players
    subPlayers.forEach(player => {
      // even if no players are found for a sub animation it
      // will still complete itself after the next tick since it's Noop
      const playersForElement = skippedPlayersMap.get(player.element);
      if (playersForElement && playersForElement.length) {
        const innerPlayer = optimizeGroupPlayer(playersForElement);
        player.setRealPlayer(innerPlayer);
      }
    });
    // the reason why we don't actually play the animation is
    // because all that a skipped player is designed to do is to
    // fire the start/done transition callback events
    skippedPlayers.forEach(player => {
      if (player.parentPlayer) {
        player.syncPlayerEvents(player.parentPlayer);
      } else {
        player.destroy();
      }
    });
    // run through all of the queued removals and see if they
    // were picked up by a query. If not then perform the removal
    // operation right away unless a parent animation is ongoing.
    for (let i = 0; i < allLeaveNodes.length; i++) {
      const element = allLeaveNodes[i];
      const details = element[REMOVAL_FLAG];
      removeClass(element, LEAVE_CLASSNAME);
      // this means the element has a removal animation that is being
      // taken care of and therefore the inner elements will hang around
      // until that animation is over (or the parent queried animation)
      if (details && details.hasAnimation) continue;
      let players = [];
      // if this element is queried or if it contains queried children
      // then we want for the element not to be removed from the page
      // until the queried animations have finished
      if (queriedElements.size) {
        let queriedPlayerResults = queriedElements.get(element);
        if (queriedPlayerResults && queriedPlayerResults.length) {
          players.push(...queriedPlayerResults);
        }
        let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);
        for (let j = 0; j < queriedInnerElements.length; j++) {
          let queriedPlayers = queriedElements.get(queriedInnerElements[j]);
          if (queriedPlayers && queriedPlayers.length) {
            players.push(...queriedPlayers);
          }
        }
      }
      const activePlayers = players.filter(p => !p.destroyed);
      if (activePlayers.length) {
        removeNodesAfterAnimationDone(this, element, activePlayers);
      } else {
        this.processLeaveNode(element);
      }
    }
    // this is required so the cleanup method doesn't remove them
    allLeaveNodes.length = 0;
    rootPlayers.forEach(player => {
      this.players.push(player);
      player.onDone(() => {
        player.destroy();
        const index = this.players.indexOf(player);
        this.players.splice(index, 1);
      });
      player.play();
    });
    return rootPlayers;
  }
  afterFlush(callback) {
    this._flushFns.push(callback);
  }
  afterFlushAnimationsDone(callback) {
    this._whenQuietFns.push(callback);
  }
  _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {
    let players = [];
    if (isQueriedElement) {
      const queriedElementPlayers = this.playersByQueriedElement.get(element);
      if (queriedElementPlayers) {
        players = queriedElementPlayers;
      }
    } else {
      const elementPlayers = this.playersByElement.get(element);
      if (elementPlayers) {
        const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;
        elementPlayers.forEach(player => {
          if (player.queued) return;
          if (!isRemovalAnimation && player.triggerName != triggerName) return;
          players.push(player);
        });
      }
    }
    if (namespaceId || triggerName) {
      players = players.filter(player => {
        if (namespaceId && namespaceId != player.namespaceId) return false;
        if (triggerName && triggerName != player.triggerName) return false;
        return true;
      });
    }
    return players;
  }
  _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {
    const triggerName = instruction.triggerName;
    const rootElement = instruction.element;
    // when a removal animation occurs, ALL previous players are collected
    // and destroyed (even if they are outside of the current namespace)
    const targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
    const targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;
    for (const timelineInstruction of instruction.timelines) {
      const element = timelineInstruction.element;
      const isQueriedElement = element !== rootElement;
      const players = getOrSetDefaultValue(allPreviousPlayersMap, element, []);
      const previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);
      previousPlayers.forEach(player => {
        const realPlayer = player.getRealPlayer();
        if (realPlayer.beforeDestroy) {
          realPlayer.beforeDestroy();
        }
        player.destroy();
        players.push(player);
      });
    }
    // this needs to be done so that the PRE/POST styles can be
    // computed properly without interfering with the previous animation
    eraseStyles(rootElement, instruction.fromStyles);
  }
  _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
    const triggerName = instruction.triggerName;
    const rootElement = instruction.element;
    // we first run this so that the previous animation player
    // data can be passed into the successive animation players
    const allQueriedPlayers = [];
    const allConsumedElements = new Set();
    const allSubElements = new Set();
    const allNewPlayers = instruction.timelines.map(timelineInstruction => {
      const element = timelineInstruction.element;
      allConsumedElements.add(element);
      // FIXME (matsko): make sure to-be-removed animations are removed properly
      const details = element[REMOVAL_FLAG];
      if (details && details.removedBeforeQueried) return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .NoopAnimationPlayer */ .sf(timelineInstruction.duration, timelineInstruction.delay);
      const isQueriedElement = element !== rootElement;
      const previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY).map(p => p.getRealPlayer())).filter(p => {
        // the `element` is not apart of the AnimationPlayer definition, but
        // Mock/WebAnimations
        // use the element within their implementation. This will be added in Angular5 to
        // AnimationPlayer
        const pp = p;
        return pp.element ? pp.element === element : false;
      });
      const preStyles = preStylesMap.get(element);
      const postStyles = postStylesMap.get(element);
      const keyframes = normalizeKeyframes$1(this._normalizer, timelineInstruction.keyframes, preStyles, postStyles);
      const player = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);
      // this means that this particular player belongs to a sub trigger. It is
      // important that we match this player up with the corresponding (@trigger.listener)
      if (timelineInstruction.subTimeline && skippedPlayersMap) {
        allSubElements.add(element);
      }
      if (isQueriedElement) {
        const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
        wrappedPlayer.setRealPlayer(player);
        allQueriedPlayers.push(wrappedPlayer);
      }
      return player;
    });
    allQueriedPlayers.forEach(player => {
      getOrSetDefaultValue(this.playersByQueriedElement, player.element, []).push(player);
      player.onDone(() => deleteOrUnsetInMap(this.playersByQueriedElement, player.element, player));
    });
    allConsumedElements.forEach(element => addClass(element, NG_ANIMATING_CLASSNAME));
    const player = optimizeGroupPlayer(allNewPlayers);
    player.onDestroy(() => {
      allConsumedElements.forEach(element => removeClass(element, NG_ANIMATING_CLASSNAME));
      setStyles(rootElement, instruction.toStyles);
    });
    // this basically makes all of the callbacks for sub element animations
    // be dependent on the upper players for when they finish
    allSubElements.forEach(element => {
      getOrSetDefaultValue(skippedPlayersMap, element, []).push(player);
    });
    return player;
  }
  _buildPlayer(instruction, keyframes, previousPlayers) {
    if (keyframes.length > 0) {
      return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
    }
    // special case for when an empty transition|definition is provided
    // ... there is no point in rendering an empty animation
    return new _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .NoopAnimationPlayer */ .sf(instruction.duration, instruction.delay);
  }
}
class TransitionAnimationPlayer {
  constructor(namespaceId, triggerName, element) {
    this.namespaceId = namespaceId;
    this.triggerName = triggerName;
    this.element = element;
    this._player = new _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* .NoopAnimationPlayer */ .sf();
    this._containsRealPlayer = false;
    this._queuedCallbacks = new Map();
    this.destroyed = false;
    this.parentPlayer = null;
    this.markedForDestroy = false;
    this.disabled = false;
    this.queued = true;
    this.totalTime = 0;
  }
  setRealPlayer(player) {
    if (this._containsRealPlayer) return;
    this._player = player;
    this._queuedCallbacks.forEach((callbacks, phase) => {
      callbacks.forEach(callback => listenOnPlayer(player, phase, undefined, callback));
    });
    this._queuedCallbacks.clear();
    this._containsRealPlayer = true;
    this.overrideTotalTime(player.totalTime);
    this.queued = false;
  }
  getRealPlayer() {
    return this._player;
  }
  overrideTotalTime(totalTime) {
    this.totalTime = totalTime;
  }
  syncPlayerEvents(player) {
    const p = this._player;
    if (p.triggerCallback) {
      player.onStart(() => p.triggerCallback('start'));
    }
    player.onDone(() => this.finish());
    player.onDestroy(() => this.destroy());
  }
  _queueEvent(name, callback) {
    getOrSetDefaultValue(this._queuedCallbacks, name, []).push(callback);
  }
  onDone(fn) {
    if (this.queued) {
      this._queueEvent('done', fn);
    }
    this._player.onDone(fn);
  }
  onStart(fn) {
    if (this.queued) {
      this._queueEvent('start', fn);
    }
    this._player.onStart(fn);
  }
  onDestroy(fn) {
    if (this.queued) {
      this._queueEvent('destroy', fn);
    }
    this._player.onDestroy(fn);
  }
  init() {
    this._player.init();
  }
  hasStarted() {
    return this.queued ? false : this._player.hasStarted();
  }
  play() {
    !this.queued && this._player.play();
  }
  pause() {
    !this.queued && this._player.pause();
  }
  restart() {
    !this.queued && this._player.restart();
  }
  finish() {
    this._player.finish();
  }
  destroy() {
    this.destroyed = true;
    this._player.destroy();
  }
  reset() {
    !this.queued && this._player.reset();
  }
  setPosition(p) {
    if (!this.queued) {
      this._player.setPosition(p);
    }
  }
  getPosition() {
    return this.queued ? 0 : this._player.getPosition();
  }
  /** @internal */
  triggerCallback(phaseName) {
    const p = this._player;
    if (p.triggerCallback) {
      p.triggerCallback(phaseName);
    }
  }
}
function deleteOrUnsetInMap(map, key, value) {
  let currentValues = map.get(key);
  if (currentValues) {
    if (currentValues.length) {
      const index = currentValues.indexOf(value);
      currentValues.splice(index, 1);
    }
    if (currentValues.length == 0) {
      map.delete(key);
    }
  }
  return currentValues;
}
function normalizeTriggerValue(value) {
  // we use `!= null` here because it's the most simple
  // way to test against a "falsy" value without mixing
  // in empty strings or a zero value. DO NOT OPTIMIZE.
  return value != null ? value : null;
}
function isElementNode(node) {
  return node && node['nodeType'] === 1;
}
function isTriggerEventValid(eventName) {
  return eventName == 'start' || eventName == 'done';
}
function cloakElement(element, value) {
  const oldValue = element.style.display;
  element.style.display = value != null ? value : 'none';
  return oldValue;
}
function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
  const cloakVals = [];
  elements.forEach(element => cloakVals.push(cloakElement(element)));
  const failedElements = [];
  elementPropsMap.forEach((props, element) => {
    const styles = new Map();
    props.forEach(prop => {
      const value = driver.computeStyle(element, prop, defaultStyle);
      styles.set(prop, value);
      // there is no easy way to detect this because a sub element could be removed
      // by a parent animation element being detached.
      if (!value || value.length == 0) {
        element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
        failedElements.push(element);
      }
    });
    valuesMap.set(element, styles);
  });
  // we use a index variable here since Set.forEach(a, i) does not return
  // an index value for the closure (but instead just the value)
  let i = 0;
  elements.forEach(element => cloakElement(element, cloakVals[i++]));
  return failedElements;
}
/*
Since the Angular renderer code will return a collection of inserted
nodes in all areas of a DOM tree, it's up to this algorithm to figure
out which nodes are roots for each animation @trigger.

By placing each inserted node into a Set and traversing upwards, it
is possible to find the @trigger elements and well any direct *star
insertion nodes, if a @trigger root is found then the enter element
is placed into the Map[@trigger] spot.
 */
function buildRootMap(roots, nodes) {
  const rootMap = new Map();
  roots.forEach(root => rootMap.set(root, []));
  if (nodes.length == 0) return rootMap;
  const NULL_NODE = 1;
  const nodeSet = new Set(nodes);
  const localRootMap = new Map();
  function getRoot(node) {
    if (!node) return NULL_NODE;
    let root = localRootMap.get(node);
    if (root) return root;
    const parent = node.parentNode;
    if (rootMap.has(parent)) {
      // ngIf inside @trigger
      root = parent;
    } else if (nodeSet.has(parent)) {
      // ngIf inside ngIf
      root = NULL_NODE;
    } else {
      // recurse upwards
      root = getRoot(parent);
    }
    localRootMap.set(node, root);
    return root;
  }
  nodes.forEach(node => {
    const root = getRoot(node);
    if (root !== NULL_NODE) {
      rootMap.get(root).push(node);
    }
  });
  return rootMap;
}
function addClass(element, className) {
  element.classList?.add(className);
}
function removeClass(element, className) {
  element.classList?.remove(className);
}
function removeNodesAfterAnimationDone(engine, element, players) {
  optimizeGroupPlayer(players).onDone(() => engine.processLeaveNode(element));
}
function flattenGroupPlayers(players) {
  const finalPlayers = [];
  _flattenGroupPlayersRecur(players, finalPlayers);
  return finalPlayers;
}
function _flattenGroupPlayersRecur(players, finalPlayers) {
  for (let i = 0; i < players.length; i++) {
    const player = players[i];
    if (player instanceof _angular_animations__WEBPACK_IMPORTED_MODULE_1__/* ["ɵAnimationGroupPlayer"] */ .ui) {
      _flattenGroupPlayersRecur(player.players, finalPlayers);
    } else {
      finalPlayers.push(player);
    }
  }
}
function objEquals(a, b) {
  const k1 = Object.keys(a);
  const k2 = Object.keys(b);
  if (k1.length != k2.length) return false;
  for (let i = 0; i < k1.length; i++) {
    const prop = k1[i];
    if (!b.hasOwnProperty(prop) || a[prop] !== b[prop]) return false;
  }
  return true;
}
function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
  const postEntry = allPostStyleElements.get(element);
  if (!postEntry) return false;
  let preEntry = allPreStyleElements.get(element);
  if (preEntry) {
    postEntry.forEach(data => preEntry.add(data));
  } else {
    allPreStyleElements.set(element, postEntry);
  }
  allPostStyleElements.delete(element);
  return true;
}
class AnimationEngine {
  constructor(doc, _driver, _normalizer, scheduler) {
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._triggerCache = {};
    // this method is designed to be overridden by the code that uses this engine
    this.onRemovalComplete = (element, context) => {};
    this._transitionEngine = new TransitionAnimationEngine(doc.body, _driver, _normalizer, scheduler);
    this._timelineEngine = new TimelineAnimationEngine(doc.body, _driver, _normalizer);
    this._transitionEngine.onRemovalComplete = (element, context) => this.onRemovalComplete(element, context);
  }
  registerTrigger(componentId, namespaceId, hostElement, name, metadata) {
    const cacheKey = componentId + '-' + name;
    let trigger = this._triggerCache[cacheKey];
    if (!trigger) {
      const errors = [];
      const warnings = [];
      const ast = buildAnimationAst(this._driver, metadata, errors, warnings);
      if (errors.length) {
        throw triggerBuildFailed(name, errors);
      }
      if (warnings.length) {
        warnTriggerBuild(name, warnings);
      }
      trigger = buildTrigger(name, ast, this._normalizer);
      this._triggerCache[cacheKey] = trigger;
    }
    this._transitionEngine.registerTrigger(namespaceId, name, trigger);
  }
  register(namespaceId, hostElement) {
    this._transitionEngine.register(namespaceId, hostElement);
  }
  destroy(namespaceId, context) {
    this._transitionEngine.destroy(namespaceId, context);
  }
  onInsert(namespaceId, element, parent, insertBefore) {
    this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
  }
  onRemove(namespaceId, element, context) {
    this._transitionEngine.removeNode(namespaceId, element, context);
  }
  disableAnimations(element, disable) {
    this._transitionEngine.markElementAsDisabled(element, disable);
  }
  process(namespaceId, element, property, value) {
    if (property.charAt(0) == '@') {
      const [id, action] = parseTimelineCommand(property);
      const args = value;
      this._timelineEngine.command(id, element, action, args);
    } else {
      this._transitionEngine.trigger(namespaceId, element, property, value);
    }
  }
  listen(namespaceId, element, eventName, eventPhase, callback) {
    // @@listen
    if (eventName.charAt(0) == '@') {
      const [id, action] = parseTimelineCommand(eventName);
      return this._timelineEngine.listen(id, element, action, callback);
    }
    return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
  }
  flush(microtaskId = -1) {
    this._transitionEngine.flush(microtaskId);
  }
  get players() {
    return [...this._transitionEngine.players, ...this._timelineEngine.players];
  }
  whenRenderingDone() {
    return this._transitionEngine.whenRenderingDone();
  }
  afterFlushAnimationsDone(cb) {
    this._transitionEngine.afterFlushAnimationsDone(cb);
  }
}

/**
 * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are
 * detected.
 *
 * In CSS there exist properties that cannot be animated within a keyframe animation
 * (whether it be via CSS keyframes or web-animations) and the animation implementation
 * will ignore them. This function is designed to detect those special cased styles and
 * return a container that will be executed at the start and end of the animation.
 *
 * @returns an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`
 */
function packageNonAnimatableStyles(element, styles) {
  let startStyles = null;
  let endStyles = null;
  if (Array.isArray(styles) && styles.length) {
    startStyles = filterNonAnimatableStyles(styles[0]);
    if (styles.length > 1) {
      endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
    }
  } else if (styles instanceof Map) {
    startStyles = filterNonAnimatableStyles(styles);
  }
  return startStyles || endStyles ? new SpecialCasedStyles(element, startStyles, endStyles) : null;
}
/**
 * Designed to be executed during a keyframe-based animation to apply any special-cased styles.
 *
 * When started (when the `start()` method is run) then the provided `startStyles`
 * will be applied. When finished (when the `finish()` method is called) the
 * `endStyles` will be applied as well any any starting styles. Finally when
 * `destroy()` is called then all styles will be removed.
 */
class SpecialCasedStyles {
  static #_ = this.initialStylesByElement = /*#__PURE__*/new WeakMap();
  constructor(_element, _startStyles, _endStyles) {
    this._element = _element;
    this._startStyles = _startStyles;
    this._endStyles = _endStyles;
    this._state = 0 /* SpecialCasedStylesState.Pending */;
    let initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);
    if (!initialStyles) {
      SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = new Map());
    }
    this._initialStyles = initialStyles;
  }
  start() {
    if (this._state < 1 /* SpecialCasedStylesState.Started */) {
      if (this._startStyles) {
        setStyles(this._element, this._startStyles, this._initialStyles);
      }
      this._state = 1 /* SpecialCasedStylesState.Started */;
    }
  }
  finish() {
    this.start();
    if (this._state < 2 /* SpecialCasedStylesState.Finished */) {
      setStyles(this._element, this._initialStyles);
      if (this._endStyles) {
        setStyles(this._element, this._endStyles);
        this._endStyles = null;
      }
      this._state = 1 /* SpecialCasedStylesState.Started */;
    }
  }
  destroy() {
    this.finish();
    if (this._state < 3 /* SpecialCasedStylesState.Destroyed */) {
      SpecialCasedStyles.initialStylesByElement.delete(this._element);
      if (this._startStyles) {
        eraseStyles(this._element, this._startStyles);
        this._endStyles = null;
      }
      if (this._endStyles) {
        eraseStyles(this._element, this._endStyles);
        this._endStyles = null;
      }
      setStyles(this._element, this._initialStyles);
      this._state = 3 /* SpecialCasedStylesState.Destroyed */;
    }
  }
}
function filterNonAnimatableStyles(styles) {
  let result = null;
  styles.forEach((val, prop) => {
    if (isNonAnimatableStyle(prop)) {
      result = result || new Map();
      result.set(prop, val);
    }
  });
  return result;
}
function isNonAnimatableStyle(prop) {
  return prop === 'display' || prop === 'position';
}
class WebAnimationsPlayer {
  constructor(element, keyframes, options, _specialStyles) {
    this.element = element;
    this.keyframes = keyframes;
    this.options = options;
    this._specialStyles = _specialStyles;
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._initialized = false;
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    // the following original fns are persistent copies of the _onStartFns and _onDoneFns
    // and are used to reset the fns to their original values upon reset()
    // (since the _onStartFns and _onDoneFns get deleted after they are called)
    this._originalOnDoneFns = [];
    this._originalOnStartFns = [];
    this.time = 0;
    this.parentPlayer = null;
    this.currentSnapshot = new Map();
    this._duration = options['duration'];
    this._delay = options['delay'] || 0;
    this.time = this._duration + this._delay;
  }
  _onFinish() {
    if (!this._finished) {
      this._finished = true;
      this._onDoneFns.forEach(fn => fn());
      this._onDoneFns = [];
    }
  }
  init() {
    this._buildPlayer();
    this._preparePlayerBeforeStart();
  }
  _buildPlayer() {
    if (this._initialized) return;
    this._initialized = true;
    const keyframes = this.keyframes;
    // @ts-expect-error overwriting a readonly property
    this.domPlayer = this._triggerWebAnimation(this.element, keyframes, this.options);
    this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : new Map();
    const onFinish = () => this._onFinish();
    this.domPlayer.addEventListener('finish', onFinish);
    this.onDestroy(() => {
      // We must remove the `finish` event listener once an animation has completed all its
      // iterations. This action is necessary to prevent a memory leak since the listener captures
      // `this`, creating a closure that prevents `this` from being garbage collected.
      this.domPlayer.removeEventListener('finish', onFinish);
    });
  }
  _preparePlayerBeforeStart() {
    // this is required so that the player doesn't start to animate right away
    if (this._delay) {
      this._resetDomPlayerState();
    } else {
      this.domPlayer.pause();
    }
  }
  _convertKeyframesToObject(keyframes) {
    const kfs = [];
    keyframes.forEach(frame => {
      kfs.push(Object.fromEntries(frame));
    });
    return kfs;
  }
  /** @internal */
  _triggerWebAnimation(element, keyframes, options) {
    return element.animate(this._convertKeyframesToObject(keyframes), options);
  }
  onStart(fn) {
    this._originalOnStartFns.push(fn);
    this._onStartFns.push(fn);
  }
  onDone(fn) {
    this._originalOnDoneFns.push(fn);
    this._onDoneFns.push(fn);
  }
  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }
  play() {
    this._buildPlayer();
    if (!this.hasStarted()) {
      this._onStartFns.forEach(fn => fn());
      this._onStartFns = [];
      this._started = true;
      if (this._specialStyles) {
        this._specialStyles.start();
      }
    }
    this.domPlayer.play();
  }
  pause() {
    this.init();
    this.domPlayer.pause();
  }
  finish() {
    this.init();
    if (this._specialStyles) {
      this._specialStyles.finish();
    }
    this._onFinish();
    this.domPlayer.finish();
  }
  reset() {
    this._resetDomPlayerState();
    this._destroyed = false;
    this._finished = false;
    this._started = false;
    this._onStartFns = this._originalOnStartFns;
    this._onDoneFns = this._originalOnDoneFns;
  }
  _resetDomPlayerState() {
    if (this.domPlayer) {
      this.domPlayer.cancel();
    }
  }
  restart() {
    this.reset();
    this.play();
  }
  hasStarted() {
    return this._started;
  }
  destroy() {
    if (!this._destroyed) {
      this._destroyed = true;
      this._resetDomPlayerState();
      this._onFinish();
      if (this._specialStyles) {
        this._specialStyles.destroy();
      }
      this._onDestroyFns.forEach(fn => fn());
      this._onDestroyFns = [];
    }
  }
  setPosition(p) {
    if (this.domPlayer === undefined) {
      this.init();
    }
    this.domPlayer.currentTime = p * this.time;
  }
  getPosition() {
    // tsc is complaining with TS2362 without the conversion to number
    return +(this.domPlayer.currentTime ?? 0) / this.time;
  }
  get totalTime() {
    return this._delay + this._duration;
  }
  beforeDestroy() {
    const styles = new Map();
    if (this.hasStarted()) {
      // note: this code is invoked only when the `play` function was called prior to this
      // (thus `hasStarted` returns true), this implies that the code that initializes
      // `_finalKeyframe` has also been executed and the non-null assertion can be safely used here
      const finalKeyframe = this._finalKeyframe;
      finalKeyframe.forEach((val, prop) => {
        if (prop !== 'offset') {
          styles.set(prop, this._finished ? val : computeStyle(this.element, prop));
        }
      });
    }
    this.currentSnapshot = styles;
  }
  /** @internal */
  triggerCallback(phaseName) {
    const methods = phaseName === 'start' ? this._onStartFns : this._onDoneFns;
    methods.forEach(fn => fn());
    methods.length = 0;
  }
}
class WebAnimationsDriver {
  validateStyleProperty(prop) {
    // Perform actual validation in dev mode only, in prod mode this check is a noop.
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      return validateStyleProperty(prop);
    }
    return true;
  }
  validateAnimatableStyleProperty(prop) {
    // Perform actual validation in dev mode only, in prod mode this check is a noop.
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
      const cssProp = camelCaseToDashCase(prop);
      return validateWebAnimatableStyleProperty(cssProp);
    }
    return true;
  }
  matchesElement(_element, _selector) {
    // This method is deprecated and no longer in use so we return false.
    return false;
  }
  containsElement(elm1, elm2) {
    return containsElement(elm1, elm2);
  }
  getParentElement(element) {
    return getParentElement(element);
  }
  query(element, selector, multi) {
    return invokeQuery(element, selector, multi);
  }
  computeStyle(element, prop, defaultValue) {
    return computeStyle(element, prop);
  }
  animate(element, keyframes, duration, delay, easing, previousPlayers = []) {
    const fill = delay == 0 ? 'both' : 'forwards';
    const playerOptions = {
      duration,
      delay,
      fill
    };
    // we check for this to avoid having a null|undefined value be present
    // for the easing (which results in an error for certain browsers #9752)
    if (easing) {
      playerOptions['easing'] = easing;
    }
    const previousStyles = new Map();
    const previousWebAnimationPlayers = previousPlayers.filter(player => player instanceof WebAnimationsPlayer);
    if (allowPreviousPlayerStylesMerge(duration, delay)) {
      previousWebAnimationPlayers.forEach(player => {
        player.currentSnapshot.forEach((val, prop) => previousStyles.set(prop, val));
      });
    }
    let _keyframes = normalizeKeyframes(keyframes).map(styles => new Map(styles));
    _keyframes = balancePreviousStylesIntoKeyframes(element, _keyframes, previousStyles);
    const specialStyles = packageNonAnimatableStyles(element, _keyframes);
    return new WebAnimationsPlayer(element, _keyframes, playerOptions, specialStyles);
  }
}
function createEngine(type, doc, scheduler) {
  // TODO: find a way to make this tree shakable.
  if (type === 'noop') {
    return new AnimationEngine(doc, new NoopAnimationDriver(), new NoopAnimationStyleNormalizer(), scheduler);
  }
  return new AnimationEngine(doc, new WebAnimationsDriver(), new WebAnimationsStyleNormalizer(), scheduler);
}
class Animation {
  constructor(_driver, input) {
    this._driver = _driver;
    const errors = [];
    const warnings = [];
    const ast = buildAnimationAst(_driver, input, errors, warnings);
    if (errors.length) {
      throw validationFailed(errors);
    }
    if (warnings.length) {
      warnValidation(warnings);
    }
    this._animationAst = ast;
  }
  buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {
    const start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) : startingStyles;
    const dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) : destinationStyles;
    const errors = [];
    subInstructions = subInstructions || new ElementInstructionMap();
    const result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);
    if (errors.length) {
      throw buildingFailed(errors);
    }
    return result;
  }
}
const ANIMATION_PREFIX = '@';
const DISABLE_ANIMATIONS_FLAG = '@.disabled';
class BaseAnimationRenderer {
  constructor(namespaceId, delegate, engine, _onDestroy) {
    this.namespaceId = namespaceId;
    this.delegate = delegate;
    this.engine = engine;
    this._onDestroy = _onDestroy;
    // We need to explicitly type this property because of an api-extractor bug
    // See https://github.com/microsoft/rushstack/issues/4390
    this.ɵtype = 0 /* AnimationRendererType.Regular */;
  }
  get data() {
    return this.delegate.data;
  }
  destroyNode(node) {
    this.delegate.destroyNode?.(node);
  }
  destroy() {
    this.engine.destroy(this.namespaceId, this.delegate);
    this.engine.afterFlushAnimationsDone(() => {
      // Call the renderer destroy method after the animations has finished as otherwise
      // styles will be removed too early which will cause an unstyled animation.
      queueMicrotask(() => {
        this.delegate.destroy();
      });
    });
    this._onDestroy?.();
  }
  createElement(name, namespace) {
    return this.delegate.createElement(name, namespace);
  }
  createComment(value) {
    return this.delegate.createComment(value);
  }
  createText(value) {
    return this.delegate.createText(value);
  }
  appendChild(parent, newChild) {
    this.delegate.appendChild(parent, newChild);
    this.engine.onInsert(this.namespaceId, newChild, parent, false);
  }
  insertBefore(parent, newChild, refChild, isMove = true) {
    this.delegate.insertBefore(parent, newChild, refChild);
    // If `isMove` true than we should animate this insert.
    this.engine.onInsert(this.namespaceId, newChild, parent, isMove);
  }
  removeChild(parent, oldChild, isHostElement) {
    this.engine.onRemove(this.namespaceId, oldChild, this.delegate);
  }
  selectRootElement(selectorOrNode, preserveContent) {
    return this.delegate.selectRootElement(selectorOrNode, preserveContent);
  }
  parentNode(node) {
    return this.delegate.parentNode(node);
  }
  nextSibling(node) {
    return this.delegate.nextSibling(node);
  }
  setAttribute(el, name, value, namespace) {
    this.delegate.setAttribute(el, name, value, namespace);
  }
  removeAttribute(el, name, namespace) {
    this.delegate.removeAttribute(el, name, namespace);
  }
  addClass(el, name) {
    this.delegate.addClass(el, name);
  }
  removeClass(el, name) {
    this.delegate.removeClass(el, name);
  }
  setStyle(el, style, value, flags) {
    this.delegate.setStyle(el, style, value, flags);
  }
  removeStyle(el, style, flags) {
    this.delegate.removeStyle(el, style, flags);
  }
  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
      this.disableAnimations(el, !!value);
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }
  setValue(node, value) {
    this.delegate.setValue(node, value);
  }
  listen(target, eventName, callback) {
    return this.delegate.listen(target, eventName, callback);
  }
  disableAnimations(element, value) {
    this.engine.disableAnimations(element, value);
  }
}
class AnimationRenderer extends BaseAnimationRenderer {
  constructor(factory, namespaceId, delegate, engine, onDestroy) {
    super(namespaceId, delegate, engine, onDestroy);
    this.factory = factory;
    this.namespaceId = namespaceId;
  }
  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX) {
      if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
        value = value === undefined ? true : !!value;
        this.disableAnimations(el, value);
      } else {
        this.engine.process(this.namespaceId, el, name.slice(1), value);
      }
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }
  listen(target, eventName, callback) {
    if (eventName.charAt(0) == ANIMATION_PREFIX) {
      const element = resolveElementFromTarget(target);
      let name = eventName.slice(1);
      let phase = '';
      // @listener.phase is for trigger animation callbacks
      // @@listener is for animation builder callbacks
      if (name.charAt(0) != ANIMATION_PREFIX) {
        [name, phase] = parseTriggerCallbackName(name);
      }
      return this.engine.listen(this.namespaceId, element, name, phase, event => {
        const countId = event['_data'] || -1;
        this.factory.scheduleListenerCallback(countId, callback, event);
      });
    }
    return this.delegate.listen(target, eventName, callback);
  }
}
function resolveElementFromTarget(target) {
  switch (target) {
    case 'body':
      return document.body;
    case 'document':
      return document;
    case 'window':
      return window;
    default:
      return target;
  }
}
function parseTriggerCallbackName(triggerName) {
  const dotIndex = triggerName.indexOf('.');
  const trigger = triggerName.substring(0, dotIndex);
  const phase = triggerName.slice(dotIndex + 1);
  return [trigger, phase];
}
class AnimationRendererFactory {
  constructor(delegate, engine, _zone) {
    this.delegate = delegate;
    this.engine = engine;
    this._zone = _zone;
    this._currentId = 0;
    this._microtaskId = 1;
    this._animationCallbacksBuffer = [];
    this._rendererCache = new Map();
    this._cdRecurDepth = 0;
    engine.onRemovalComplete = (element, delegate) => {
      // Note: if a component element has a leave animation, and a host leave animation,
      // the view engine will call `removeChild` for the parent
      // component renderer as well as for the child component renderer.
      // Therefore, we need to check if we already removed the element.
      const parentNode = delegate?.parentNode(element);
      if (parentNode) {
        delegate.removeChild(parentNode, element);
      }
    };
  }
  createRenderer(hostElement, type) {
    const EMPTY_NAMESPACE_ID = '';
    // cache the delegates to find out which cached delegate can
    // be used by which cached renderer
    const delegate = this.delegate.createRenderer(hostElement, type);
    if (!hostElement || !type?.data?.['animation']) {
      const cache = this._rendererCache;
      let renderer = cache.get(delegate);
      if (!renderer) {
        // Ensure that the renderer is removed from the cache on destroy
        // since it may contain references to detached DOM nodes.
        const onRendererDestroy = () => cache.delete(delegate);
        renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine, onRendererDestroy);
        // only cache this result when the base renderer is used
        cache.set(delegate, renderer);
      }
      return renderer;
    }
    const componentId = type.id;
    const namespaceId = type.id + '-' + this._currentId;
    this._currentId++;
    this.engine.register(namespaceId, hostElement);
    const registerTrigger = trigger => {
      if (Array.isArray(trigger)) {
        trigger.forEach(registerTrigger);
      } else {
        this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
      }
    };
    const animationTriggers = type.data['animation'];
    animationTriggers.forEach(registerTrigger);
    return new AnimationRenderer(this, namespaceId, delegate, this.engine);
  }
  begin() {
    this._cdRecurDepth++;
    if (this.delegate.begin) {
      this.delegate.begin();
    }
  }
  _scheduleCountTask() {
    queueMicrotask(() => {
      this._microtaskId++;
    });
  }
  /** @internal */
  scheduleListenerCallback(count, fn, data) {
    if (count >= 0 && count < this._microtaskId) {
      this._zone.run(() => fn(data));
      return;
    }
    const animationCallbacksBuffer = this._animationCallbacksBuffer;
    if (animationCallbacksBuffer.length == 0) {
      queueMicrotask(() => {
        this._zone.run(() => {
          animationCallbacksBuffer.forEach(tuple => {
            const [fn, data] = tuple;
            fn(data);
          });
          this._animationCallbacksBuffer = [];
        });
      });
    }
    animationCallbacksBuffer.push([fn, data]);
  }
  end() {
    this._cdRecurDepth--;
    // this is to prevent animations from running twice when an inner
    // component does CD when a parent component instead has inserted it
    if (this._cdRecurDepth == 0) {
      this._zone.runOutsideAngular(() => {
        this._scheduleCountTask();
        this.engine.flush(this._microtaskId);
      });
    }
    if (this.delegate.end) {
      this.delegate.end();
    }
  }
  whenRenderingDone() {
    return this.engine.whenRenderingDone();
  }
}

/**
 * @module
 * @description
 * Entry point for all animation APIs of the animation browser package.
 */

/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */

// This file is not used to build this module. It is only used during editing

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=browser.mjs.map

/***/ }),

/***/ 4341:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  me: () => (/* binding */ DefaultValueAccessor),
  MJ: () => (/* binding */ FormControl),
  l_: () => (/* binding */ FormControlDirective),
  YN: () => (/* binding */ FormsModule),
  kq: () => (/* binding */ NG_VALUE_ACCESSOR),
  vO: () => (/* binding */ NgControl),
  BC: () => (/* binding */ NgControlStatus),
  vS: () => (/* binding */ NgModel),
  X1: () => (/* binding */ ReactiveFormsModule)
});

// UNUSED EXPORTS: AbstractControl, AbstractControlDirective, AbstractFormGroupDirective, COMPOSITION_BUFFER_MODE, CheckboxControlValueAccessor, CheckboxRequiredValidator, ControlContainer, EmailValidator, FormArray, FormArrayName, FormBuilder, FormControlName, FormGroup, FormGroupDirective, FormGroupName, FormRecord, MaxLengthValidator, MaxValidator, MinLengthValidator, MinValidator, NG_ASYNC_VALIDATORS, NG_VALIDATORS, NgControlStatusGroup, NgForm, NgModelGroup, NgSelectOption, NonNullableFormBuilder, NumberValueAccessor, PatternValidator, RadioControlValueAccessor, RangeValueAccessor, RequiredValidator, SelectControlValueAccessor, SelectMultipleControlValueAccessor, UntypedFormArray, UntypedFormBuilder, UntypedFormControl, UntypedFormGroup, VERSION, Validators, isFormArray, isFormControl, isFormGroup, isFormRecord, ɵInternalFormsSharedModule, ɵNgNoValidate, ɵNgSelectMultipleOption

// EXTERNAL MODULE: consume shared module (default) @angular/core@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/core/fesm2022/core.mjs)
var core_mjs_ = __webpack_require__(1750);
// EXTERNAL MODULE: consume shared module (default) @angular/common@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/common/fesm2022/common.mjs)
var common_mjs_ = __webpack_require__(6412);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/from.js + 9 modules
var from = __webpack_require__(6648);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Observable.js
var Observable = __webpack_require__(1985);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js
var argsArgArrayOrObject = __webpack_require__(3073);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
var innerFrom = __webpack_require__(8750);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/args.js
var util_args = __webpack_require__(9326);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
var OperatorSubscriber = __webpack_require__(4360);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js
var mapOneOrManyArgs = __webpack_require__(6450);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/createObject.js
var createObject = __webpack_require__(8496);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/observable/forkJoin.js







function forkJoin(...args) {
  const resultSelector = (0,util_args/* popResultSelector */.ms)(args);
  const {
    args: sources,
    keys
  } = (0,argsArgArrayOrObject/* argsArgArrayOrObject */.D)(args);
  const result = new Observable/* Observable */.c(subscriber => {
    const {
      length
    } = sources;
    if (!length) {
      subscriber.complete();
      return;
    }
    const values = new Array(length);
    let remainingCompletions = length;
    let remainingEmissions = length;
    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {
      let hasValue = false;
      (0,innerFrom/* innerFrom */.Tg)(sources[sourceIndex]).subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, value => {
        if (!hasValue) {
          hasValue = true;
          remainingEmissions--;
        }
        values[sourceIndex] = value;
      }, () => remainingCompletions--, undefined, () => {
        if (!remainingCompletions || !hasValue) {
          if (!remainingEmissions) {
            subscriber.next(keys ? (0,createObject/* createObject */.e)(keys, values) : values);
          }
          subscriber.complete();
        }
      }));
    }
  });
  return resultSelector ? result.pipe((0,mapOneOrManyArgs/* mapOneOrManyArgs */.I)(resultSelector)) : result;
}
//# sourceMappingURL=forkJoin.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var map = __webpack_require__(6354);
;// CONCATENATED MODULE: ./node_modules/@angular/forms/fesm2022/forms.mjs
/**
 * @license Angular v17.3.0
 * (c) 2010-2022 Google LLC. https://angular.io/
 * License: MIT
 */







/**
 * Base class for all ControlValueAccessor classes defined in Forms package.
 * Contains common logic and utility functions.
 *
 * Note: this is an *internal-only* class and should not be extended or used directly in
 * applications code.
 */
let BaseControlValueAccessor = /*#__PURE__*/(() => {
  class BaseControlValueAccessor {
    constructor(_renderer, _elementRef) {
      this._renderer = _renderer;
      this._elementRef = _elementRef;
      /**
       * The registered callback function called when a change or input event occurs on the input
       * element.
       * @nodoc
       */
      this.onChange = _ => {};
      /**
       * The registered callback function called when a blur event occurs on the input element.
       * @nodoc
       */
      this.onTouched = () => {};
    }
    /**
     * Helper method that sets a property on a target element using the current Renderer
     * implementation.
     * @nodoc
     */
    setProperty(key, value) {
      this._renderer.setProperty(this._elementRef.nativeElement, key, value);
    }
    /**
     * Registers a function called when the control is touched.
     * @nodoc
     */
    registerOnTouched(fn) {
      this.onTouched = fn;
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */
    registerOnChange(fn) {
      this.onChange = fn;
    }
    /**
     * Sets the "disabled" property on the range input element.
     * @nodoc
     */
    setDisabledState(isDisabled) {
      this.setProperty('disabled', isDisabled);
    }
    static #_ = this.ɵfac = function BaseControlValueAccessor_Factory(t) {
      return new (t || BaseControlValueAccessor)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.Renderer2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: BaseControlValueAccessor
    });
  }
  return BaseControlValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Base class for all built-in ControlValueAccessor classes (except DefaultValueAccessor, which is
 * used in case no other CVAs can be found). We use this class to distinguish between default CVA,
 * built-in CVAs and custom CVAs, so that Forms logic can recognize built-in CVAs and treat custom
 * ones with higher priority (when both built-in and custom CVAs are present).
 *
 * Note: this is an *internal-only* class and should not be extended or used directly in
 * applications code.
 */
let BuiltInControlValueAccessor = /*#__PURE__*/(() => {
  class BuiltInControlValueAccessor extends BaseControlValueAccessor {
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵBuiltInControlValueAccessor_BaseFactory;
      return function BuiltInControlValueAccessor_Factory(t) {
        return (ɵBuiltInControlValueAccessor_BaseFactory || (ɵBuiltInControlValueAccessor_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](BuiltInControlValueAccessor)))(t || BuiltInControlValueAccessor);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: BuiltInControlValueAccessor,
      features: [core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return BuiltInControlValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Used to provide a `ControlValueAccessor` for form controls.
 *
 * See `DefaultValueAccessor` for how to implement one.
 *
 * @publicApi
 */
const NG_VALUE_ACCESSOR = /*#__PURE__*/new core_mjs_.InjectionToken(ngDevMode ? 'NgValueAccessor' : '');
const CHECKBOX_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => CheckboxControlValueAccessor),
  multi: true
};
/**
 * @description
 * A `ControlValueAccessor` for writing a value and listening to changes on a checkbox input
 * element.
 *
 * @usageNotes
 *
 * ### Using a checkbox with a reactive form.
 *
 * The following example shows how to use a checkbox with a reactive form.
 *
 * ```ts
 * const rememberLoginControl = new FormControl();
 * ```
 *
 * ```
 * <input type="checkbox" [formControl]="rememberLoginControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let CheckboxControlValueAccessor = /*#__PURE__*/(() => {
  class CheckboxControlValueAccessor extends BuiltInControlValueAccessor {
    /**
     * Sets the "checked" property on the input element.
     * @nodoc
     */
    writeValue(value) {
      this.setProperty('checked', value);
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵCheckboxControlValueAccessor_BaseFactory;
      return function CheckboxControlValueAccessor_Factory(t) {
        return (ɵCheckboxControlValueAccessor_BaseFactory || (ɵCheckboxControlValueAccessor_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](CheckboxControlValueAccessor)))(t || CheckboxControlValueAccessor);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: CheckboxControlValueAccessor,
      selectors: [["input", "type", "checkbox", "formControlName", ""], ["input", "type", "checkbox", "formControl", ""], ["input", "type", "checkbox", "ngModel", ""]],
      hostBindings: function CheckboxControlValueAccessor_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("change", function CheckboxControlValueAccessor_change_HostBindingHandler($event) {
            return ctx.onChange($event.target.checked);
          })("blur", function CheckboxControlValueAccessor_blur_HostBindingHandler() {
            return ctx.onTouched();
          });
        }
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([CHECKBOX_VALUE_ACCESSOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return CheckboxControlValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const DEFAULT_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => DefaultValueAccessor),
  multi: true
};
/**
 * We must check whether the agent is Android because composition events
 * behave differently between iOS and Android.
 */
function _isAndroid() {
  const userAgent = (0,common_mjs_["ɵgetDOM"])() ? (0,common_mjs_["ɵgetDOM"])().getUserAgent() : '';
  return /android (\d+)/.test(userAgent.toLowerCase());
}
/**
 * @description
 * Provide this token to control if form directives buffer IME input until
 * the "compositionend" event occurs.
 * @publicApi
 */
const COMPOSITION_BUFFER_MODE = /*#__PURE__*/new core_mjs_.InjectionToken(ngDevMode ? 'CompositionEventMode' : '');
/**
 * The default `ControlValueAccessor` for writing a value and listening to changes on input
 * elements. The accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * {@searchKeywords ngDefaultControl}
 *
 * @usageNotes
 *
 * ### Using the default value accessor
 *
 * The following example shows how to use an input element that activates the default value accessor
 * (in this case, a text field).
 *
 * ```ts
 * const firstNameControl = new FormControl();
 * ```
 *
 * ```
 * <input type="text" [formControl]="firstNameControl">
 * ```
 *
 * This value accessor is used by default for `<input type="text">` and `<textarea>` elements, but
 * you could also use it for custom components that have similar behavior and do not require special
 * processing. In order to attach the default value accessor to a custom element, add the
 * `ngDefaultControl` attribute as shown below.
 *
 * ```
 * <custom-input-component ngDefaultControl [(ngModel)]="value"></custom-input-component>
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let DefaultValueAccessor = /*#__PURE__*/(() => {
  class DefaultValueAccessor extends BaseControlValueAccessor {
    constructor(renderer, elementRef, _compositionMode) {
      super(renderer, elementRef);
      this._compositionMode = _compositionMode;
      /** Whether the user is creating a composition string (IME events). */
      this._composing = false;
      if (this._compositionMode == null) {
        this._compositionMode = !_isAndroid();
      }
    }
    /**
     * Sets the "value" property on the input element.
     * @nodoc
     */
    writeValue(value) {
      const normalizedValue = value == null ? '' : value;
      this.setProperty('value', normalizedValue);
    }
    /** @internal */
    _handleInput(value) {
      if (!this._compositionMode || this._compositionMode && !this._composing) {
        this.onChange(value);
      }
    }
    /** @internal */
    _compositionStart() {
      this._composing = true;
    }
    /** @internal */
    _compositionEnd(value) {
      this._composing = false;
      this._compositionMode && this.onChange(value);
    }
    static #_ = this.ɵfac = function DefaultValueAccessor_Factory(t) {
      return new (t || DefaultValueAccessor)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.Renderer2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](COMPOSITION_BUFFER_MODE, 8));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: DefaultValueAccessor,
      selectors: [["input", "formControlName", "", 3, "type", "checkbox"], ["textarea", "formControlName", ""], ["input", "formControl", "", 3, "type", "checkbox"], ["textarea", "formControl", ""], ["input", "ngModel", "", 3, "type", "checkbox"], ["textarea", "ngModel", ""], ["", "ngDefaultControl", ""]],
      hostBindings: function DefaultValueAccessor_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("input", function DefaultValueAccessor_input_HostBindingHandler($event) {
            return ctx._handleInput($event.target.value);
          })("blur", function DefaultValueAccessor_blur_HostBindingHandler() {
            return ctx.onTouched();
          })("compositionstart", function DefaultValueAccessor_compositionstart_HostBindingHandler() {
            return ctx._compositionStart();
          })("compositionend", function DefaultValueAccessor_compositionend_HostBindingHandler($event) {
            return ctx._compositionEnd($event.target.value);
          });
        }
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([DEFAULT_VALUE_ACCESSOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return DefaultValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function isEmptyInputValue(value) {
  /**
   * Check if the object is a string or array before evaluating the length attribute.
   * This avoids falsely rejecting objects that contain a custom length attribute.
   * For example, the object {id: 1, length: 0, width: 0} should not be returned as empty.
   */
  return value == null || (typeof value === 'string' || Array.isArray(value)) && value.length === 0;
}
function hasValidLength(value) {
  // non-strict comparison is intentional, to check for both `null` and `undefined` values
  return value != null && typeof value.length === 'number';
}
/**
 * @description
 * An `InjectionToken` for registering additional synchronous validators used with
 * `AbstractControl`s.
 *
 * @see {@link NG_ASYNC_VALIDATORS}
 *
 * @usageNotes
 *
 * ### Providing a custom validator
 *
 * The following example registers a custom validator directive. Adding the validator to the
 * existing collection of validators requires the `multi: true` option.
 *
 * ```typescript
 * @Directive({
 *   selector: '[customValidator]',
 *   providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]
 * })
 * class CustomValidatorDirective implements Validator {
 *   validate(control: AbstractControl): ValidationErrors | null {
 *     return { 'custom': true };
 *   }
 * }
 * ```
 *
 * @publicApi
 */
const NG_VALIDATORS = /*#__PURE__*/new core_mjs_.InjectionToken(ngDevMode ? 'NgValidators' : '');
/**
 * @description
 * An `InjectionToken` for registering additional asynchronous validators used with
 * `AbstractControl`s.
 *
 * @see {@link NG_VALIDATORS}
 *
 * @usageNotes
 *
 * ### Provide a custom async validator directive
 *
 * The following example implements the `AsyncValidator` interface to create an
 * async validator directive with a custom error key.
 *
 * ```typescript
 * @Directive({
 *   selector: '[customAsyncValidator]',
 *   providers: [{provide: NG_ASYNC_VALIDATORS, useExisting: CustomAsyncValidatorDirective, multi:
 * true}]
 * })
 * class CustomAsyncValidatorDirective implements AsyncValidator {
 *   validate(control: AbstractControl): Promise<ValidationErrors|null> {
 *     return Promise.resolve({'custom': true});
 *   }
 * }
 * ```
 *
 * @publicApi
 */
const NG_ASYNC_VALIDATORS = /*#__PURE__*/new core_mjs_.InjectionToken(ngDevMode ? 'NgAsyncValidators' : '');
/**
 * A regular expression that matches valid e-mail addresses.
 *
 * At a high level, this regexp matches e-mail addresses of the format `local-part@tld`, where:
 * - `local-part` consists of one or more of the allowed characters (alphanumeric and some
 *   punctuation symbols).
 * - `local-part` cannot begin or end with a period (`.`).
 * - `local-part` cannot be longer than 64 characters.
 * - `tld` consists of one or more `labels` separated by periods (`.`). For example `localhost` or
 *   `foo.com`.
 * - A `label` consists of one or more of the allowed characters (alphanumeric, dashes (`-`) and
 *   periods (`.`)).
 * - A `label` cannot begin or end with a dash (`-`) or a period (`.`).
 * - A `label` cannot be longer than 63 characters.
 * - The whole address cannot be longer than 254 characters.
 *
 * ## Implementation background
 *
 * This regexp was ported over from AngularJS (see there for git history):
 * https://github.com/angular/angular.js/blob/c133ef836/src/ng/directive/input.js#L27
 * It is based on the
 * [WHATWG version](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
 * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
 * lengths of different parts of the address). The main differences from the WHATWG version are:
 *   - Disallow `local-part` to begin or end with a period (`.`).
 *   - Disallow `local-part` length to exceed 64 characters.
 *   - Disallow total address length to exceed 254 characters.
 *
 * See [this commit](https://github.com/angular/angular.js/commit/f3f5cf72e) for more details.
 */
const EMAIL_REGEXP = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
/**
 * @description
 * Provides a set of built-in validators that can be used by form controls.
 *
 * A validator is a function that processes a `FormControl` or collection of
 * controls and returns an error map or null. A null map means that validation has passed.
 *
 * @see [Form Validation](/guide/form-validation)
 *
 * @publicApi
 */
class Validators {
  /**
   * @description
   * Validator that requires the control's value to be greater than or equal to the provided number.
   *
   * @usageNotes
   *
   * ### Validate against a minimum of 3
   *
   * ```typescript
   * const control = new FormControl(2, Validators.min(3));
   *
   * console.log(control.errors); // {min: {min: 3, actual: 2}}
   * ```
   *
   * @returns A validator function that returns an error map with the
   * `min` property if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static min(min) {
    return minValidator(min);
  }
  /**
   * @description
   * Validator that requires the control's value to be less than or equal to the provided number.
   *
   * @usageNotes
   *
   * ### Validate against a maximum of 15
   *
   * ```typescript
   * const control = new FormControl(16, Validators.max(15));
   *
   * console.log(control.errors); // {max: {max: 15, actual: 16}}
   * ```
   *
   * @returns A validator function that returns an error map with the
   * `max` property if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static max(max) {
    return maxValidator(max);
  }
  /**
   * @description
   * Validator that requires the control have a non-empty value.
   *
   * @usageNotes
   *
   * ### Validate that the field is non-empty
   *
   * ```typescript
   * const control = new FormControl('', Validators.required);
   *
   * console.log(control.errors); // {required: true}
   * ```
   *
   * @returns An error map with the `required` property
   * if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static required(control) {
    return requiredValidator(control);
  }
  /**
   * @description
   * Validator that requires the control's value be true. This validator is commonly
   * used for required checkboxes.
   *
   * @usageNotes
   *
   * ### Validate that the field value is true
   *
   * ```typescript
   * const control = new FormControl('some value', Validators.requiredTrue);
   *
   * console.log(control.errors); // {required: true}
   * ```
   *
   * @returns An error map that contains the `required` property
   * set to `true` if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static requiredTrue(control) {
    return requiredTrueValidator(control);
  }
  /**
   * @description
   * Validator that requires the control's value pass an email validation test.
   *
   * Tests the value using a [regular
   * expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions)
   * pattern suitable for common use cases. The pattern is based on the definition of a valid email
   * address in the [WHATWG HTML
   * specification](https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address) with
   * some enhancements to incorporate more RFC rules (such as rules related to domain names and the
   * lengths of different parts of the address).
   *
   * The differences from the WHATWG version include:
   * - Disallow `local-part` (the part before the `@` symbol) to begin or end with a period (`.`).
   * - Disallow `local-part` to be longer than 64 characters.
   * - Disallow the whole address to be longer than 254 characters.
   *
   * If this pattern does not satisfy your business needs, you can use `Validators.pattern()` to
   * validate the value against a different pattern.
   *
   * @usageNotes
   *
   * ### Validate that the field matches a valid email pattern
   *
   * ```typescript
   * const control = new FormControl('bad@', Validators.email);
   *
   * console.log(control.errors); // {email: true}
   * ```
   *
   * @returns An error map with the `email` property
   * if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static email(control) {
    return emailValidator(control);
  }
  /**
   * @description
   * Validator that requires the length of the control's value to be greater than or equal
   * to the provided minimum length. This validator is also provided by default if you use the
   * the HTML5 `minlength` attribute. Note that the `minLength` validator is intended to be used
   * only for types that have a numeric `length` property, such as strings or arrays. The
   * `minLength` validator logic is also not invoked for values when their `length` property is 0
   * (for example in case of an empty string or an empty array), to support optional controls. You
   * can use the standard `required` validator if empty values should not be considered valid.
   *
   * @usageNotes
   *
   * ### Validate that the field has a minimum of 3 characters
   *
   * ```typescript
   * const control = new FormControl('ng', Validators.minLength(3));
   *
   * console.log(control.errors); // {minlength: {requiredLength: 3, actualLength: 2}}
   * ```
   *
   * ```html
   * <input minlength="5">
   * ```
   *
   * @returns A validator function that returns an error map with the
   * `minlength` property if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static minLength(minLength) {
    return minLengthValidator(minLength);
  }
  /**
   * @description
   * Validator that requires the length of the control's value to be less than or equal
   * to the provided maximum length. This validator is also provided by default if you use the
   * the HTML5 `maxlength` attribute. Note that the `maxLength` validator is intended to be used
   * only for types that have a numeric `length` property, such as strings or arrays.
   *
   * @usageNotes
   *
   * ### Validate that the field has maximum of 5 characters
   *
   * ```typescript
   * const control = new FormControl('Angular', Validators.maxLength(5));
   *
   * console.log(control.errors); // {maxlength: {requiredLength: 5, actualLength: 7}}
   * ```
   *
   * ```html
   * <input maxlength="5">
   * ```
   *
   * @returns A validator function that returns an error map with the
   * `maxlength` property if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static maxLength(maxLength) {
    return maxLengthValidator(maxLength);
  }
  /**
   * @description
   * Validator that requires the control's value to match a regex pattern. This validator is also
   * provided by default if you use the HTML5 `pattern` attribute.
   *
   * @usageNotes
   *
   * ### Validate that the field only contains letters or spaces
   *
   * ```typescript
   * const control = new FormControl('1', Validators.pattern('[a-zA-Z ]*'));
   *
   * console.log(control.errors); // {pattern: {requiredPattern: '^[a-zA-Z ]*$', actualValue: '1'}}
   * ```
   *
   * ```html
   * <input pattern="[a-zA-Z ]*">
   * ```
   *
   * ### Pattern matching with the global or sticky flag
   *
   * `RegExp` objects created with the `g` or `y` flags that are passed into `Validators.pattern`
   * can produce different results on the same input when validations are run consecutively. This is
   * due to how the behavior of `RegExp.prototype.test` is
   * specified in [ECMA-262](https://tc39.es/ecma262/#sec-regexpbuiltinexec)
   * (`RegExp` preserves the index of the last match when the global or sticky flag is used).
   * Due to this behavior, it is recommended that when using
   * `Validators.pattern` you **do not** pass in a `RegExp` object with either the global or sticky
   * flag enabled.
   *
   * ```typescript
   * // Not recommended (since the `g` flag is used)
   * const controlOne = new FormControl('1', Validators.pattern(/foo/g));
   *
   * // Good
   * const controlTwo = new FormControl('1', Validators.pattern(/foo/));
   * ```
   *
   * @param pattern A regular expression to be used as is to test the values, or a string.
   * If a string is passed, the `^` character is prepended and the `$` character is
   * appended to the provided string (if not already present), and the resulting regular
   * expression is used to test the values.
   *
   * @returns A validator function that returns an error map with the
   * `pattern` property if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static pattern(pattern) {
    return patternValidator(pattern);
  }
  /**
   * @description
   * Validator that performs no operation.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static nullValidator(control) {
    return nullValidator(control);
  }
  static compose(validators) {
    return compose(validators);
  }
  /**
   * @description
   * Compose multiple async validators into a single function that returns the union
   * of the individual error objects for the provided control.
   *
   * @returns A validator function that returns an error map with the
   * merged error objects of the async validators if the validation check fails, otherwise `null`.
   *
   * @see {@link updateValueAndValidity()}
   *
   */
  static composeAsync(validators) {
    return composeAsync(validators);
  }
}
/**
 * Validator that requires the control's value to be greater than or equal to the provided number.
 * See `Validators.min` for additional information.
 */
function minValidator(min) {
  return control => {
    if (isEmptyInputValue(control.value) || isEmptyInputValue(min)) {
      return null; // don't validate empty values to allow optional controls
    }
    const value = parseFloat(control.value);
    // Controls with NaN values after parsing should be treated as not having a
    // minimum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-min
    return !isNaN(value) && value < min ? {
      'min': {
        'min': min,
        'actual': control.value
      }
    } : null;
  };
}
/**
 * Validator that requires the control's value to be less than or equal to the provided number.
 * See `Validators.max` for additional information.
 */
function maxValidator(max) {
  return control => {
    if (isEmptyInputValue(control.value) || isEmptyInputValue(max)) {
      return null; // don't validate empty values to allow optional controls
    }
    const value = parseFloat(control.value);
    // Controls with NaN values after parsing should be treated as not having a
    // maximum, per the HTML forms spec: https://www.w3.org/TR/html5/forms.html#attr-input-max
    return !isNaN(value) && value > max ? {
      'max': {
        'max': max,
        'actual': control.value
      }
    } : null;
  };
}
/**
 * Validator that requires the control have a non-empty value.
 * See `Validators.required` for additional information.
 */
function requiredValidator(control) {
  return isEmptyInputValue(control.value) ? {
    'required': true
  } : null;
}
/**
 * Validator that requires the control's value be true. This validator is commonly
 * used for required checkboxes.
 * See `Validators.requiredTrue` for additional information.
 */
function requiredTrueValidator(control) {
  return control.value === true ? null : {
    'required': true
  };
}
/**
 * Validator that requires the control's value pass an email validation test.
 * See `Validators.email` for additional information.
 */
function emailValidator(control) {
  if (isEmptyInputValue(control.value)) {
    return null; // don't validate empty values to allow optional controls
  }
  return EMAIL_REGEXP.test(control.value) ? null : {
    'email': true
  };
}
/**
 * Validator that requires the length of the control's value to be greater than or equal
 * to the provided minimum length. See `Validators.minLength` for additional information.
 */
function minLengthValidator(minLength) {
  return control => {
    if (isEmptyInputValue(control.value) || !hasValidLength(control.value)) {
      // don't validate empty values to allow optional controls
      // don't validate values without `length` property
      return null;
    }
    return control.value.length < minLength ? {
      'minlength': {
        'requiredLength': minLength,
        'actualLength': control.value.length
      }
    } : null;
  };
}
/**
 * Validator that requires the length of the control's value to be less than or equal
 * to the provided maximum length. See `Validators.maxLength` for additional information.
 */
function maxLengthValidator(maxLength) {
  return control => {
    return hasValidLength(control.value) && control.value.length > maxLength ? {
      'maxlength': {
        'requiredLength': maxLength,
        'actualLength': control.value.length
      }
    } : null;
  };
}
/**
 * Validator that requires the control's value to match a regex pattern.
 * See `Validators.pattern` for additional information.
 */
function patternValidator(pattern) {
  if (!pattern) return nullValidator;
  let regex;
  let regexStr;
  if (typeof pattern === 'string') {
    regexStr = '';
    if (pattern.charAt(0) !== '^') regexStr += '^';
    regexStr += pattern;
    if (pattern.charAt(pattern.length - 1) !== '$') regexStr += '$';
    regex = new RegExp(regexStr);
  } else {
    regexStr = pattern.toString();
    regex = pattern;
  }
  return control => {
    if (isEmptyInputValue(control.value)) {
      return null; // don't validate empty values to allow optional controls
    }
    const value = control.value;
    return regex.test(value) ? null : {
      'pattern': {
        'requiredPattern': regexStr,
        'actualValue': value
      }
    };
  };
}
/**
 * Function that has `ValidatorFn` shape, but performs no operation.
 */
function nullValidator(control) {
  return null;
}
function isPresent(o) {
  return o != null;
}
function toObservable(value) {
  const obs = (0,core_mjs_["ɵisPromise"])(value) ? (0,from/* from */.H)(value) : value;
  if ((typeof ngDevMode === 'undefined' || ngDevMode) && !(0,core_mjs_["ɵisSubscribable"])(obs)) {
    let errorMessage = `Expected async validator to return Promise or Observable.`;
    // A synchronous validator will return object or null.
    if (typeof value === 'object') {
      errorMessage += ' Are you using a synchronous validator where an async validator is expected?';
    }
    throw new core_mjs_["ɵRuntimeError"](-1101 /* RuntimeErrorCode.WRONG_VALIDATOR_RETURN_TYPE */, errorMessage);
  }
  return obs;
}
function mergeErrors(arrayOfErrors) {
  let res = {};
  arrayOfErrors.forEach(errors => {
    res = errors != null ? {
      ...res,
      ...errors
    } : res;
  });
  return Object.keys(res).length === 0 ? null : res;
}
function executeValidators(control, validators) {
  return validators.map(validator => validator(control));
}
function isValidatorFn(validator) {
  return !validator.validate;
}
/**
 * Given the list of validators that may contain both functions as well as classes, return the list
 * of validator functions (convert validator classes into validator functions). This is needed to
 * have consistent structure in validators list before composing them.
 *
 * @param validators The set of validators that may contain validators both in plain function form
 *     as well as represented as a validator class.
 */
function normalizeValidators(validators) {
  return validators.map(validator => {
    return isValidatorFn(validator) ? validator : c => validator.validate(c);
  });
}
/**
 * Merges synchronous validators into a single validator function.
 * See `Validators.compose` for additional information.
 */
function compose(validators) {
  if (!validators) return null;
  const presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0) return null;
  return function (control) {
    return mergeErrors(executeValidators(control, presentValidators));
  };
}
/**
 * Accepts a list of validators of different possible shapes (`Validator` and `ValidatorFn`),
 * normalizes the list (converts everything to `ValidatorFn`) and merges them into a single
 * validator function.
 */
function composeValidators(validators) {
  return validators != null ? compose(normalizeValidators(validators)) : null;
}
/**
 * Merges asynchronous validators into a single validator function.
 * See `Validators.composeAsync` for additional information.
 */
function composeAsync(validators) {
  if (!validators) return null;
  const presentValidators = validators.filter(isPresent);
  if (presentValidators.length == 0) return null;
  return function (control) {
    const observables = executeValidators(control, presentValidators).map(toObservable);
    return forkJoin(observables).pipe((0,map/* map */.T)(mergeErrors));
  };
}
/**
 * Accepts a list of async validators of different possible shapes (`AsyncValidator` and
 * `AsyncValidatorFn`), normalizes the list (converts everything to `AsyncValidatorFn`) and merges
 * them into a single validator function.
 */
function composeAsyncValidators(validators) {
  return validators != null ? composeAsync(normalizeValidators(validators)) : null;
}
/**
 * Merges raw control validators with a given directive validator and returns the combined list of
 * validators as an array.
 */
function mergeValidators(controlValidators, dirValidator) {
  if (controlValidators === null) return [dirValidator];
  return Array.isArray(controlValidators) ? [...controlValidators, dirValidator] : [controlValidators, dirValidator];
}
/**
 * Retrieves the list of raw synchronous validators attached to a given control.
 */
function getControlValidators(control) {
  return control._rawValidators;
}
/**
 * Retrieves the list of raw asynchronous validators attached to a given control.
 */
function getControlAsyncValidators(control) {
  return control._rawAsyncValidators;
}
/**
 * Accepts a singleton validator, an array, or null, and returns an array type with the provided
 * validators.
 *
 * @param validators A validator, validators, or null.
 * @returns A validators array.
 */
function makeValidatorsArray(validators) {
  if (!validators) return [];
  return Array.isArray(validators) ? validators : [validators];
}
/**
 * Determines whether a validator or validators array has a given validator.
 *
 * @param validators The validator or validators to compare against.
 * @param validator The validator to check.
 * @returns Whether the validator is present.
 */
function hasValidator(validators, validator) {
  return Array.isArray(validators) ? validators.includes(validator) : validators === validator;
}
/**
 * Combines two arrays of validators into one. If duplicates are provided, only one will be added.
 *
 * @param validators The new validators.
 * @param currentValidators The base array of current validators.
 * @returns An array of validators.
 */
function addValidators(validators, currentValidators) {
  const current = makeValidatorsArray(currentValidators);
  const validatorsToAdd = makeValidatorsArray(validators);
  validatorsToAdd.forEach(v => {
    // Note: if there are duplicate entries in the new validators array,
    // only the first one would be added to the current list of validators.
    // Duplicate ones would be ignored since `hasValidator` would detect
    // the presence of a validator function and we update the current list in place.
    if (!hasValidator(current, v)) {
      current.push(v);
    }
  });
  return current;
}
function removeValidators(validators, currentValidators) {
  return makeValidatorsArray(currentValidators).filter(v => !hasValidator(validators, v));
}

/**
 * @description
 * Base class for control directives.
 *
 * This class is only used internally in the `ReactiveFormsModule` and the `FormsModule`.
 *
 * @publicApi
 */
class AbstractControlDirective {
  constructor() {
    /**
     * Set of synchronous validators as they were provided while calling `setValidators` function.
     * @internal
     */
    this._rawValidators = [];
    /**
     * Set of asynchronous validators as they were provided while calling `setAsyncValidators`
     * function.
     * @internal
     */
    this._rawAsyncValidators = [];
    /*
     * The set of callbacks to be invoked when directive instance is being destroyed.
     */
    this._onDestroyCallbacks = [];
  }
  /**
   * @description
   * Reports the value of the control if it is present, otherwise null.
   */
  get value() {
    return this.control ? this.control.value : null;
  }
  /**
   * @description
   * Reports whether the control is valid. A control is considered valid if no
   * validation errors exist with the current value.
   * If the control is not present, null is returned.
   */
  get valid() {
    return this.control ? this.control.valid : null;
  }
  /**
   * @description
   * Reports whether the control is invalid, meaning that an error exists in the input value.
   * If the control is not present, null is returned.
   */
  get invalid() {
    return this.control ? this.control.invalid : null;
  }
  /**
   * @description
   * Reports whether a control is pending, meaning that async validation is occurring and
   * errors are not yet available for the input value. If the control is not present, null is
   * returned.
   */
  get pending() {
    return this.control ? this.control.pending : null;
  }
  /**
   * @description
   * Reports whether the control is disabled, meaning that the control is disabled
   * in the UI and is exempt from validation checks and excluded from aggregate
   * values of ancestor controls. If the control is not present, null is returned.
   */
  get disabled() {
    return this.control ? this.control.disabled : null;
  }
  /**
   * @description
   * Reports whether the control is enabled, meaning that the control is included in ancestor
   * calculations of validity or value. If the control is not present, null is returned.
   */
  get enabled() {
    return this.control ? this.control.enabled : null;
  }
  /**
   * @description
   * Reports the control's validation errors. If the control is not present, null is returned.
   */
  get errors() {
    return this.control ? this.control.errors : null;
  }
  /**
   * @description
   * Reports whether the control is pristine, meaning that the user has not yet changed
   * the value in the UI. If the control is not present, null is returned.
   */
  get pristine() {
    return this.control ? this.control.pristine : null;
  }
  /**
   * @description
   * Reports whether the control is dirty, meaning that the user has changed
   * the value in the UI. If the control is not present, null is returned.
   */
  get dirty() {
    return this.control ? this.control.dirty : null;
  }
  /**
   * @description
   * Reports whether the control is touched, meaning that the user has triggered
   * a `blur` event on it. If the control is not present, null is returned.
   */
  get touched() {
    return this.control ? this.control.touched : null;
  }
  /**
   * @description
   * Reports the validation status of the control. Possible values include:
   * 'VALID', 'INVALID', 'DISABLED', and 'PENDING'.
   * If the control is not present, null is returned.
   */
  get status() {
    return this.control ? this.control.status : null;
  }
  /**
   * @description
   * Reports whether the control is untouched, meaning that the user has not yet triggered
   * a `blur` event on it. If the control is not present, null is returned.
   */
  get untouched() {
    return this.control ? this.control.untouched : null;
  }
  /**
   * @description
   * Returns a multicasting observable that emits a validation status whenever it is
   * calculated for the control. If the control is not present, null is returned.
   */
  get statusChanges() {
    return this.control ? this.control.statusChanges : null;
  }
  /**
   * @description
   * Returns a multicasting observable of value changes for the control that emits every time the
   * value of the control changes in the UI or programmatically.
   * If the control is not present, null is returned.
   */
  get valueChanges() {
    return this.control ? this.control.valueChanges : null;
  }
  /**
   * @description
   * Returns an array that represents the path from the top-level form to this control.
   * Each index is the string name of the control on that level.
   */
  get path() {
    return null;
  }
  /**
   * Sets synchronous validators for this directive.
   * @internal
   */
  _setValidators(validators) {
    this._rawValidators = validators || [];
    this._composedValidatorFn = composeValidators(this._rawValidators);
  }
  /**
   * Sets asynchronous validators for this directive.
   * @internal
   */
  _setAsyncValidators(validators) {
    this._rawAsyncValidators = validators || [];
    this._composedAsyncValidatorFn = composeAsyncValidators(this._rawAsyncValidators);
  }
  /**
   * @description
   * Synchronous validator function composed of all the synchronous validators registered with this
   * directive.
   */
  get validator() {
    return this._composedValidatorFn || null;
  }
  /**
   * @description
   * Asynchronous validator function composed of all the asynchronous validators registered with
   * this directive.
   */
  get asyncValidator() {
    return this._composedAsyncValidatorFn || null;
  }
  /**
   * Internal function to register callbacks that should be invoked
   * when directive instance is being destroyed.
   * @internal
   */
  _registerOnDestroy(fn) {
    this._onDestroyCallbacks.push(fn);
  }
  /**
   * Internal function to invoke all registered "on destroy" callbacks.
   * Note: calling this function also clears the list of callbacks.
   * @internal
   */
  _invokeOnDestroyCallbacks() {
    this._onDestroyCallbacks.forEach(fn => fn());
    this._onDestroyCallbacks = [];
  }
  /**
   * @description
   * Resets the control with the provided value if the control is present.
   */
  reset(value = undefined) {
    if (this.control) this.control.reset(value);
  }
  /**
   * @description
   * Reports whether the control with the given path has the error specified.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * If no path is given, this method checks for the error on the current control.
   *
   * @returns whether the given error is present in the control at the given path.
   *
   * If the control is not present, false is returned.
   */
  hasError(errorCode, path) {
    return this.control ? this.control.hasError(errorCode, path) : false;
  }
  /**
   * @description
   * Reports error data for the control with the given path.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * @returns error data for that particular error. If the control or error is not present,
   * null is returned.
   */
  getError(errorCode, path) {
    return this.control ? this.control.getError(errorCode, path) : null;
  }
}

/**
 * @description
 * A base class for directives that contain multiple registered instances of `NgControl`.
 * Only used by the forms module.
 *
 * @publicApi
 */
class ControlContainer extends AbstractControlDirective {
  /**
   * @description
   * The top-level form directive for the control.
   */
  get formDirective() {
    return null;
  }
  /**
   * @description
   * The path to this group.
   */
  get path() {
    return null;
  }
}

/**
 * @description
 * A base class that all `FormControl`-based directives extend. It binds a `FormControl`
 * object to a DOM element.
 *
 * @publicApi
 */
class NgControl extends AbstractControlDirective {
  constructor() {
    super(...arguments);
    /**
     * @description
     * The parent form for the control.
     *
     * @internal
     */
    this._parent = null;
    /**
     * @description
     * The name for the control
     */
    this.name = null;
    /**
     * @description
     * The value accessor for the control
     */
    this.valueAccessor = null;
  }
}

// DO NOT REFACTOR!
// Each status is represented by a separate function to make sure that
// advanced Closure Compiler optimizations related to property renaming
// can work correctly.
class AbstractControlStatus {
  constructor(cd) {
    this._cd = cd;
  }
  get isTouched() {
    return !!this._cd?.control?.touched;
  }
  get isUntouched() {
    return !!this._cd?.control?.untouched;
  }
  get isPristine() {
    return !!this._cd?.control?.pristine;
  }
  get isDirty() {
    return !!this._cd?.control?.dirty;
  }
  get isValid() {
    return !!this._cd?.control?.valid;
  }
  get isInvalid() {
    return !!this._cd?.control?.invalid;
  }
  get isPending() {
    return !!this._cd?.control?.pending;
  }
  get isSubmitted() {
    // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but
    // we avoid instanceof checks to prevent non-tree-shakable references to those types.
    return !!this._cd?.submitted;
  }
}
const ngControlStatusHost = {
  '[class.ng-untouched]': 'isUntouched',
  '[class.ng-touched]': 'isTouched',
  '[class.ng-pristine]': 'isPristine',
  '[class.ng-dirty]': 'isDirty',
  '[class.ng-valid]': 'isValid',
  '[class.ng-invalid]': 'isInvalid',
  '[class.ng-pending]': 'isPending'
};
const ngGroupStatusHost = {
  ...ngControlStatusHost,
  '[class.ng-submitted]': 'isSubmitted'
};
/**
 * @description
 * Directive automatically applied to Angular form controls that sets CSS classes
 * based on control status.
 *
 * @usageNotes
 *
 * ### CSS classes applied
 *
 * The following classes are applied as the properties become true:
 *
 * * ng-valid
 * * ng-invalid
 * * ng-pending
 * * ng-pristine
 * * ng-dirty
 * * ng-untouched
 * * ng-touched
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let NgControlStatus = /*#__PURE__*/(() => {
  class NgControlStatus extends AbstractControlStatus {
    constructor(cd) {
      super(cd);
    }
    static #_ = this.ɵfac = function NgControlStatus_Factory(t) {
      return new (t || NgControlStatus)(core_mjs_["ɵɵdirectiveInject"](NgControl, 2));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: NgControlStatus,
      selectors: [["", "formControlName", ""], ["", "ngModel", ""], ["", "formControl", ""]],
      hostVars: 14,
      hostBindings: function NgControlStatus_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵclassProp"]("ng-untouched", ctx.isUntouched)("ng-touched", ctx.isTouched)("ng-pristine", ctx.isPristine)("ng-dirty", ctx.isDirty)("ng-valid", ctx.isValid)("ng-invalid", ctx.isInvalid)("ng-pending", ctx.isPending);
        }
      },
      features: [core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return NgControlStatus;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Directive automatically applied to Angular form groups that sets CSS classes
 * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional
 * class ng-submitted.
 *
 * @see {@link NgControlStatus}
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let NgControlStatusGroup = /*#__PURE__*/(() => {
  class NgControlStatusGroup extends AbstractControlStatus {
    constructor(cd) {
      super(cd);
    }
    static #_ = this.ɵfac = function NgControlStatusGroup_Factory(t) {
      return new (t || NgControlStatusGroup)(core_mjs_["ɵɵdirectiveInject"](ControlContainer, 10));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: NgControlStatusGroup,
      selectors: [["", "formGroupName", ""], ["", "formArrayName", ""], ["", "ngModelGroup", ""], ["", "formGroup", ""], ["form", 3, "ngNoForm", ""], ["", "ngForm", ""]],
      hostVars: 16,
      hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵclassProp"]("ng-untouched", ctx.isUntouched)("ng-touched", ctx.isTouched)("ng-pristine", ctx.isPristine)("ng-dirty", ctx.isDirty)("ng-valid", ctx.isValid)("ng-invalid", ctx.isInvalid)("ng-pending", ctx.isPending)("ng-submitted", ctx.isSubmitted);
        }
      },
      features: [core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return NgControlStatusGroup;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const formControlNameExample = `
  <div [formGroup]="myGroup">
    <input formControlName="firstName">
  </div>

  In your class:

  this.myGroup = new FormGroup({
      firstName: new FormControl()
  });`;
const formGroupNameExample = `
  <div [formGroup]="myGroup">
      <div formGroupName="person">
        <input formControlName="firstName">
      </div>
  </div>

  In your class:

  this.myGroup = new FormGroup({
      person: new FormGroup({ firstName: new FormControl() })
  });`;
const formArrayNameExample = `
  <div [formGroup]="myGroup">
    <div formArrayName="cities">
      <div *ngFor="let city of cityArray.controls; index as i">
        <input [formControlName]="i">
      </div>
    </div>
  </div>

  In your class:

  this.cityArray = new FormArray([new FormControl('SF')]);
  this.myGroup = new FormGroup({
    cities: this.cityArray
  });`;
const ngModelGroupExample = `
  <form>
      <div ngModelGroup="person">
        <input [(ngModel)]="person.name" name="firstName">
      </div>
  </form>`;
const ngModelWithFormGroupExample = `
  <div [formGroup]="myGroup">
      <input formControlName="firstName">
      <input [(ngModel)]="showMoreControls" [ngModelOptions]="{standalone: true}">
  </div>
`;
function controlParentException() {
  return new core_mjs_["ɵRuntimeError"](1050 /* RuntimeErrorCode.FORM_CONTROL_NAME_MISSING_PARENT */, `formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formControlNameExample}`);
}
function ngModelGroupException() {
  return new core_mjs_["ɵRuntimeError"](1051 /* RuntimeErrorCode.FORM_CONTROL_NAME_INSIDE_MODEL_GROUP */, `formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents
      that also have a "form" prefix: formGroupName, formArrayName, or formGroup.

      Option 1:  Update the parent to be formGroupName (reactive form strategy)

      ${formGroupNameExample}

      Option 2: Use ngModel instead of formControlName (template-driven strategy)

      ${ngModelGroupExample}`);
}
function missingFormException() {
  return new core_mjs_["ɵRuntimeError"](1052 /* RuntimeErrorCode.FORM_GROUP_MISSING_INSTANCE */, `formGroup expects a FormGroup instance. Please pass one in.

      Example:

      ${formControlNameExample}`);
}
function groupParentException() {
  return new core_mjs_["ɵRuntimeError"](1053 /* RuntimeErrorCode.FORM_GROUP_NAME_MISSING_PARENT */, `formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup
    directive and pass it an existing FormGroup instance (you can create one in your class).

    Example:

    ${formGroupNameExample}`);
}
function arrayParentException() {
  return new core_mjs_["ɵRuntimeError"](1054 /* RuntimeErrorCode.FORM_ARRAY_NAME_MISSING_PARENT */, `formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup
      directive and pass it an existing FormGroup instance (you can create one in your class).

      Example:

      ${formArrayNameExample}`);
}
const disabledAttrWarning = `
  It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true
  when you set up this control in your component class, the disabled attribute will actually be set in the DOM for
  you. We recommend using this approach to avoid 'changed after checked' errors.

  Example:
  // Specify the \`disabled\` property at control creation time:
  form = new FormGroup({
    first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),
    last: new FormControl('Drew', Validators.required)
  });

  // Controls can also be enabled/disabled after creation:
  form.get('first')?.enable();
  form.get('last')?.disable();
`;
const asyncValidatorsDroppedWithOptsWarning = `
  It looks like you're constructing using a FormControl with both an options argument and an
  async validators argument. Mixing these arguments will cause your async validators to be dropped.
  You should either put all your validators in the options object, or in separate validators
  arguments. For example:

  // Using validators arguments
  fc = new FormControl(42, Validators.required, myAsyncValidator);

  // Using AbstractControlOptions
  fc = new FormControl(42, {validators: Validators.required, asyncValidators: myAV});

  // Do NOT mix them: async validators will be dropped!
  fc = new FormControl(42, {validators: Validators.required}, /* Oops! */ myAsyncValidator);
`;
function ngModelWarning(directiveName) {
  return `
  It looks like you're using ngModel on the same form field as ${directiveName}.
  Support for using the ngModel input property and ngModelChange event with
  reactive form directives has been deprecated in Angular v6 and will be removed
  in a future version of Angular.

  For more information on this, see our API docs here:
  https://angular.io/api/forms/${directiveName === 'formControl' ? 'FormControlDirective' : 'FormControlName'}#use-with-ngmodel
  `;
}
function describeKey(isFormGroup, key) {
  return isFormGroup ? `with name: '${key}'` : `at index: ${key}`;
}
function noControlsError(isFormGroup) {
  return `
    There are no form controls registered with this ${isFormGroup ? 'group' : 'array'} yet. If you're using ngModel,
    you may want to check next tick (e.g. use setTimeout).
  `;
}
function missingControlError(isFormGroup, key) {
  return `Cannot find form control ${describeKey(isFormGroup, key)}`;
}
function missingControlValueError(isFormGroup, key) {
  return `Must supply a value for form control ${describeKey(isFormGroup, key)}`;
}

/**
 * Reports that a control is valid, meaning that no errors exist in the input value.
 *
 * @see {@link status}
 */
const VALID = 'VALID';
/**
 * Reports that a control is invalid, meaning that an error exists in the input value.
 *
 * @see {@link status}
 */
const INVALID = 'INVALID';
/**
 * Reports that a control is pending, meaning that async validation is occurring and
 * errors are not yet available for the input value.
 *
 * @see {@link markAsPending}
 * @see {@link status}
 */
const PENDING = 'PENDING';
/**
 * Reports that a control is disabled, meaning that the control is exempt from ancestor
 * calculations of validity or value.
 *
 * @see {@link markAsDisabled}
 * @see {@link status}
 */
const DISABLED = 'DISABLED';
/**
 * Gets validators from either an options object or given validators.
 */
function pickValidators(validatorOrOpts) {
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.validators : validatorOrOpts) || null;
}
/**
 * Creates validator function by combining provided validators.
 */
function coerceToValidator(validator) {
  return Array.isArray(validator) ? composeValidators(validator) : validator || null;
}
/**
 * Gets async validators from either an options object or given validators.
 */
function pickAsyncValidators(asyncValidator, validatorOrOpts) {
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (isOptionsObj(validatorOrOpts) && asyncValidator) {
      console.warn(asyncValidatorsDroppedWithOptsWarning);
    }
  }
  return (isOptionsObj(validatorOrOpts) ? validatorOrOpts.asyncValidators : asyncValidator) || null;
}
/**
 * Creates async validator function by combining provided async validators.
 */
function coerceToAsyncValidator(asyncValidator) {
  return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator || null;
}
function isOptionsObj(validatorOrOpts) {
  return validatorOrOpts != null && !Array.isArray(validatorOrOpts) && typeof validatorOrOpts === 'object';
}
function assertControlPresent(parent, isGroup, key) {
  const controls = parent.controls;
  const collection = isGroup ? Object.keys(controls) : controls;
  if (!collection.length) {
    throw new core_mjs_["ɵRuntimeError"](1000 /* RuntimeErrorCode.NO_CONTROLS */, typeof ngDevMode === 'undefined' || ngDevMode ? noControlsError(isGroup) : '');
  }
  if (!controls[key]) {
    throw new core_mjs_["ɵRuntimeError"](1001 /* RuntimeErrorCode.MISSING_CONTROL */, typeof ngDevMode === 'undefined' || ngDevMode ? missingControlError(isGroup, key) : '');
  }
}
function assertAllValuesPresent(control, isGroup, value) {
  control._forEachChild((_, key) => {
    if (value[key] === undefined) {
      throw new core_mjs_["ɵRuntimeError"](1002 /* RuntimeErrorCode.MISSING_CONTROL_VALUE */, typeof ngDevMode === 'undefined' || ngDevMode ? missingControlValueError(isGroup, key) : '');
    }
  });
}
// clang-format on
/**
 * This is the base class for `FormControl`, `FormGroup`, and `FormArray`.
 *
 * It provides some of the shared behavior that all controls and groups of controls have, like
 * running validators, calculating status, and resetting state. It also defines the properties
 * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be
 * instantiated directly.
 *
 * The first type parameter TValue represents the value type of the control (`control.value`).
 * The optional type parameter TRawValue  represents the raw value type (`control.getRawValue()`).
 *
 * @see [Forms Guide](/guide/forms)
 * @see [Reactive Forms Guide](/guide/reactive-forms)
 * @see [Dynamic Forms Guide](/guide/dynamic-form)
 *
 * @publicApi
 */
class AbstractControl {
  /**
   * Initialize the AbstractControl instance.
   *
   * @param validators The function or array of functions that is used to determine the validity of
   *     this control synchronously.
   * @param asyncValidators The function or array of functions that is used to determine validity of
   *     this control asynchronously.
   */
  constructor(validators, asyncValidators) {
    /** @internal */
    this._pendingDirty = false;
    /**
     * Indicates that a control has its own pending asynchronous validation in progress.
     *
     * @internal
     */
    this._hasOwnPendingAsyncValidator = false;
    /** @internal */
    this._pendingTouched = false;
    /** @internal */
    this._onCollectionChange = () => {};
    this._parent = null;
    /**
     * A control is `pristine` if the user has not yet changed
     * the value in the UI.
     *
     * @returns True if the user has not yet changed the value in the UI; compare `dirty`.
     * Programmatic changes to a control's value do not mark it dirty.
     */
    this.pristine = true;
    /**
     * True if the control is marked as `touched`.
     *
     * A control is marked `touched` once the user has triggered
     * a `blur` event on it.
     */
    this.touched = false;
    /** @internal */
    this._onDisabledChange = [];
    this._assignValidators(validators);
    this._assignAsyncValidators(asyncValidators);
  }
  /**
   * Returns the function that is used to determine the validity of this control synchronously.
   * If multiple validators have been added, this will be a single composed function.
   * See `Validators.compose()` for additional information.
   */
  get validator() {
    return this._composedValidatorFn;
  }
  set validator(validatorFn) {
    this._rawValidators = this._composedValidatorFn = validatorFn;
  }
  /**
   * Returns the function that is used to determine the validity of this control asynchronously.
   * If multiple validators have been added, this will be a single composed function.
   * See `Validators.compose()` for additional information.
   */
  get asyncValidator() {
    return this._composedAsyncValidatorFn;
  }
  set asyncValidator(asyncValidatorFn) {
    this._rawAsyncValidators = this._composedAsyncValidatorFn = asyncValidatorFn;
  }
  /**
   * The parent control.
   */
  get parent() {
    return this._parent;
  }
  /**
   * A control is `valid` when its `status` is `VALID`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if the control has passed all of its validation tests,
   * false otherwise.
   */
  get valid() {
    return this.status === VALID;
  }
  /**
   * A control is `invalid` when its `status` is `INVALID`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if this control has failed one or more of its validation checks,
   * false otherwise.
   */
  get invalid() {
    return this.status === INVALID;
  }
  /**
   * A control is `pending` when its `status` is `PENDING`.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if this control is in the process of conducting a validation check,
   * false otherwise.
   */
  get pending() {
    return this.status == PENDING;
  }
  /**
   * A control is `disabled` when its `status` is `DISABLED`.
   *
   * Disabled controls are exempt from validation checks and
   * are not included in the aggregate value of their ancestor
   * controls.
   *
   * @see {@link AbstractControl.status}
   *
   * @returns True if the control is disabled, false otherwise.
   */
  get disabled() {
    return this.status === DISABLED;
  }
  /**
   * A control is `enabled` as long as its `status` is not `DISABLED`.
   *
   * @returns True if the control has any status other than 'DISABLED',
   * false if the status is 'DISABLED'.
   *
   * @see {@link AbstractControl.status}
   *
   */
  get enabled() {
    return this.status !== DISABLED;
  }
  /**
   * A control is `dirty` if the user has changed the value
   * in the UI.
   *
   * @returns True if the user has changed the value of this control in the UI; compare `pristine`.
   * Programmatic changes to a control's value do not mark it dirty.
   */
  get dirty() {
    return !this.pristine;
  }
  /**
   * True if the control has not been marked as touched
   *
   * A control is `untouched` if the user has not yet triggered
   * a `blur` event on it.
   */
  get untouched() {
    return !this.touched;
  }
  /**
   * Reports the update strategy of the `AbstractControl` (meaning
   * the event on which the control updates itself).
   * Possible values: `'change'` | `'blur'` | `'submit'`
   * Default value: `'change'`
   */
  get updateOn() {
    return this._updateOn ? this._updateOn : this.parent ? this.parent.updateOn : 'change';
  }
  /**
   * Sets the synchronous validators that are active on this control.  Calling
   * this overwrites any existing synchronous validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * If you want to add a new validator without affecting existing ones, consider
   * using `addValidators()` method instead.
   */
  setValidators(validators) {
    this._assignValidators(validators);
  }
  /**
   * Sets the asynchronous validators that are active on this control. Calling this
   * overwrites any existing asynchronous validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * If you want to add a new validator without affecting existing ones, consider
   * using `addAsyncValidators()` method instead.
   */
  setAsyncValidators(validators) {
    this._assignAsyncValidators(validators);
  }
  /**
   * Add a synchronous validator or validators to this control, without affecting other validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * Adding a validator that already exists will have no effect. If duplicate validator functions
   * are present in the `validators` array, only the first instance would be added to a form
   * control.
   *
   * @param validators The new validator function or functions to add to this control.
   */
  addValidators(validators) {
    this.setValidators(addValidators(validators, this._rawValidators));
  }
  /**
   * Add an asynchronous validator or validators to this control, without affecting other
   * validators.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * Adding a validator that already exists will have no effect.
   *
   * @param validators The new asynchronous validator function or functions to add to this control.
   */
  addAsyncValidators(validators) {
    this.setAsyncValidators(addValidators(validators, this._rawAsyncValidators));
  }
  /**
   * Remove a synchronous validator from this control, without affecting other validators.
   * Validators are compared by function reference; you must pass a reference to the exact same
   * validator function as the one that was originally set. If a provided validator is not found,
   * it is ignored.
   *
   * @usageNotes
   *
   * ### Reference to a ValidatorFn
   *
   * ```
   * // Reference to the RequiredValidator
   * const ctrl = new FormControl<string | null>('', Validators.required);
   * ctrl.removeValidators(Validators.required);
   *
   * // Reference to anonymous function inside MinValidator
   * const minValidator = Validators.min(3);
   * const ctrl = new FormControl<string | null>('', minValidator);
   * expect(ctrl.hasValidator(minValidator)).toEqual(true)
   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
   *
   * ctrl.removeValidators(minValidator);
   * ```
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * @param validators The validator or validators to remove.
   */
  removeValidators(validators) {
    this.setValidators(removeValidators(validators, this._rawValidators));
  }
  /**
   * Remove an asynchronous validator from this control, without affecting other validators.
   * Validators are compared by function reference; you must pass a reference to the exact same
   * validator function as the one that was originally set. If a provided validator is not found, it
   * is ignored.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   * @param validators The asynchronous validator or validators to remove.
   */
  removeAsyncValidators(validators) {
    this.setAsyncValidators(removeValidators(validators, this._rawAsyncValidators));
  }
  /**
   * Check whether a synchronous validator function is present on this control. The provided
   * validator must be a reference to the exact same function that was provided.
   *
   * @usageNotes
   *
   * ### Reference to a ValidatorFn
   *
   * ```
   * // Reference to the RequiredValidator
   * const ctrl = new FormControl<number | null>(0, Validators.required);
   * expect(ctrl.hasValidator(Validators.required)).toEqual(true)
   *
   * // Reference to anonymous function inside MinValidator
   * const minValidator = Validators.min(3);
   * const ctrl = new FormControl<number | null>(0, minValidator);
   * expect(ctrl.hasValidator(minValidator)).toEqual(true)
   * expect(ctrl.hasValidator(Validators.min(3))).toEqual(false)
   * ```
   *
   * @param validator The validator to check for presence. Compared by function reference.
   * @returns Whether the provided validator was found on this control.
   */
  hasValidator(validator) {
    return hasValidator(this._rawValidators, validator);
  }
  /**
   * Check whether an asynchronous validator function is present on this control. The provided
   * validator must be a reference to the exact same function that was provided.
   *
   * @param validator The asynchronous validator to check for presence. Compared by function
   *     reference.
   * @returns Whether the provided asynchronous validator was found on this control.
   */
  hasAsyncValidator(validator) {
    return hasValidator(this._rawAsyncValidators, validator);
  }
  /**
   * Empties out the synchronous validator list.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   */
  clearValidators() {
    this.validator = null;
  }
  /**
   * Empties out the async validator list.
   *
   * When you add or remove a validator at run time, you must call
   * `updateValueAndValidity()` for the new validation to take effect.
   *
   */
  clearAsyncValidators() {
    this.asyncValidator = null;
  }
  /**
   * Marks the control as `touched`. A control is touched by focus and
   * blur events that do not change the value.
   *
   * @see {@link markAsUntouched()}
   * @see {@link markAsDirty()}
   * @see {@link markAsPristine()}
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsTouched(opts = {}) {
    this.touched = true;
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsTouched(opts);
    }
  }
  /**
   * Marks the control and all its descendant controls as `touched`.
   * @see {@link markAsTouched()}
   */
  markAllAsTouched() {
    this.markAsTouched({
      onlySelf: true
    });
    this._forEachChild(control => control.markAllAsTouched());
  }
  /**
   * Marks the control as `untouched`.
   *
   * If the control has any children, also marks all children as `untouched`
   * and recalculates the `touched` status of all parent controls.
   *
   * @see {@link markAsTouched()}
   * @see {@link markAsDirty()}
   * @see {@link markAsPristine()}
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after the marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsUntouched(opts = {}) {
    this.touched = false;
    this._pendingTouched = false;
    this._forEachChild(control => {
      control.markAsUntouched({
        onlySelf: true
      });
    });
    if (this._parent && !opts.onlySelf) {
      this._parent._updateTouched(opts);
    }
  }
  /**
   * Marks the control as `dirty`. A control becomes dirty when
   * the control's value is changed through the UI; compare `markAsTouched`.
   *
   * @see {@link markAsTouched()}
   * @see {@link markAsUntouched()}
   * @see {@link markAsPristine()}
   *
   * @param opts Configuration options that determine how the control propagates changes
   * and emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsDirty(opts = {}) {
    this.pristine = false;
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsDirty(opts);
    }
  }
  /**
   * Marks the control as `pristine`.
   *
   * If the control has any children, marks all children as `pristine`,
   * and recalculates the `pristine` status of all parent
   * controls.
   *
   * @see {@link markAsTouched()}
   * @see {@link markAsUntouched()}
   * @see {@link markAsDirty()}
   *
   * @param opts Configuration options that determine how the control emits events after
   * marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   */
  markAsPristine(opts = {}) {
    this.pristine = true;
    this._pendingDirty = false;
    this._forEachChild(control => {
      control.markAsPristine({
        onlySelf: true
      });
    });
    if (this._parent && !opts.onlySelf) {
      this._parent._updatePristine(opts);
    }
  }
  /**
   * Marks the control as `pending`.
   *
   * A control is pending while the control performs async validation.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configuration options that determine how the control propagates changes and
   * emits events after marking is applied.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
   * observable emits an event with the latest status the control is marked pending.
   * When false, no events are emitted.
   *
   */
  markAsPending(opts = {}) {
    this.status = PENDING;
    if (opts.emitEvent !== false) {
      this.statusChanges.emit(this.status);
    }
    if (this._parent && !opts.onlySelf) {
      this._parent.markAsPending(opts);
    }
  }
  /**
   * Disables the control. This means the control is exempt from validation checks and
   * excluded from the aggregate value of any parent. Its status is `DISABLED`.
   *
   * If the control has children, all children are also disabled.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configuration options that determine how the control propagates
   * changes and emits events after the control is disabled.
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is disabled.
   * When false, no events are emitted.
   */
  disable(opts = {}) {
    // If parent has been marked artificially dirty we don't want to re-calculate the
    // parent's dirtiness based on the children.
    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
    this.status = DISABLED;
    this.errors = null;
    this._forEachChild(control => {
      control.disable({
        ...opts,
        onlySelf: true
      });
    });
    this._updateValue();
    if (opts.emitEvent !== false) {
      this.valueChanges.emit(this.value);
      this.statusChanges.emit(this.status);
    }
    this._updateAncestors({
      ...opts,
      skipPristineCheck
    });
    this._onDisabledChange.forEach(changeFn => changeFn(true));
  }
  /**
   * Enables the control. This means the control is included in validation checks and
   * the aggregate value of its parent. Its status recalculates based on its value and
   * its validators.
   *
   * By default, if the control has children, all children are enabled.
   *
   * @see {@link AbstractControl.status}
   *
   * @param opts Configure options that control how the control propagates changes and
   * emits events when marked as untouched
   * * `onlySelf`: When true, mark only this control. When false or not supplied,
   * marks all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is enabled.
   * When false, no events are emitted.
   */
  enable(opts = {}) {
    // If parent has been marked artificially dirty we don't want to re-calculate the
    // parent's dirtiness based on the children.
    const skipPristineCheck = this._parentMarkedDirty(opts.onlySelf);
    this.status = VALID;
    this._forEachChild(control => {
      control.enable({
        ...opts,
        onlySelf: true
      });
    });
    this.updateValueAndValidity({
      onlySelf: true,
      emitEvent: opts.emitEvent
    });
    this._updateAncestors({
      ...opts,
      skipPristineCheck
    });
    this._onDisabledChange.forEach(changeFn => changeFn(false));
  }
  _updateAncestors(opts) {
    if (this._parent && !opts.onlySelf) {
      this._parent.updateValueAndValidity(opts);
      if (!opts.skipPristineCheck) {
        this._parent._updatePristine();
      }
      this._parent._updateTouched();
    }
  }
  /**
   * Sets the parent of the control
   *
   * @param parent The new parent.
   */
  setParent(parent) {
    this._parent = parent;
  }
  /**
   * The raw value of this control. For most control implementations, the raw value will include
   * disabled children.
   */
  getRawValue() {
    return this.value;
  }
  /**
   * Recalculates the value and validation status of the control.
   *
   * By default, it also updates the value and validity of its ancestors.
   *
   * @param opts Configuration options determine how the control propagates changes and emits events
   * after updates and validity checks are applied.
   * * `onlySelf`: When true, only update this control. When false or not supplied,
   * update all direct ancestors. Default is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is updated.
   * When false, no events are emitted.
   */
  updateValueAndValidity(opts = {}) {
    this._setInitialStatus();
    this._updateValue();
    if (this.enabled) {
      this._cancelExistingSubscription();
      this.errors = this._runValidator();
      this.status = this._calculateStatus();
      if (this.status === VALID || this.status === PENDING) {
        this._runAsyncValidator(opts.emitEvent);
      }
    }
    if (opts.emitEvent !== false) {
      this.valueChanges.emit(this.value);
      this.statusChanges.emit(this.status);
    }
    if (this._parent && !opts.onlySelf) {
      this._parent.updateValueAndValidity(opts);
    }
  }
  /** @internal */
  _updateTreeValidity(opts = {
    emitEvent: true
  }) {
    this._forEachChild(ctrl => ctrl._updateTreeValidity(opts));
    this.updateValueAndValidity({
      onlySelf: true,
      emitEvent: opts.emitEvent
    });
  }
  _setInitialStatus() {
    this.status = this._allControlsDisabled() ? DISABLED : VALID;
  }
  _runValidator() {
    return this.validator ? this.validator(this) : null;
  }
  _runAsyncValidator(emitEvent) {
    if (this.asyncValidator) {
      this.status = PENDING;
      this._hasOwnPendingAsyncValidator = true;
      const obs = toObservable(this.asyncValidator(this));
      this._asyncValidationSubscription = obs.subscribe(errors => {
        this._hasOwnPendingAsyncValidator = false;
        // This will trigger the recalculation of the validation status, which depends on
        // the state of the asynchronous validation (whether it is in progress or not). So, it is
        // necessary that we have updated the `_hasOwnPendingAsyncValidator` boolean flag first.
        this.setErrors(errors, {
          emitEvent
        });
      });
    }
  }
  _cancelExistingSubscription() {
    if (this._asyncValidationSubscription) {
      this._asyncValidationSubscription.unsubscribe();
      this._hasOwnPendingAsyncValidator = false;
    }
  }
  /**
   * Sets errors on a form control when running validations manually, rather than automatically.
   *
   * Calling `setErrors` also updates the validity of the parent control.
   *
   * @param opts Configuration options that determine how the control propagates
   * changes and emits events after the control errors are set.
   * * `emitEvent`: When true or not supplied (the default), the `statusChanges`
   * observable emits an event after the errors are set.
   *
   * @usageNotes
   *
   * ### Manually set the errors for a control
   *
   * ```
   * const login = new FormControl('someLogin');
   * login.setErrors({
   *   notUnique: true
   * });
   *
   * expect(login.valid).toEqual(false);
   * expect(login.errors).toEqual({ notUnique: true });
   *
   * login.setValue('someOtherLogin');
   *
   * expect(login.valid).toEqual(true);
   * ```
   */
  setErrors(errors, opts = {}) {
    this.errors = errors;
    this._updateControlsErrors(opts.emitEvent !== false);
  }
  /**
   * Retrieves a child control given the control's name or path.
   *
   * @param path A dot-delimited string or array of string/number values that define the path to the
   * control. If a string is provided, passing it as a string literal will result in improved type
   * information. Likewise, if an array is provided, passing it `as const` will cause improved type
   * information to be available.
   *
   * @usageNotes
   * ### Retrieve a nested control
   *
   * For example, to get a `name` control nested within a `person` sub-group:
   *
   * * `this.form.get('person.name');`
   *
   * -OR-
   *
   * * `this.form.get(['person', 'name'] as const);` // `as const` gives improved typings
   *
   * ### Retrieve a control in a FormArray
   *
   * When accessing an element inside a FormArray, you can use an element index.
   * For example, to get a `price` control from the first element in an `items` array you can use:
   *
   * * `this.form.get('items.0.price');`
   *
   * -OR-
   *
   * * `this.form.get(['items', 0, 'price']);`
   */
  get(path) {
    let currPath = path;
    if (currPath == null) return null;
    if (!Array.isArray(currPath)) currPath = currPath.split('.');
    if (currPath.length === 0) return null;
    return currPath.reduce((control, name) => control && control._find(name), this);
  }
  /**
   * @description
   * Reports error data for the control with the given path.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * @returns error data for that particular error. If the control or error is not present,
   * null is returned.
   */
  getError(errorCode, path) {
    const control = path ? this.get(path) : this;
    return control && control.errors ? control.errors[errorCode] : null;
  }
  /**
   * @description
   * Reports whether the control with the given path has the error specified.
   *
   * @param errorCode The code of the error to check
   * @param path A list of control names that designates how to move from the current control
   * to the control that should be queried for errors.
   *
   * @usageNotes
   * For example, for the following `FormGroup`:
   *
   * ```
   * form = new FormGroup({
   *   address: new FormGroup({ street: new FormControl() })
   * });
   * ```
   *
   * The path to the 'street' control from the root form would be 'address' -> 'street'.
   *
   * It can be provided to this method in one of two formats:
   *
   * 1. An array of string control names, e.g. `['address', 'street']`
   * 1. A period-delimited list of control names in one string, e.g. `'address.street'`
   *
   * If no path is given, this method checks for the error on the current control.
   *
   * @returns whether the given error is present in the control at the given path.
   *
   * If the control is not present, false is returned.
   */
  hasError(errorCode, path) {
    return !!this.getError(errorCode, path);
  }
  /**
   * Retrieves the top-level ancestor of this control.
   */
  get root() {
    let x = this;
    while (x._parent) {
      x = x._parent;
    }
    return x;
  }
  /** @internal */
  _updateControlsErrors(emitEvent) {
    this.status = this._calculateStatus();
    if (emitEvent) {
      this.statusChanges.emit(this.status);
    }
    if (this._parent) {
      this._parent._updateControlsErrors(emitEvent);
    }
  }
  /** @internal */
  _initObservables() {
    this.valueChanges = new core_mjs_.EventEmitter();
    this.statusChanges = new core_mjs_.EventEmitter();
  }
  _calculateStatus() {
    if (this._allControlsDisabled()) return DISABLED;
    if (this.errors) return INVALID;
    if (this._hasOwnPendingAsyncValidator || this._anyControlsHaveStatus(PENDING)) return PENDING;
    if (this._anyControlsHaveStatus(INVALID)) return INVALID;
    return VALID;
  }
  /** @internal */
  _anyControlsHaveStatus(status) {
    return this._anyControls(control => control.status === status);
  }
  /** @internal */
  _anyControlsDirty() {
    return this._anyControls(control => control.dirty);
  }
  /** @internal */
  _anyControlsTouched() {
    return this._anyControls(control => control.touched);
  }
  /** @internal */
  _updatePristine(opts = {}) {
    this.pristine = !this._anyControlsDirty();
    if (this._parent && !opts.onlySelf) {
      this._parent._updatePristine(opts);
    }
  }
  /** @internal */
  _updateTouched(opts = {}) {
    this.touched = this._anyControlsTouched();
    if (this._parent && !opts.onlySelf) {
      this._parent._updateTouched(opts);
    }
  }
  /** @internal */
  _registerOnCollectionChange(fn) {
    this._onCollectionChange = fn;
  }
  /** @internal */
  _setUpdateStrategy(opts) {
    if (isOptionsObj(opts) && opts.updateOn != null) {
      this._updateOn = opts.updateOn;
    }
  }
  /**
   * Check to see if parent has been marked artificially dirty.
   *
   * @internal
   */
  _parentMarkedDirty(onlySelf) {
    const parentDirty = this._parent && this._parent.dirty;
    return !onlySelf && !!parentDirty && !this._parent._anyControlsDirty();
  }
  /** @internal */
  _find(name) {
    return null;
  }
  /**
   * Internal implementation of the `setValidators` method. Needs to be separated out into a
   * different method, because it is called in the constructor and it can break cases where
   * a control is extended.
   */
  _assignValidators(validators) {
    this._rawValidators = Array.isArray(validators) ? validators.slice() : validators;
    this._composedValidatorFn = coerceToValidator(this._rawValidators);
  }
  /**
   * Internal implementation of the `setAsyncValidators` method. Needs to be separated out into a
   * different method, because it is called in the constructor and it can break cases where
   * a control is extended.
   */
  _assignAsyncValidators(validators) {
    this._rawAsyncValidators = Array.isArray(validators) ? validators.slice() : validators;
    this._composedAsyncValidatorFn = coerceToAsyncValidator(this._rawAsyncValidators);
  }
}

/**
 * Tracks the value and validity state of a group of `FormControl` instances.
 *
 * A `FormGroup` aggregates the values of each child `FormControl` into one object,
 * with each control name as the key.  It calculates its status by reducing the status values
 * of its children. For example, if one of the controls in a group is invalid, the entire
 * group becomes invalid.
 *
 * `FormGroup` is one of the four fundamental building blocks used to define forms in Angular,
 * along with `FormControl`, `FormArray`, and `FormRecord`.
 *
 * When instantiating a `FormGroup`, pass in a collection of child controls as the first
 * argument. The key for each child registers the name for the control.
 *
 * `FormGroup` is intended for use cases where the keys are known ahead of time.
 * If you need to dynamically add and remove controls, use {@link FormRecord} instead.
 *
 * `FormGroup` accepts an optional type parameter `TControl`, which is an object type with inner
 * control types as values.
 *
 * @usageNotes
 *
 * ### Create a form group with 2 controls
 *
 * ```
 * const form = new FormGroup({
 *   first: new FormControl('Nancy', Validators.minLength(2)),
 *   last: new FormControl('Drew'),
 * });
 *
 * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}
 * console.log(form.status);  // 'VALID'
 * ```
 *
 * ### The type argument, and optional controls
 *
 * `FormGroup` accepts one generic argument, which is an object containing its inner controls.
 * This type will usually be inferred automatically, but you can always specify it explicitly if you
 * wish.
 *
 * If you have controls that are optional (i.e. they can be removed, you can use the `?` in the
 * type):
 *
 * ```
 * const form = new FormGroup<{
 *   first: FormControl<string|null>,
 *   middle?: FormControl<string|null>, // Middle name is optional.
 *   last: FormControl<string|null>,
 * }>({
 *   first: new FormControl('Nancy'),
 *   last: new FormControl('Drew'),
 * });
 * ```
 *
 * ### Create a form group with a group-level validator
 *
 * You include group-level validators as the second arg, or group-level async
 * validators as the third arg. These come in handy when you want to perform validation
 * that considers the value of more than one child control.
 *
 * ```
 * const form = new FormGroup({
 *   password: new FormControl('', Validators.minLength(2)),
 *   passwordConfirm: new FormControl('', Validators.minLength(2)),
 * }, passwordMatchValidator);
 *
 *
 * function passwordMatchValidator(g: FormGroup) {
 *    return g.get('password').value === g.get('passwordConfirm').value
 *       ? null : {'mismatch': true};
 * }
 * ```
 *
 * Like `FormControl` instances, you choose to pass in
 * validators and async validators as part of an options object.
 *
 * ```
 * const form = new FormGroup({
 *   password: new FormControl('')
 *   passwordConfirm: new FormControl('')
 * }, { validators: passwordMatchValidator, asyncValidators: otherValidator });
 * ```
 *
 * ### Set the updateOn property for all controls in a form group
 *
 * The options object is used to set a default value for each child
 * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
 * group level, all child controls default to 'blur', unless the child
 * has explicitly specified a different `updateOn` value.
 *
 * ```ts
 * const c = new FormGroup({
 *   one: new FormControl()
 * }, { updateOn: 'blur' });
 * ```
 *
 * ### Using a FormGroup with optional controls
 *
 * It is possible to have optional controls in a FormGroup. An optional control can be removed later
 * using `removeControl`, and can be omitted when calling `reset`. Optional controls must be
 * declared optional in the group's type.
 *
 * ```ts
 * const c = new FormGroup<{one?: FormControl<string>}>({
 *   one: new FormControl('')
 * });
 * ```
 *
 * Notice that `c.value.one` has type `string|null|undefined`. This is because calling `c.reset({})`
 * without providing the optional key `one` will cause it to become `null`.
 *
 * @publicApi
 */
class FormGroup extends AbstractControl {
  /**
   * Creates a new `FormGroup` instance.
   *
   * @param controls A collection of child controls. The key for each child is the name
   * under which it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  constructor(controls, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    (typeof ngDevMode === 'undefined' || ngDevMode) && validateFormGroupControls(controls);
    this.controls = controls;
    this._initObservables();
    this._setUpdateStrategy(validatorOrOpts);
    this._setUpControls();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`. The status should be broadcasted via the `statusChanges` observable,
      // so we set `emitEvent` to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
  }
  registerControl(name, control) {
    if (this.controls[name]) return this.controls[name];
    this.controls[name] = control;
    control.setParent(this);
    control._registerOnCollectionChange(this._onCollectionChange);
    return control;
  }
  addControl(name, control, options = {}) {
    this.registerControl(name, control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Remove a control from this group. In a strongly-typed group, required controls cannot be
   * removed.
   *
   * This method also updates the value and validity of the control.
   *
   * @param name The control name to remove from the collection
   * @param options Specifies whether this FormGroup instance should emit events after a
   *     control is removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * removed. When false, no events are emitted.
   */
  removeControl(name, options = {}) {
    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});
    delete this.controls[name];
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  setControl(name, control, options = {}) {
    if (this.controls[name]) this.controls[name]._registerOnCollectionChange(() => {});
    delete this.controls[name];
    if (control) this.registerControl(name, control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  contains(controlName) {
    return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;
  }
  /**
   * Sets the value of the `FormGroup`. It accepts an object that matches
   * the structure of the group, with control names as keys.
   *
   * @usageNotes
   * ### Set the complete value for the form group
   *
   * ```
   * const form = new FormGroup({
   *   first: new FormControl(),
   *   last: new FormControl()
   * });
   *
   * console.log(form.value);   // {first: null, last: null}
   *
   * form.setValue({first: 'Nancy', last: 'Drew'});
   * console.log(form.value);   // {first: 'Nancy', last: 'Drew'}
   * ```
   *
   * @throws When strict checks fail, such as setting the value of a control
   * that doesn't exist or if you exclude a value of a control that does exist.
   *
   * @param value The new value for the control that matches the structure of the group.
   * @param options Configuration options that determine how the control propagates changes
   * and emits events after the value changes.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
   * false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control value is updated.
   * When false, no events are emitted.
   */
  setValue(value, options = {}) {
    assertAllValuesPresent(this, true, value);
    Object.keys(value).forEach(name => {
      assertControlPresent(this, true, name);
      this.controls[name].setValue(value[name], {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Patches the value of the `FormGroup`. It accepts an object with control
   * names as keys, and does its best to match the values to the correct controls
   * in the group.
   *
   * It accepts both super-sets and sub-sets of the group without throwing an error.
   *
   * @usageNotes
   * ### Patch the value for a form group
   *
   * ```
   * const form = new FormGroup({
   *    first: new FormControl(),
   *    last: new FormControl()
   * });
   * console.log(form.value);   // {first: null, last: null}
   *
   * form.patchValue({first: 'Nancy'});
   * console.log(form.value);   // {first: 'Nancy', last: null}
   * ```
   *
   * @param value The object that matches the structure of the group.
   * @param options Configuration options that determine how the control propagates changes and
   * emits events after the value is patched.
   * * `onlySelf`: When true, each change only affects this control and not its parent. Default is
   * true.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control value
   * is updated. When false, no events are emitted. The configuration options are passed to
   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
   */
  patchValue(value, options = {}) {
    // Even though the `value` argument type doesn't allow `null` and `undefined` values, the
    // `patchValue` can be called recursively and inner data structures might have these values, so
    // we just ignore such cases when a field containing FormGroup instance receives `null` or
    // `undefined` as a value.
    if (value == null /* both `null` and `undefined` */) return;
    Object.keys(value).forEach(name => {
      // The compiler cannot see through the uninstantiated conditional type of `this.controls`, so
      // `as any` is required.
      const control = this.controls[name];
      if (control) {
        control.patchValue( /* Guaranteed to be present, due to the outer forEach. */value[name], {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      }
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Resets the `FormGroup`, marks all descendants `pristine` and `untouched` and sets
   * the value of all descendants to their default values, or null if no defaults were provided.
   *
   * You reset to a specific form state by passing in a map of states
   * that matches the structure of your form, with control names as keys. The state
   * is a standalone value or a form state object with both a value and a disabled
   * status.
   *
   * @param value Resets the control with an initial value,
   * or an object that defines the initial value and disabled state.
   *
   * @param options Configuration options that determine how the control propagates changes
   * and emits events when the group is reset.
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default is
   * false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is reset.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   *
   * @usageNotes
   *
   * ### Reset the form group values
   *
   * ```ts
   * const form = new FormGroup({
   *   first: new FormControl('first name'),
   *   last: new FormControl('last name')
   * });
   *
   * console.log(form.value);  // {first: 'first name', last: 'last name'}
   *
   * form.reset({ first: 'name', last: 'last name' });
   *
   * console.log(form.value);  // {first: 'name', last: 'last name'}
   * ```
   *
   * ### Reset the form group values and disabled status
   *
   * ```
   * const form = new FormGroup({
   *   first: new FormControl('first name'),
   *   last: new FormControl('last name')
   * });
   *
   * form.reset({
   *   first: {value: 'name', disabled: true},
   *   last: 'last'
   * });
   *
   * console.log(form.value);  // {last: 'last'}
   * console.log(form.get('first').status);  // 'DISABLED'
   * ```
   */
  reset(value = {}, options = {}) {
    this._forEachChild((control, name) => {
      control.reset(value ? value[name] : null, {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this._updatePristine(options);
    this._updateTouched(options);
    this.updateValueAndValidity(options);
  }
  /**
   * The aggregate value of the `FormGroup`, including any disabled controls.
   *
   * Retrieves all values regardless of disabled status.
   */
  getRawValue() {
    return this._reduceChildren({}, (acc, control, name) => {
      acc[name] = control.getRawValue();
      return acc;
    });
  }
  /** @internal */
  _syncPendingControls() {
    let subtreeUpdated = this._reduceChildren(false, (updated, child) => {
      return child._syncPendingControls() ? true : updated;
    });
    if (subtreeUpdated) this.updateValueAndValidity({
      onlySelf: true
    });
    return subtreeUpdated;
  }
  /** @internal */
  _forEachChild(cb) {
    Object.keys(this.controls).forEach(key => {
      // The list of controls can change (for ex. controls might be removed) while the loop
      // is running (as a result of invoking Forms API in `valueChanges` subscription), so we
      // have to null check before invoking the callback.
      const control = this.controls[key];
      control && cb(control, key);
    });
  }
  /** @internal */
  _setUpControls() {
    this._forEachChild(control => {
      control.setParent(this);
      control._registerOnCollectionChange(this._onCollectionChange);
    });
  }
  /** @internal */
  _updateValue() {
    this.value = this._reduceValue();
  }
  /** @internal */
  _anyControls(condition) {
    for (const [controlName, control] of Object.entries(this.controls)) {
      if (this.contains(controlName) && condition(control)) {
        return true;
      }
    }
    return false;
  }
  /** @internal */
  _reduceValue() {
    let acc = {};
    return this._reduceChildren(acc, (acc, control, name) => {
      if (control.enabled || this.disabled) {
        acc[name] = control.value;
      }
      return acc;
    });
  }
  /** @internal */
  _reduceChildren(initValue, fn) {
    let res = initValue;
    this._forEachChild((control, name) => {
      res = fn(res, control, name);
    });
    return res;
  }
  /** @internal */
  _allControlsDisabled() {
    for (const controlName of Object.keys(this.controls)) {
      if (this.controls[controlName].enabled) {
        return false;
      }
    }
    return Object.keys(this.controls).length > 0 || this.disabled;
  }
  /** @internal */
  _find(name) {
    return this.controls.hasOwnProperty(name) ? this.controls[name] : null;
  }
}
/**
 * Will validate that none of the controls has a key with a dot
 * Throws other wise
 */
function validateFormGroupControls(controls) {
  const invalidKeys = Object.keys(controls).filter(key => key.includes('.'));
  if (invalidKeys.length > 0) {
    // TODO: make this an error once there are no more uses in G3
    console.warn(`FormGroup keys cannot include \`.\`, please replace the keys for: ${invalidKeys.join(',')}.`);
  }
}
const UntypedFormGroup = (/* unused pure expression or super */ null && (FormGroup));
/**
 * @description
 * Asserts that the given control is an instance of `FormGroup`
 *
 * @publicApi
 */
const isFormGroup = control => control instanceof FormGroup;
/**
 * Tracks the value and validity state of a collection of `FormControl` instances, each of which has
 * the same value type.
 *
 * `FormRecord` is very similar to {@link FormGroup}, except it can be used with a dynamic keys,
 * with controls added and removed as needed.
 *
 * `FormRecord` accepts one generic argument, which describes the type of the controls it contains.
 *
 * @usageNotes
 *
 * ```
 * let numbers = new FormRecord({bill: new FormControl('415-123-456')});
 * numbers.addControl('bob', new FormControl('415-234-567'));
 * numbers.removeControl('bill');
 * ```
 *
 * @publicApi
 */
class FormRecord extends (/* unused pure expression or super */ null && (FormGroup)) {}
/**
 * @description
 * Asserts that the given control is an instance of `FormRecord`
 *
 * @publicApi
 */
const isFormRecord = control => control instanceof FormRecord;

/**
 * Token to provide to allow SetDisabledState to always be called when a CVA is added, regardless of
 * whether the control is disabled or enabled.
 *
 * @see {@link FormsModule#withconfig}
 */
const CALL_SET_DISABLED_STATE = /*#__PURE__*/new core_mjs_.InjectionToken('CallSetDisabledState', {
  providedIn: 'root',
  factory: () => setDisabledStateDefault
});
/**
 * Whether to use the fixed setDisabledState behavior by default.
 */
const setDisabledStateDefault = 'always';
function controlPath(name, parent) {
  return [...parent.path, name];
}
/**
 * Links a Form control and a Form directive by setting up callbacks (such as `onChange`) on both
 * instances. This function is typically invoked when form directive is being initialized.
 *
 * @param control Form control instance that should be linked.
 * @param dir Directive that should be linked with a given control.
 */
function setUpControl(control, dir, callSetDisabledState = setDisabledStateDefault) {
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    if (!control) _throwError(dir, 'Cannot find control with');
    if (!dir.valueAccessor) _throwMissingValueAccessorError(dir);
  }
  setUpValidators(control, dir);
  dir.valueAccessor.writeValue(control.value);
  // The legacy behavior only calls the CVA's `setDisabledState` if the control is disabled.
  // If the `callSetDisabledState` option is set to `always`, then this bug is fixed and
  // the method is always called.
  if (control.disabled || callSetDisabledState === 'always') {
    dir.valueAccessor.setDisabledState?.(control.disabled);
  }
  setUpViewChangePipeline(control, dir);
  setUpModelChangePipeline(control, dir);
  setUpBlurPipeline(control, dir);
  setUpDisabledChangeHandler(control, dir);
}
/**
 * Reverts configuration performed by the `setUpControl` control function.
 * Effectively disconnects form control with a given form directive.
 * This function is typically invoked when corresponding form directive is being destroyed.
 *
 * @param control Form control which should be cleaned up.
 * @param dir Directive that should be disconnected from a given control.
 * @param validateControlPresenceOnChange Flag that indicates whether onChange handler should
 *     contain asserts to verify that it's not called once directive is destroyed. We need this flag
 *     to avoid potentially breaking changes caused by better control cleanup introduced in #39235.
 */
function cleanUpControl(control, dir, validateControlPresenceOnChange = true) {
  const noop = () => {
    if (validateControlPresenceOnChange && (typeof ngDevMode === 'undefined' || ngDevMode)) {
      _noControlError(dir);
    }
  };
  // The `valueAccessor` field is typically defined on FromControl and FormControlName directive
  // instances and there is a logic in `selectValueAccessor` function that throws if it's not the
  // case. We still check the presence of `valueAccessor` before invoking its methods to make sure
  // that cleanup works correctly if app code or tests are setup to ignore the error thrown from
  // `selectValueAccessor`. See https://github.com/angular/angular/issues/40521.
  if (dir.valueAccessor) {
    dir.valueAccessor.registerOnChange(noop);
    dir.valueAccessor.registerOnTouched(noop);
  }
  cleanUpValidators(control, dir);
  if (control) {
    dir._invokeOnDestroyCallbacks();
    control._registerOnCollectionChange(() => {});
  }
}
function registerOnValidatorChange(validators, onChange) {
  validators.forEach(validator => {
    if (validator.registerOnValidatorChange) validator.registerOnValidatorChange(onChange);
  });
}
/**
 * Sets up disabled change handler function on a given form control if ControlValueAccessor
 * associated with a given directive instance supports the `setDisabledState` call.
 *
 * @param control Form control where disabled change handler should be setup.
 * @param dir Corresponding directive instance associated with this control.
 */
function setUpDisabledChangeHandler(control, dir) {
  if (dir.valueAccessor.setDisabledState) {
    const onDisabledChange = isDisabled => {
      dir.valueAccessor.setDisabledState(isDisabled);
    };
    control.registerOnDisabledChange(onDisabledChange);
    // Register a callback function to cleanup disabled change handler
    // from a control instance when a directive is destroyed.
    dir._registerOnDestroy(() => {
      control._unregisterOnDisabledChange(onDisabledChange);
    });
  }
}
/**
 * Sets up sync and async directive validators on provided form control.
 * This function merges validators from the directive into the validators of the control.
 *
 * @param control Form control where directive validators should be setup.
 * @param dir Directive instance that contains validators to be setup.
 */
function setUpValidators(control, dir) {
  const validators = getControlValidators(control);
  if (dir.validator !== null) {
    control.setValidators(mergeValidators(validators, dir.validator));
  } else if (typeof validators === 'function') {
    // If sync validators are represented by a single validator function, we force the
    // `Validators.compose` call to happen by executing the `setValidators` function with
    // an array that contains that function. We need this to avoid possible discrepancies in
    // validators behavior, so sync validators are always processed by the `Validators.compose`.
    // Note: we should consider moving this logic inside the `setValidators` function itself, so we
    // have consistent behavior on AbstractControl API level. The same applies to the async
    // validators logic below.
    control.setValidators([validators]);
  }
  const asyncValidators = getControlAsyncValidators(control);
  if (dir.asyncValidator !== null) {
    control.setAsyncValidators(mergeValidators(asyncValidators, dir.asyncValidator));
  } else if (typeof asyncValidators === 'function') {
    control.setAsyncValidators([asyncValidators]);
  }
  // Re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4
  const onValidatorChange = () => control.updateValueAndValidity();
  registerOnValidatorChange(dir._rawValidators, onValidatorChange);
  registerOnValidatorChange(dir._rawAsyncValidators, onValidatorChange);
}
/**
 * Cleans up sync and async directive validators on provided form control.
 * This function reverts the setup performed by the `setUpValidators` function, i.e.
 * removes directive-specific validators from a given control instance.
 *
 * @param control Form control from where directive validators should be removed.
 * @param dir Directive instance that contains validators to be removed.
 * @returns true if a control was updated as a result of this action.
 */
function cleanUpValidators(control, dir) {
  let isControlUpdated = false;
  if (control !== null) {
    if (dir.validator !== null) {
      const validators = getControlValidators(control);
      if (Array.isArray(validators) && validators.length > 0) {
        // Filter out directive validator function.
        const updatedValidators = validators.filter(validator => validator !== dir.validator);
        if (updatedValidators.length !== validators.length) {
          isControlUpdated = true;
          control.setValidators(updatedValidators);
        }
      }
    }
    if (dir.asyncValidator !== null) {
      const asyncValidators = getControlAsyncValidators(control);
      if (Array.isArray(asyncValidators) && asyncValidators.length > 0) {
        // Filter out directive async validator function.
        const updatedAsyncValidators = asyncValidators.filter(asyncValidator => asyncValidator !== dir.asyncValidator);
        if (updatedAsyncValidators.length !== asyncValidators.length) {
          isControlUpdated = true;
          control.setAsyncValidators(updatedAsyncValidators);
        }
      }
    }
  }
  // Clear onValidatorChange callbacks by providing a noop function.
  const noop = () => {};
  registerOnValidatorChange(dir._rawValidators, noop);
  registerOnValidatorChange(dir._rawAsyncValidators, noop);
  return isControlUpdated;
}
function setUpViewChangePipeline(control, dir) {
  dir.valueAccessor.registerOnChange(newValue => {
    control._pendingValue = newValue;
    control._pendingChange = true;
    control._pendingDirty = true;
    if (control.updateOn === 'change') updateControl(control, dir);
  });
}
function setUpBlurPipeline(control, dir) {
  dir.valueAccessor.registerOnTouched(() => {
    control._pendingTouched = true;
    if (control.updateOn === 'blur' && control._pendingChange) updateControl(control, dir);
    if (control.updateOn !== 'submit') control.markAsTouched();
  });
}
function updateControl(control, dir) {
  if (control._pendingDirty) control.markAsDirty();
  control.setValue(control._pendingValue, {
    emitModelToViewChange: false
  });
  dir.viewToModelUpdate(control._pendingValue);
  control._pendingChange = false;
}
function setUpModelChangePipeline(control, dir) {
  const onChange = (newValue, emitModelEvent) => {
    // control -> view
    dir.valueAccessor.writeValue(newValue);
    // control -> ngModel
    if (emitModelEvent) dir.viewToModelUpdate(newValue);
  };
  control.registerOnChange(onChange);
  // Register a callback function to cleanup onChange handler
  // from a control instance when a directive is destroyed.
  dir._registerOnDestroy(() => {
    control._unregisterOnChange(onChange);
  });
}
/**
 * Links a FormGroup or FormArray instance and corresponding Form directive by setting up validators
 * present in the view.
 *
 * @param control FormGroup or FormArray instance that should be linked.
 * @param dir Directive that provides view validators.
 */
function setUpFormContainer(control, dir) {
  if (control == null && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'Cannot find control with');
  setUpValidators(control, dir);
}
/**
 * Reverts the setup performed by the `setUpFormContainer` function.
 *
 * @param control FormGroup or FormArray instance that should be cleaned up.
 * @param dir Directive that provided view validators.
 * @returns true if a control was updated as a result of this action.
 */
function cleanUpFormContainer(control, dir) {
  return cleanUpValidators(control, dir);
}
function _noControlError(dir) {
  return _throwError(dir, 'There is no FormControl instance attached to form control element with');
}
function _throwError(dir, message) {
  const messageEnd = _describeControlLocation(dir);
  throw new Error(`${message} ${messageEnd}`);
}
function _describeControlLocation(dir) {
  const path = dir.path;
  if (path && path.length > 1) return `path: '${path.join(' -> ')}'`;
  if (path?.[0]) return `name: '${path}'`;
  return 'unspecified name attribute';
}
function _throwMissingValueAccessorError(dir) {
  const loc = _describeControlLocation(dir);
  throw new core_mjs_["ɵRuntimeError"](-1203 /* RuntimeErrorCode.NG_MISSING_VALUE_ACCESSOR */, `No value accessor for form control ${loc}.`);
}
function _throwInvalidValueAccessorError(dir) {
  const loc = _describeControlLocation(dir);
  throw new core_mjs_["ɵRuntimeError"](1200 /* RuntimeErrorCode.NG_VALUE_ACCESSOR_NOT_PROVIDED */, `Value accessor was not provided as an array for form control with ${loc}. ` + `Check that the \`NG_VALUE_ACCESSOR\` token is configured as a \`multi: true\` provider.`);
}
function isPropertyUpdated(changes, viewModel) {
  if (!changes.hasOwnProperty('model')) return false;
  const change = changes['model'];
  if (change.isFirstChange()) return true;
  return !Object.is(viewModel, change.currentValue);
}
function isBuiltInAccessor(valueAccessor) {
  // Check if a given value accessor is an instance of a class that directly extends
  // `BuiltInControlValueAccessor` one.
  return Object.getPrototypeOf(valueAccessor.constructor) === BuiltInControlValueAccessor;
}
function syncPendingControls(form, directives) {
  form._syncPendingControls();
  directives.forEach(dir => {
    const control = dir.control;
    if (control.updateOn === 'submit' && control._pendingChange) {
      dir.viewToModelUpdate(control._pendingValue);
      control._pendingChange = false;
    }
  });
}
// TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented
function selectValueAccessor(dir, valueAccessors) {
  if (!valueAccessors) return null;
  if (!Array.isArray(valueAccessors) && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwInvalidValueAccessorError(dir);
  let defaultAccessor = undefined;
  let builtinAccessor = undefined;
  let customAccessor = undefined;
  valueAccessors.forEach(v => {
    if (v.constructor === DefaultValueAccessor) {
      defaultAccessor = v;
    } else if (isBuiltInAccessor(v)) {
      if (builtinAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one built-in value accessor matches form control with');
      builtinAccessor = v;
    } else {
      if (customAccessor && (typeof ngDevMode === 'undefined' || ngDevMode)) _throwError(dir, 'More than one custom value accessor matches form control with');
      customAccessor = v;
    }
  });
  if (customAccessor) return customAccessor;
  if (builtinAccessor) return builtinAccessor;
  if (defaultAccessor) return defaultAccessor;
  if (typeof ngDevMode === 'undefined' || ngDevMode) {
    _throwError(dir, 'No valid value accessor for form control with');
  }
  return null;
}
function removeListItem$1(list, el) {
  const index = list.indexOf(el);
  if (index > -1) list.splice(index, 1);
}
// TODO(kara): remove after deprecation period
function _ngModelWarning(name, type, instance, warningConfig) {
  if (warningConfig === 'never') return;
  if ((warningConfig === null || warningConfig === 'once') && !type._ngModelWarningSentOnce || warningConfig === 'always' && !instance._ngModelWarningSent) {
    console.warn(ngModelWarning(name));
    type._ngModelWarningSentOnce = true;
    instance._ngModelWarningSent = true;
  }
}
const formDirectiveProvider$1 = {
  provide: ControlContainer,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => NgForm)
};
const resolvedPromise$1 = /*#__PURE__*/(() => Promise.resolve())();
/**
 * @description
 * Creates a top-level `FormGroup` instance and binds it to a form
 * to track aggregate form value and validation status.
 *
 * As soon as you import the `FormsModule`, this directive becomes active by default on
 * all `<form>` tags.  You don't need to add a special selector.
 *
 * You optionally export the directive into a local template variable using `ngForm` as the key
 * (ex: `#myForm="ngForm"`). This is optional, but useful.  Many properties from the underlying
 * `FormGroup` instance are duplicated on the directive itself, so a reference to it
 * gives you access to the aggregate value and validity status of the form, as well as
 * user interaction properties like `dirty` and `touched`.
 *
 * To register child controls with the form, use `NgModel` with a `name`
 * attribute. You may use `NgModelGroup` to create sub-groups within the form.
 *
 * If necessary, listen to the directive's `ngSubmit` event to be notified when the user has
 * triggered a form submission. The `ngSubmit` event emits the original form
 * submission event.
 *
 * In template driven forms, all `<form>` tags are automatically tagged as `NgForm`.
 * To import the `FormsModule` but skip its usage in some forms,
 * for example, to use native HTML5 validation, add the `ngNoForm` and the `<form>`
 * tags won't create an `NgForm` directive. In reactive forms, using `ngNoForm` is
 * unnecessary because the `<form>` tags are inert. In that case, you would
 * refrain from using the `formGroup` directive.
 *
 * @usageNotes
 *
 * ### Listening for form submission
 *
 * The following example shows how to capture the form values from the "ngSubmit" event.
 *
 * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * ### Setting the update options
 *
 * The following example shows you how to change the "updateOn" option from its default using
 * ngFormOptions.
 *
 * ```html
 * <form [ngFormOptions]="{updateOn: 'blur'}">
 *    <input name="one" ngModel>  <!-- this ngModel will update on blur -->
 * </form>
 * ```
 *
 * ### Native DOM validation UI
 *
 * In order to prevent the native DOM form validation UI from interfering with Angular's form
 * validation, Angular automatically adds the `novalidate` attribute on any `<form>` whenever
 * `FormModule` or `ReactiveFormModule` are imported into the application.
 * If you want to explicitly enable native DOM validation UI with Angular forms, you can add the
 * `ngNativeValidate` attribute to the `<form>` element:
 *
 * ```html
 * <form ngNativeValidate>
 *   ...
 * </form>
 * ```
 *
 * @ngModule FormsModule
 * @publicApi
 */
let NgForm = /*#__PURE__*/(() => {
  class NgForm extends ControlContainer {
    constructor(validators, asyncValidators, callSetDisabledState) {
      super();
      this.callSetDisabledState = callSetDisabledState;
      /**
       * @description
       * Returns whether the form submission has been triggered.
       */
      this.submitted = false;
      this._directives = new Set();
      /**
       * @description
       * Event emitter for the "ngSubmit" event
       */
      this.ngSubmit = new core_mjs_.EventEmitter();
      this.form = new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));
    }
    /** @nodoc */
    ngAfterViewInit() {
      this._setUpdateStrategy();
    }
    /**
     * @description
     * The directive instance.
     */
    get formDirective() {
      return this;
    }
    /**
     * @description
     * The internal `FormGroup` instance.
     */
    get control() {
      return this.form;
    }
    /**
     * @description
     * Returns an array representing the path to this group. Because this directive
     * always lives at the top level of a form, it is always an empty array.
     */
    get path() {
      return [];
    }
    /**
     * @description
     * Returns a map of the controls in this group.
     */
    get controls() {
      return this.form.controls;
    }
    /**
     * @description
     * Method that sets up the control directive in this group, re-calculates its value
     * and validity, and adds the instance to the internal list of directives.
     *
     * @param dir The `NgModel` directive instance.
     */
    addControl(dir) {
      resolvedPromise$1.then(() => {
        const container = this._findContainer(dir.path);
        dir.control = container.registerControl(dir.name, dir.control);
        setUpControl(dir.control, dir, this.callSetDisabledState);
        dir.control.updateValueAndValidity({
          emitEvent: false
        });
        this._directives.add(dir);
      });
    }
    /**
     * @description
     * Retrieves the `FormControl` instance from the provided `NgModel` directive.
     *
     * @param dir The `NgModel` directive instance.
     */
    getControl(dir) {
      return this.form.get(dir.path);
    }
    /**
     * @description
     * Removes the `NgModel` instance from the internal list of directives
     *
     * @param dir The `NgModel` directive instance.
     */
    removeControl(dir) {
      resolvedPromise$1.then(() => {
        const container = this._findContainer(dir.path);
        if (container) {
          container.removeControl(dir.name);
        }
        this._directives.delete(dir);
      });
    }
    /**
     * @description
     * Adds a new `NgModelGroup` directive instance to the form.
     *
     * @param dir The `NgModelGroup` directive instance.
     */
    addFormGroup(dir) {
      resolvedPromise$1.then(() => {
        const container = this._findContainer(dir.path);
        const group = new FormGroup({});
        setUpFormContainer(group, dir);
        container.registerControl(dir.name, group);
        group.updateValueAndValidity({
          emitEvent: false
        });
      });
    }
    /**
     * @description
     * Removes the `NgModelGroup` directive instance from the form.
     *
     * @param dir The `NgModelGroup` directive instance.
     */
    removeFormGroup(dir) {
      resolvedPromise$1.then(() => {
        const container = this._findContainer(dir.path);
        if (container) {
          container.removeControl(dir.name);
        }
      });
    }
    /**
     * @description
     * Retrieves the `FormGroup` for a provided `NgModelGroup` directive instance
     *
     * @param dir The `NgModelGroup` directive instance.
     */
    getFormGroup(dir) {
      return this.form.get(dir.path);
    }
    /**
     * Sets the new value for the provided `NgControl` directive.
     *
     * @param dir The `NgControl` directive instance.
     * @param value The new value for the directive's control.
     */
    updateModel(dir, value) {
      resolvedPromise$1.then(() => {
        const ctrl = this.form.get(dir.path);
        ctrl.setValue(value);
      });
    }
    /**
     * @description
     * Sets the value for this `FormGroup`.
     *
     * @param value The new value
     */
    setValue(value) {
      this.control.setValue(value);
    }
    /**
     * @description
     * Method called when the "submit" event is triggered on the form.
     * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
     *
     * @param $event The "submit" event object
     */
    onSubmit($event) {
      this.submitted = true;
      syncPendingControls(this.form, this._directives);
      this.ngSubmit.emit($event);
      // Forms with `method="dialog"` have some special behavior
      // that won't reload the page and that shouldn't be prevented.
      return $event?.target?.method === 'dialog';
    }
    /**
     * @description
     * Method called when the "reset" event is triggered on the form.
     */
    onReset() {
      this.resetForm();
    }
    /**
     * @description
     * Resets the form to an initial value and resets its submitted status.
     *
     * @param value The new value for the form.
     */
    resetForm(value = undefined) {
      this.form.reset(value);
      this.submitted = false;
    }
    _setUpdateStrategy() {
      if (this.options && this.options.updateOn != null) {
        this.form._updateOn = this.options.updateOn;
      }
    }
    _findContainer(path) {
      path.pop();
      return path.length ? this.form.get(path) : this.form;
    }
    static #_ = this.ɵfac = function NgForm_Factory(t) {
      return new (t || NgForm)(core_mjs_["ɵɵdirectiveInject"](NG_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](CALL_SET_DISABLED_STATE, 8));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: NgForm,
      selectors: [["form", 3, "ngNoForm", "", 3, "formGroup", ""], ["ng-form"], ["", "ngForm", ""]],
      hostBindings: function NgForm_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("submit", function NgForm_submit_HostBindingHandler($event) {
            return ctx.onSubmit($event);
          })("reset", function NgForm_reset_HostBindingHandler() {
            return ctx.onReset();
          });
        }
      },
      inputs: {
        options: [core_mjs_["ɵɵInputFlags"].None, "ngFormOptions", "options"]
      },
      outputs: {
        ngSubmit: "ngSubmit"
      },
      exportAs: ["ngForm"],
      features: [core_mjs_["ɵɵProvidersFeature"]([formDirectiveProvider$1]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return NgForm;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function removeListItem(list, el) {
  const index = list.indexOf(el);
  if (index > -1) list.splice(index, 1);
}
function isFormControlState(formState) {
  return typeof formState === 'object' && formState !== null && Object.keys(formState).length === 2 && 'value' in formState && 'disabled' in formState;
}
const FormControl = class FormControl extends AbstractControl {
  constructor(
  // formState and defaultValue will only be null if T is nullable
  formState = null, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    /** @publicApi */
    this.defaultValue = null;
    /** @internal */
    this._onChange = [];
    /** @internal */
    this._pendingChange = false;
    this._applyFormState(formState);
    this._setUpdateStrategy(validatorOrOpts);
    this._initObservables();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`.
      // The status should be broadcasted via the `statusChanges` observable, so we set
      // `emitEvent` to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
    if (isOptionsObj(validatorOrOpts) && (validatorOrOpts.nonNullable || validatorOrOpts.initialValueIsDefault)) {
      if (isFormControlState(formState)) {
        this.defaultValue = formState.value;
      } else {
        this.defaultValue = formState;
      }
    }
  }
  setValue(value, options = {}) {
    this.value = this._pendingValue = value;
    if (this._onChange.length && options.emitModelToViewChange !== false) {
      this._onChange.forEach(changeFn => changeFn(this.value, options.emitViewToModelChange !== false));
    }
    this.updateValueAndValidity(options);
  }
  patchValue(value, options = {}) {
    this.setValue(value, options);
  }
  reset(formState = this.defaultValue, options = {}) {
    this._applyFormState(formState);
    this.markAsPristine(options);
    this.markAsUntouched(options);
    this.setValue(this.value, options);
    this._pendingChange = false;
  }
  /**  @internal */
  _updateValue() {}
  /**  @internal */
  _anyControls(condition) {
    return false;
  }
  /**  @internal */
  _allControlsDisabled() {
    return this.disabled;
  }
  registerOnChange(fn) {
    this._onChange.push(fn);
  }
  /** @internal */
  _unregisterOnChange(fn) {
    removeListItem(this._onChange, fn);
  }
  registerOnDisabledChange(fn) {
    this._onDisabledChange.push(fn);
  }
  /** @internal */
  _unregisterOnDisabledChange(fn) {
    removeListItem(this._onDisabledChange, fn);
  }
  /** @internal */
  _forEachChild(cb) {}
  /** @internal */
  _syncPendingControls() {
    if (this.updateOn === 'submit') {
      if (this._pendingDirty) this.markAsDirty();
      if (this._pendingTouched) this.markAsTouched();
      if (this._pendingChange) {
        this.setValue(this._pendingValue, {
          onlySelf: true,
          emitModelToViewChange: false
        });
        return true;
      }
    }
    return false;
  }
  _applyFormState(formState) {
    if (isFormControlState(formState)) {
      this.value = this._pendingValue = formState.value;
      formState.disabled ? this.disable({
        onlySelf: true,
        emitEvent: false
      }) : this.enable({
        onlySelf: true,
        emitEvent: false
      });
    } else {
      this.value = this._pendingValue = formState;
    }
  }
};
const UntypedFormControl = (/* unused pure expression or super */ null && (FormControl));
/**
 * @description
 * Asserts that the given control is an instance of `FormControl`
 *
 * @publicApi
 */
const isFormControl = control => control instanceof FormControl;

/**
 * @description
 * A base class for code shared between the `NgModelGroup` and `FormGroupName` directives.
 *
 * @publicApi
 */
let AbstractFormGroupDirective = /*#__PURE__*/(() => {
  class AbstractFormGroupDirective extends ControlContainer {
    /** @nodoc */
    ngOnInit() {
      this._checkParentType();
      // Register the group with its parent group.
      this.formDirective.addFormGroup(this);
    }
    /** @nodoc */
    ngOnDestroy() {
      if (this.formDirective) {
        // Remove the group from its parent group.
        this.formDirective.removeFormGroup(this);
      }
    }
    /**
     * @description
     * The `FormGroup` bound to this directive.
     */
    get control() {
      return this.formDirective.getFormGroup(this);
    }
    /**
     * @description
     * The path to this group from the top-level directive.
     */
    get path() {
      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
    }
    /**
     * @description
     * The top-level directive for this group if present, otherwise null.
     */
    get formDirective() {
      return this._parent ? this._parent.formDirective : null;
    }
    /** @internal */
    _checkParentType() {}
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵAbstractFormGroupDirective_BaseFactory;
      return function AbstractFormGroupDirective_Factory(t) {
        return (ɵAbstractFormGroupDirective_BaseFactory || (ɵAbstractFormGroupDirective_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](AbstractFormGroupDirective)))(t || AbstractFormGroupDirective);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: AbstractFormGroupDirective,
      features: [core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return AbstractFormGroupDirective;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function modelParentException() {
  return new core_mjs_["ɵRuntimeError"](1350 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP */, `
    ngModel cannot be used to register form controls with a parent formGroup directive.  Try using
    formGroup's partner directive "formControlName" instead.  Example:

    ${formControlNameExample}

    Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:

    Example:

    ${ngModelWithFormGroupExample}`);
}
function formGroupNameException() {
  return new core_mjs_["ɵRuntimeError"](1351 /* RuntimeErrorCode.NGMODEL_IN_FORM_GROUP_NAME */, `
    ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.

    Option 1: Use formControlName instead of ngModel (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):

    ${ngModelGroupExample}`);
}
function missingNameException() {
  return new core_mjs_["ɵRuntimeError"](1352 /* RuntimeErrorCode.NGMODEL_WITHOUT_NAME */, `If ngModel is used within a form tag, either the name attribute must be set or the form
    control must be defined as 'standalone' in ngModelOptions.

    Example 1: <input [(ngModel)]="person.firstName" name="first">
    Example 2: <input [(ngModel)]="person.firstName" [ngModelOptions]="{standalone: true}">`);
}
function modelGroupParentException() {
  return new core_mjs_["ɵRuntimeError"](1353 /* RuntimeErrorCode.NGMODELGROUP_IN_FORM_GROUP */, `
    ngModelGroup cannot be used with a parent formGroup directive.

    Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):

    ${formGroupNameExample}

    Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):

    ${ngModelGroupExample}`);
}
const modelGroupProvider = {
  provide: ControlContainer,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => NgModelGroup)
};
/**
 * @description
 * Creates and binds a `FormGroup` instance to a DOM element.
 *
 * This directive can only be used as a child of `NgForm` (within `<form>` tags).
 *
 * Use this directive to validate a sub-group of your form separately from the
 * rest of your form, or if some values in your domain model make more sense
 * to consume together in a nested object.
 *
 * Provide a name for the sub-group and it will become the key
 * for the sub-group in the form's full value. If you need direct access, export the directive into
 * a local template variable using `ngModelGroup` (ex: `#myGroup="ngModelGroup"`).
 *
 * @usageNotes
 *
 * ### Consuming controls in a grouping
 *
 * The following example shows you how to combine controls together in a sub-group
 * of the form.
 *
 * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}
 *
 * @ngModule FormsModule
 * @publicApi
 */
let NgModelGroup = /*#__PURE__*/(() => {
  class NgModelGroup extends AbstractFormGroupDirective {
    constructor(parent, validators, asyncValidators) {
      super();
      /**
       * @description
       * Tracks the name of the `NgModelGroup` bound to the directive. The name corresponds
       * to a key in the parent `NgForm`.
       */
      this.name = '';
      this._parent = parent;
      this._setValidators(validators);
      this._setAsyncValidators(asyncValidators);
    }
    /** @internal */
    _checkParentType() {
      if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw modelGroupParentException();
      }
    }
    static #_ = this.ɵfac = function NgModelGroup_Factory(t) {
      return new (t || NgModelGroup)(core_mjs_["ɵɵdirectiveInject"](ControlContainer, 5), core_mjs_["ɵɵdirectiveInject"](NG_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: NgModelGroup,
      selectors: [["", "ngModelGroup", ""]],
      inputs: {
        name: [core_mjs_["ɵɵInputFlags"].None, "ngModelGroup", "name"]
      },
      exportAs: ["ngModelGroup"],
      features: [core_mjs_["ɵɵProvidersFeature"]([modelGroupProvider]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return NgModelGroup;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const formControlBinding$1 = {
  provide: NgControl,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => NgModel)
};
/**
 * `ngModel` forces an additional change detection run when its inputs change:
 * E.g.:
 * ```
 * <div>{{myModel.valid}}</div>
 * <input [(ngModel)]="myValue" #myModel="ngModel">
 * ```
 * I.e. `ngModel` can export itself on the element and then be used in the template.
 * Normally, this would result in expressions before the `input` that use the exported directive
 * to have an old value as they have been
 * dirty checked before. As this is a very common case for `ngModel`, we added this second change
 * detection run.
 *
 * Notes:
 * - this is just one extra run no matter how many `ngModel`s have been changed.
 * - this is a general problem when using `exportAs` for directives!
 */
const resolvedPromise = /*#__PURE__*/(() => Promise.resolve())();
/**
 * @description
 * Creates a `FormControl` instance from a [domain
 * model](https://en.wikipedia.org/wiki/Domain_model) and binds it to a form control element.
 *
 * The `FormControl` instance tracks the value, user interaction, and
 * validation status of the control and keeps the view synced with the model. If used
 * within a parent form, the directive also registers itself with the form as a child
 * control.
 *
 * This directive is used by itself or as part of a larger form. Use the
 * `ngModel` selector to activate it.
 *
 * It accepts a domain model as an optional `Input`. If you have a one-way binding
 * to `ngModel` with `[]` syntax, changing the domain model's value in the component
 * class sets the value in the view. If you have a two-way binding with `[()]` syntax
 * (also known as 'banana-in-a-box syntax'), the value in the UI always syncs back to
 * the domain model in your class.
 *
 * To inspect the properties of the associated `FormControl` (like the validity state),
 * export the directive into a local template variable using `ngModel` as the key (ex:
 * `#myVar="ngModel"`). You can then access the control using the directive's `control` property.
 * However, the most commonly used properties (like `valid` and `dirty`) also exist on the control
 * for direct access. See a full list of properties directly available in
 * `AbstractControlDirective`.
 *
 * @see {@link RadioControlValueAccessor}
 * @see {@link SelectControlValueAccessor}
 *
 * @usageNotes
 *
 * ### Using ngModel on a standalone control
 *
 * The following examples show a simple standalone control using `ngModel`:
 *
 * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}
 *
 * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute
 * so that the control can be registered with the parent form under that name.
 *
 * In the context of a parent form, it's often unnecessary to include one-way or two-way binding,
 * as the parent form syncs the value for you. You access its properties by exporting it into a
 * local template variable using `ngForm` such as (`#f="ngForm"`). Use the variable where
 * needed on form submission.
 *
 * If you do need to populate initial values into your form, using a one-way binding for
 * `ngModel` tends to be sufficient as long as you use the exported form's value rather
 * than the domain model's value on submit.
 *
 * ### Using ngModel within a form
 *
 * The following example shows controls using `ngModel` within a form:
 *
 * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}
 *
 * ### Using a standalone ngModel within a group
 *
 * The following example shows you how to use a standalone ngModel control
 * within a form. This controls the display of the form, but doesn't contain form data.
 *
 * ```html
 * <form>
 *   <input name="login" ngModel placeholder="Login">
 *   <input type="checkbox" ngModel [ngModelOptions]="{standalone: true}"> Show more options?
 * </form>
 * <!-- form value: {login: ''} -->
 * ```
 *
 * ### Setting the ngModel `name` attribute through options
 *
 * The following example shows you an alternate way to set the name attribute. Here,
 * an attribute identified as name is used within a custom form control component. To still be able
 * to specify the NgModel's name, you must specify it using the `ngModelOptions` input instead.
 *
 * ```html
 * <form>
 *   <my-custom-form-control name="Nancy" ngModel [ngModelOptions]="{name: 'user'}">
 *   </my-custom-form-control>
 * </form>
 * <!-- form value: {user: ''} -->
 * ```
 *
 * @ngModule FormsModule
 * @publicApi
 */
let NgModel = /*#__PURE__*/(() => {
  class NgModel extends NgControl {
    constructor(parent, validators, asyncValidators, valueAccessors, _changeDetectorRef, callSetDisabledState) {
      super();
      this._changeDetectorRef = _changeDetectorRef;
      this.callSetDisabledState = callSetDisabledState;
      this.control = new FormControl();
      /** @internal */
      this._registered = false;
      /**
       * @description
       * Tracks the name bound to the directive. If a parent form exists, it
       * uses this name as a key to retrieve this control's value.
       */
      this.name = '';
      /**
       * @description
       * Event emitter for producing the `ngModelChange` event after
       * the view model updates.
       */
      this.update = new core_mjs_.EventEmitter();
      this._parent = parent;
      this._setValidators(validators);
      this._setAsyncValidators(asyncValidators);
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    /** @nodoc */
    ngOnChanges(changes) {
      this._checkForErrors();
      if (!this._registered || 'name' in changes) {
        if (this._registered) {
          this._checkName();
          if (this.formDirective) {
            // We can't call `formDirective.removeControl(this)`, because the `name` has already been
            // changed. We also can't reset the name temporarily since the logic in `removeControl`
            // is inside a promise and it won't run immediately. We work around it by giving it an
            // object with the same shape instead.
            const oldName = changes['name'].previousValue;
            this.formDirective.removeControl({
              name: oldName,
              path: this._getPath(oldName)
            });
          }
        }
        this._setUpControl();
      }
      if ('isDisabled' in changes) {
        this._updateDisabled(changes);
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        this._updateValue(this.model);
        this.viewModel = this.model;
      }
    }
    /** @nodoc */
    ngOnDestroy() {
      this.formDirective && this.formDirective.removeControl(this);
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */
    get path() {
      return this._getPath(this.name);
    }
    /**
     * @description
     * The top-level directive for this control if present, otherwise null.
     */
    get formDirective() {
      return this._parent ? this._parent.formDirective : null;
    }
    /**
     * @description
     * Sets the new value for the view model and emits an `ngModelChange` event.
     *
     * @param newValue The new value emitted by `ngModelChange`.
     */
    viewToModelUpdate(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    }
    _setUpControl() {
      this._setUpdateStrategy();
      this._isStandalone() ? this._setUpStandalone() : this.formDirective.addControl(this);
      this._registered = true;
    }
    _setUpdateStrategy() {
      if (this.options && this.options.updateOn != null) {
        this.control._updateOn = this.options.updateOn;
      }
    }
    _isStandalone() {
      return !this._parent || !!(this.options && this.options.standalone);
    }
    _setUpStandalone() {
      setUpControl(this.control, this, this.callSetDisabledState);
      this.control.updateValueAndValidity({
        emitEvent: false
      });
    }
    _checkForErrors() {
      if (!this._isStandalone()) {
        this._checkParentType();
      }
      this._checkName();
    }
    _checkParentType() {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (!(this._parent instanceof NgModelGroup) && this._parent instanceof AbstractFormGroupDirective) {
          throw formGroupNameException();
        } else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {
          throw modelParentException();
        }
      }
    }
    _checkName() {
      if (this.options && this.options.name) this.name = this.options.name;
      if (!this._isStandalone() && !this.name && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw missingNameException();
      }
    }
    _updateValue(value) {
      resolvedPromise.then(() => {
        this.control.setValue(value, {
          emitViewToModelChange: false
        });
        this._changeDetectorRef?.markForCheck();
      });
    }
    _updateDisabled(changes) {
      const disabledValue = changes['isDisabled'].currentValue;
      // checking for 0 to avoid breaking change
      const isDisabled = disabledValue !== 0 && (0,core_mjs_.booleanAttribute)(disabledValue);
      resolvedPromise.then(() => {
        if (isDisabled && !this.control.disabled) {
          this.control.disable();
        } else if (!isDisabled && this.control.disabled) {
          this.control.enable();
        }
        this._changeDetectorRef?.markForCheck();
      });
    }
    _getPath(controlName) {
      return this._parent ? controlPath(controlName, this._parent) : [controlName];
    }
    static #_ = this.ɵfac = function NgModel_Factory(t) {
      return new (t || NgModel)(core_mjs_["ɵɵdirectiveInject"](ControlContainer, 9), core_mjs_["ɵɵdirectiveInject"](NG_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ChangeDetectorRef, 8), core_mjs_["ɵɵdirectiveInject"](CALL_SET_DISABLED_STATE, 8));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: NgModel,
      selectors: [["", "ngModel", "", 3, "formControlName", "", 3, "formControl", ""]],
      inputs: {
        name: "name",
        isDisabled: [core_mjs_["ɵɵInputFlags"].None, "disabled", "isDisabled"],
        model: [core_mjs_["ɵɵInputFlags"].None, "ngModel", "model"],
        options: [core_mjs_["ɵɵInputFlags"].None, "ngModelOptions", "options"]
      },
      outputs: {
        update: "ngModelChange"
      },
      exportAs: ["ngModel"],
      features: [core_mjs_["ɵɵProvidersFeature"]([formControlBinding$1]), core_mjs_["ɵɵInheritDefinitionFeature"], core_mjs_["ɵɵNgOnChangesFeature"]]
    });
  }
  return NgModel;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * @description
 *
 * Adds `novalidate` attribute to all forms by default.
 *
 * `novalidate` is used to disable browser's native form validation.
 *
 * If you want to use native validation with Angular forms, just add `ngNativeValidate` attribute:
 *
 * ```
 * <form ngNativeValidate></form>
 * ```
 *
 * @publicApi
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 */
let ɵNgNoValidate = /*#__PURE__*/(() => {
  class ɵNgNoValidate {
    static #_ = this.ɵfac = function ɵNgNoValidate_Factory(t) {
      return new (t || ɵNgNoValidate)();
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: ɵNgNoValidate,
      selectors: [["form", 3, "ngNoForm", "", 3, "ngNativeValidate", ""]],
      hostAttrs: ["novalidate", ""]
    });
  }
  return ɵNgNoValidate;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const NUMBER_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => NumberValueAccessor),
  multi: true
};
/**
 * @description
 * The `ControlValueAccessor` for writing a number value and listening to number input changes.
 * The value accessor is used by the `FormControlDirective`, `FormControlName`, and `NgModel`
 * directives.
 *
 * @usageNotes
 *
 * ### Using a number input with a reactive form.
 *
 * The following example shows how to use a number input with a reactive form.
 *
 * ```ts
 * const totalCountControl = new FormControl();
 * ```
 *
 * ```
 * <input type="number" [formControl]="totalCountControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let NumberValueAccessor = /*#__PURE__*/(() => {
  class NumberValueAccessor extends BuiltInControlValueAccessor {
    /**
     * Sets the "value" property on the input element.
     * @nodoc
     */
    writeValue(value) {
      // The value needs to be normalized for IE9, otherwise it is set to 'null' when null
      const normalizedValue = value == null ? '' : value;
      this.setProperty('value', normalizedValue);
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */
    registerOnChange(fn) {
      this.onChange = value => {
        fn(value == '' ? null : parseFloat(value));
      };
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵNumberValueAccessor_BaseFactory;
      return function NumberValueAccessor_Factory(t) {
        return (ɵNumberValueAccessor_BaseFactory || (ɵNumberValueAccessor_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](NumberValueAccessor)))(t || NumberValueAccessor);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: NumberValueAccessor,
      selectors: [["input", "type", "number", "formControlName", ""], ["input", "type", "number", "formControl", ""], ["input", "type", "number", "ngModel", ""]],
      hostBindings: function NumberValueAccessor_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("input", function NumberValueAccessor_input_HostBindingHandler($event) {
            return ctx.onChange($event.target.value);
          })("blur", function NumberValueAccessor_blur_HostBindingHandler() {
            return ctx.onTouched();
          });
        }
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([NUMBER_VALUE_ACCESSOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return NumberValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const RADIO_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => RadioControlValueAccessor),
  multi: true
};
function throwNameError() {
  throw new core_mjs_["ɵRuntimeError"](1202 /* RuntimeErrorCode.NAME_AND_FORM_CONTROL_NAME_MUST_MATCH */, `
      If you define both a name and a formControlName attribute on your radio button, their values
      must match. Ex: <input type="radio" formControlName="food" name="food">
    `);
}
/**
 * @description
 * Class used by Angular to track radio buttons. For internal use only.
 */
let RadioControlRegistry = /*#__PURE__*/(() => {
  class RadioControlRegistry {
    constructor() {
      this._accessors = [];
    }
    /**
     * @description
     * Adds a control to the internal registry. For internal use only.
     */
    add(control, accessor) {
      this._accessors.push([control, accessor]);
    }
    /**
     * @description
     * Removes a control from the internal registry. For internal use only.
     */
    remove(accessor) {
      for (let i = this._accessors.length - 1; i >= 0; --i) {
        if (this._accessors[i][1] === accessor) {
          this._accessors.splice(i, 1);
          return;
        }
      }
    }
    /**
     * @description
     * Selects a radio button. For internal use only.
     */
    select(accessor) {
      this._accessors.forEach(c => {
        if (this._isSameGroup(c, accessor) && c[1] !== accessor) {
          c[1].fireUncheck(accessor.value);
        }
      });
    }
    _isSameGroup(controlPair, accessor) {
      if (!controlPair[0].control) return false;
      return controlPair[0]._parent === accessor._control._parent && controlPair[1].name === accessor.name;
    }
    static #_ = this.ɵfac = function RadioControlRegistry_Factory(t) {
      return new (t || RadioControlRegistry)();
    };
    static #_2 = this.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
      token: RadioControlRegistry,
      factory: RadioControlRegistry.ɵfac,
      providedIn: 'root'
    });
  }
  return RadioControlRegistry;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * The `ControlValueAccessor` for writing radio control values and listening to radio control
 * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @usageNotes
 *
 * ### Using radio buttons with reactive form directives
 *
 * The follow example shows how to use radio buttons in a reactive form. When using radio buttons in
 * a reactive form, radio buttons in the same group should have the same `formControlName`.
 * Providing a `name` attribute is optional.
 *
 * {@example forms/ts/reactiveRadioButtons/reactive_radio_button_example.ts region='Reactive'}
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let RadioControlValueAccessor = /*#__PURE__*/(() => {
  class RadioControlValueAccessor extends BuiltInControlValueAccessor {
    constructor(renderer, elementRef, _registry, _injector) {
      super(renderer, elementRef);
      this._registry = _registry;
      this._injector = _injector;
      this.setDisabledStateFired = false;
      /**
       * The registered callback function called when a change event occurs on the input element.
       * Note: we declare `onChange` here (also used as host listener) as a function with no arguments
       * to override the `onChange` function (which expects 1 argument) in the parent
       * `BaseControlValueAccessor` class.
       * @nodoc
       */
      this.onChange = () => {};
      this.callSetDisabledState = (0,core_mjs_.inject)(CALL_SET_DISABLED_STATE, {
        optional: true
      }) ?? setDisabledStateDefault;
    }
    /** @nodoc */
    ngOnInit() {
      this._control = this._injector.get(NgControl);
      this._checkName();
      this._registry.add(this._control, this);
    }
    /** @nodoc */
    ngOnDestroy() {
      this._registry.remove(this);
    }
    /**
     * Sets the "checked" property value on the radio input element.
     * @nodoc
     */
    writeValue(value) {
      this._state = value === this.value;
      this.setProperty('checked', this._state);
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */
    registerOnChange(fn) {
      this._fn = fn;
      this.onChange = () => {
        fn(this.value);
        this._registry.select(this);
      };
    }
    /** @nodoc */
    setDisabledState(isDisabled) {
      /**
       * `setDisabledState` is supposed to be called whenever the disabled state of a control changes,
       * including upon control creation. However, a longstanding bug caused the method to not fire
       * when an *enabled* control was attached. This bug was fixed in v15 in #47576.
       *
       * This had a side effect: previously, it was possible to instantiate a reactive form control
       * with `[attr.disabled]=true`, even though the corresponding control was enabled in the
       * model. This resulted in a mismatch between the model and the DOM. Now, because
       * `setDisabledState` is always called, the value in the DOM will be immediately overwritten
       * with the "correct" enabled value.
       *
       * However, the fix also created an exceptional case: radio buttons. Because Reactive Forms
       * models the entire group of radio buttons as a single `FormControl`, there is no way to
       * control the disabled state for individual radios, so they can no longer be configured as
       * disabled. Thus, we keep the old behavior for radio buttons, so that `[attr.disabled]`
       * continues to work. Specifically, we drop the first call to `setDisabledState` if `disabled`
       * is `false`, and we are not in legacy mode.
       */
      if (this.setDisabledStateFired || isDisabled || this.callSetDisabledState === 'whenDisabledForLegacyCode') {
        this.setProperty('disabled', isDisabled);
      }
      this.setDisabledStateFired = true;
    }
    /**
     * Sets the "value" on the radio input element and unchecks it.
     *
     * @param value
     */
    fireUncheck(value) {
      this.writeValue(value);
    }
    _checkName() {
      if (this.name && this.formControlName && this.name !== this.formControlName && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throwNameError();
      }
      if (!this.name && this.formControlName) this.name = this.formControlName;
    }
    static #_ = this.ɵfac = function RadioControlValueAccessor_Factory(t) {
      return new (t || RadioControlValueAccessor)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.Renderer2), core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](RadioControlRegistry), core_mjs_["ɵɵdirectiveInject"](core_mjs_.Injector));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: RadioControlValueAccessor,
      selectors: [["input", "type", "radio", "formControlName", ""], ["input", "type", "radio", "formControl", ""], ["input", "type", "radio", "ngModel", ""]],
      hostBindings: function RadioControlValueAccessor_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("change", function RadioControlValueAccessor_change_HostBindingHandler() {
            return ctx.onChange();
          })("blur", function RadioControlValueAccessor_blur_HostBindingHandler() {
            return ctx.onTouched();
          });
        }
      },
      inputs: {
        name: "name",
        formControlName: "formControlName",
        value: "value"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([RADIO_VALUE_ACCESSOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return RadioControlValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const RANGE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => RangeValueAccessor),
  multi: true
};
/**
 * @description
 * The `ControlValueAccessor` for writing a range value and listening to range input changes.
 * The value accessor is used by the `FormControlDirective`, `FormControlName`, and  `NgModel`
 * directives.
 *
 * @usageNotes
 *
 * ### Using a range input with a reactive form
 *
 * The following example shows how to use a range input with a reactive form.
 *
 * ```ts
 * const ageControl = new FormControl();
 * ```
 *
 * ```
 * <input type="range" [formControl]="ageControl">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let RangeValueAccessor = /*#__PURE__*/(() => {
  class RangeValueAccessor extends BuiltInControlValueAccessor {
    /**
     * Sets the "value" property on the input element.
     * @nodoc
     */
    writeValue(value) {
      this.setProperty('value', parseFloat(value));
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */
    registerOnChange(fn) {
      this.onChange = value => {
        fn(value == '' ? null : parseFloat(value));
      };
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵRangeValueAccessor_BaseFactory;
      return function RangeValueAccessor_Factory(t) {
        return (ɵRangeValueAccessor_BaseFactory || (ɵRangeValueAccessor_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](RangeValueAccessor)))(t || RangeValueAccessor);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: RangeValueAccessor,
      selectors: [["input", "type", "range", "formControlName", ""], ["input", "type", "range", "formControl", ""], ["input", "type", "range", "ngModel", ""]],
      hostBindings: function RangeValueAccessor_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("change", function RangeValueAccessor_change_HostBindingHandler($event) {
            return ctx.onChange($event.target.value);
          })("input", function RangeValueAccessor_input_HostBindingHandler($event) {
            return ctx.onChange($event.target.value);
          })("blur", function RangeValueAccessor_blur_HostBindingHandler() {
            return ctx.onTouched();
          });
        }
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([RANGE_VALUE_ACCESSOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return RangeValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Token to provide to turn off the ngModel warning on formControl and formControlName.
 */
const NG_MODEL_WITH_FORM_CONTROL_WARNING = /*#__PURE__*/new core_mjs_.InjectionToken(ngDevMode ? 'NgModelWithFormControlWarning' : '');
const formControlBinding = {
  provide: NgControl,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => FormControlDirective)
};
/**
 * @description
 * Synchronizes a standalone `FormControl` instance to a form control element.
 *
 * Note that support for using the `ngModel` input property and `ngModelChange` event with reactive
 * form directives was deprecated in Angular v6 and is scheduled for removal in
 * a future version of Angular.
 * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see {@link FormControl}
 * @see {@link AbstractControl}
 *
 * @usageNotes
 *
 * The following example shows how to register a standalone control and set its value.
 *
 * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
let FormControlDirective = /*#__PURE__*/(() => {
  class FormControlDirective extends NgControl {
    /**
     * @description
     * Triggers a warning in dev mode that this input should not be used with reactive forms.
     */
    set isDisabled(isDisabled) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        console.warn(disabledAttrWarning);
      }
    }
    /**
     * @description
     * Static property used to track whether any ngModel warnings have been sent across
     * all instances of FormControlDirective. Used to support warning config of "once".
     *
     * @internal
     */
    static #_ = this._ngModelWarningSentOnce = false;
    constructor(validators, asyncValidators, valueAccessors, _ngModelWarningConfig, callSetDisabledState) {
      super();
      this._ngModelWarningConfig = _ngModelWarningConfig;
      this.callSetDisabledState = callSetDisabledState;
      /** @deprecated as of v6 */
      this.update = new core_mjs_.EventEmitter();
      /**
       * @description
       * Instance property used to track whether an ngModel warning has been sent out for this
       * particular `FormControlDirective` instance. Used to support warning config of "always".
       *
       * @internal
       */
      this._ngModelWarningSent = false;
      this._setValidators(validators);
      this._setAsyncValidators(asyncValidators);
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    /** @nodoc */
    ngOnChanges(changes) {
      if (this._isControlChanged(changes)) {
        const previousForm = changes['form'].previousValue;
        if (previousForm) {
          cleanUpControl(previousForm, this, /* validateControlPresenceOnChange */false);
        }
        setUpControl(this.form, this, this.callSetDisabledState);
        this.form.updateValueAndValidity({
          emitEvent: false
        });
      }
      if (isPropertyUpdated(changes, this.viewModel)) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          _ngModelWarning('formControl', FormControlDirective, this, this._ngModelWarningConfig);
        }
        this.form.setValue(this.model);
        this.viewModel = this.model;
      }
    }
    /** @nodoc */
    ngOnDestroy() {
      if (this.form) {
        cleanUpControl(this.form, this, /* validateControlPresenceOnChange */false);
      }
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */
    get path() {
      return [];
    }
    /**
     * @description
     * The `FormControl` bound to this directive.
     */
    get control() {
      return this.form;
    }
    /**
     * @description
     * Sets the new value for the view model and emits an `ngModelChange` event.
     *
     * @param newValue The new value for the view model.
     */
    viewToModelUpdate(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    }
    _isControlChanged(changes) {
      return changes.hasOwnProperty('form');
    }
    static #_2 = this.ɵfac = function FormControlDirective_Factory(t) {
      return new (t || FormControlDirective)(core_mjs_["ɵɵdirectiveInject"](NG_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), core_mjs_["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8), core_mjs_["ɵɵdirectiveInject"](CALL_SET_DISABLED_STATE, 8));
    };
    static #_3 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: FormControlDirective,
      selectors: [["", "formControl", ""]],
      inputs: {
        form: [core_mjs_["ɵɵInputFlags"].None, "formControl", "form"],
        isDisabled: [core_mjs_["ɵɵInputFlags"].None, "disabled", "isDisabled"],
        model: [core_mjs_["ɵɵInputFlags"].None, "ngModel", "model"]
      },
      outputs: {
        update: "ngModelChange"
      },
      exportAs: ["ngForm"],
      features: [core_mjs_["ɵɵProvidersFeature"]([formControlBinding]), core_mjs_["ɵɵInheritDefinitionFeature"], core_mjs_["ɵɵNgOnChangesFeature"]]
    });
  }
  return FormControlDirective;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const formDirectiveProvider = {
  provide: ControlContainer,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => FormGroupDirective)
};
/**
 * @description
 *
 * Binds an existing `FormGroup` or `FormRecord` to a DOM element.
 *
 * This directive accepts an existing `FormGroup` instance. It will then use this
 * `FormGroup` instance to match any child `FormControl`, `FormGroup`/`FormRecord`,
 * and `FormArray` instances to child `FormControlName`, `FormGroupName`,
 * and `FormArrayName` directives.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see {@link AbstractControl}
 *
 * @usageNotes
 * ### Register Form Group
 *
 * The following example registers a `FormGroup` with first name and last name controls,
 * and listens for the *ngSubmit* event when the button is clicked.
 *
 * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
let FormGroupDirective = /*#__PURE__*/(() => {
  class FormGroupDirective extends ControlContainer {
    constructor(validators, asyncValidators, callSetDisabledState) {
      super();
      this.callSetDisabledState = callSetDisabledState;
      /**
       * @description
       * Reports whether the form submission has been triggered.
       */
      this.submitted = false;
      /**
       * Callback that should be invoked when controls in FormGroup or FormArray collection change
       * (added or removed). This callback triggers corresponding DOM updates.
       */
      this._onCollectionChange = () => this._updateDomValue();
      /**
       * @description
       * Tracks the list of added `FormControlName` instances
       */
      this.directives = [];
      /**
       * @description
       * Tracks the `FormGroup` bound to this directive.
       */
      this.form = null;
      /**
       * @description
       * Emits an event when the form submission has been triggered.
       */
      this.ngSubmit = new core_mjs_.EventEmitter();
      this._setValidators(validators);
      this._setAsyncValidators(asyncValidators);
    }
    /** @nodoc */
    ngOnChanges(changes) {
      this._checkFormPresent();
      if (changes.hasOwnProperty('form')) {
        this._updateValidators();
        this._updateDomValue();
        this._updateRegistrations();
        this._oldForm = this.form;
      }
    }
    /** @nodoc */
    ngOnDestroy() {
      if (this.form) {
        cleanUpValidators(this.form, this);
        // Currently the `onCollectionChange` callback is rewritten each time the
        // `_registerOnCollectionChange` function is invoked. The implication is that cleanup should
        // happen *only* when the `onCollectionChange` callback was set by this directive instance.
        // Otherwise it might cause overriding a callback of some other directive instances. We should
        // consider updating this logic later to make it similar to how `onChange` callbacks are
        // handled, see https://github.com/angular/angular/issues/39732 for additional info.
        if (this.form._onCollectionChange === this._onCollectionChange) {
          this.form._registerOnCollectionChange(() => {});
        }
      }
    }
    /**
     * @description
     * Returns this directive's instance.
     */
    get formDirective() {
      return this;
    }
    /**
     * @description
     * Returns the `FormGroup` bound to this directive.
     */
    get control() {
      return this.form;
    }
    /**
     * @description
     * Returns an array representing the path to this group. Because this directive
     * always lives at the top level of a form, it always an empty array.
     */
    get path() {
      return [];
    }
    /**
     * @description
     * Method that sets up the control directive in this group, re-calculates its value
     * and validity, and adds the instance to the internal list of directives.
     *
     * @param dir The `FormControlName` directive instance.
     */
    addControl(dir) {
      const ctrl = this.form.get(dir.path);
      setUpControl(ctrl, dir, this.callSetDisabledState);
      ctrl.updateValueAndValidity({
        emitEvent: false
      });
      this.directives.push(dir);
      return ctrl;
    }
    /**
     * @description
     * Retrieves the `FormControl` instance from the provided `FormControlName` directive
     *
     * @param dir The `FormControlName` directive instance.
     */
    getControl(dir) {
      return this.form.get(dir.path);
    }
    /**
     * @description
     * Removes the `FormControlName` instance from the internal list of directives
     *
     * @param dir The `FormControlName` directive instance.
     */
    removeControl(dir) {
      cleanUpControl(dir.control || null, dir, /* validateControlPresenceOnChange */false);
      removeListItem$1(this.directives, dir);
    }
    /**
     * Adds a new `FormGroupName` directive instance to the form.
     *
     * @param dir The `FormGroupName` directive instance.
     */
    addFormGroup(dir) {
      this._setUpFormContainer(dir);
    }
    /**
     * Performs the necessary cleanup when a `FormGroupName` directive instance is removed from the
     * view.
     *
     * @param dir The `FormGroupName` directive instance.
     */
    removeFormGroup(dir) {
      this._cleanUpFormContainer(dir);
    }
    /**
     * @description
     * Retrieves the `FormGroup` for a provided `FormGroupName` directive instance
     *
     * @param dir The `FormGroupName` directive instance.
     */
    getFormGroup(dir) {
      return this.form.get(dir.path);
    }
    /**
     * Performs the necessary setup when a `FormArrayName` directive instance is added to the view.
     *
     * @param dir The `FormArrayName` directive instance.
     */
    addFormArray(dir) {
      this._setUpFormContainer(dir);
    }
    /**
     * Performs the necessary cleanup when a `FormArrayName` directive instance is removed from the
     * view.
     *
     * @param dir The `FormArrayName` directive instance.
     */
    removeFormArray(dir) {
      this._cleanUpFormContainer(dir);
    }
    /**
     * @description
     * Retrieves the `FormArray` for a provided `FormArrayName` directive instance.
     *
     * @param dir The `FormArrayName` directive instance.
     */
    getFormArray(dir) {
      return this.form.get(dir.path);
    }
    /**
     * Sets the new value for the provided `FormControlName` directive.
     *
     * @param dir The `FormControlName` directive instance.
     * @param value The new value for the directive's control.
     */
    updateModel(dir, value) {
      const ctrl = this.form.get(dir.path);
      ctrl.setValue(value);
    }
    /**
     * @description
     * Method called with the "submit" event is triggered on the form.
     * Triggers the `ngSubmit` emitter to emit the "submit" event as its payload.
     *
     * @param $event The "submit" event object
     */
    onSubmit($event) {
      this.submitted = true;
      syncPendingControls(this.form, this.directives);
      this.ngSubmit.emit($event);
      // Forms with `method="dialog"` have some special behavior that won't reload the page and that
      // shouldn't be prevented. Note that we need to null check the `event` and the `target`, because
      // some internal apps call this method directly with the wrong arguments.
      return $event?.target?.method === 'dialog';
    }
    /**
     * @description
     * Method called when the "reset" event is triggered on the form.
     */
    onReset() {
      this.resetForm();
    }
    /**
     * @description
     * Resets the form to an initial value and resets its submitted status.
     *
     * @param value The new value for the form.
     */
    resetForm(value = undefined) {
      this.form.reset(value);
      this.submitted = false;
    }
    /** @internal */
    _updateDomValue() {
      this.directives.forEach(dir => {
        const oldCtrl = dir.control;
        const newCtrl = this.form.get(dir.path);
        if (oldCtrl !== newCtrl) {
          // Note: the value of the `dir.control` may not be defined, for example when it's a first
          // `FormControl` that is added to a `FormGroup` instance (via `addControl` call).
          cleanUpControl(oldCtrl || null, dir);
          // Check whether new control at the same location inside the corresponding `FormGroup` is an
          // instance of `FormControl` and perform control setup only if that's the case.
          // Note: we don't need to clear the list of directives (`this.directives`) here, it would be
          // taken care of in the `removeControl` method invoked when corresponding `formControlName`
          // directive instance is being removed (invoked from `FormControlName.ngOnDestroy`).
          if (isFormControl(newCtrl)) {
            setUpControl(newCtrl, dir, this.callSetDisabledState);
            dir.control = newCtrl;
          }
        }
      });
      this.form._updateTreeValidity({
        emitEvent: false
      });
    }
    _setUpFormContainer(dir) {
      const ctrl = this.form.get(dir.path);
      setUpFormContainer(ctrl, dir);
      // NOTE: this operation looks unnecessary in case no new validators were added in
      // `setUpFormContainer` call. Consider updating this code to match the logic in
      // `_cleanUpFormContainer` function.
      ctrl.updateValueAndValidity({
        emitEvent: false
      });
    }
    _cleanUpFormContainer(dir) {
      if (this.form) {
        const ctrl = this.form.get(dir.path);
        if (ctrl) {
          const isControlUpdated = cleanUpFormContainer(ctrl, dir);
          if (isControlUpdated) {
            // Run validity check only in case a control was updated (i.e. view validators were
            // removed) as removing view validators might cause validity to change.
            ctrl.updateValueAndValidity({
              emitEvent: false
            });
          }
        }
      }
    }
    _updateRegistrations() {
      this.form._registerOnCollectionChange(this._onCollectionChange);
      if (this._oldForm) {
        this._oldForm._registerOnCollectionChange(() => {});
      }
    }
    _updateValidators() {
      setUpValidators(this.form, this);
      if (this._oldForm) {
        cleanUpValidators(this._oldForm, this);
      }
    }
    _checkFormPresent() {
      if (!this.form && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw missingFormException();
      }
    }
    static #_ = this.ɵfac = function FormGroupDirective_Factory(t) {
      return new (t || FormGroupDirective)(core_mjs_["ɵɵdirectiveInject"](NG_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](CALL_SET_DISABLED_STATE, 8));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: FormGroupDirective,
      selectors: [["", "formGroup", ""]],
      hostBindings: function FormGroupDirective_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("submit", function FormGroupDirective_submit_HostBindingHandler($event) {
            return ctx.onSubmit($event);
          })("reset", function FormGroupDirective_reset_HostBindingHandler() {
            return ctx.onReset();
          });
        }
      },
      inputs: {
        form: [core_mjs_["ɵɵInputFlags"].None, "formGroup", "form"]
      },
      outputs: {
        ngSubmit: "ngSubmit"
      },
      exportAs: ["ngForm"],
      features: [core_mjs_["ɵɵProvidersFeature"]([formDirectiveProvider]), core_mjs_["ɵɵInheritDefinitionFeature"], core_mjs_["ɵɵNgOnChangesFeature"]]
    });
  }
  return FormGroupDirective;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const formGroupNameProvider = {
  provide: ControlContainer,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => FormGroupName)
};
/**
 * @description
 *
 * Syncs a nested `FormGroup` or `FormRecord` to a DOM element.
 *
 * This directive can only be used with a parent `FormGroupDirective`.
 *
 * It accepts the string name of the nested `FormGroup` or `FormRecord` to link, and
 * looks for a `FormGroup` or `FormRecord` registered with that name in the parent
 * `FormGroup` instance you passed into `FormGroupDirective`.
 *
 * Use nested form groups to validate a sub-group of a
 * form separately from the rest or to group the values of certain
 * controls into their own nested object.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 *
 * @usageNotes
 *
 * ### Access the group by name
 *
 * The following example uses the `AbstractControl.get` method to access the
 * associated `FormGroup`
 *
 * ```ts
 *   this.form.get('name');
 * ```
 *
 * ### Access individual controls in the group
 *
 * The following example uses the `AbstractControl.get` method to access
 * individual controls within the group using dot syntax.
 *
 * ```ts
 *   this.form.get('name.first');
 * ```
 *
 * ### Register a nested `FormGroup`.
 *
 * The following example registers a nested *name* `FormGroup` within an existing `FormGroup`,
 * and provides methods to retrieve the nested `FormGroup` and individual controls.
 *
 * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
let FormGroupName = /*#__PURE__*/(() => {
  class FormGroupName extends AbstractFormGroupDirective {
    constructor(parent, validators, asyncValidators) {
      super();
      /**
       * @description
       * Tracks the name of the `FormGroup` bound to the directive. The name corresponds
       * to a key in the parent `FormGroup` or `FormArray`.
       * Accepts a name as a string or a number.
       * The name in the form of a string is useful for individual forms,
       * while the numerical form allows for form groups to be bound
       * to indices when iterating over groups in a `FormArray`.
       */
      this.name = null;
      this._parent = parent;
      this._setValidators(validators);
      this._setAsyncValidators(asyncValidators);
    }
    /** @internal */
    _checkParentType() {
      if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw groupParentException();
      }
    }
    static #_ = this.ɵfac = function FormGroupName_Factory(t) {
      return new (t || FormGroupName)(core_mjs_["ɵɵdirectiveInject"](ControlContainer, 13), core_mjs_["ɵɵdirectiveInject"](NG_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: FormGroupName,
      selectors: [["", "formGroupName", ""]],
      inputs: {
        name: [core_mjs_["ɵɵInputFlags"].None, "formGroupName", "name"]
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([formGroupNameProvider]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return FormGroupName;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const formArrayNameProvider = {
  provide: ControlContainer,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => FormArrayName)
};
/**
 * @description
 *
 * Syncs a nested `FormArray` to a DOM element.
 *
 * This directive is designed to be used with a parent `FormGroupDirective` (selector:
 * `[formGroup]`).
 *
 * It accepts the string name of the nested `FormArray` you want to link, and
 * will look for a `FormArray` registered with that name in the parent
 * `FormGroup` instance you passed into `FormGroupDirective`.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see {@link AbstractControl}
 *
 * @usageNotes
 *
 * ### Example
 *
 * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
let FormArrayName = /*#__PURE__*/(() => {
  class FormArrayName extends ControlContainer {
    constructor(parent, validators, asyncValidators) {
      super();
      /**
       * @description
       * Tracks the name of the `FormArray` bound to the directive. The name corresponds
       * to a key in the parent `FormGroup` or `FormArray`.
       * Accepts a name as a string or a number.
       * The name in the form of a string is useful for individual forms,
       * while the numerical form allows for form arrays to be bound
       * to indices when iterating over arrays in a `FormArray`.
       */
      this.name = null;
      this._parent = parent;
      this._setValidators(validators);
      this._setAsyncValidators(asyncValidators);
    }
    /**
     * A lifecycle method called when the directive's inputs are initialized. For internal use only.
     * @throws If the directive does not have a valid parent.
     * @nodoc
     */
    ngOnInit() {
      this._checkParentType();
      this.formDirective.addFormArray(this);
    }
    /**
     * A lifecycle method called before the directive's instance is destroyed. For internal use only.
     * @nodoc
     */
    ngOnDestroy() {
      if (this.formDirective) {
        this.formDirective.removeFormArray(this);
      }
    }
    /**
     * @description
     * The `FormArray` bound to this directive.
     */
    get control() {
      return this.formDirective.getFormArray(this);
    }
    /**
     * @description
     * The top-level directive for this group if present, otherwise null.
     */
    get formDirective() {
      return this._parent ? this._parent.formDirective : null;
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */
    get path() {
      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
    }
    _checkParentType() {
      if (_hasInvalidParent(this._parent) && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw arrayParentException();
      }
    }
    static #_ = this.ɵfac = function FormArrayName_Factory(t) {
      return new (t || FormArrayName)(core_mjs_["ɵɵdirectiveInject"](ControlContainer, 13), core_mjs_["ɵɵdirectiveInject"](NG_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: FormArrayName,
      selectors: [["", "formArrayName", ""]],
      inputs: {
        name: [core_mjs_["ɵɵInputFlags"].None, "formArrayName", "name"]
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([formArrayNameProvider]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return FormArrayName;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
function _hasInvalidParent(parent) {
  return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) && !(parent instanceof FormArrayName);
}
const controlNameBinding = {
  provide: NgControl,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => FormControlName)
};
/**
 * @description
 * Syncs a `FormControl` in an existing `FormGroup` to a form control
 * element by name.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 * @see {@link FormControl}
 * @see {@link AbstractControl}
 *
 * @usageNotes
 *
 * ### Register `FormControl` within a group
 *
 * The following example shows how to register multiple form controls within a form group
 * and set their value.
 *
 * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}
 *
 * To see `formControlName` examples with different form control types, see:
 *
 * * Radio buttons: `RadioControlValueAccessor`
 * * Selects: `SelectControlValueAccessor`
 *
 * ### Use with ngModel is deprecated
 *
 * Support for using the `ngModel` input property and `ngModelChange` event with reactive
 * form directives has been deprecated in Angular v6 and is scheduled for removal in
 * a future version of Angular.
 *
 * For details, see [Deprecated features](guide/deprecations#ngmodel-with-reactive-forms).
 *
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
let FormControlName = /*#__PURE__*/(() => {
  class FormControlName extends NgControl {
    /**
     * @description
     * Triggers a warning in dev mode that this input should not be used with reactive forms.
     */
    set isDisabled(isDisabled) {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        console.warn(disabledAttrWarning);
      }
    }
    /**
     * @description
     * Static property used to track whether any ngModel warnings have been sent across
     * all instances of FormControlName. Used to support warning config of "once".
     *
     * @internal
     */
    static #_ = this._ngModelWarningSentOnce = false;
    constructor(parent, validators, asyncValidators, valueAccessors, _ngModelWarningConfig) {
      super();
      this._ngModelWarningConfig = _ngModelWarningConfig;
      this._added = false;
      /**
       * @description
       * Tracks the name of the `FormControl` bound to the directive. The name corresponds
       * to a key in the parent `FormGroup` or `FormArray`.
       * Accepts a name as a string or a number.
       * The name in the form of a string is useful for individual forms,
       * while the numerical form allows for form controls to be bound
       * to indices when iterating over controls in a `FormArray`.
       */
      this.name = null;
      /** @deprecated as of v6 */
      this.update = new core_mjs_.EventEmitter();
      /**
       * @description
       * Instance property used to track whether an ngModel warning has been sent out for this
       * particular FormControlName instance. Used to support warning config of "always".
       *
       * @internal
       */
      this._ngModelWarningSent = false;
      this._parent = parent;
      this._setValidators(validators);
      this._setAsyncValidators(asyncValidators);
      this.valueAccessor = selectValueAccessor(this, valueAccessors);
    }
    /** @nodoc */
    ngOnChanges(changes) {
      if (!this._added) this._setUpControl();
      if (isPropertyUpdated(changes, this.viewModel)) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
          _ngModelWarning('formControlName', FormControlName, this, this._ngModelWarningConfig);
        }
        this.viewModel = this.model;
        this.formDirective.updateModel(this, this.model);
      }
    }
    /** @nodoc */
    ngOnDestroy() {
      if (this.formDirective) {
        this.formDirective.removeControl(this);
      }
    }
    /**
     * @description
     * Sets the new value for the view model and emits an `ngModelChange` event.
     *
     * @param newValue The new value for the view model.
     */
    viewToModelUpdate(newValue) {
      this.viewModel = newValue;
      this.update.emit(newValue);
    }
    /**
     * @description
     * Returns an array that represents the path from the top-level form to this control.
     * Each index is the string name of the control on that level.
     */
    get path() {
      return controlPath(this.name == null ? this.name : this.name.toString(), this._parent);
    }
    /**
     * @description
     * The top-level directive for this group if present, otherwise null.
     */
    get formDirective() {
      return this._parent ? this._parent.formDirective : null;
    }
    _checkParentType() {
      if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (!(this._parent instanceof FormGroupName) && this._parent instanceof AbstractFormGroupDirective) {
          throw ngModelGroupException();
        } else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) && !(this._parent instanceof FormArrayName)) {
          throw controlParentException();
        }
      }
    }
    _setUpControl() {
      this._checkParentType();
      this.control = this.formDirective.addControl(this);
      this._added = true;
    }
    static #_2 = this.ɵfac = function FormControlName_Factory(t) {
      return new (t || FormControlName)(core_mjs_["ɵɵdirectiveInject"](ControlContainer, 13), core_mjs_["ɵɵdirectiveInject"](NG_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_ASYNC_VALIDATORS, 10), core_mjs_["ɵɵdirectiveInject"](NG_VALUE_ACCESSOR, 10), core_mjs_["ɵɵdirectiveInject"](NG_MODEL_WITH_FORM_CONTROL_WARNING, 8));
    };
    static #_3 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: FormControlName,
      selectors: [["", "formControlName", ""]],
      inputs: {
        name: [core_mjs_["ɵɵInputFlags"].None, "formControlName", "name"],
        isDisabled: [core_mjs_["ɵɵInputFlags"].None, "disabled", "isDisabled"],
        model: [core_mjs_["ɵɵInputFlags"].None, "ngModel", "model"]
      },
      outputs: {
        update: "ngModelChange"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([controlNameBinding]), core_mjs_["ɵɵInheritDefinitionFeature"], core_mjs_["ɵɵNgOnChangesFeature"]]
    });
  }
  return FormControlName;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const SELECT_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => SelectControlValueAccessor),
  multi: true
};
function _buildValueString$1(id, value) {
  if (id == null) return `${value}`;
  if (value && typeof value === 'object') value = 'Object';
  return `${id}: ${value}`.slice(0, 50);
}
function _extractId$1(valueString) {
  return valueString.split(':')[0];
}
/**
 * @description
 * The `ControlValueAccessor` for writing select control values and listening to select control
 * changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @usageNotes
 *
 * ### Using select controls in a reactive form
 *
 * The following examples show how to use a select control in a reactive form.
 *
 * {@example forms/ts/reactiveSelectControl/reactive_select_control_example.ts region='Component'}
 *
 * ### Using select controls in a template-driven form
 *
 * To use a select in a template-driven form, simply add an `ngModel` and a `name`
 * attribute to the main `<select>` tag.
 *
 * {@example forms/ts/selectControl/select_control_example.ts region='Component'}
 *
 * ### Customizing option selection
 *
 * Angular uses object identity to select option. It's possible for the identities of items
 * to change while the data does not. This can happen, for example, if the items are produced
 * from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the
 * second response will produce objects with different identities.
 *
 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
 * `compareWith` takes a **function** which has two arguments: `option1` and `option2`.
 * If `compareWith` is given, Angular selects option by the return value of the function.
 *
 * ```ts
 * const selectedCountriesControl = new FormControl();
 * ```
 *
 * ```
 * <select [compareWith]="compareFn"  [formControl]="selectedCountriesControl">
 *     <option *ngFor="let country of countries" [ngValue]="country">
 *         {{country.name}}
 *     </option>
 * </select>
 *
 * compareFn(c1: Country, c2: Country): boolean {
 *     return c1 && c2 ? c1.id === c2.id : c1 === c2;
 * }
 * ```
 *
 * **Note:** We listen to the 'change' event because 'input' events aren't fired
 * for selects in IE, see:
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event#browser_compatibility
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let SelectControlValueAccessor = /*#__PURE__*/(() => {
  class SelectControlValueAccessor extends BuiltInControlValueAccessor {
    constructor() {
      super(...arguments);
      /** @internal */
      this._optionMap = new Map();
      /** @internal */
      this._idCounter = 0;
      this._compareWith = Object.is;
    }
    /**
     * @description
     * Tracks the option comparison algorithm for tracking identities when
     * checking for changes.
     */
    set compareWith(fn) {
      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw new core_mjs_["ɵRuntimeError"](1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);
      }
      this._compareWith = fn;
    }
    /**
     * Sets the "value" property on the select element.
     * @nodoc
     */
    writeValue(value) {
      this.value = value;
      const id = this._getOptionId(value);
      const valueString = _buildValueString$1(id, value);
      this.setProperty('value', valueString);
    }
    /**
     * Registers a function called when the control value changes.
     * @nodoc
     */
    registerOnChange(fn) {
      this.onChange = valueString => {
        this.value = this._getOptionValue(valueString);
        fn(this.value);
      };
    }
    /** @internal */
    _registerOption() {
      return (this._idCounter++).toString();
    }
    /** @internal */
    _getOptionId(value) {
      for (const id of this._optionMap.keys()) {
        if (this._compareWith(this._optionMap.get(id), value)) return id;
      }
      return null;
    }
    /** @internal */
    _getOptionValue(valueString) {
      const id = _extractId$1(valueString);
      return this._optionMap.has(id) ? this._optionMap.get(id) : valueString;
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵSelectControlValueAccessor_BaseFactory;
      return function SelectControlValueAccessor_Factory(t) {
        return (ɵSelectControlValueAccessor_BaseFactory || (ɵSelectControlValueAccessor_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](SelectControlValueAccessor)))(t || SelectControlValueAccessor);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: SelectControlValueAccessor,
      selectors: [["select", "formControlName", "", 3, "multiple", ""], ["select", "formControl", "", 3, "multiple", ""], ["select", "ngModel", "", 3, "multiple", ""]],
      hostBindings: function SelectControlValueAccessor_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("change", function SelectControlValueAccessor_change_HostBindingHandler($event) {
            return ctx.onChange($event.target.value);
          })("blur", function SelectControlValueAccessor_blur_HostBindingHandler() {
            return ctx.onTouched();
          });
        }
      },
      inputs: {
        compareWith: "compareWith"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([SELECT_VALUE_ACCESSOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return SelectControlValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * @see {@link SelectControlValueAccessor}
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let NgSelectOption = /*#__PURE__*/(() => {
  class NgSelectOption {
    constructor(_element, _renderer, _select) {
      this._element = _element;
      this._renderer = _renderer;
      this._select = _select;
      if (this._select) this.id = this._select._registerOption();
    }
    /**
     * @description
     * Tracks the value bound to the option element. Unlike the value binding,
     * ngValue supports binding to objects.
     */
    set ngValue(value) {
      if (this._select == null) return;
      this._select._optionMap.set(this.id, value);
      this._setElementValue(_buildValueString$1(this.id, value));
      this._select.writeValue(this._select.value);
    }
    /**
     * @description
     * Tracks simple string values bound to the option element.
     * For objects, use the `ngValue` input binding.
     */
    set value(value) {
      this._setElementValue(value);
      if (this._select) this._select.writeValue(this._select.value);
    }
    /** @internal */
    _setElementValue(value) {
      this._renderer.setProperty(this._element.nativeElement, 'value', value);
    }
    /** @nodoc */
    ngOnDestroy() {
      if (this._select) {
        this._select._optionMap.delete(this.id);
        this._select.writeValue(this._select.value);
      }
    }
    static #_ = this.ɵfac = function NgSelectOption_Factory(t) {
      return new (t || NgSelectOption)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.Renderer2), core_mjs_["ɵɵdirectiveInject"](SelectControlValueAccessor, 9));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: NgSelectOption,
      selectors: [["option"]],
      inputs: {
        ngValue: "ngValue",
        value: "value"
      }
    });
  }
  return NgSelectOption;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const SELECT_MULTIPLE_VALUE_ACCESSOR = {
  provide: NG_VALUE_ACCESSOR,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => SelectMultipleControlValueAccessor),
  multi: true
};
function _buildValueString(id, value) {
  if (id == null) return `${value}`;
  if (typeof value === 'string') value = `'${value}'`;
  if (value && typeof value === 'object') value = 'Object';
  return `${id}: ${value}`.slice(0, 50);
}
function _extractId(valueString) {
  return valueString.split(':')[0];
}
/** Mock interface for HTMLCollection */
class HTMLCollection {}
/**
 * @description
 * The `ControlValueAccessor` for writing multi-select control values and listening to multi-select
 * control changes. The value accessor is used by the `FormControlDirective`, `FormControlName`, and
 * `NgModel` directives.
 *
 * @see {@link SelectControlValueAccessor}
 *
 * @usageNotes
 *
 * ### Using a multi-select control
 *
 * The follow example shows you how to use a multi-select control with a reactive form.
 *
 * ```ts
 * const countryControl = new FormControl();
 * ```
 *
 * ```
 * <select multiple name="countries" [formControl]="countryControl">
 *   <option *ngFor="let country of countries" [ngValue]="country">
 *     {{ country.name }}
 *   </option>
 * </select>
 * ```
 *
 * ### Customizing option selection
 *
 * To customize the default option comparison algorithm, `<select>` supports `compareWith` input.
 * See the `SelectControlValueAccessor` for usage.
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let SelectMultipleControlValueAccessor = /*#__PURE__*/(() => {
  class SelectMultipleControlValueAccessor extends BuiltInControlValueAccessor {
    constructor() {
      super(...arguments);
      /** @internal */
      this._optionMap = new Map();
      /** @internal */
      this._idCounter = 0;
      this._compareWith = Object.is;
    }
    /**
     * @description
     * Tracks the option comparison algorithm for tracking identities when
     * checking for changes.
     */
    set compareWith(fn) {
      if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {
        throw new core_mjs_["ɵRuntimeError"](1201 /* RuntimeErrorCode.COMPAREWITH_NOT_A_FN */, `compareWith must be a function, but received ${JSON.stringify(fn)}`);
      }
      this._compareWith = fn;
    }
    /**
     * Sets the "value" property on one or of more of the select's options.
     * @nodoc
     */
    writeValue(value) {
      this.value = value;
      let optionSelectedStateSetter;
      if (Array.isArray(value)) {
        // convert values to ids
        const ids = value.map(v => this._getOptionId(v));
        optionSelectedStateSetter = (opt, o) => {
          opt._setSelected(ids.indexOf(o.toString()) > -1);
        };
      } else {
        optionSelectedStateSetter = (opt, o) => {
          opt._setSelected(false);
        };
      }
      this._optionMap.forEach(optionSelectedStateSetter);
    }
    /**
     * Registers a function called when the control value changes
     * and writes an array of the selected options.
     * @nodoc
     */
    registerOnChange(fn) {
      this.onChange = element => {
        const selected = [];
        const selectedOptions = element.selectedOptions;
        if (selectedOptions !== undefined) {
          const options = selectedOptions;
          for (let i = 0; i < options.length; i++) {
            const opt = options[i];
            const val = this._getOptionValue(opt.value);
            selected.push(val);
          }
        }
        // Degrade to use `options` when `selectedOptions` property is not available.
        // Note: the `selectedOptions` is available in all supported browsers, but the Domino lib
        // doesn't have it currently, see https://github.com/fgnass/domino/issues/177.
        else {
          const options = element.options;
          for (let i = 0; i < options.length; i++) {
            const opt = options[i];
            if (opt.selected) {
              const val = this._getOptionValue(opt.value);
              selected.push(val);
            }
          }
        }
        this.value = selected;
        fn(selected);
      };
    }
    /** @internal */
    _registerOption(value) {
      const id = (this._idCounter++).toString();
      this._optionMap.set(id, value);
      return id;
    }
    /** @internal */
    _getOptionId(value) {
      for (const id of this._optionMap.keys()) {
        if (this._compareWith(this._optionMap.get(id)._value, value)) return id;
      }
      return null;
    }
    /** @internal */
    _getOptionValue(valueString) {
      const id = _extractId(valueString);
      return this._optionMap.has(id) ? this._optionMap.get(id)._value : valueString;
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵSelectMultipleControlValueAccessor_BaseFactory;
      return function SelectMultipleControlValueAccessor_Factory(t) {
        return (ɵSelectMultipleControlValueAccessor_BaseFactory || (ɵSelectMultipleControlValueAccessor_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](SelectMultipleControlValueAccessor)))(t || SelectMultipleControlValueAccessor);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: SelectMultipleControlValueAccessor,
      selectors: [["select", "multiple", "", "formControlName", ""], ["select", "multiple", "", "formControl", ""], ["select", "multiple", "", "ngModel", ""]],
      hostBindings: function SelectMultipleControlValueAccessor_HostBindings(rf, ctx) {
        if (rf & 1) {
          core_mjs_["ɵɵlistener"]("change", function SelectMultipleControlValueAccessor_change_HostBindingHandler($event) {
            return ctx.onChange($event.target);
          })("blur", function SelectMultipleControlValueAccessor_blur_HostBindingHandler() {
            return ctx.onTouched();
          });
        }
      },
      inputs: {
        compareWith: "compareWith"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([SELECT_MULTIPLE_VALUE_ACCESSOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return SelectMultipleControlValueAccessor;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Marks `<option>` as dynamic, so Angular can be notified when options change.
 *
 * @see {@link SelectMultipleControlValueAccessor}
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let ɵNgSelectMultipleOption = /*#__PURE__*/(() => {
  class ɵNgSelectMultipleOption {
    constructor(_element, _renderer, _select) {
      this._element = _element;
      this._renderer = _renderer;
      this._select = _select;
      if (this._select) {
        this.id = this._select._registerOption(this);
      }
    }
    /**
     * @description
     * Tracks the value bound to the option element. Unlike the value binding,
     * ngValue supports binding to objects.
     */
    set ngValue(value) {
      if (this._select == null) return;
      this._value = value;
      this._setElementValue(_buildValueString(this.id, value));
      this._select.writeValue(this._select.value);
    }
    /**
     * @description
     * Tracks simple string values bound to the option element.
     * For objects, use the `ngValue` input binding.
     */
    set value(value) {
      if (this._select) {
        this._value = value;
        this._setElementValue(_buildValueString(this.id, value));
        this._select.writeValue(this._select.value);
      } else {
        this._setElementValue(value);
      }
    }
    /** @internal */
    _setElementValue(value) {
      this._renderer.setProperty(this._element.nativeElement, 'value', value);
    }
    /** @internal */
    _setSelected(selected) {
      this._renderer.setProperty(this._element.nativeElement, 'selected', selected);
    }
    /** @nodoc */
    ngOnDestroy() {
      if (this._select) {
        this._select._optionMap.delete(this.id);
        this._select.writeValue(this._select.value);
      }
    }
    static #_ = this.ɵfac = function ɵNgSelectMultipleOption_Factory(t) {
      return new (t || ɵNgSelectMultipleOption)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](core_mjs_.Renderer2), core_mjs_["ɵɵdirectiveInject"](SelectMultipleControlValueAccessor, 9));
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: ɵNgSelectMultipleOption,
      selectors: [["option"]],
      inputs: {
        ngValue: "ngValue",
        value: "value"
      }
    });
  }
  return ɵNgSelectMultipleOption;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Method that updates string to integer if not already a number
 *
 * @param value The value to convert to integer.
 * @returns value of parameter converted to number or integer.
 */
function toInteger(value) {
  return typeof value === 'number' ? value : parseInt(value, 10);
}
/**
 * Method that ensures that provided value is a float (and converts it to float if needed).
 *
 * @param value The value to convert to float.
 * @returns value of parameter converted to number or float.
 */
function toFloat(value) {
  return typeof value === 'number' ? value : parseFloat(value);
}
/**
 * A base class for Validator-based Directives. The class contains common logic shared across such
 * Directives.
 *
 * For internal use only, this class is not intended for use outside of the Forms package.
 */
let AbstractValidatorDirective = /*#__PURE__*/(() => {
  class AbstractValidatorDirective {
    constructor() {
      this._validator = nullValidator;
    }
    /** @nodoc */
    ngOnChanges(changes) {
      if (this.inputName in changes) {
        const input = this.normalizeInput(changes[this.inputName].currentValue);
        this._enabled = this.enabled(input);
        this._validator = this._enabled ? this.createValidator(input) : nullValidator;
        if (this._onChange) {
          this._onChange();
        }
      }
    }
    /** @nodoc */
    validate(control) {
      return this._validator(control);
    }
    /** @nodoc */
    registerOnValidatorChange(fn) {
      this._onChange = fn;
    }
    /**
     * @description
     * Determines whether this validator should be active or not based on an input.
     * Base class implementation checks whether an input is defined (if the value is different from
     * `null` and `undefined`). Validator classes that extend this base class can override this
     * function with the logic specific to a particular validator directive.
     */
    enabled(input) {
      return input != null /* both `null` and `undefined` */;
    }
    static #_ = this.ɵfac = function AbstractValidatorDirective_Factory(t) {
      return new (t || AbstractValidatorDirective)();
    };
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: AbstractValidatorDirective,
      features: [core_mjs_["ɵɵNgOnChangesFeature"]]
    });
  }
  return AbstractValidatorDirective;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Provider which adds `MaxValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const MAX_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => MaxValidator),
  multi: true
};
/**
 * A directive which installs the {@link MaxValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `max` attribute.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a max validator
 *
 * The following example shows how to add a max validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input type="number" ngModel max="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let MaxValidator = /*#__PURE__*/(() => {
  class MaxValidator extends AbstractValidatorDirective {
    constructor() {
      super(...arguments);
      /** @internal */
      this.inputName = 'max';
      /** @internal */
      this.normalizeInput = input => toFloat(input);
      /** @internal */
      this.createValidator = max => maxValidator(max);
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵMaxValidator_BaseFactory;
      return function MaxValidator_Factory(t) {
        return (ɵMaxValidator_BaseFactory || (ɵMaxValidator_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](MaxValidator)))(t || MaxValidator);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: MaxValidator,
      selectors: [["input", "type", "number", "max", "", "formControlName", ""], ["input", "type", "number", "max", "", "formControl", ""], ["input", "type", "number", "max", "", "ngModel", ""]],
      hostVars: 1,
      hostBindings: function MaxValidator_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵattribute"]("max", ctx._enabled ? ctx.max : null);
        }
      },
      inputs: {
        max: "max"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([MAX_VALIDATOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return MaxValidator;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Provider which adds `MinValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const MIN_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => MinValidator),
  multi: true
};
/**
 * A directive which installs the {@link MinValidator} for any `formControlName`,
 * `formControl`, or control with `ngModel` that also has a `min` attribute.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a min validator
 *
 * The following example shows how to add a min validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input type="number" ngModel min="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let MinValidator = /*#__PURE__*/(() => {
  class MinValidator extends AbstractValidatorDirective {
    constructor() {
      super(...arguments);
      /** @internal */
      this.inputName = 'min';
      /** @internal */
      this.normalizeInput = input => toFloat(input);
      /** @internal */
      this.createValidator = min => minValidator(min);
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵMinValidator_BaseFactory;
      return function MinValidator_Factory(t) {
        return (ɵMinValidator_BaseFactory || (ɵMinValidator_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](MinValidator)))(t || MinValidator);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: MinValidator,
      selectors: [["input", "type", "number", "min", "", "formControlName", ""], ["input", "type", "number", "min", "", "formControl", ""], ["input", "type", "number", "min", "", "ngModel", ""]],
      hostVars: 1,
      hostBindings: function MinValidator_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵattribute"]("min", ctx._enabled ? ctx.min : null);
        }
      },
      inputs: {
        min: "min"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([MIN_VALIDATOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return MinValidator;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Provider which adds `RequiredValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const REQUIRED_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => RequiredValidator),
  multi: true
};
/**
 * @description
 * Provider which adds `CheckboxRequiredValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const CHECKBOX_REQUIRED_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => CheckboxRequiredValidator),
  multi: true
};
/**
 * @description
 * A directive that adds the `required` validator to any controls marked with the
 * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a required validator using template-driven forms
 *
 * ```
 * <input name="fullName" ngModel required>
 * ```
 *
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 * @publicApi
 */
let RequiredValidator = /*#__PURE__*/(() => {
  class RequiredValidator extends AbstractValidatorDirective {
    constructor() {
      super(...arguments);
      /** @internal */
      this.inputName = 'required';
      /** @internal */
      this.normalizeInput = core_mjs_.booleanAttribute;
      /** @internal */
      this.createValidator = input => requiredValidator;
    }
    /** @nodoc */
    enabled(input) {
      return input;
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵRequiredValidator_BaseFactory;
      return function RequiredValidator_Factory(t) {
        return (ɵRequiredValidator_BaseFactory || (ɵRequiredValidator_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](RequiredValidator)))(t || RequiredValidator);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: RequiredValidator,
      selectors: [["", "required", "", "formControlName", "", 3, "type", "checkbox"], ["", "required", "", "formControl", "", 3, "type", "checkbox"], ["", "required", "", "ngModel", "", 3, "type", "checkbox"]],
      hostVars: 1,
      hostBindings: function RequiredValidator_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵattribute"]("required", ctx._enabled ? "" : null);
        }
      },
      inputs: {
        required: "required"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([REQUIRED_VALIDATOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return RequiredValidator;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * A Directive that adds the `required` validator to checkbox controls marked with the
 * `required` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a required checkbox validator using template-driven forms
 *
 * The following example shows how to add a checkbox required validator to an input attached to an
 * ngModel binding.
 *
 * ```
 * <input type="checkbox" name="active" ngModel required>
 * ```
 *
 * @publicApi
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 */
let CheckboxRequiredValidator = /*#__PURE__*/(() => {
  class CheckboxRequiredValidator extends RequiredValidator {
    constructor() {
      super(...arguments);
      /** @internal */
      this.createValidator = input => requiredTrueValidator;
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵCheckboxRequiredValidator_BaseFactory;
      return function CheckboxRequiredValidator_Factory(t) {
        return (ɵCheckboxRequiredValidator_BaseFactory || (ɵCheckboxRequiredValidator_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](CheckboxRequiredValidator)))(t || CheckboxRequiredValidator);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: CheckboxRequiredValidator,
      selectors: [["input", "type", "checkbox", "required", "", "formControlName", ""], ["input", "type", "checkbox", "required", "", "formControl", ""], ["input", "type", "checkbox", "required", "", "ngModel", ""]],
      hostVars: 1,
      hostBindings: function CheckboxRequiredValidator_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵattribute"]("required", ctx._enabled ? "" : null);
        }
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([CHECKBOX_REQUIRED_VALIDATOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return CheckboxRequiredValidator;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Provider which adds `EmailValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const EMAIL_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => EmailValidator),
  multi: true
};
/**
 * A directive that adds the `email` validator to controls marked with the
 * `email` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * The email validation is based on the WHATWG HTML specification with some enhancements to
 * incorporate more RFC rules. More information can be found on the [Validators.email
 * page](api/forms/Validators#email).
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding an email validator
 *
 * The following example shows how to add an email validator to an input attached to an ngModel
 * binding.
 *
 * ```
 * <input type="email" name="email" ngModel email>
 * <input type="email" name="email" ngModel email="true">
 * <input type="email" name="email" ngModel [email]="true">
 * ```
 *
 * @publicApi
 * @ngModule FormsModule
 * @ngModule ReactiveFormsModule
 */
let EmailValidator = /*#__PURE__*/(() => {
  class EmailValidator extends AbstractValidatorDirective {
    constructor() {
      super(...arguments);
      /** @internal */
      this.inputName = 'email';
      /** @internal */
      this.normalizeInput = core_mjs_.booleanAttribute;
      /** @internal */
      this.createValidator = input => emailValidator;
    }
    /** @nodoc */
    enabled(input) {
      return input;
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵEmailValidator_BaseFactory;
      return function EmailValidator_Factory(t) {
        return (ɵEmailValidator_BaseFactory || (ɵEmailValidator_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](EmailValidator)))(t || EmailValidator);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: EmailValidator,
      selectors: [["", "email", "", "formControlName", ""], ["", "email", "", "formControl", ""], ["", "email", "", "ngModel", ""]],
      inputs: {
        email: "email"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([EMAIL_VALIDATOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return EmailValidator;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Provider which adds `MinLengthValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const MIN_LENGTH_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => MinLengthValidator),
  multi: true
};
/**
 * A directive that adds minimum length validation to controls marked with the
 * `minlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a minimum length validator
 *
 * The following example shows how to add a minimum length validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel minlength="4">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let MinLengthValidator = /*#__PURE__*/(() => {
  class MinLengthValidator extends AbstractValidatorDirective {
    constructor() {
      super(...arguments);
      /** @internal */
      this.inputName = 'minlength';
      /** @internal */
      this.normalizeInput = input => toInteger(input);
      /** @internal */
      this.createValidator = minlength => minLengthValidator(minlength);
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵMinLengthValidator_BaseFactory;
      return function MinLengthValidator_Factory(t) {
        return (ɵMinLengthValidator_BaseFactory || (ɵMinLengthValidator_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](MinLengthValidator)))(t || MinLengthValidator);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: MinLengthValidator,
      selectors: [["", "minlength", "", "formControlName", ""], ["", "minlength", "", "formControl", ""], ["", "minlength", "", "ngModel", ""]],
      hostVars: 1,
      hostBindings: function MinLengthValidator_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵattribute"]("minlength", ctx._enabled ? ctx.minlength : null);
        }
      },
      inputs: {
        minlength: "minlength"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([MIN_LENGTH_VALIDATOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return MinLengthValidator;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Provider which adds `MaxLengthValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const MAX_LENGTH_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => MaxLengthValidator),
  multi: true
};
/**
 * A directive that adds maximum length validation to controls marked with the
 * `maxlength` attribute. The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a maximum length validator
 *
 * The following example shows how to add a maximum length validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel maxlength="25">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let MaxLengthValidator = /*#__PURE__*/(() => {
  class MaxLengthValidator extends AbstractValidatorDirective {
    constructor() {
      super(...arguments);
      /** @internal */
      this.inputName = 'maxlength';
      /** @internal */
      this.normalizeInput = input => toInteger(input);
      /** @internal */
      this.createValidator = maxlength => maxLengthValidator(maxlength);
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵMaxLengthValidator_BaseFactory;
      return function MaxLengthValidator_Factory(t) {
        return (ɵMaxLengthValidator_BaseFactory || (ɵMaxLengthValidator_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](MaxLengthValidator)))(t || MaxLengthValidator);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: MaxLengthValidator,
      selectors: [["", "maxlength", "", "formControlName", ""], ["", "maxlength", "", "formControl", ""], ["", "maxlength", "", "ngModel", ""]],
      hostVars: 1,
      hostBindings: function MaxLengthValidator_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵattribute"]("maxlength", ctx._enabled ? ctx.maxlength : null);
        }
      },
      inputs: {
        maxlength: "maxlength"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([MAX_LENGTH_VALIDATOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return MaxLengthValidator;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * Provider which adds `PatternValidator` to the `NG_VALIDATORS` multi-provider list.
 */
const PATTERN_VALIDATOR = {
  provide: NG_VALIDATORS,
  useExisting: /*#__PURE__*/(0,core_mjs_.forwardRef)(() => PatternValidator),
  multi: true
};
/**
 * @description
 * A directive that adds regex pattern validation to controls marked with the
 * `pattern` attribute. The regex must match the entire control value.
 * The directive is provided with the `NG_VALIDATORS` multi-provider list.
 *
 * @see [Form Validation](guide/form-validation)
 *
 * @usageNotes
 *
 * ### Adding a pattern validator
 *
 * The following example shows how to add a pattern validator to an input attached to an
 * ngModel binding.
 *
 * ```html
 * <input name="firstName" ngModel pattern="[a-zA-Z ]*">
 * ```
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
let PatternValidator = /*#__PURE__*/(() => {
  class PatternValidator extends AbstractValidatorDirective {
    constructor() {
      super(...arguments);
      /** @internal */
      this.inputName = 'pattern';
      /** @internal */
      this.normalizeInput = input => input;
      /** @internal */
      this.createValidator = input => patternValidator(input);
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵPatternValidator_BaseFactory;
      return function PatternValidator_Factory(t) {
        return (ɵPatternValidator_BaseFactory || (ɵPatternValidator_BaseFactory = core_mjs_["ɵɵgetInheritedFactory"](PatternValidator)))(t || PatternValidator);
      };
    })();
    static #_2 = this.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
      type: PatternValidator,
      selectors: [["", "pattern", "", "formControlName", ""], ["", "pattern", "", "formControl", ""], ["", "pattern", "", "ngModel", ""]],
      hostVars: 1,
      hostBindings: function PatternValidator_HostBindings(rf, ctx) {
        if (rf & 2) {
          core_mjs_["ɵɵattribute"]("pattern", ctx._enabled ? ctx.pattern : null);
        }
      },
      inputs: {
        pattern: "pattern"
      },
      features: [core_mjs_["ɵɵProvidersFeature"]([PATTERN_VALIDATOR]), core_mjs_["ɵɵInheritDefinitionFeature"]]
    });
  }
  return PatternValidator;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
const SHARED_FORM_DIRECTIVES = [ɵNgNoValidate, NgSelectOption, ɵNgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor, RangeValueAccessor, CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor, RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator, MinLengthValidator, MaxLengthValidator, PatternValidator, CheckboxRequiredValidator, EmailValidator, MinValidator, MaxValidator];
const TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];
const REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];
/**
 * Internal module used for sharing directives between FormsModule and ReactiveFormsModule
 */
let ɵInternalFormsSharedModule = /*#__PURE__*/(() => {
  class ɵInternalFormsSharedModule {
    static #_ = this.ɵfac = function ɵInternalFormsSharedModule_Factory(t) {
      return new (t || ɵInternalFormsSharedModule)();
    };
    static #_2 = this.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
      type: ɵInternalFormsSharedModule
    });
    static #_3 = this.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  }
  return ɵInternalFormsSharedModule;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Tracks the value and validity state of an array of `FormControl`,
 * `FormGroup` or `FormArray` instances.
 *
 * A `FormArray` aggregates the values of each child `FormControl` into an array.
 * It calculates its status by reducing the status values of its children. For example, if one of
 * the controls in a `FormArray` is invalid, the entire array becomes invalid.
 *
 * `FormArray` accepts one generic argument, which is the type of the controls inside.
 * If you need a heterogenous array, use {@link UntypedFormArray}.
 *
 * `FormArray` is one of the four fundamental building blocks used to define forms in Angular,
 * along with `FormControl`, `FormGroup`, and `FormRecord`.
 *
 * @usageNotes
 *
 * ### Create an array of form controls
 *
 * ```
 * const arr = new FormArray([
 *   new FormControl('Nancy', Validators.minLength(2)),
 *   new FormControl('Drew'),
 * ]);
 *
 * console.log(arr.value);   // ['Nancy', 'Drew']
 * console.log(arr.status);  // 'VALID'
 * ```
 *
 * ### Create a form array with array-level validators
 *
 * You include array-level validators and async validators. These come in handy
 * when you want to perform validation that considers the value of more than one child
 * control.
 *
 * The two types of validators are passed in separately as the second and third arg
 * respectively, or together as part of an options object.
 *
 * ```
 * const arr = new FormArray([
 *   new FormControl('Nancy'),
 *   new FormControl('Drew')
 * ], {validators: myValidator, asyncValidators: myAsyncValidator});
 * ```
 *
 * ### Set the updateOn property for all controls in a form array
 *
 * The options object is used to set a default value for each child
 * control's `updateOn` property. If you set `updateOn` to `'blur'` at the
 * array level, all child controls default to 'blur', unless the child
 * has explicitly specified a different `updateOn` value.
 *
 * ```ts
 * const arr = new FormArray([
 *    new FormControl()
 * ], {updateOn: 'blur'});
 * ```
 *
 * ### Adding or removing controls from a form array
 *
 * To change the controls in the array, use the `push`, `insert`, `removeAt` or `clear` methods
 * in `FormArray` itself. These methods ensure the controls are properly tracked in the
 * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate
 * the `FormArray` directly, as that result in strange and unexpected behavior such
 * as broken change detection.
 *
 * @publicApi
 */
class FormArray extends AbstractControl {
  /**
   * Creates a new `FormArray` instance.
   *
   * @param controls An array of child controls. Each child control is given an index
   * where it is registered.
   *
   * @param validatorOrOpts A synchronous validator function, or an array of
   * such functions, or an `AbstractControlOptions` object that contains validation functions
   * and a validation trigger.
   *
   * @param asyncValidator A single async validator or array of async validator functions
   *
   */
  constructor(controls, validatorOrOpts, asyncValidator) {
    super(pickValidators(validatorOrOpts), pickAsyncValidators(asyncValidator, validatorOrOpts));
    this.controls = controls;
    this._initObservables();
    this._setUpdateStrategy(validatorOrOpts);
    this._setUpControls();
    this.updateValueAndValidity({
      onlySelf: true,
      // If `asyncValidator` is present, it will trigger control status change from `PENDING` to
      // `VALID` or `INVALID`.
      // The status should be broadcasted via the `statusChanges` observable, so we set `emitEvent`
      // to `true` to allow that during the control creation process.
      emitEvent: !!this.asyncValidator
    });
  }
  /**
   * Get the `AbstractControl` at the given `index` in the array.
   *
   * @param index Index in the array to retrieve the control. If `index` is negative, it will wrap
   *     around from the back, and if index is greatly negative (less than `-length`), the result is
   * undefined. This behavior is the same as `Array.at(index)`.
   */
  at(index) {
    return this.controls[this._adjustIndex(index)];
  }
  /**
   * Insert a new `AbstractControl` at the end of the array.
   *
   * @param control Form control to be inserted
   * @param options Specifies whether this FormArray instance should emit events after a new
   *     control is added.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * inserted. When false, no events are emitted.
   */
  push(control, options = {}) {
    this.controls.push(control);
    this._registerControl(control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Insert a new `AbstractControl` at the given `index` in the array.
   *
   * @param index Index in the array to insert the control. If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), prepends to the array.
   * This behavior is the same as `Array.splice(index, 0, control)`.
   * @param control Form control to be inserted
   * @param options Specifies whether this FormArray instance should emit events after a new
   *     control is inserted.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * inserted. When false, no events are emitted.
   */
  insert(index, control, options = {}) {
    this.controls.splice(index, 0, control);
    this._registerControl(control);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Remove the control at the given `index` in the array.
   *
   * @param index Index in the array to remove the control.  If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), removes the first
   *     element. This behavior is the same as `Array.splice(index, 1)`.
   * @param options Specifies whether this FormArray instance should emit events after a
   *     control is removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * removed. When false, no events are emitted.
   */
  removeAt(index, options = {}) {
    // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.
    let adjustedIndex = this._adjustIndex(index);
    if (adjustedIndex < 0) adjustedIndex = 0;
    if (this.controls[adjustedIndex]) this.controls[adjustedIndex]._registerOnCollectionChange(() => {});
    this.controls.splice(adjustedIndex, 1);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Replace an existing control.
   *
   * @param index Index in the array to replace the control. If `index` is negative, wraps around
   *     from the back. If `index` is greatly negative (less than `-length`), replaces the first
   *     element. This behavior is the same as `Array.splice(index, 1, control)`.
   * @param control The `AbstractControl` control to replace the existing control
   * @param options Specifies whether this FormArray instance should emit events after an
   *     existing control is replaced with a new one.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control is
   * replaced with a new one. When false, no events are emitted.
   */
  setControl(index, control, options = {}) {
    // Adjust the index, then clamp it at no less than 0 to prevent undesired underflows.
    let adjustedIndex = this._adjustIndex(index);
    if (adjustedIndex < 0) adjustedIndex = 0;
    if (this.controls[adjustedIndex]) this.controls[adjustedIndex]._registerOnCollectionChange(() => {});
    this.controls.splice(adjustedIndex, 1);
    if (control) {
      this.controls.splice(adjustedIndex, 0, control);
      this._registerControl(control);
    }
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
    this._onCollectionChange();
  }
  /**
   * Length of the control array.
   */
  get length() {
    return this.controls.length;
  }
  /**
   * Sets the value of the `FormArray`. It accepts an array that matches
   * the structure of the control.
   *
   * This method performs strict checks, and throws an error if you try
   * to set the value of a control that doesn't exist or if you exclude the
   * value of a control.
   *
   * @usageNotes
   * ### Set the values for the controls in the form array
   *
   * ```
   * const arr = new FormArray([
   *   new FormControl(),
   *   new FormControl()
   * ]);
   * console.log(arr.value);   // [null, null]
   *
   * arr.setValue(['Nancy', 'Drew']);
   * console.log(arr.value);   // ['Nancy', 'Drew']
   * ```
   *
   * @param value Array of values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control value is updated.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   */
  setValue(value, options = {}) {
    assertAllValuesPresent(this, false, value);
    value.forEach((newValue, index) => {
      assertControlPresent(this, false, index);
      this.at(index).setValue(newValue, {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Patches the value of the `FormArray`. It accepts an array that matches the
   * structure of the control, and does its best to match the values to the correct
   * controls in the group.
   *
   * It accepts both super-sets and sub-sets of the array without throwing an error.
   *
   * @usageNotes
   * ### Patch the values for controls in a form array
   *
   * ```
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * console.log(arr.value);   // [null, null]
   *
   * arr.patchValue(['Nancy']);
   * console.log(arr.value);   // ['Nancy', null]
   * ```
   *
   * @param value Array of latest values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when the control
   * value is updated. When false, no events are emitted. The configuration options are passed to
   * the {@link AbstractControl#updateValueAndValidity updateValueAndValidity} method.
   */
  patchValue(value, options = {}) {
    // Even though the `value` argument type doesn't allow `null` and `undefined` values, the
    // `patchValue` can be called recursively and inner data structures might have these values,
    // so we just ignore such cases when a field containing FormArray instance receives `null` or
    // `undefined` as a value.
    if (value == null /* both `null` and `undefined` */) return;
    value.forEach((newValue, index) => {
      if (this.at(index)) {
        this.at(index).patchValue(newValue, {
          onlySelf: true,
          emitEvent: options.emitEvent
        });
      }
    });
    this.updateValueAndValidity(options);
  }
  /**
   * Resets the `FormArray` and all descendants are marked `pristine` and `untouched`, and the
   * value of all descendants to null or null maps.
   *
   * You reset to a specific form state by passing in an array of states
   * that matches the structure of the control. The state is a standalone value
   * or a form state object with both a value and a disabled status.
   *
   * @usageNotes
   * ### Reset the values in a form array
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * arr.reset(['name', 'last name']);
   *
   * console.log(arr.value);  // ['name', 'last name']
   * ```
   *
   * ### Reset the values in a form array and the disabled status for the first control
   *
   * ```
   * arr.reset([
   *   {value: 'name', disabled: true},
   *   'last'
   * ]);
   *
   * console.log(arr.value);  // ['last']
   * console.log(arr.at(0).status);  // 'DISABLED'
   * ```
   *
   * @param value Array of values for the controls
   * @param options Configure options that determine how the control propagates changes and
   * emits events after the value changes
   *
   * * `onlySelf`: When true, each change only affects this control, and not its parent. Default
   * is false.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges`
   * observables emit events with the latest status and value when the control is reset.
   * When false, no events are emitted.
   * The configuration options are passed to the {@link AbstractControl#updateValueAndValidity
   * updateValueAndValidity} method.
   */
  reset(value = [], options = {}) {
    this._forEachChild((control, index) => {
      control.reset(value[index], {
        onlySelf: true,
        emitEvent: options.emitEvent
      });
    });
    this._updatePristine(options);
    this._updateTouched(options);
    this.updateValueAndValidity(options);
  }
  /**
   * The aggregate value of the array, including any disabled controls.
   *
   * Reports all values regardless of disabled status.
   */
  getRawValue() {
    return this.controls.map(control => control.getRawValue());
  }
  /**
   * Remove all controls in the `FormArray`.
   *
   * @param options Specifies whether this FormArray instance should emit events after all
   *     controls are removed.
   * * `emitEvent`: When true or not supplied (the default), both the `statusChanges` and
   * `valueChanges` observables emit events with the latest status and value when all controls
   * in this FormArray instance are removed. When false, no events are emitted.
   *
   * @usageNotes
   * ### Remove all elements from a FormArray
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   * console.log(arr.length);  // 2
   *
   * arr.clear();
   * console.log(arr.length);  // 0
   * ```
   *
   * It's a simpler and more efficient alternative to removing all elements one by one:
   *
   * ```ts
   * const arr = new FormArray([
   *    new FormControl(),
   *    new FormControl()
   * ]);
   *
   * while (arr.length) {
   *    arr.removeAt(0);
   * }
   * ```
   */
  clear(options = {}) {
    if (this.controls.length < 1) return;
    this._forEachChild(control => control._registerOnCollectionChange(() => {}));
    this.controls.splice(0);
    this.updateValueAndValidity({
      emitEvent: options.emitEvent
    });
  }
  /**
   * Adjusts a negative index by summing it with the length of the array. For very negative
   * indices, the result may remain negative.
   * @internal
   */
  _adjustIndex(index) {
    return index < 0 ? index + this.length : index;
  }
  /** @internal */
  _syncPendingControls() {
    let subtreeUpdated = this.controls.reduce((updated, child) => {
      return child._syncPendingControls() ? true : updated;
    }, false);
    if (subtreeUpdated) this.updateValueAndValidity({
      onlySelf: true
    });
    return subtreeUpdated;
  }
  /** @internal */
  _forEachChild(cb) {
    this.controls.forEach((control, index) => {
      cb(control, index);
    });
  }
  /** @internal */
  _updateValue() {
    this.value = this.controls.filter(control => control.enabled || this.disabled).map(control => control.value);
  }
  /** @internal */
  _anyControls(condition) {
    return this.controls.some(control => control.enabled && condition(control));
  }
  /** @internal */
  _setUpControls() {
    this._forEachChild(control => this._registerControl(control));
  }
  /** @internal */
  _allControlsDisabled() {
    for (const control of this.controls) {
      if (control.enabled) return false;
    }
    return this.controls.length > 0 || this.disabled;
  }
  _registerControl(control) {
    control.setParent(this);
    control._registerOnCollectionChange(this._onCollectionChange);
  }
  /** @internal */
  _find(name) {
    return this.at(name) ?? null;
  }
}
const UntypedFormArray = (/* unused pure expression or super */ null && (FormArray));
/**
 * @description
 * Asserts that the given control is an instance of `FormArray`
 *
 * @publicApi
 */
const isFormArray = control => control instanceof FormArray;
function isAbstractControlOptions(options) {
  return !!options && (options.asyncValidators !== undefined || options.validators !== undefined || options.updateOn !== undefined);
}
// clang-format on
/**
 * @description
 * Creates an `AbstractControl` from a user-specified configuration.
 *
 * The `FormBuilder` provides syntactic sugar that shortens creating instances of a
 * `FormControl`, `FormGroup`, or `FormArray`. It reduces the amount of boilerplate needed to
 * build complex forms.
 *
 * @see [Reactive Forms Guide](guide/reactive-forms)
 *
 * @publicApi
 */
let FormBuilder = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class FormBuilder {
    constructor() {
      this.useNonNullable = false;
    }
    /**
     * @description
     * Returns a FormBuilder in which automatically constructed `FormControl` elements
     * have `{nonNullable: true}` and are non-nullable.
     *
     * **Constructing non-nullable controls**
     *
     * When constructing a control, it will be non-nullable, and will reset to its initial value.
     *
     * ```ts
     * let nnfb = new FormBuilder().nonNullable;
     * let name = nnfb.control('Alex'); // FormControl<string>
     * name.reset();
     * console.log(name); // 'Alex'
     * ```
     *
     * **Constructing non-nullable groups or arrays**
     *
     * When constructing a group or array, all automatically created inner controls will be
     * non-nullable, and will reset to their initial values.
     *
     * ```ts
     * let nnfb = new FormBuilder().nonNullable;
     * let name = nnfb.group({who: 'Alex'}); // FormGroup<{who: FormControl<string>}>
     * name.reset();
     * console.log(name); // {who: 'Alex'}
     * ```
     * **Constructing *nullable* fields on groups or arrays**
     *
     * It is still possible to have a nullable field. In particular, any `FormControl` which is
     * *already* constructed will not be altered. For example:
     *
     * ```ts
     * let nnfb = new FormBuilder().nonNullable;
     * // FormGroup<{who: FormControl<string|null>}>
     * let name = nnfb.group({who: new FormControl('Alex')});
     * name.reset(); console.log(name); // {who: null}
     * ```
     *
     * Because the inner control is constructed explicitly by the caller, the builder has
     * no control over how it is created, and cannot exclude the `null`.
     */
    get nonNullable() {
      const nnfb = new FormBuilder();
      nnfb.useNonNullable = true;
      return nnfb;
    }
    group(controls, options = null) {
      const reducedControls = this._reduceControls(controls);
      let newOptions = {};
      if (isAbstractControlOptions(options)) {
        // `options` are `AbstractControlOptions`
        newOptions = options;
      } else if (options !== null) {
        // `options` are legacy form group options
        newOptions.validators = options.validator;
        newOptions.asyncValidators = options.asyncValidator;
      }
      return new FormGroup(reducedControls, newOptions);
    }
    /**
     * @description
     * Constructs a new `FormRecord` instance. Accepts a single generic argument, which is an object
     * containing all the keys and corresponding inner control types.
     *
     * @param controls A collection of child controls. The key for each child is the name
     * under which it is registered.
     *
     * @param options Configuration options object for the `FormRecord`. The object should have the
     * `AbstractControlOptions` type and might contain the following fields:
     * * `validators`: A synchronous validator function, or an array of validator functions.
     * * `asyncValidators`: A single async validator or array of async validator functions.
     * * `updateOn`: The event upon which the control should be updated (options: 'change' | 'blur'
     * | submit').
     */
    record(controls, options = null) {
      const reducedControls = this._reduceControls(controls);
      // Cast to `any` because the inferred types are not as specific as Element.
      return new FormRecord(reducedControls, options);
    }
    /**
     * @description
     * Constructs a new `FormControl` with the given state, validators and options. Sets
     * `{nonNullable: true}` in the options to get a non-nullable control. Otherwise, the
     * control will be nullable. Accepts a single generic argument, which is the type  of the
     * control's value.
     *
     * @param formState Initializes the control with an initial state value, or
     * with an object that contains both a value and a disabled status.
     *
     * @param validatorOrOpts A synchronous validator function, or an array of
     * such functions, or a `FormControlOptions` object that contains
     * validation functions and a validation trigger.
     *
     * @param asyncValidator A single async validator or array of async validator
     * functions.
     *
     * @usageNotes
     *
     * ### Initialize a control as disabled
     *
     * The following example returns a control with an initial value in a disabled state.
     *
     * <code-example path="forms/ts/formBuilder/form_builder_example.ts" region="disabled-control">
     * </code-example>
     */
    control(formState, validatorOrOpts, asyncValidator) {
      let newOptions = {};
      if (!this.useNonNullable) {
        return new FormControl(formState, validatorOrOpts, asyncValidator);
      }
      if (isAbstractControlOptions(validatorOrOpts)) {
        // If the second argument is options, then they are copied.
        newOptions = validatorOrOpts;
      } else {
        // If the other arguments are validators, they are copied into an options object.
        newOptions.validators = validatorOrOpts;
        newOptions.asyncValidators = asyncValidator;
      }
      return new FormControl(formState, {
        ...newOptions,
        nonNullable: true
      });
    }
    /**
     * Constructs a new `FormArray` from the given array of configurations,
     * validators and options. Accepts a single generic argument, which is the type of each control
     * inside the array.
     *
     * @param controls An array of child controls or control configs. Each child control is given an
     *     index when it is registered.
     *
     * @param validatorOrOpts A synchronous validator function, or an array of such functions, or an
     *     `AbstractControlOptions` object that contains
     * validation functions and a validation trigger.
     *
     * @param asyncValidator A single async validator or array of async validator functions.
     */
    array(controls, validatorOrOpts, asyncValidator) {
      const createdControls = controls.map(c => this._createControl(c));
      // Cast to `any` because the inferred types are not as specific as Element.
      return new FormArray(createdControls, validatorOrOpts, asyncValidator);
    }
    /** @internal */
    _reduceControls(controls) {
      const createdControls = {};
      Object.keys(controls).forEach(controlName => {
        createdControls[controlName] = this._createControl(controls[controlName]);
      });
      return createdControls;
    }
    /** @internal */
    _createControl(controls) {
      if (controls instanceof FormControl) {
        return controls;
      } else if (controls instanceof AbstractControl) {
        // A control; just return it
        return controls;
      } else if (Array.isArray(controls)) {
        // ControlConfig Tuple
        const value = controls[0];
        const validator = controls.length > 1 ? controls[1] : null;
        const asyncValidator = controls.length > 2 ? controls[2] : null;
        return this.control(value, validator, asyncValidator);
      } else {
        // T or FormControlState<T>
        return this.control(controls);
      }
    }
    static #_ = this.ɵfac = function FormBuilder_Factory(t) {
      return new (t || FormBuilder)();
    };
    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
      token: FormBuilder,
      factory: FormBuilder.ɵfac,
      providedIn: 'root'
    });
  }
  return FormBuilder;
})()));
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * @description
 * `NonNullableFormBuilder` is similar to {@link FormBuilder}, but automatically constructed
 * {@link FormControl} elements have `{nonNullable: true}` and are non-nullable.
 *
 * @publicApi
 */
let NonNullableFormBuilder = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class NonNullableFormBuilder {
    static #_ = this.ɵfac = function NonNullableFormBuilder_Factory(t) {
      return new (t || NonNullableFormBuilder)();
    };
    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
      token: NonNullableFormBuilder,
      factory: () => (() => inject(FormBuilder).nonNullable)(),
      providedIn: 'root'
    });
  }
  return NonNullableFormBuilder;
})()));
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * UntypedFormBuilder is the same as `FormBuilder`, but it provides untyped controls.
 */
let UntypedFormBuilder = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  class UntypedFormBuilder extends FormBuilder {
    group(controlsConfig, options = null) {
      return super.group(controlsConfig, options);
    }
    /**
     * Like `FormBuilder#control`, except the resulting control is untyped.
     */
    control(formState, validatorOrOpts, asyncValidator) {
      return super.control(formState, validatorOrOpts, asyncValidator);
    }
    /**
     * Like `FormBuilder#array`, except the resulting array is untyped.
     */
    array(controlsConfig, validatorOrOpts, asyncValidator) {
      return super.array(controlsConfig, validatorOrOpts, asyncValidator);
    }
    static #_ = this.ɵfac = /* @__PURE__ */(() => {
      let ɵUntypedFormBuilder_BaseFactory;
      return function UntypedFormBuilder_Factory(t) {
        return (ɵUntypedFormBuilder_BaseFactory || (ɵUntypedFormBuilder_BaseFactory = i0.ɵɵgetInheritedFactory(UntypedFormBuilder)))(t || UntypedFormBuilder);
      };
    })();
    static #_2 = this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({
      token: UntypedFormBuilder,
      factory: UntypedFormBuilder.ɵfac,
      providedIn: 'root'
    });
  }
  return UntypedFormBuilder;
})()));
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * @module
 * @description
 * Entry point for all public APIs of the forms package.
 */
/**
 * @publicApi
 */
const VERSION = /*#__PURE__*/new core_mjs_.Version('17.3.0');

/**
 * Exports the required providers and directives for template-driven forms,
 * making them available for import by NgModules that import this module.
 *
 * @see [Forms Overview](/guide/forms-overview)
 * @see [Template-driven Forms Guide](/guide/forms)
 *
 * @publicApi
 */
let FormsModule = /*#__PURE__*/(() => {
  class FormsModule {
    /**
     * @description
     * Provides options for configuring the forms module.
     *
     * @param opts An object of configuration options
     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
     * correct, or to only call it `whenDisabled`, which is the legacy behavior.
     */
    static withConfig(opts) {
      return {
        ngModule: FormsModule,
        providers: [{
          provide: CALL_SET_DISABLED_STATE,
          useValue: opts.callSetDisabledState ?? setDisabledStateDefault
        }]
      };
    }
    static #_ = this.ɵfac = function FormsModule_Factory(t) {
      return new (t || FormsModule)();
    };
    static #_2 = this.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
      type: FormsModule
    });
    static #_3 = this.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
      imports: [ɵInternalFormsSharedModule]
    });
  }
  return FormsModule;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Exports the required infrastructure and directives for reactive forms,
 * making them available for import by NgModules that import this module.
 *
 * @see [Forms Overview](guide/forms-overview)
 * @see [Reactive Forms Guide](guide/reactive-forms)
 *
 * @publicApi
 */
let ReactiveFormsModule = /*#__PURE__*/(() => {
  class ReactiveFormsModule {
    /**
     * @description
     * Provides options for configuring the reactive forms module.
     *
     * @param opts An object of configuration options
     * * `warnOnNgModelWithFormControl` Configures when to emit a warning when an `ngModel`
     * binding is used with reactive form directives.
     * * `callSetDisabledState` Configures whether to `always` call `setDisabledState`, which is more
     * correct, or to only call it `whenDisabled`, which is the legacy behavior.
     */
    static withConfig(opts) {
      return {
        ngModule: ReactiveFormsModule,
        providers: [{
          provide: NG_MODEL_WITH_FORM_CONTROL_WARNING,
          useValue: opts.warnOnNgModelWithFormControl ?? 'always'
        }, {
          provide: CALL_SET_DISABLED_STATE,
          useValue: opts.callSetDisabledState ?? setDisabledStateDefault
        }]
      };
    }
    static #_ = this.ɵfac = function ReactiveFormsModule_Factory(t) {
      return new (t || ReactiveFormsModule)();
    };
    static #_2 = this.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
      type: ReactiveFormsModule
    });
    static #_3 = this.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({
      imports: [ɵInternalFormsSharedModule]
    });
  }
  return ReactiveFormsModule;
})();
/*#__PURE__*/(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * @module
 * @description
 * This module is used for handling user input, by defining and building a `FormGroup` that
 * consists of `FormControl` objects, and mapping them onto the DOM. `FormControl`
 * objects can then be used to read information from the form DOM elements.
 *
 * Forms providers are not included in default providers; you must import these providers
 * explicitly.
 */

/**
 * @module
 * @description
 * Entry point for all public APIs of this package.
 */
// This file only reexports content of the `src` folder. Keep it that way.

// This file is not used to build this module. It is only used during editing

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=forms.mjs.map

/***/ }),

/***/ 9280:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {


// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  sq: () => (/* binding */ HIGHLIGHT_OPTIONS),
  f4: () => (/* binding */ Highlight),
  fw: () => (/* binding */ HighlightModule)
});

// UNUSED EXPORTS: HighlightJS, HighlightLoader

// EXTERNAL MODULE: consume shared module (default) @angular/core@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/core/fesm2022/core.mjs)
var core_mjs_ = __webpack_require__(1750);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/BehaviorSubject.js
var BehaviorSubject = __webpack_require__(4412);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/empty.js
var empty = __webpack_require__(983);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/throwError.js
var throwError = __webpack_require__(8810);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Observable.js
var Observable = __webpack_require__(1985);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
var innerFrom = __webpack_require__(8750);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/argsOrArgArray.js
var argsOrArgArray = __webpack_require__(2326);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
var OperatorSubscriber = __webpack_require__(4360);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/util/args.js
var util_args = __webpack_require__(9326);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/observable/zip.js






function zip(...args) {
  const resultSelector = (0,util_args/* popResultSelector */.ms)(args);
  const sources = (0,argsOrArgArray/* argsOrArgArray */.K)(args);
  return sources.length ? new Observable/* Observable */.c(subscriber => {
    let buffers = sources.map(() => []);
    let completed = sources.map(() => false);
    subscriber.add(() => {
      buffers = completed = null;
    });
    for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
      (0,innerFrom/* innerFrom */.Tg)(sources[sourceIndex]).subscribe((0,OperatorSubscriber/* createOperatorSubscriber */._)(subscriber, value => {
        buffers[sourceIndex].push(value);
        if (buffers.every(buffer => buffer.length)) {
          const result = buffers.map(buffer => buffer.shift());
          subscriber.next(resultSelector ? resultSelector(...result) : result);
          if (buffers.some((buffer, i) => !buffer.length && completed[i])) {
            subscriber.complete();
          }
        }
      }, () => {
        completed[sourceIndex] = true;
        !buffers[sourceIndex].length && subscriber.complete();
      }));
    }
    return () => {
      buffers = completed = null;
    };
  }) : empty/* EMPTY */.w;
}
//# sourceMappingURL=zip.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/observable/from.js + 9 modules
var from = __webpack_require__(6648);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js + 2 modules
var AsyncAction = __webpack_require__(6780);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/Subscription.js + 1 modules
var Subscription = __webpack_require__(8359);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js

const animationFrameProvider = {
  schedule(callback) {
    let request = requestAnimationFrame;
    let cancel = cancelAnimationFrame;
    const {
      delegate
    } = animationFrameProvider;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    const handle = request(timestamp => {
      cancel = undefined;
      callback(timestamp);
    });
    return new Subscription/* Subscription */.yU(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));
  },
  requestAnimationFrame(...args) {
    const {
      delegate
    } = animationFrameProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);
  },
  cancelAnimationFrame(...args) {
    const {
      delegate
    } = animationFrameProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);
  },
  delegate: undefined
};
//# sourceMappingURL=animationFrameProvider.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js


class AnimationFrameAction extends AsyncAction/* AsyncAction */.R {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
  }
  requestAsyncId(scheduler, id, delay = 0) {
    if (delay !== null && delay > 0) {
      return super.requestAsyncId(scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));
  }
  recycleAsyncId(scheduler, id, delay = 0) {
    var _a;
    if (delay != null ? delay > 0 : this.delay > 0) {
      return super.recycleAsyncId(scheduler, id, delay);
    }
    const {
      actions
    } = scheduler;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = undefined;
    }
    return undefined;
  }
}
//# sourceMappingURL=AnimationFrameAction.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js + 1 modules
var AsyncScheduler = __webpack_require__(9687);
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js

class AnimationFrameScheduler extends AsyncScheduler/* AsyncScheduler */.q {
  flush(action) {
    this._active = true;
    const flushId = this._scheduled;
    this._scheduled = undefined;
    const {
      actions
    } = this;
    let error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  }
}
//# sourceMappingURL=AnimationFrameScheduler.js.map
;// CONCATENATED MODULE: ./node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js


const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);
const animationFrame = (/* unused pure expression or super */ null && (animationFrameScheduler));
//# sourceMappingURL=animationFrame.js.map
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/filter.js
var filter = __webpack_require__(5964);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/map.js
var map = __webpack_require__(6354);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/take.js
var take = __webpack_require__(6697);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/switchMap.js
var switchMap = __webpack_require__(5558);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/tap.js
var tap = __webpack_require__(8141);
// EXTERNAL MODULE: ./node_modules/rxjs/dist/esm/internal/operators/catchError.js
var catchError = __webpack_require__(9437);
// EXTERNAL MODULE: consume shared module (default) @angular/common@=17.3.0 (strict) (singleton) (fallback: ./node_modules/@angular/common/fesm2022/common.mjs)
var common_mjs_ = __webpack_require__(6412);
// EXTERNAL MODULE: ./node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs
var platform_browser = __webpack_require__(345);
;// CONCATENATED MODULE: ./node_modules/ngx-highlightjs/fesm2020/ngx-highlightjs.mjs






const HIGHLIGHT_OPTIONS = new core_mjs_.InjectionToken('HIGHLIGHT_OPTIONS');

// @dynamic
let HighlightLoader = /*#__PURE__*/(() => {
  class HighlightLoader {
    constructor(doc, platformId, _options) {
      this.doc = doc;
      this._options = _options;
      // Stream that emits when hljs library is loaded and ready to use
      this._ready = new BehaviorSubject/* BehaviorSubject */.t(null);
      this.ready = this._ready.asObservable().pipe((0,filter/* filter */.p)(hljs => !!hljs), (0,map/* map */.T)(hljs => hljs), (0,take/* take */.s)(1));
      if ((0,common_mjs_.isPlatformBrowser)(platformId)) {
        // Check if hljs is already available
        if (doc.defaultView.hljs) {
          this._ready.next(doc.defaultView.hljs);
        } else {
          // Load hljs library
          this._loadLibrary().pipe((0,switchMap/* switchMap */.n)(hljs => {
            if (this._options && this._options.lineNumbersLoader) {
              // Make hljs available on window object (required for the line numbers library)
              doc.defaultView.hljs = hljs;
              // Load line numbers library
              return this.loadLineNumbers().pipe((0,tap/* tap */.M)(() => this._ready.next(hljs)));
            } else {
              this._ready.next(hljs);
              return empty/* EMPTY */.w;
            }
          }), (0,catchError/* catchError */.W)(e => {
            console.error('[HLJS] ', e);
            return empty/* EMPTY */.w;
          })).subscribe();
        }
        // Load highlighting theme
        if (this._options?.themePath) {
          this.loadTheme(this._options.themePath);
        }
      }
    }
    /**
     * Lazy-Load highlight.js library
     */
    _loadLibrary() {
      if (this._options) {
        if (this._options.fullLibraryLoader && this._options.coreLibraryLoader) {
          return (0,throwError/* throwError */.$)(() => 'The full library and the core library were imported, only one of them should be imported!');
        }
        if (this._options.fullLibraryLoader && this._options.languages) {
          return (0,throwError/* throwError */.$)(() => 'The highlighting languages were imported they are not needed!');
        }
        if (this._options.coreLibraryLoader && !this._options.languages) {
          return (0,throwError/* throwError */.$)(() => 'The highlighting languages were not imported!');
        }
        if (!this._options.coreLibraryLoader && this._options.languages) {
          return (0,throwError/* throwError */.$)(() => 'The core library was not imported!');
        }
        if (this._options.fullLibraryLoader) {
          return this.loadFullLibrary();
        }
        if (this._options.coreLibraryLoader && this._options.languages && Object.keys(this._options.languages).length) {
          return this.loadCoreLibrary().pipe((0,switchMap/* switchMap */.n)(hljs => this._loadLanguages(hljs)));
        }
      }
      return (0,throwError/* throwError */.$)(() => 'Highlight.js library was not imported!');
    }
    /**
     * Lazy-load highlight.js languages
     */
    _loadLanguages(hljs) {
      const languages = Object.entries(this._options.languages).map(([langName, langLoader]) => importModule(langLoader()).pipe((0,tap/* tap */.M)(langFunc => hljs.registerLanguage(langName, langFunc))));
      return zip(...languages).pipe((0,map/* map */.T)(() => hljs));
    }
    /**
     * Import highlight.js core library
     */
    loadCoreLibrary() {
      return importModule(this._options.coreLibraryLoader());
    }
    /**
     * Import highlight.js library with all languages
     */
    loadFullLibrary() {
      return importModule(this._options.fullLibraryLoader());
    }
    /**
     * Import line numbers library
     */
    loadLineNumbers() {
      return importModule(this._options.lineNumbersLoader());
    }
    /**
     * Reload theme styles
     */
    setTheme(path) {
      this._themeLinkElement.href = path;
    }
    /**
     * Load theme
     */
    loadTheme(path) {
      this._themeLinkElement = this.doc.createElement('link');
      this._themeLinkElement.href = path;
      this._themeLinkElement.type = 'text/css';
      this._themeLinkElement.rel = 'stylesheet';
      this._themeLinkElement.media = 'screen,print';
      this.doc.head.appendChild(this._themeLinkElement);
    }
  }
  HighlightLoader.ɵfac = function HighlightLoader_Factory(t) {
    return new (t || HighlightLoader)(core_mjs_["ɵɵinject"](common_mjs_.DOCUMENT), core_mjs_["ɵɵinject"](core_mjs_.PLATFORM_ID), core_mjs_["ɵɵinject"](HIGHLIGHT_OPTIONS, 8));
  };
  HighlightLoader.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: HighlightLoader,
    factory: HighlightLoader.ɵfac,
    providedIn: 'root'
  });
  return HighlightLoader;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
/**
 * Map loader response to module object
 */
const importModule = moduleLoader => {
  return (0,from/* from */.H)(moduleLoader).pipe((0,filter/* filter */.p)(module => !!module && !!module.default), (0,map/* map */.T)(module => module.default));
};
let HighlightJS = /*#__PURE__*/(() => {
  class HighlightJS {
    constructor(_loader, options) {
      this._loader = _loader;
      this._hljs = null;
      // Load highlight.js library on init
      _loader.ready.subscribe(hljs => {
        this._hljs = hljs;
        if (options && options.config) {
          // Set global config if present
          hljs.configure(options.config);
          if (hljs.listLanguages().length < 1) {
            console.error('[HighlightJS]: No languages were registered!');
          }
        }
      });
    }
    // A reference for hljs library
    get hljs() {
      return this._hljs;
    }
    /**
     * Core highlighting function. Accepts the code to highlight (string) and a list of options (object)
     * @param code Accepts the code to highlight
     * @param language must be present and specify the language name or alias of the grammar to be used for highlighting
     * @param ignoreIllegals (optional) when set to true it forces highlighting to finish even in case of detecting illegal syntax for the language instead of throwing an exception.
     */
    highlight(code, {
      language,
      ignoreIllegals
    }) {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.highlight(code, {
        language,
        ignoreIllegals
      })));
    }
    /**
     * Highlighting with language detection.
     * @param value Accepts a string with the code to highlight
     * @param languageSubset An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightAuto(value, languageSubset) {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.highlightAuto(value, languageSubset)));
    }
    /**
     * Applies highlighting to a DOM node containing code.
     * This function is the one to use to apply highlighting dynamically after page load or within initialization code of third-party JavaScript frameworks.
     * The function uses language detection by default but you can specify the language in the class attribute of the DOM node. See the scopes reference for all available language names and scopes.
     * @param element
     */
    highlightElement(element) {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.highlightElement(element)));
    }
    /**
     * Applies highlighting to all elements on a page matching the configured cssSelector. The default cssSelector value is 'pre code',
     * which highlights all code blocks. This can be called before or after the page’s onload event has fired.
     */
    highlightAll() {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.highlightAll()));
    }
    /**
     * @deprecated in version 12
     * Configures global options:
     * @param config HighlightJs configuration argument
     */
    configure(config) {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.configure(config)));
    }
    /**
     * Adds new language to the library under the specified name. Used mostly internally.
     * @param languageName A string with the name of the language being registered
     * @param languageDefinition A function that returns an object which represents the language definition.
     * The function is passed the hljs object to be able to use common regular expressions defined within it.
     */
    registerLanguage(languageName, languageDefinition) {
      return this._loader.ready.pipe((0,tap/* tap */.M)(hljs => hljs.registerLanguage(languageName, languageDefinition)));
    }
    /**
     * Removes a language and its aliases from the library. Used mostly internall
     * @param languageName: a string with the name of the language being removed.
     */
    unregisterLanguage(languageName) {
      return this._loader.ready.pipe((0,tap/* tap */.M)(hljs => hljs.unregisterLanguage(languageName)));
    }
    /**
     * Adds new language alias or aliases to the library for the specified language name defined under languageName key.
     * @param alias: A string or array with the name of alias being registered
     * @param languageName: the language name as specified by registerLanguage.
     */
    registerAliases(alias, {
      languageName
    }) {
      return this._loader.ready.pipe((0,tap/* tap */.M)(hljs => hljs.registerAliases(alias, {
        languageName
      })));
    }
    /**
     * @return The languages names list.
     */
    listLanguages() {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.listLanguages()));
    }
    /**
     * Looks up a language by name or alias.
     * @param name Language name
     * @return The language object if found, undefined otherwise.
     */
    getLanguage(name) {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.getLanguage(name)));
    }
    /**
     * Enables safe mode. This is the default mode, providing the most reliable experience for production usage.
     */
    safeMode() {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.safeMode()));
    }
    /**
     * Enables debug/development mode.
     */
    debugMode() {
      return this._loader.ready.pipe((0,map/* map */.T)(hljs => hljs.debugMode()));
    }
    /**
     * Display line numbers
     * @param el Code element
     */
    lineNumbersBlock(el) {
      return this._loader.ready.pipe((0,filter/* filter */.p)(hljs => !!hljs.lineNumbersBlock), (0,tap/* tap */.M)(hljs => hljs.lineNumbersBlock(el)));
    }
  }
  HighlightJS.ɵfac = function HighlightJS_Factory(t) {
    return new (t || HighlightJS)(core_mjs_["ɵɵinject"](HighlightLoader), core_mjs_["ɵɵinject"](HIGHLIGHT_OPTIONS, 8));
  };
  HighlightJS.ɵprov = /* @__PURE__ */core_mjs_["ɵɵdefineInjectable"]({
    token: HighlightJS,
    factory: HighlightJS.ɵfac,
    providedIn: 'root'
  });
  return HighlightJS;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let Highlight = /*#__PURE__*/(() => {
  class Highlight {
    constructor(el, _hljs, _sanitizer, _options) {
      this._hljs = _hljs;
      this._sanitizer = _sanitizer;
      this._options = _options;
      // Stream that emits when code string is highlighted
      this.highlighted = new core_mjs_.EventEmitter();
      this._nativeElement = el.nativeElement;
    }
    ngOnChanges(changes) {
      if (changes?.code?.currentValue !== null && changes.code.currentValue !== changes.code.previousValue) {
        if (this.code) {
          this.highlightElement(this.code, this.languages);
        } else {
          // If string is empty, set the text content to empty
          this.setTextContent('');
        }
      }
    }
    /**
     * Highlighting with language detection and fix markup.
     * @param code Accepts a string with the code to highlight
     * @param languages An optional array of language names and aliases restricting detection to only those languages.
     * The subset can also be set with configure, but the local parameter overrides the option if set.
     */
    highlightElement(code, languages) {
      // Set code text before highlighting
      this.setTextContent(code);
      this._hljs.highlightAuto(code, languages).subscribe(res => {
        // Set highlighted code
        this.setInnerHTML(res?.value);
        // Check if user want to show line numbers
        if (this.lineNumbers && this._options && this._options.lineNumbersLoader) {
          this.addLineNumbers();
        }
        // Forward highlight response to the highlighted output
        this.highlighted.emit(res);
      });
    }
    addLineNumbers() {
      // Clean up line numbers observer
      this.destroyLineNumbersObserver();
      animationFrameScheduler.schedule(() => {
        // Add line numbers
        this._hljs.lineNumbersBlock(this._nativeElement).subscribe();
        // If lines count is 1, the line numbers library will not add numbers
        // Observe changes to add 'hljs-line-numbers' class only when line numbers is added to the code element
        this._lineNumbersObs = new MutationObserver(() => {
          if (this._nativeElement.firstElementChild && this._nativeElement.firstElementChild.tagName.toUpperCase() === 'TABLE') {
            this._nativeElement.classList.add('hljs-line-numbers');
          }
          this.destroyLineNumbersObserver();
        });
        this._lineNumbersObs.observe(this._nativeElement, {
          childList: true
        });
      });
    }
    destroyLineNumbersObserver() {
      if (this._lineNumbersObs) {
        this._lineNumbersObs.disconnect();
        this._lineNumbersObs = null;
      }
    }
    setTextContent(content) {
      animationFrameScheduler.schedule(() => this._nativeElement.textContent = content);
    }
    setInnerHTML(content) {
      animationFrameScheduler.schedule(() => this._nativeElement.innerHTML = this._sanitizer.sanitize(core_mjs_.SecurityContext.HTML, content) || '');
    }
  }
  Highlight.ɵfac = function Highlight_Factory(t) {
    return new (t || Highlight)(core_mjs_["ɵɵdirectiveInject"](core_mjs_.ElementRef), core_mjs_["ɵɵdirectiveInject"](HighlightJS), core_mjs_["ɵɵdirectiveInject"](platform_browser/* DomSanitizer */.up), core_mjs_["ɵɵdirectiveInject"](HIGHLIGHT_OPTIONS, 8));
  };
  Highlight.ɵdir = /* @__PURE__ */core_mjs_["ɵɵdefineDirective"]({
    type: Highlight,
    selectors: [["", "highlight", ""]],
    hostVars: 2,
    hostBindings: function Highlight_HostBindings(rf, ctx) {
      if (rf & 2) {
        core_mjs_["ɵɵclassProp"]("hljs", true);
      }
    },
    inputs: {
      code: [core_mjs_["ɵɵInputFlags"].None, "highlight", "code"],
      languages: "languages",
      lineNumbers: "lineNumbers"
    },
    outputs: {
      highlighted: "highlighted"
    },
    features: [core_mjs_["ɵɵNgOnChangesFeature"]]
  });
  return Highlight;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();
let HighlightModule = /*#__PURE__*/(() => {
  class HighlightModule {}
  HighlightModule.ɵfac = function HighlightModule_Factory(t) {
    return new (t || HighlightModule)();
  };
  HighlightModule.ɵmod = /* @__PURE__ */core_mjs_["ɵɵdefineNgModule"]({
    type: HighlightModule
  });
  HighlightModule.ɵinj = /* @__PURE__ */core_mjs_["ɵɵdefineInjector"]({});
  return HighlightModule;
})();
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && void 0;
})();

/**
 * Generated bundle index. Do not edit.
 */


//# sourceMappingURL=ngx-highlightjs.mjs.map

/***/ })

}]);